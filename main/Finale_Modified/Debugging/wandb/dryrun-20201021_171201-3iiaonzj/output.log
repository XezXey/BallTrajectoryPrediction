==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [5]
1. input_col =  [3, 4, 5]
2. input_startpos_col =  [3, 4, 5, 5]
3. gt_col =  [5, 5]
4. gt_startpos_col =  [0, 1, 2, 5]
5. gt_xyz_col =  [0, 1, 2, 5]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 50.03it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.05it/s]
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1647, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1647, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1647, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1648, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1622, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1622, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1622, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1623, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Depth #######
BiLSTMResidual(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.003
===> [Minibatch 1/5].........tensor([[[-1.0830e-02,  4.1969e-04, -1.8098e-02,  ..., -2.9790e-02,
           9.8318e-02,  1.4055e-02],
         [-2.0865e-02,  4.4654e-04, -3.5261e-02,  ..., -2.9790e-02,
           9.8318e-02,  1.4055e-02],
         [-2.7276e-02,  1.1842e-04, -4.8498e-02,  ..., -2.9790e-02,
           9.8318e-02,  1.4055e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[-9.2782e-03,  1.7303e-03, -1.7387e-02,  ..., -3.0163e-02,
           1.0034e-01,  1.4787e-02],
         [-1.8890e-02,  2.2566e-03, -3.4086e-02,  ..., -3.0163e-02,
           1.0034e-01,  1.4787e-02],
         [-2.5255e-02,  2.1919e-03, -4.7022e-02,  ..., -3.0163e-02,
           1.0034e-01,  1.4787e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[-1.0725e-02,  5.0862e-04, -1.8050e-02,  ..., -2.9815e-02,
           9.8457e-02,  1.4105e-02],
         [-2.0731e-02,  5.6929e-04, -3.5182e-02,  ..., -2.9815e-02,
           9.8457e-02,  1.4105e-02],
         [-2.7140e-02,  2.5900e-04, -4.8398e-02,  ..., -2.9815e-02,
           9.8457e-02,  1.4105e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        ...,

        [[-8.3233e-03,  2.5340e-03, -1.6948e-02,  ..., -3.0407e-02,
           1.0155e-01,  1.5227e-02],
         [-1.7672e-02,  3.3677e-03, -3.3356e-02,  ..., -3.0407e-02,
           1.0155e-01,  1.5227e-02],
         [-2.4005e-02,  3.4653e-03, -4.6106e-02,  ..., -3.0407e-02,
           1.0155e-01,  1.5227e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[-1.2871e-02, -1.3140e-03, -1.9026e-02,  ..., -2.9343e-02,
           9.5547e-02,  1.3057e-02],
         [-2.3453e-02, -1.9442e-03, -3.6790e-02,  ..., -2.9343e-02,
           9.5547e-02,  1.3057e-02],
         [-2.9921e-02, -2.6185e-03, -5.0410e-02,  ..., -2.9343e-02,
           9.5547e-02,  1.3057e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[-1.1394e-02, -5.8897e-05, -1.8355e-02,  ..., -2.9662e-02,
           9.7563e-02,  1.3783e-02],
         [-2.1582e-02, -2.1381e-04, -3.5686e-02,  ..., -2.9662e-02,
           9.7563e-02,  1.3783e-02],
         [-2.8010e-02, -6.3777e-04, -4.9030e-02,  ..., -2.9662e-02,
           9.7563e-02,  1.3783e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]]], device='cuda:0',
       grad_fn=<IndexSelectBackward>)
