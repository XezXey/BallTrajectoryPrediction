==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [5]
1. input_col =  [3, 4, 5]
2. input_startpos_col =  [3, 4, 5, 5]
3. gt_col =  [5, 5]
4. gt_startpos_col =  [0, 1, 2, 5]
5. gt_xyz_col =  [0, 1, 2, 5]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 48.54it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.95it/s]
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Depth #######
BiLSTMResidual(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.003
===> [Minibatch 1/5].........PackedSequence(data=tensor([[ 0.0204,  0.0036, -0.0022,  ...,  0.0198,  0.0130,  0.0068],
        [ 0.0204,  0.0044, -0.0023,  ...,  0.0191,  0.0130,  0.0082],
        [ 0.0207, -0.0029, -0.0017,  ...,  0.0263,  0.0131, -0.0059],
        ...,
        [ 0.0391, -0.0089, -0.0071,  ...,  0.0200,  0.0101,  0.0134],
        [ 0.0391, -0.0089, -0.0071,  ...,  0.0166,  0.0076,  0.0141],
        [ 0.0391, -0.0089, -0.0071,  ...,  0.0100,  0.0041,  0.0118]],
       device='cuda:0', grad_fn=<CudnnRnnBackward>), batch_sizes=tensor([128, 128, 128,  ...,   1,   1,   1]), sorted_indices=tensor([  5, 104,   3,  49,  20, 111,  40,  13, 117,  11,   8,  84,  36,  91,
        123,  53,  21,  33, 122, 110,  41,  93,  16,  56, 121,  28,  26, 115,
         25, 126,  98,  15,  58,  42,  88, 108, 125, 100,  10,  78, 103,  24,
         90, 119,  52,  30,  73,  92, 105,  83,  65,  22,  35,  31,  99,   6,
          1,  85,  72,  89, 118,  86,  50, 101, 120,  81,  44, 102,  59,  27,
         95,  19,  48,  75,  67,  34,  38,  14,  70,  96, 114,  80, 106,  45,
        127,  43,  51,  97,  66,  76,  57, 107,  12,  87,  62,  64,   4,  82,
         79,  68,  37,   0,  74,  63,   9,  54,   2,  32, 116,  77,  46, 124,
         94, 113,   7,  18,  17,  69, 112,  71,  55,  61,  47, 109,  39,  29,
         23,  60], device='cuda:0'), unsorted_indices=tensor([101,  56, 106,   2,  96,   0,  55, 114,  10, 104,  38,   9,  92,   7,
         77,  31,  22, 116, 115,  71,   4,  16,  51, 126,  41,  28,  26,  69,
         25, 125,  45,  53, 107,  17,  75,  52,  12, 100,  76, 124,   6,  20,
         33,  85,  66,  83, 110, 122,  72,   3,  62,  86,  44,  15, 105, 120,
         23,  90,  32,  68, 127, 121,  94, 103,  95,  50,  88,  74,  99, 117,
         78, 119,  58,  46, 102,  73,  89, 109,  39,  98,  81,  65,  97,  49,
         11,  57,  61,  93,  34,  59,  42,  13,  47,  21, 112,  70,  79,  87,
         30,  54,  37,  63,  67,  40,   1,  48,  82,  91,  35, 123,  19,   5,
        118, 113,  80,  27, 108,   8,  60,  43,  64,  24,  18,  14, 111,  36,
         29,  84], device='cuda:0'))
tensor([[[ 2.0344e-02,  5.3330e-03, -2.3518e-03,  ...,  1.8143e-02,
           1.3005e-02,  9.9718e-03],
         [ 3.0794e-02,  3.2603e-03, -3.1648e-03,  ...,  1.8143e-02,
           1.3005e-02,  9.9718e-03],
         [ 3.5450e-02, -2.9168e-04, -3.7997e-03,  ...,  1.8143e-02,
           1.3005e-02,  9.9718e-03],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[ 2.0706e-02, -3.8044e-03, -1.6540e-03,  ...,  2.7162e-02,
           1.3099e-02, -7.7237e-03],
         [ 3.1128e-02, -9.8292e-03, -1.4448e-03,  ...,  2.7162e-02,
           1.3099e-02, -7.7237e-03],
         [ 3.5625e-02, -1.5051e-02, -1.2190e-03,  ...,  2.7162e-02,
           1.3099e-02, -7.7237e-03],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[ 2.0333e-02,  5.6325e-03, -2.3737e-03,  ...,  1.7851e-02,
           1.3000e-02,  1.0522e-02],
         [ 3.0784e-02,  3.6934e-03, -3.2191e-03,  ...,  1.7851e-02,
           1.3000e-02,  1.0522e-02],
         [ 3.5445e-02,  2.0041e-04, -3.8815e-03,  ...,  1.7851e-02,
           1.3000e-02,  1.0522e-02],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        ...,

        [[ 2.0554e-02,  6.4647e-06, -1.9526e-03,  ...,  2.3373e-02,
           1.3074e-02, -1.2297e-04],
         [ 3.0982e-02, -4.4000e-03, -2.1773e-03,  ...,  2.3373e-02,
           1.3074e-02, -1.2297e-04],
         [ 3.5540e-02, -8.9565e-03, -2.3158e-03,  ...,  2.3373e-02,
           1.3074e-02, -1.2297e-04],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[ 2.0357e-02,  5.0075e-03, -2.3280e-03,  ...,  1.8461e-02,
           1.3010e-02,  9.3717e-03],
         [ 3.0805e-02,  2.7899e-03, -3.1056e-03,  ...,  1.8461e-02,
           1.3010e-02,  9.3717e-03],
         [ 3.5454e-02, -8.2588e-04, -3.7106e-03,  ...,  1.8461e-02,
           1.3010e-02,  9.3717e-03],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]],

        [[ 2.0373e-02,  4.5933e-03, -2.2976e-03,  ...,  1.8865e-02,
           1.3017e-02,  8.6050e-03],
         [ 3.0819e-02,  2.1918e-03, -3.0300e-03,  ...,  1.8865e-02,
           1.3017e-02,  8.6050e-03],
         [ 3.5460e-02, -1.5048e-03, -3.5969e-03,  ...,  1.8865e-02,
           1.3017e-02,  8.6050e-03],
         ...,
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01],
         [-1.0000e+01, -1.0000e+01, -1.0000e+01,  ..., -1.0000e+01,
          -1.0000e+01, -1.0000e+01]]], device='cuda:0',
       grad_fn=<IndexSelectBackward>)
