==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [5]
1. input_col =  [3, 4, 5]
2. input_startpos_col =  [3, 4, 5, 5]
3. gt_col =  [5, 5]
4. gt_startpos_col =  [0, 1, 2, 5]
5. gt_xyz_col =  [0, 1, 2, 5]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 46.43it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 23.33it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 0, 'recurrent_stacked': [2, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 0, 'recurrent_stacked': [3, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Depth #######
BiLSTM(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.003
===> [Minibatch 1/5].........tensor([[ 0.0657],
        [ 0.0037],
        [-0.1634],
        [-0.0554],
        [-0.1618],
        [-0.0810],
        [ 0.1266],
        [-0.1272],
        [-0.0453],
        [-0.0144],
        [ 0.0245],
        [-0.0302],
        [-0.0868],
        [-0.0147],
        [ 0.0052],
        [ 0.0154],
        [-0.0215],
        [ 0.0339],
        [ 0.1129],
        [ 0.0161],
        [ 0.0552],
        [-0.1183],
        [-0.1286],
        [-0.0559],
        [ 0.0289],
        [-0.1630],
        [-0.1162],
        [-0.0221],
        [-0.1040],
        [ 0.1412],
        [-0.0048],
        [-0.0436],
        [-0.0343],
        [-0.0900],
        [-0.0483],
        [ 0.1649],
        [-0.0977],
        [ 0.1752],
        [-0.0407],
        [ 0.0290],
        [ 0.0684],
        [-0.0598],
        [ 0.0128],
        [-0.0826],
        [-0.0646],
        [ 0.0245],
        [ 0.0422],
        [ 0.0172],
        [-0.0142],
        [-0.0182],
        [ 0.1444],
        [-0.1721],
        [ 0.1586],
        [-0.1346],
        [-0.0370],
        [-0.1348],
        [-0.1269],
        [-0.0751],
        [-0.0545],
        [-0.0143],
        [-0.1026],
        [-0.0213],
        [-0.0538],
        [-0.0433],
        [-0.0436],
        [-0.0276],
        [-0.1244],
        [ 0.0718],
        [-0.1099],
        [-0.0776],
        [-0.0757],
        [-0.1273],
        [ 0.0307],
        [ 0.0248],
        [-0.1327],
        [-0.1217],
        [ 0.0060],
        [-0.1527],
        [-0.0511],
        [-0.0602],
        [ 0.0052],
        [-0.0846],
        [-0.1444],
        [ 0.0369],
        [ 0.1016],
        [-0.0618],
        [ 0.1071],
        [-0.0704],
        [-0.1017],
        [-0.1058],
        [ 0.0922],
        [-0.0679],
        [-0.0936],
        [-0.1300],
        [ 0.1377],
        [-0.0988],
        [ 0.0364],
        [-0.1014],
        [-0.0359],
        [ 0.0171],
        [ 0.0913],
        [-0.1456],
        [ 0.0413],
        [-0.1466],
        [ 0.0022],
        [-0.1233],
        [ 0.1806],
        [-0.1046],
        [-0.0875],
        [-0.0057],
        [-0.1452],
        [ 0.1550],
        [-0.0181],
        [ 0.1585],
        [ 0.0560],
        [-0.0538],
        [ 0.1019],
        [-0.0865],
        [ 0.1027],
        [-0.0966],
        [-0.1089],
        [-0.1178],
        [ 0.0184],
        [-0.0816],
        [ 0.0425],
        [ 0.0795],
        [-0.1521],
        [-0.0617]], device='cuda:0')
