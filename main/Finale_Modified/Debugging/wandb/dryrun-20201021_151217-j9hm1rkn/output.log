==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [5]
1. input_col =  [3, 4, 5]
2. input_startpos_col =  [3, 4, 5, 5]
3. gt_col =  [5, 5]
4. gt_startpos_col =  [0, 1, 2, 5]
5. gt_xyz_col =  [0, 1, 2, 5]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 46.67it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.02it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1543, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1543, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1543, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1544, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 0, 'recurrent_stacked': [2, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 0, 'recurrent_stacked': [3, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Depth #######
BiLSTM(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.003
===> [Minibatch 1/5].........torch.Size([128, 1, 1])
tensor([[[-0.1697]],

        [[-0.0833]],

        [[-0.0765]],

        [[-0.0741]],

        [[ 0.0521]],

        [[-0.0698]],

        [[-0.1452]],

        [[-0.1078]],

        [[-0.0139]],

        [[ 0.0495]],

        [[ 0.0998]],

        [[-0.0896]],

        [[-0.0448]],

        [[-0.0575]],

        [[ 0.1412]],

        [[ 0.0052]],

        [[-0.1219]],

        [[-0.1026]],

        [[ 0.0536]],

        [[-0.0475]],

        [[-0.0618]],

        [[ 0.0544]],

        [[-0.0066]],

        [[-0.0012]],

        [[-0.0407]],

        [[-0.1234]],

        [[-0.0571]],

        [[-0.1603]],

        [[ 0.0161]],

        [[-0.0964]],

        [[-0.0374]],

        [[-0.0770]],

        [[-0.0063]],

        [[-0.0695]],

        [[ 0.1210]],

        [[-0.1553]],

        [[-0.0545]],

        [[-0.0751]],

        [[ 0.0192]],

        [[-0.1272]],

        [[-0.1275]],

        [[-0.0857]],

        [[-0.1566]],

        [[ 0.1201]],

        [[-0.1325]],

        [[-0.0881]],

        [[-0.1467]],

        [[ 0.0806]],

        [[-0.0818]],

        [[-0.1391]],

        [[ 0.0830]],

        [[-0.0110]],

        [[ 0.0419]],

        [[ 0.1012]],

        [[-0.1040]],

        [[-0.1055]],

        [[-0.0855]],

        [[-0.0448]],

        [[ 0.0446]],

        [[-0.1042]],

        [[-0.1327]],

        [[-0.0892]],

        [[-0.0918]],

        [[-0.1032]],

        [[-0.0679]],

        [[-0.0300]],

        [[ 0.1019]],

        [[ 0.1021]],

        [[-0.0132]],

        [[ 0.0606]],

        [[ 0.1141]],

        [[ 0.1321]],

        [[-0.0636]],

        [[-0.0453]],

        [[-0.0764]],

        [[-0.0268]],

        [[ 0.0591]],

        [[-0.0322]],

        [[ 0.0030]],

        [[-0.0908]],

        [[-0.0011]],

        [[ 0.0084]],

        [[-0.1209]],

        [[-0.0182]],

        [[ 0.0037]],

        [[-0.0253]],

        [[ 0.0411]],

        [[-0.0231]],

        [[ 0.1281]],

        [[-0.1115]],

        [[-0.0302]],

        [[-0.0565]],

        [[ 0.1177]],

        [[ 0.1298]],

        [[-0.0610]],

        [[-0.1454]],

        [[-0.0004]],

        [[-0.1260]],

        [[ 0.1368]],

        [[-0.0985]],

        [[-0.0533]],

        [[-0.0842]],

        [[ 0.0238]],

        [[ 0.0431]],

        [[-0.1273]],

        [[-0.0689]],

        [[ 0.0406]],

        [[ 0.0245]],

        [[ 0.1221]],

        [[ 0.0307]],

        [[-0.1239]],

        [[-0.1392]],

        [[ 0.0908]],

        [[-0.0339]],

        [[ 0.0971]],

        [[-0.0662]],

        [[-0.0181]],

        [[-0.0897]],

        [[ 0.0369]],

        [[ 0.0503]],

        [[-0.1630]],

        [[-0.0155]],

        [[-0.1351]],

        [[-0.1729]],

        [[ 0.1164]],

        [[-0.0839]],

        [[ 0.0249]],

        [[ 0.0248]]], device='cuda:0')
tensor([[-0.1697],
        [-0.1697],
        [-0.1697],
        ...,
        [-0.1697],
        [-0.1697],
        [-0.1697]], device='cuda:0')
torch.Size([128, 1997, 1])
