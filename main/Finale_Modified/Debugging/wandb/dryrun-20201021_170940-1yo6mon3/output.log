==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [5]
1. input_col =  [3, 4, 5]
2. input_startpos_col =  [3, 4, 5, 5]
3. gt_col =  [5, 5]
4. gt_startpos_col =  [0, 1, 2, 5]
5. gt_xyz_col =  [0, 1, 2, 5]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 46.40it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                                                                  | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
Mixed: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.47it/s]
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Depth #######
BiLSTMResidual(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.003
===> [Minibatch 1/5].........PackedSequence(data=tensor([[ 0.0593, -0.0756, -0.0260,  ..., -0.1905, -0.1059,  0.1476],
        [ 0.0596, -0.0745, -0.0262,  ..., -0.1922, -0.1083,  0.1473],
        [ 0.0592, -0.0762, -0.0258,  ..., -0.1896, -0.1047,  0.1477],
        ...,
        [ 0.1301, -0.2060, -0.0970,  ..., -0.1348, -0.1044,  0.1266],
        [ 0.1224, -0.2096, -0.0908,  ..., -0.1067, -0.0963,  0.1070],
        [ 0.1091, -0.2153, -0.0791,  ..., -0.0654, -0.0721,  0.0685]],
       device='cuda:0', grad_fn=<PackPaddedSequenceBackward>), batch_sizes=tensor([128, 128, 128,  ...,   1,   1,   1]), sorted_indices=tensor([  5,  71,  50,  68,  18,   9,   3,  13,  19, 112,  44,  32, 115,  15,
        104,  11,  66,  67,  31,  78, 126,  27,  53,  88, 124,  24, 121,  80,
         85, 106, 109,  43, 116,  89,  21,   2,  60,  46,  59,  28,  34,   1,
         81,  94, 111,  99,  26, 120,  97,  42, 117,  76,  57,  64,  30,  79,
        125,  20,  38, 110,   8,  48,  45,  87,  41, 107,  40,  25,  82, 103,
         93,  62, 118,  39,  23,  90,  72, 127,  77, 114,  83,   4, 100,  17,
         63,   0,   7,  51,  33,  49,  84,  95,  91,  96, 119,  56,  54, 123,
         98,  37,  29, 105,  47,  61,  14,  92,   6, 122,  70,  73,  12,  16,
         74,  86, 108,  10,  58,  69, 113,  65,  55, 102,  22,  75,  35,  36,
         52, 101], device='cuda:0'), unsorted_indices=tensor([ 85,  41,  35,   6,  81,   0, 106,  86,  60,   5, 115,  15, 110,   7,
        104,  13, 111,  83,   4,   8,  57,  34, 122,  74,  25,  67,  46,  21,
         39, 100,  54,  18,  11,  88,  40, 124, 125,  99,  58,  73,  66,  64,
         49,  31,  10,  62,  37, 102,  61,  89,   2,  87, 126,  22,  96, 120,
         95,  52, 116,  38,  36, 103,  71,  84,  53, 119,  16,  17,   3, 117,
        108,   1,  76, 109, 112, 123,  51,  78,  19,  55,  27,  42,  68,  80,
         90,  28, 113,  63,  23,  33,  75,  92, 105,  70,  43,  91,  93,  48,
         98,  45,  82, 127, 121,  69,  14, 101,  29,  65, 114,  30,  59,  44,
          9, 118,  79,  12,  32,  50,  72,  94,  47,  26, 107,  97,  24,  56,
         20,  77], device='cuda:0'))
tensor([[[  0.0604,  -0.0712,  -0.0268,  ...,  -0.1974,  -0.1157,   0.1466],
         [  0.1001,  -0.1134,  -0.0503,  ...,  -0.1998,  -0.1169,   0.1466],
         [  0.1235,  -0.1417,  -0.0687,  ...,  -0.2022,  -0.1194,   0.1454],
         ...,
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000]],

        [[  0.0601,  -0.0722,  -0.0266,  ...,  -0.1959,  -0.1135,   0.1468],
         [  0.0997,  -0.1148,  -0.0497,  ...,  -0.1982,  -0.1147,   0.1468],
         [  0.1229,  -0.1434,  -0.0678,  ...,  -0.2006,  -0.1172,   0.1455],
         ...,
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000]],

        [[  0.0587,  -0.0782,  -0.0254,  ...,  -0.1864,  -0.1003,   0.1482],
         [  0.0969,  -0.1239,  -0.0462,  ...,  -0.1884,  -0.1013,   0.1480],
         [  0.1190,  -0.1544,  -0.0622,  ...,  -0.1906,  -0.1035,   0.1465],
         ...,
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000]],

        ...,

        [[  0.0593,  -0.0760,  -0.0259,  ...,  -0.1899,  -0.1051,   0.1477],
         [  0.0979,  -0.1206,  -0.0475,  ...,  -0.1920,  -0.1061,   0.1476],
         [  0.1204,  -0.1503,  -0.0643,  ...,  -0.1943,  -0.1084,   0.1461],
         ...,
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000]],

        [[  0.0600,  -0.0727,  -0.0265,  ...,  -0.1951,  -0.1124,   0.1469],
         [  0.0994,  -0.1155,  -0.0495,  ...,  -0.1975,  -0.1136,   0.1469],
         [  0.1226,  -0.1443,  -0.0674,  ...,  -0.1998,  -0.1161,   0.1456],
         ...,
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000]],

        [[  0.0600,  -0.0728,  -0.0265,  ...,  -0.1949,  -0.1120,   0.1470],
         [  0.0993,  -0.1158,  -0.0494,  ...,  -0.1972,  -0.1132,   0.1469],
         [  0.1225,  -0.1446,  -0.0672,  ...,  -0.1996,  -0.1156,   0.1457],
         ...,
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000,  ..., -10.0000, -10.0000, -10.0000]]],
       device='cuda:0', grad_fn=<IndexSelectBackward>)
