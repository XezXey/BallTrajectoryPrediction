==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.37it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.76it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.89it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 739, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 739, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 740, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 760, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 760, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 788, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 788, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 692, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 692, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 771, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 771, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 771, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 832, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 832, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 730, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 730, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 749, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 749, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 727, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 727, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 709, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 709, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 710, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 828, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 691, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........IDX = 0 :  tensor([[[ 0.2460, -1.7969, -1.3825,  ..., -0.5333, -0.7826,  0.9228],
         [-0.0982,  0.8465,  1.5075,  ..., -2.0091,  0.9149, -0.1309],
         [-2.6027, -0.1882, -0.3535,  ..., -0.9585,  0.6552, -0.8573],
         ...,
         [-2.3515, -0.5791,  0.3181,  ..., -0.9095, -0.4093, -2.4105],
         [ 2.5656, -0.0216,  1.1984,  ..., -0.3316,  0.5995,  1.5163],
         [-0.6173, -1.1345, -0.7130,  ..., -1.6544,  0.3172, -0.1975]],

        [[-0.4499, -1.5620,  0.3104,  ...,  0.1236,  0.5841, -0.0606],
         [-2.1948,  0.6365, -0.6888,  ..., -0.9105, -1.7657, -0.9935],
         [-1.0138,  0.6758, -0.3895,  ..., -0.7758, -0.0177, -1.6597],
         ...,
         [-0.7122, -0.3663, -0.3745,  ...,  0.5625, -0.7979,  0.1590],
         [ 1.0538, -0.6958,  0.3031,  ...,  0.3757, -0.2030, -2.0415],
         [ 0.3950, -0.2451, -1.9850,  ..., -0.7167, -2.0479,  0.0442]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.5307, -0.5018,  0.8931,  ..., -0.5361,  0.3427,  0.1393],
         [-1.1108, -0.3902,  0.0969,  ...,  2.4363, -0.7121,  0.1534],
         [ 0.1190, -0.7101, -0.2890,  ...,  1.0841, -2.3322, -0.3469],
         ...,
         [ 0.3514,  0.7446,  0.5342,  ..., -1.7768,  0.1850,  0.4578],
         [ 1.8342,  0.6816,  0.8750,  ...,  0.2156, -0.2597, -0.7745],
         [-1.9792, -0.6491,  0.6979,  ..., -0.9487,  0.8338, -0.6128]],

        [[ 1.1280,  0.1440, -0.1503,  ..., -0.3896,  1.0926, -1.5791],
         [-1.0021,  0.6726, -0.7510,  ...,  0.0953, -0.6792,  0.1796],
         [-0.8400, -0.3400,  0.4884,  ..., -0.6243,  0.0944,  0.6035],
         ...,
         [ 0.8876,  0.6391,  0.3584,  ..., -0.1676, -0.8367, -0.3930],
         [-0.6730, -0.7141, -1.2572,  ..., -0.1325,  1.9268, -0.6766],
         [ 1.8283,  1.0679, -0.7752,  ...,  0.6901, -0.4584, -1.4150]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[ 2.4197e-01, -1.7998e+00, -1.3843e+00,  ..., -5.3340e-01,
           -7.8660e-01,  9.2059e-01],
          [-1.0060e-01,  8.4316e-01,  1.5126e+00,  ..., -2.0061e+00,
            9.1234e-01, -1.3206e-01],
          [-2.6050e+00, -1.8991e-01, -3.4823e-01,  ..., -9.5382e-01,
            6.5625e-01, -8.5929e-01],
          ...,
          [-2.3546e+00, -5.8348e-01,  3.1849e-01,  ..., -9.0776e-01,
           -4.1271e-01, -2.4121e+00],
          [ 2.5649e+00, -2.7064e-02,  1.2027e+00,  ..., -3.2597e-01,
            6.0176e-01,  1.5197e+00],
          [-6.2076e-01, -1.1352e+00, -7.1356e-01,  ..., -1.6547e+00,
            3.1432e-01, -1.9891e-01]],

         [[-4.5976e-01, -1.5522e+00,  3.2013e-01,  ...,  1.1386e-01,
            5.7436e-01, -5.8638e-02],
          [-2.1850e+00,  6.4627e-01, -6.9806e-01,  ..., -9.1437e-01,
           -1.7756e+00, -9.8367e-01],
          [-1.0235e+00,  6.8568e-01, -3.9933e-01,  ..., -7.6589e-01,
           -7.9982e-03, -1.6500e+00],
          ...,
          [-7.2192e-01, -3.7367e-01, -3.8431e-01,  ...,  5.7246e-01,
           -8.0759e-01,  1.4919e-01],
          [ 1.0597e+00, -6.8624e-01,  3.1299e-01,  ...,  3.6642e-01,
           -1.9578e-01, -2.0375e+00],
          [ 3.8523e-01, -2.3528e-01, -1.9751e+00,  ..., -7.0743e-01,
           -2.0382e+00,  3.4453e-02]]],


        [[[ 1.1031e+00,  1.0924e-01, -3.4597e-01,  ...,  1.7703e+00,
           -1.0390e+00, -6.4054e-03],
          [-5.0158e-01, -3.8063e-01, -7.6051e-01,  ...,  1.1338e-01,
            9.8191e-01, -8.0834e-01],
          [ 3.4870e-01, -4.9448e-01, -2.2794e-01,  ...,  3.7331e-03,
            4.9650e-01,  8.7948e-01],
          ...,
          [ 5.5563e-01, -1.4434e+00, -1.3605e+00,  ...,  4.5857e-01,
           -2.3945e+00,  2.4080e-01],
          [-6.9672e-02,  1.2653e+00,  1.6420e-01,  ...,  1.0051e+00,
           -7.0435e-02, -7.9224e-01],
          [-2.7893e-01, -6.9699e-01, -2.0194e-01,  ...,  3.9318e-01,
            2.4821e-01,  1.1890e-01]],

         [[ 1.9727e-03, -3.9380e-01, -2.2964e-01,  ..., -1.2379e+00,
           -1.3871e+00, -1.7959e+00],
          [-6.0458e-01, -1.1617e+00,  5.3598e-02,  ...,  3.8519e-01,
            2.3432e-01, -5.3856e-01],
          [ 1.0891e+00, -2.2567e-01, -1.3610e-01,  ..., -1.2970e+00,
            1.7484e+00, -1.3444e+00],
          ...,
          [-6.4944e-02, -1.4320e-01, -7.3832e-01,  ...,  1.2744e+00,
           -9.0057e-01, -3.8215e-01],
          [-1.1735e-01, -1.2731e+00, -1.3667e+00,  ...,  2.1637e-01,
            9.5632e-01,  5.6112e-02],
          [ 4.6995e-01, -2.0514e+00, -9.5094e-01,  ...,  1.2306e+00,
            8.8284e-01,  2.0624e+00]]],


        [[[-5.8950e-01, -1.9938e+00,  6.1674e-01,  ...,  1.4239e+00,
           -6.5872e-01,  5.3023e-01],
          [ 2.1737e-01, -4.3781e-01, -8.3436e-01,  ..., -9.4404e-01,
            9.1093e-01,  1.1953e+00],
          [ 1.2550e+00,  4.1113e-01, -2.5226e-01,  ...,  1.3515e+00,
            6.0433e-02,  1.8218e-01],
          ...,
          [ 2.1335e-01,  1.8027e-01,  5.5118e-01,  ...,  8.9209e-01,
            1.0124e+00,  3.0246e-01],
          [-3.5721e-01,  5.0436e-01,  1.2014e+00,  ...,  1.4543e+00,
            3.5406e-01,  4.3666e-01],
          [-3.6336e-01,  1.8886e-01, -1.3538e+00,  ..., -1.7620e-01,
            1.5844e-02, -2.7681e-01]],

         [[-1.3950e+00, -2.3140e+00,  3.2186e-01,  ..., -9.5392e-01,
            1.7162e+00, -1.0688e+00],
          [ 1.1839e+00, -1.8889e+00, -4.6311e-01,  ...,  1.4309e+00,
           -4.1021e-01,  4.6275e-01],
          [-1.0560e+00, -1.2005e+00,  9.1565e-01,  ..., -3.9242e-01,
           -3.1626e-01,  1.2571e+00],
          ...,
          [-3.9792e-01, -4.7183e-01,  4.5330e-02,  ..., -1.9823e-01,
            4.4791e-01,  1.7520e-01],
          [ 8.3171e-01, -3.5103e+00,  8.4054e-01,  ...,  1.1197e-01,
           -5.8036e-01, -1.6532e-02],
          [ 4.2372e-01,  1.4705e+00,  4.3995e-01,  ..., -7.8506e-01,
           -1.2026e+00,  1.6829e-01]]],


        [[[ 1.4863e+00,  3.9700e-01, -5.4965e-01,  ...,  4.4931e-01,
           -3.6879e-01,  1.2373e+00],
          [ 2.6241e-01,  5.5071e-01, -1.9130e-01,  ...,  1.0756e+00,
            1.8315e+00,  1.5428e+00],
          [-4.6739e-01, -1.7163e+00,  8.0618e-01,  ..., -1.0517e+00,
            2.0983e-01, -1.1599e+00],
          ...,
          [ 1.7149e-01, -6.6510e-01,  1.3402e+00,  ..., -1.3455e+00,
           -1.7950e+00, -1.3179e+00],
          [ 7.9654e-01, -4.3673e-01, -1.6286e-01,  ...,  9.8603e-01,
           -2.6065e-01,  5.3012e-01],
          [ 1.3459e+00,  1.1689e+00, -5.2727e-01,  ..., -6.6659e-01,
           -9.0609e-01, -3.7665e-01]],

         [[ 1.0491e+00, -9.6904e-01, -1.4541e+00,  ...,  2.8929e-01,
           -3.0358e-01, -4.9616e-01],
          [-2.8098e-01, -2.0667e-01,  1.1204e+00,  ..., -6.6443e-01,
           -5.8352e-01,  9.3204e-01],
          [-4.7692e-01, -4.2639e-01,  1.5108e+00,  ..., -1.0564e+00,
           -6.8599e-02,  2.9726e+00],
          ...,
          [ 8.7815e-01, -4.0568e-01,  1.7083e+00,  ...,  1.8562e-01,
           -1.7868e+00, -1.1367e+00],
          [ 6.9691e-01, -2.0943e+00,  6.7108e-01,  ...,  1.4687e+00,
            9.4242e-01,  1.0427e+00],
          [ 2.1004e-01, -7.6028e-01,  4.9044e-01,  ..., -6.7028e-01,
           -3.0456e-02,  4.6502e-01]]]], device='cuda:0')
c tensor([[[[ 1.8101, -0.2636, -0.4546,  ..., -0.7923, -0.8552,  0.3206],
          [ 1.5999,  1.0768,  0.1593,  ..., -0.7930, -0.9730, -1.2956],
          [-1.7107,  1.6496, -1.7547,  ...,  0.2483,  0.1597, -1.4894],
          ...,
          [ 0.9934, -0.3734,  0.6061,  ...,  0.6369,  0.2974, -0.6260],
          [ 0.5975,  0.5687, -0.4393,  ...,  1.0525, -1.5689,  0.5296],
          [ 1.6164,  0.0240, -0.5642,  ...,  0.9009,  1.3100,  1.0852]],

         [[ 0.3542,  0.3864, -0.1489,  ..., -0.0464, -0.6103,  1.1055],
          [ 1.0347,  1.1489, -0.3523,  ..., -0.8222,  0.5213, -0.2479],
          [-0.3795,  0.0796,  0.9053,  ...,  0.9158, -0.2812,  0.6313],
          ...,
          [-0.3619,  2.5684,  0.6284,  ..., -0.9764,  0.7007,  0.3224],
          [ 0.4627,  1.0308, -0.1632,  ..., -0.5930, -1.4904, -0.3674],
          [-0.5403,  0.2089, -1.0262,  ...,  0.2882, -0.5607, -0.4214]]],


        [[[-0.2812, -0.0085, -0.5912,  ..., -1.5167, -0.3080,  0.1585],
          [-0.6732,  0.5563, -0.4341,  ...,  1.8803,  1.4892,  1.3040],
          [ 0.2058, -2.3158, -0.2713,  ...,  0.1486,  0.4401, -0.3411],
          ...,
          [ 0.4381, -1.0790, -0.1949,  ...,  1.5904,  0.4970, -0.1524],
          [ 1.6299, -2.5882, -0.1022,  ..., -0.3851,  0.4487,  0.1663],
          [-0.2547,  0.3677,  0.4758,  ..., -0.5232,  0.7121,  0.4653]],

         [[ 0.3461,  0.4105, -1.1485,  ..., -1.8134, -0.7011,  0.8672],
          [ 1.5333,  0.0531,  1.0682,  ...,  1.1588, -1.0377, -0.8244],
          [-0.6013, -0.6819,  0.7530,  ...,  1.0742,  0.5103, -0.2727],
          ...,
          [ 1.0514, -1.7455, -0.2031,  ...,  0.1857,  1.2605,  0.9231],
          [ 1.8508,  0.5137, -0.4337,  ..., -0.6254,  1.2563,  0.8857],
          [-0.3036, -1.2065, -0.1887,  ...,  0.8166, -0.3660,  0.0939]]],


        [[[-0.5087, -0.2321,  0.2296,  ...,  2.9748,  0.8029,  0.7997],
          [ 0.6022,  0.4302, -0.9578,  ...,  0.2587, -0.3887, -0.0073],
          [ 0.3156, -1.9713,  1.5994,  ..., -0.2679, -1.4150, -0.2797],
          ...,
          [-0.8986, -0.9103, -0.8560,  ..., -0.5332,  0.8907,  0.2795],
          [ 0.1274,  0.4277, -0.4081,  ...,  0.7208,  1.8257,  0.7754],
          [-1.6654,  0.9511,  0.1025,  ...,  1.4956,  0.4291,  1.2851]],

         [[ 0.8120,  0.0179, -0.8593,  ..., -0.5243,  0.4557,  0.6487],
          [-1.0922, -1.7668, -0.4881,  ...,  1.9250, -0.4566,  0.3128],
          [ 0.0088, -0.0510, -0.5585,  ..., -0.6541,  0.7426,  1.2532],
          ...,
          [ 1.3048, -1.2281,  0.7591,  ..., -1.1143,  1.4549, -1.9132],
          [-0.7501, -0.0074, -0.2104,  ..., -1.1864, -1.3257,  0.1999],
          [ 2.0448,  0.9295, -1.0953,  ...,  1.6435,  1.3514,  0.4270]]],


        [[[-0.1793, -0.5138, -0.5095,  ...,  0.0118,  0.7865, -0.2815],
          [ 1.6935, -2.0372,  0.8202,  ..., -0.5808,  0.7546, -1.9998],
          [ 0.5489, -0.4325,  0.3719,  ...,  0.6253,  0.3944, -1.1662],
          ...,
          [-0.6555, -1.2488,  0.9510,  ...,  0.9613,  0.4669,  0.6329],
          [ 1.6783,  0.5409,  0.1974,  ..., -1.2808, -1.1463,  1.1833],
          [ 0.4986,  0.9560, -0.0496,  ..., -0.6929,  0.1934, -0.1074]],

         [[ 0.4048, -0.7413, -1.2730,  ...,  1.0684, -2.6406,  1.1349],
          [-0.1039,  2.5430,  0.8735,  ..., -0.5295, -0.7840,  1.4476],
          [-0.8433, -1.4494,  1.3220,  ..., -0.3341, -0.3810,  0.6470],
          ...,
          [ 1.0719,  0.2374, -0.6062,  ..., -1.9681, -0.0287,  1.2300],
          [ 0.8685,  0.2714, -0.0716,  ..., -0.2133,  0.6558, -1.8950],
          [ 1.5080,  0.8968,  0.4288,  ...,  0.0482,  0.3364, -1.7715]]]],
       device='cuda:0')
recurrent_blocks.0.weight_ih_l0 tensor([[-0.1124,  0.0496],
        [-0.0068, -0.0006],
        [ 0.1087, -0.1624],
        [ 0.0079,  0.1018],
        [ 0.0728, -0.0932],
        [-0.0355,  0.0992],
        [ 0.1398,  0.1025],
        [ 0.0219,  0.0824],
        [-0.1094, -0.0256],
        [ 0.1446, -0.0043],
        [-0.0155, -0.1466],
        [-0.0940,  0.0865],
        [-0.1774,  0.1700],
        [ 0.1593,  0.0821],
        [-0.0850, -0.0733],
        [ 0.0029, -0.0417],
        [-0.0694, -0.1357],
        [ 0.1808,  0.1548],
        [-0.0008, -0.1433],
        [-0.0506, -0.0480],
        [-0.1254,  0.1053],
        [ 0.0693,  0.0548],
        [-0.0093, -0.1425],
        [-0.0050, -0.1331],
        [ 0.1159, -0.0758],
        [ 0.0607, -0.0550],
        [-0.0537, -0.1023],
        [-0.0267, -0.0406],
        [-0.1148, -0.0771],
        [ 0.1756,  0.1354],
        [-0.1284,  0.1364],
        [ 0.1235, -0.1521],
        [ 0.1062,  0.1093],
        [-0.0429,  0.1295],
        [-0.1145,  0.0470],
        [-0.1524, -0.1351],
        [-0.0878, -0.1776],
        [ 0.1573, -0.0786],
        [ 0.0213,  0.0544],
        [ 0.0327,  0.0913],
        [-0.1530, -0.0478],
        [ 0.0783,  0.1600],
        [-0.0627,  0.0168],
        [ 0.1505, -0.1128],
        [-0.0039,  0.0517],
        [-0.1554, -0.0043],
        [-0.0158,  0.0034],
        [ 0.1816,  0.0876],
        [ 0.0784,  0.0095],
        [ 0.1057,  0.1247],
        [ 0.1136, -0.1204],
        [-0.1328,  0.0868],
        [ 0.1340,  0.1403],
        [ 0.1474, -0.0465],
        [ 0.1223, -0.1035],
        [ 0.0329,  0.1139],
        [-0.1809, -0.0737],
        [ 0.0920, -0.0166],
        [-0.1437,  0.0561],
        [ 0.1504, -0.1301],
        [ 0.0219, -0.0501],
        [-0.0602,  0.1801],
        [-0.1546, -0.0267],
        [-0.1209,  0.0418],
        [-0.0585, -0.1412],
        [ 0.1378, -0.1438],
        [-0.0236,  0.1304],
        [-0.0289, -0.0737],
        [-0.1204, -0.0801],
        [-0.0670,  0.1390],
        [ 0.1261, -0.0801],
        [-0.1429, -0.1512],
        [-0.0459,  0.1111],
        [ 0.1026,  0.0087],
        [ 0.1356, -0.1459],
        [ 0.1221, -0.0499],
        [ 0.1628, -0.0412],
        [ 0.1456, -0.0841],
        [-0.1799,  0.0780],
        [-0.0051, -0.0728],
        [-0.0006, -0.1501],
        [-0.1529,  0.1419],
        [-0.1652,  0.0489],
        [ 0.1789,  0.0187],
        [ 0.0516,  0.1477],
        [ 0.0247, -0.1667],
        [-0.0450, -0.1153],
        [-0.1363, -0.1187],
        [ 0.1828,  0.0219],
        [-0.0917, -0.1067],
        [ 0.0835, -0.0647],
        [ 0.1325, -0.0111],
        [ 0.0686,  0.1171],
        [-0.1478, -0.0988],
        [-0.0292,  0.1296],
        [-0.0760, -0.0284],
        [ 0.1048,  0.1221],
        [-0.1527, -0.0471],
        [ 0.0842, -0.1047],
        [ 0.0888,  0.1356],
        [ 0.1618,  0.0726],
        [-0.1561, -0.1849],
        [ 0.1438,  0.1364],
        [-0.0646, -0.1385],
        [ 0.0102,  0.0670],
        [ 0.1647, -0.0127],
        [-0.0432,  0.1107],
        [ 0.1468,  0.1518],
        [-0.1774, -0.1194],
        [-0.1289,  0.0084],
        [-0.0997,  0.0614],
        [-0.0596,  0.1431],
        [-0.0611, -0.0886],
        [ 0.0110, -0.1501],
        [-0.1643,  0.1376],
        [-0.0678,  0.1219],
        [ 0.1166, -0.1325],
        [ 0.1433, -0.1298],
        [ 0.0594, -0.1578],
        [ 0.0086, -0.0820],
        [-0.0651,  0.1196],
        [ 0.1281,  0.0121],
        [-0.1024,  0.0242],
        [-0.1122,  0.1260],
        [-0.0359, -0.0575],
        [-0.1503,  0.0475],
        [-0.1652,  0.1006],
        [-0.1619,  0.1413]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.0600, -0.0249,  0.1498,  ..., -0.1518,  0.0388, -0.0364],
        [-0.0758,  0.1572, -0.1610,  ..., -0.0839, -0.0274, -0.1210],
        [ 0.1202,  0.0772,  0.0983,  ..., -0.0007,  0.0557,  0.0421],
        ...,
        [ 0.1461, -0.0860, -0.1435,  ..., -0.0771, -0.0658, -0.1295],
        [ 0.1176, -0.0058, -0.0928,  ..., -0.1431, -0.0058,  0.1308],
        [ 0.0936,  0.1112, -0.1173,  ..., -0.1754, -0.1257, -0.0777]],
       device='cuda:0')
recurrent_blocks.0.bias_ih_l0 tensor([ 0.1330, -0.0208, -0.1068, -0.0767, -0.1295, -0.0916, -0.0126,  0.0704,
        -0.0399, -0.1567,  0.1161,  0.0333,  0.0935,  0.1852,  0.1200, -0.1368,
         0.1793,  0.0459, -0.0416, -0.1369, -0.0047, -0.0283, -0.0423,  0.0742,
        -0.1505,  0.1530,  0.1073, -0.1507,  0.0528, -0.0734,  0.1160, -0.1194,
         0.0552, -0.0501,  0.1839,  0.0705,  0.1205, -0.0879, -0.1246,  0.0664,
         0.0702, -0.1553, -0.1564,  0.1134, -0.0138, -0.0932, -0.0088, -0.0173,
        -0.1223,  0.0070,  0.0336, -0.0399,  0.0182, -0.0234, -0.0719,  0.1707,
        -0.0990, -0.1532, -0.0268, -0.1807, -0.0829,  0.0683, -0.0525,  0.0333,
         0.0156, -0.1471,  0.1626,  0.1008, -0.0076,  0.0065,  0.1105, -0.1516,
        -0.0763,  0.0054, -0.0116,  0.0794, -0.0949, -0.1620,  0.0672, -0.0855,
         0.0458,  0.1574,  0.0833, -0.0597,  0.0944,  0.0421,  0.0824,  0.0378,
        -0.0078, -0.0572, -0.0040, -0.0787,  0.0338, -0.1469, -0.0924, -0.0574,
         0.1740,  0.1758, -0.1605,  0.0082,  0.0420, -0.1192,  0.0602,  0.1057,
        -0.0406,  0.0214, -0.1175, -0.1096, -0.1794, -0.0839, -0.0858,  0.1248,
         0.1627, -0.1014,  0.0722,  0.1562,  0.1207,  0.0714, -0.0271,  0.0307,
        -0.0293, -0.0543,  0.0390, -0.1704, -0.1589, -0.0259, -0.1326, -0.1118],
       device='cuda:0')
recurrent_blocks.0.bias_hh_l0 tensor([-0.0173,  0.0601, -0.1431, -0.1649, -0.1147, -0.1316, -0.0392, -0.1607,
        -0.0944, -0.0692,  0.1259,  0.1219,  0.0887, -0.0791, -0.0124, -0.0907,
        -0.1669,  0.0846, -0.1006,  0.0796, -0.1138, -0.1573,  0.0140, -0.0654,
         0.1801, -0.0103, -0.1774,  0.0937, -0.0552,  0.0420,  0.0019, -0.1172,
        -0.1510,  0.0412, -0.1468,  0.1100, -0.1736,  0.1402,  0.0944,  0.1667,
         0.0710,  0.0764, -0.0556,  0.0803,  0.0366, -0.0529, -0.0955,  0.0216,
         0.0918, -0.1098, -0.0484,  0.0986,  0.1553, -0.1065, -0.1345, -0.0628,
        -0.0240,  0.0840, -0.0589,  0.0242, -0.1828,  0.0670, -0.1476, -0.0064,
        -0.0634, -0.0631,  0.0914, -0.0318, -0.1534, -0.1402, -0.0223,  0.1395,
        -0.0323,  0.0350, -0.1368,  0.1515,  0.0059,  0.1593,  0.1306, -0.1703,
        -0.1618,  0.0176,  0.1556,  0.0984, -0.0174, -0.1144, -0.0342, -0.0944,
        -0.1344,  0.0383, -0.0669,  0.0272, -0.0063, -0.1169,  0.1319,  0.0656,
        -0.0821, -0.0653,  0.0275,  0.1112, -0.1024,  0.0215, -0.0927, -0.1230,
        -0.1327,  0.1771,  0.1058,  0.1632,  0.0055, -0.0846,  0.0238,  0.0505,
         0.0796, -0.1140, -0.0050, -0.1335,  0.0569, -0.0404, -0.1466, -0.1242,
        -0.0861, -0.1854, -0.0195, -0.0259,  0.1512,  0.1023, -0.1158,  0.1404],
       device='cuda:0')
recurrent_blocks.0.weight_ih_l0_reverse tensor([[-0.1667,  0.1647],
        [ 0.1432,  0.1186],
        [ 0.0323, -0.1085],
        [ 0.0807, -0.0418],
        [ 0.1853,  0.0481],
        [-0.0856, -0.1774],
        [ 0.1766, -0.0240],
        [-0.1632, -0.1615],
        [-0.1505, -0.0112],
        [-0.0536,  0.1335],
        [ 0.0022, -0.0956],
        [ 0.1302, -0.0025],
        [ 0.1055,  0.1319],
        [-0.1514,  0.1344],
        [ 0.1526, -0.1354],
        [-0.0166,  0.1315],
        [ 0.1213,  0.1452],
        [-0.0975,  0.1031],
        [ 0.0517,  0.0968],
        [ 0.1290,  0.1152],
        [ 0.0172, -0.1284],
        [-0.1453, -0.1538],
        [ 0.0104, -0.1016],
        [-0.0684, -0.0652],
        [-0.0422,  0.1435],
        [ 0.0171, -0.1193],
        [ 0.1204,  0.1057],
        [ 0.1454,  0.0324],
        [ 0.0243,  0.0479],
        [-0.0114,  0.0276],
        [-0.1525, -0.0052],
        [-0.1211, -0.1474],
        [-0.0258,  0.0303],
        [ 0.0995,  0.1731],
        [ 0.1657,  0.1366],
        [-0.1149,  0.0847],
        [-0.0570, -0.0412],
        [-0.0959, -0.0851],
        [ 0.0583,  0.0504],
        [ 0.0665, -0.1553],
        [-0.1066,  0.1095],
        [ 0.1390,  0.0342],
        [ 0.1271, -0.1829],
        [ 0.0814, -0.0099],
        [ 0.0226,  0.1423],
        [-0.1342,  0.1239],
        [-0.0699,  0.0514],
        [-0.0485,  0.1664],
        [-0.1466, -0.0490],
        [ 0.1060,  0.0027],
        [-0.0192, -0.0768],
        [-0.0593,  0.0409],
        [ 0.0624, -0.1698],
        [-0.1579, -0.1431],
        [ 0.0373,  0.0823],
        [-0.0851, -0.0792],
        [-0.0861,  0.0502],
        [-0.0538,  0.0779],
        [ 0.0176, -0.1483],
        [ 0.0528, -0.0321],
        [-0.1150, -0.0295],
        [ 0.0109, -0.1179],
        [ 0.1581, -0.1247],
        [ 0.0347, -0.0806],
        [ 0.1257, -0.1246],
        [-0.1069, -0.0080],
        [-0.0814,  0.0198],
        [ 0.0594,  0.1652],
        [ 0.1429, -0.1846],
        [ 0.1752,  0.0494],
        [-0.0124, -0.0638],
        [ 0.1301,  0.1529],
        [ 0.1771,  0.0738],
        [ 0.1615, -0.0134],
        [-0.0544,  0.0936],
        [-0.1002,  0.0206],
        [ 0.1345, -0.0280],
        [ 0.1342, -0.0113],
        [ 0.1073, -0.0497],
        [-0.0073, -0.1419],
        [-0.0340, -0.0070],
        [ 0.1306, -0.0660],
        [-0.1424,  0.1574],
        [ 0.1304, -0.0091],
        [-0.1515,  0.1629],
        [ 0.0992,  0.1559],
        [ 0.1404,  0.0229],
        [ 0.0296,  0.1204],
        [-0.1394,  0.1413],
        [ 0.0751, -0.1087],
        [-0.1306, -0.0670],
        [ 0.0168,  0.1630],
        [ 0.1057, -0.0472],
        [ 0.0126, -0.1453],
        [-0.0852,  0.1299],
        [-0.0444,  0.1650],
        [-0.1366,  0.0342],
        [ 0.0010, -0.0317],
        [ 0.0351,  0.0594],
        [-0.0676, -0.1267],
        [ 0.1222,  0.1185],
        [ 0.0499, -0.0789],
        [ 0.0032, -0.0989],
        [ 0.0763,  0.1589],
        [-0.1624, -0.0910],
        [ 0.0389,  0.0218],
        [-0.0488, -0.1438],
        [-0.0111, -0.1238],
        [-0.0367,  0.0155],
        [-0.0475, -0.1784],
        [ 0.1713, -0.1716],
        [-0.1032,  0.0134],
        [-0.1100,  0.1161],
        [ 0.1017,  0.1818],
        [ 0.0400,  0.0778],
        [-0.0212,  0.1293],
        [-0.0139,  0.0886],
        [ 0.0200,  0.1520],
        [-0.1171, -0.0257],
        [-0.0584, -0.1356],
        [-0.1032,  0.0535],
        [ 0.0358,  0.0567],
        [-0.1231,  0.0578],
        [ 0.1335,  0.0487],
        [ 0.0111, -0.1552],
        [ 0.1578,  0.1531],
        [ 0.0218, -0.0192],
        [-0.1055,  0.1293]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.1181,  0.1505,  0.0634,  ...,  0.1852, -0.1580, -0.1424],
        [ 0.0834,  0.0650,  0.0495,  ..., -0.0066,  0.0504,  0.0731],
        [ 0.0758, -0.0482, -0.1111,  ..., -0.0658, -0.0526,  0.1205],
        ...,
        [-0.0737,  0.0175,  0.0736,  ..., -0.0472, -0.1097,  0.0603],
        [-0.1599, -0.1216, -0.1170,  ..., -0.0159,  0.0404, -0.1391],
        [ 0.0809,  0.0470, -0.0905,  ...,  0.1782,  0.0020,  0.0691]],
       device='cuda:0')
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 4.6378e-02, -1.2983e-01, -1.1741e-01, -6.9973e-02,  3.3277e-02,
        -9.9581e-02, -8.5827e-02,  1.7625e-01,  8.6375e-02, -3.0607e-02,
        -1.2367e-01, -3.7879e-03, -1.5663e-01,  9.5348e-02, -1.7680e-01,
         4.1498e-02, -1.2657e-01, -1.1680e-01,  1.3560e-01,  3.7916e-03,
         4.8270e-02,  8.0900e-02, -5.8241e-02,  1.1506e-02, -4.1273e-02,
         1.7464e-01,  1.1848e-01, -2.6436e-02, -9.5682e-02,  3.0801e-05,
        -1.0090e-01,  1.5121e-01,  1.5757e-01, -7.7961e-02,  1.0232e-01,
         3.6429e-02,  9.8946e-03,  1.7677e-01,  7.1013e-03, -4.8915e-02,
         1.4319e-01,  1.6448e-01,  1.2993e-01, -1.0123e-02, -1.5327e-01,
        -7.4564e-02,  1.2807e-01,  1.0232e-01, -1.3771e-01, -1.7914e-01,
         1.2766e-01,  1.1738e-01, -5.4533e-02, -8.0583e-02,  2.8885e-04,
        -5.8867e-02,  1.3918e-01, -2.9987e-02, -1.0545e-02, -1.4785e-02,
         2.7280e-03,  6.6897e-03,  1.3352e-01,  7.8828e-02, -9.9373e-02,
         1.4966e-01, -1.5767e-01, -3.3058e-02,  2.9528e-02, -1.5786e-01,
         9.6207e-03, -1.3271e-01, -1.9735e-02, -4.5709e-02, -1.8131e-02,
        -8.2668e-02,  2.4404e-02, -4.5340e-02, -1.1980e-01, -7.0701e-02,
         1.4230e-01, -4.6016e-02,  8.0871e-02, -2.7958e-02, -1.3095e-01,
         3.4496e-02, -1.0357e-01,  2.6251e-02, -6.4404e-02, -1.0050e-01,
        -1.1733e-01,  1.2815e-02,  2.0660e-02,  2.0159e-02,  1.4258e-02,
         1.6817e-01, -1.2653e-01,  2.4521e-02,  3.1293e-02, -9.9791e-02,
        -7.7574e-02,  7.2366e-03,  1.1913e-01,  1.2327e-01,  1.1649e-01,
        -6.1541e-02,  1.2116e-01, -9.6498e-02,  1.3889e-01,  4.2111e-02,
         1.5346e-01, -1.2258e-02,  1.1966e-01, -1.3830e-01,  1.0371e-01,
        -1.4405e-02, -4.3182e-02, -5.5304e-02, -6.8952e-02,  8.7155e-03,
        -5.0100e-02,  2.4478e-02, -3.4636e-02, -1.1326e-01, -1.3034e-01,
         1.5298e-01,  7.7205e-03,  2.2479e-02], device='cuda:0')
recurrent_blocks.0.bias_hh_l0_reverse tensor([ 0.0204, -0.1414, -0.1565,  0.1411,  0.0375,  0.0059,  0.1234, -0.1339,
        -0.0363, -0.1493, -0.1289,  0.1200, -0.1504,  0.1119,  0.1365,  0.1416,
        -0.0925, -0.0267, -0.1600, -0.0712, -0.1285,  0.0720, -0.0532,  0.0152,
        -0.0577, -0.1342, -0.1339,  0.1567, -0.0218,  0.0012,  0.0870,  0.1211,
         0.0121, -0.1112, -0.1687,  0.1338,  0.0649, -0.0435,  0.0486,  0.0545,
        -0.0098,  0.0758,  0.1332, -0.0148,  0.1198,  0.0995,  0.0762,  0.0781,
         0.0370, -0.1469,  0.0146,  0.1156,  0.1360, -0.0902, -0.1691,  0.0619,
         0.0974,  0.0785,  0.1394,  0.0897,  0.0070,  0.0870,  0.1467,  0.0408,
        -0.1136, -0.0229,  0.0604,  0.1571, -0.0155,  0.0576,  0.0040,  0.0290,
        -0.0651, -0.1140, -0.1630, -0.0531, -0.1048,  0.1333,  0.1559,  0.0038,
         0.1533,  0.0924,  0.0885, -0.0565,  0.0921, -0.1361,  0.0460,  0.1677,
        -0.0621,  0.0410,  0.0491, -0.1248,  0.0677, -0.1398,  0.0707, -0.0590,
        -0.1517, -0.0318, -0.0686, -0.1798, -0.1833,  0.1743, -0.0319,  0.0185,
         0.1221, -0.1563, -0.0927, -0.0527, -0.1857, -0.0171, -0.1024, -0.0072,
         0.1339,  0.1438, -0.1123,  0.0478, -0.1396,  0.1010, -0.1767,  0.0578,
        -0.1426,  0.0900, -0.1277,  0.0946, -0.1612, -0.0498,  0.0121, -0.1561],
       device='cuda:0')
recurrent_blocks.1.weight_ih_l0 tensor([[-0.1372, -0.0589,  0.1499,  ...,  0.0853,  0.0684, -0.0104],
        [-0.0354,  0.0213,  0.1074,  ...,  0.1304, -0.0802, -0.1564],
        [ 0.1241,  0.0111, -0.0007,  ..., -0.0753,  0.0045,  0.0220],
        ...,
        [ 0.1018, -0.1554,  0.0220,  ...,  0.1187,  0.0400,  0.0861],
        [ 0.0379, -0.0433,  0.0734,  ..., -0.0873, -0.0517,  0.0620],
        [ 0.1666,  0.1759,  0.0360,  ..., -0.0076, -0.1344, -0.1600]],
       device='cuda:0')
recurrent_blocks.1.weight_hh_l0 tensor([[-0.0187,  0.0280, -0.0777,  ...,  0.0163,  0.0388, -0.0363],
        [-0.1520, -0.0304,  0.0833,  ..., -0.1338,  0.1356, -0.1008],
        [ 0.0390, -0.0133, -0.0977,  ..., -0.1494, -0.0373, -0.0650],
        ...,
        [ 0.0433,  0.0504, -0.0125,  ...,  0.0423,  0.0990, -0.1691],
        [ 0.0948, -0.1232,  0.1605,  ..., -0.1688, -0.1696,  0.1056],
        [ 0.0619,  0.1050, -0.0310,  ..., -0.0322, -0.1310, -0.1413]],
       device='cuda:0')
recurrent_blocks.1.bias_ih_l0 tensor([ 0.1150,  0.0893, -0.1366,  0.1087, -0.1614, -0.0374,  0.0691,  0.1496,
         0.1267,  0.0817, -0.1114, -0.0600, -0.0975,  0.1056,  0.1073,  0.1540,
         0.0536, -0.0256, -0.1467, -0.0414, -0.0094, -0.1017,  0.1393,  0.1797,
         0.0152,  0.0941, -0.1210, -0.0641, -0.0570,  0.1838,  0.0595, -0.0682,
         0.1402, -0.1844, -0.0460,  0.1158,  0.0709, -0.0599,  0.1267,  0.1538,
         0.0142,  0.0471, -0.0978,  0.1701, -0.0085,  0.0317, -0.0572, -0.0712,
         0.0383, -0.0637,  0.0802, -0.0910, -0.1008,  0.0584,  0.0152,  0.1543,
        -0.0651,  0.0657, -0.1501, -0.1068, -0.0832, -0.1648,  0.0608,  0.0180,
        -0.0543,  0.1518,  0.0291, -0.0389, -0.1227,  0.1065, -0.0082,  0.0622,
        -0.1364,  0.0172, -0.0394,  0.0581,  0.0704, -0.1289, -0.0293, -0.0849,
         0.1114,  0.0748, -0.0045,  0.0006,  0.0651,  0.1478,  0.1290, -0.0276,
         0.0583, -0.0641,  0.0939,  0.1465,  0.0827, -0.0754, -0.1851, -0.0451,
        -0.0154, -0.1193,  0.0902,  0.1348,  0.0815,  0.0934, -0.1027, -0.0729,
         0.0261,  0.1747,  0.0237,  0.0759,  0.0753,  0.0064, -0.0563, -0.0653,
         0.0618,  0.1560,  0.1000, -0.0865, -0.0454, -0.0388,  0.1032, -0.0948,
         0.1614, -0.0264, -0.0672,  0.0659, -0.1043, -0.0437, -0.0213, -0.1121],
       device='cuda:0')
recurrent_blocks.1.bias_hh_l0 tensor([-1.0937e-01,  4.4415e-02, -1.0808e-01,  1.2212e-01,  6.7239e-02,
        -7.7261e-02, -1.7651e-01, -6.9725e-04, -1.5870e-01, -1.2367e-01,
        -9.5156e-02, -1.4671e-01, -7.8611e-02,  1.0260e-01,  1.0170e-01,
        -6.6142e-02,  1.4377e-01, -9.3979e-02,  1.7201e-02,  1.6130e-01,
         1.5685e-01,  8.9322e-02, -1.1818e-01,  4.9125e-03,  2.9976e-02,
         1.5586e-01, -1.8264e-02,  1.1826e-01, -6.3596e-02, -4.2373e-02,
         1.7638e-01, -5.0978e-02,  2.0311e-02,  4.8755e-02, -3.0955e-02,
         9.9640e-02,  7.7796e-02, -9.3446e-04,  1.6425e-02,  9.6113e-03,
        -1.1905e-01,  2.4024e-02, -4.8528e-02,  2.4046e-02,  3.1756e-02,
        -5.9960e-02,  5.9922e-02,  1.2762e-01,  1.7272e-01,  1.2401e-01,
         6.0545e-02,  4.6629e-03,  8.4281e-02,  6.6431e-02,  2.3333e-02,
        -1.4516e-01,  3.4121e-02,  1.4134e-02,  9.0264e-03, -3.4744e-03,
        -7.2615e-02, -1.1710e-01,  8.7560e-02, -6.8424e-02,  9.4775e-02,
        -3.3864e-02,  1.5702e-02,  1.6863e-01, -4.3420e-02,  1.1066e-01,
         4.6291e-02,  7.3006e-02,  1.7984e-02,  1.4689e-01, -1.5080e-01,
         1.0679e-01,  8.6184e-02,  1.0606e-01,  1.2950e-01,  1.0283e-02,
         3.9090e-02, -1.2786e-01, -1.2539e-01, -7.7202e-02,  1.7288e-01,
        -1.2226e-04, -1.3373e-01,  6.1381e-02, -1.2540e-01, -1.4017e-01,
         1.4124e-02,  1.7296e-01,  1.1170e-01,  1.0472e-01, -7.3835e-02,
        -9.1538e-02,  2.7892e-02,  9.5071e-02, -1.4899e-01, -1.4692e-01,
         7.0055e-02, -4.1077e-03, -1.6242e-01,  1.1173e-01, -7.8008e-02,
         1.7937e-01, -6.2314e-02, -9.7958e-02,  1.3124e-01, -1.4693e-01,
        -1.4984e-01, -1.4152e-01, -9.2785e-04,  1.5765e-01, -2.8487e-03,
         4.6111e-02, -1.8175e-01, -1.0674e-01,  9.3346e-02,  9.5827e-02,
         7.7178e-02,  1.5955e-02, -2.4120e-02,  1.4987e-01,  8.8716e-02,
        -1.2003e-01,  1.2341e-01, -1.4877e-01], device='cuda:0')
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 0.0011,  0.0769,  0.0044,  ..., -0.0240,  0.0286,  0.0205],
        [-0.1486,  0.0194,  0.0104,  ..., -0.1216,  0.0957, -0.0128],
        [-0.1071,  0.0557, -0.0504,  ..., -0.0635, -0.0695,  0.0947],
        ...,
        [-0.0591,  0.0119,  0.0621,  ..., -0.0523, -0.0042,  0.1204],
        [ 0.1505, -0.1540,  0.1087,  ..., -0.1643, -0.0314,  0.0769],
        [ 0.1578,  0.1753, -0.0887,  ..., -0.1491,  0.0441,  0.0153]],
       device='cuda:0')
recurrent_blocks.1.weight_hh_l0_reverse tensor([[ 0.0178,  0.0526,  0.1385,  ..., -0.1638,  0.1652, -0.0571],
        [-0.0172,  0.0441, -0.1422,  ...,  0.0597,  0.1368,  0.0551],
        [ 0.1662, -0.1813, -0.0960,  ..., -0.0794, -0.1238, -0.1644],
        ...,
        [ 0.1471,  0.1415,  0.0341,  ...,  0.0286, -0.1044, -0.0442],
        [ 0.1815,  0.1323, -0.0871,  ...,  0.1510, -0.1263,  0.1588],
        [-0.1331, -0.1497,  0.0153,  ..., -0.1356,  0.1570, -0.0097]],
       device='cuda:0')
recurrent_blocks.1.bias_ih_l0_reverse tensor([-2.4152e-02, -9.2872e-02,  3.5672e-02,  4.9786e-02, -5.4286e-02,
        -9.5777e-02, -8.0937e-02, -4.3486e-02, -5.3417e-02,  1.6268e-01,
        -1.2275e-01, -7.4703e-03,  1.1220e-01, -1.6713e-01, -5.3754e-02,
        -3.5315e-03,  6.7669e-02,  2.6771e-02,  8.6135e-02,  1.5628e-01,
         1.0345e-01, -1.5272e-01,  1.8424e-01, -1.6476e-01, -3.8826e-02,
        -2.6671e-02, -5.1428e-02, -1.1061e-01, -1.8420e-02,  9.8283e-02,
         8.5219e-02, -5.3103e-02, -5.8099e-03, -8.0005e-02,  1.7904e-02,
         1.5312e-01, -7.9918e-02,  6.1857e-02,  1.4490e-01, -1.0410e-01,
        -3.0432e-02,  1.6013e-01, -4.8714e-02,  9.6511e-02,  9.7369e-02,
         1.4525e-01,  1.1178e-01, -8.3302e-02,  8.7994e-02, -2.9227e-02,
         4.8639e-02,  2.5233e-02, -6.3804e-02,  8.5170e-02, -1.2645e-01,
        -6.2688e-02,  7.1946e-02,  3.1828e-02,  1.8041e-01, -1.4491e-01,
         6.8261e-03, -7.6416e-02,  1.5224e-01, -3.9181e-02,  1.2304e-01,
         1.6566e-01,  2.8825e-02, -3.5850e-02,  1.5150e-01, -8.1083e-02,
        -6.7958e-03, -1.6075e-01,  3.5966e-02, -1.3074e-01,  1.4247e-01,
         1.5430e-01, -6.2642e-02, -1.0160e-02,  8.4685e-02, -1.1047e-01,
         1.5901e-01, -9.4420e-02, -4.2907e-02,  1.3625e-01,  1.2687e-02,
         1.4670e-01, -1.5572e-01,  2.0896e-02, -1.0828e-01,  1.0491e-01,
        -1.4384e-01, -1.1082e-01,  1.1790e-01,  9.8224e-02, -3.5366e-02,
        -1.3284e-01, -1.2533e-05, -9.8627e-02, -1.5763e-01,  1.7146e-01,
         4.6964e-02,  1.2065e-01, -1.4659e-01, -1.5312e-01, -1.4725e-01,
         1.6788e-01, -1.4548e-01,  1.4201e-01,  1.8533e-01, -1.0126e-01,
        -1.0541e-02,  1.5293e-01, -1.3748e-01,  7.3632e-02, -7.9716e-02,
        -1.2286e-01, -5.3000e-02, -1.6124e-01, -1.6256e-02,  1.0207e-02,
         8.3633e-02,  1.5307e-01,  1.7623e-01,  1.3987e-01, -4.2051e-03,
        -5.2204e-02,  7.2885e-03, -1.5193e-01], device='cuda:0')
recurrent_blocks.1.bias_hh_l0_reverse tensor([-0.1546,  0.0057, -0.1348, -0.1454,  0.0116, -0.1806, -0.0342, -0.0486,
         0.0876,  0.1482,  0.0542,  0.1290,  0.1619, -0.0740, -0.0260,  0.1194,
         0.1366, -0.1259,  0.1600,  0.0351,  0.0589,  0.1244,  0.1529, -0.1114,
        -0.0756, -0.0082, -0.1273, -0.1733, -0.0270, -0.1025, -0.1033, -0.1035,
         0.0455, -0.0163,  0.0749, -0.0043,  0.0063, -0.1307,  0.0784, -0.0800,
        -0.0818,  0.0464,  0.1340,  0.0465,  0.0028,  0.1667,  0.1438,  0.0630,
         0.0738,  0.0313, -0.0423,  0.1357, -0.0760,  0.0646, -0.1321,  0.0965,
         0.1513,  0.1582,  0.0446,  0.1590,  0.1142,  0.1347,  0.1010, -0.0869,
        -0.0152,  0.1855,  0.0585,  0.0527, -0.1787, -0.1058,  0.0072, -0.1229,
        -0.0154, -0.1777, -0.0927, -0.1585,  0.0654,  0.0006,  0.0675, -0.0096,
        -0.0332,  0.1290, -0.1235, -0.0931, -0.0816,  0.0267, -0.0389, -0.0140,
         0.1589, -0.1418, -0.1123,  0.1008, -0.0981, -0.0594, -0.0156, -0.0586,
        -0.1327,  0.1104,  0.0551,  0.0889,  0.1843,  0.0843, -0.1500, -0.0722,
         0.0802,  0.1605, -0.0595, -0.1000,  0.0121, -0.1301,  0.0950, -0.0854,
         0.1040,  0.1545, -0.0627, -0.0443, -0.0238, -0.0103, -0.1267, -0.0994,
         0.1063,  0.1165, -0.1418, -0.0412,  0.0140,  0.0219, -0.1347,  0.0969],
       device='cuda:0')
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.0729, -0.1196,  0.1501,  ..., -0.1144, -0.0207,  0.1436],
        [ 0.1415, -0.0456, -0.0988,  ...,  0.0604,  0.1279,  0.0647],
        [ 0.1562, -0.0891, -0.0469,  ..., -0.0091, -0.0093,  0.0468],
        ...,
        [-0.1139,  0.0976,  0.1833,  ...,  0.0678, -0.0232,  0.1572],
        [ 0.0117, -0.1595,  0.0005,  ...,  0.0681,  0.1483, -0.0628],
        [ 0.1508,  0.0095,  0.1848,  ..., -0.1204,  0.0769, -0.0214]],
       device='cuda:0')
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.1098,  0.0599, -0.0916,  ...,  0.0658,  0.0695,  0.0113],
        [ 0.0960,  0.1266,  0.0496,  ..., -0.0727,  0.1475, -0.0267],
        [-0.1665,  0.0088, -0.1286,  ...,  0.0196, -0.0922, -0.0433],
        ...,
        [-0.0240,  0.1270,  0.0055,  ..., -0.1008,  0.0517, -0.1132],
        [ 0.0397,  0.0848, -0.1060,  ..., -0.0049,  0.1048,  0.0525],
        [-0.0154,  0.1403, -0.0375,  ..., -0.1767,  0.0614, -0.0838]],
       device='cuda:0')
recurrent_blocks.2.bias_ih_l0 tensor([ 1.3405e-01, -2.2515e-02,  1.6150e-01,  1.7828e-01, -4.4417e-02,
        -5.2020e-02,  1.4352e-01, -6.1598e-02, -1.5172e-01, -1.3205e-01,
        -1.6638e-01, -4.6291e-03,  7.8816e-03,  1.2268e-01,  1.5536e-01,
         1.1340e-01, -1.0931e-01, -1.5556e-01, -7.4349e-02,  3.0397e-02,
         1.2061e-01,  1.2768e-01, -3.6238e-02,  5.2799e-02, -1.6408e-01,
         7.1904e-05,  6.4111e-02,  1.4139e-02, -1.4303e-01, -8.7847e-02,
         2.2837e-02, -4.2070e-02, -9.4136e-02,  7.4073e-03, -6.8717e-02,
         1.7828e-01, -2.7750e-02, -1.2121e-01,  3.4095e-02,  1.9906e-02,
        -3.7896e-04,  5.1147e-02, -9.7189e-02,  9.9541e-02,  4.4865e-02,
         1.2575e-01,  7.2258e-02, -5.0884e-02, -1.3071e-01,  1.5985e-01,
        -4.0044e-02, -1.3550e-01, -5.4401e-02,  1.3932e-01, -1.0564e-01,
         1.3085e-01,  1.0331e-01,  1.4398e-02,  4.7375e-02, -1.4129e-01,
         1.6276e-01, -1.0422e-02, -7.8416e-02,  3.5618e-02, -3.0420e-03,
         1.2380e-01, -6.8676e-02,  5.1850e-02, -7.5323e-02,  5.6581e-02,
        -3.3734e-02, -6.0351e-02, -4.4718e-02, -1.6655e-01,  1.5138e-01,
        -5.5419e-04, -6.5700e-02, -1.1968e-01,  7.3440e-03,  1.5287e-01,
        -6.2852e-02, -1.4938e-01, -1.7985e-01, -3.0257e-02,  1.8015e-02,
        -1.4325e-01,  7.2935e-02,  5.6376e-02, -1.6775e-01, -1.0061e-01,
        -7.3307e-02,  1.3385e-01, -1.2477e-01, -1.3521e-01, -1.0103e-01,
        -7.0716e-02,  1.4831e-02,  1.5049e-01, -1.5402e-01,  1.8042e-01,
         8.7410e-02,  3.0616e-02, -1.8617e-01,  1.0183e-01,  9.3739e-02,
         8.2590e-02,  1.2180e-01,  7.8398e-02, -1.4757e-01,  2.8272e-02,
         2.2607e-02, -8.6412e-02, -7.2005e-02, -1.3265e-01,  8.1608e-02,
         2.9571e-02, -1.3434e-01, -1.1863e-01,  1.2356e-01,  1.6791e-01,
        -1.2701e-01, -3.7907e-02,  2.2551e-02, -2.7116e-04,  9.5581e-02,
         1.1572e-01, -1.5032e-01, -7.9602e-02], device='cuda:0')
recurrent_blocks.2.bias_hh_l0 tensor([-4.1432e-03,  6.6357e-02,  6.2571e-02,  1.0785e-01,  8.8258e-02,
        -1.0365e-01, -2.9207e-02, -7.5385e-02, -4.2003e-02,  1.6336e-01,
        -1.1532e-01,  4.9820e-02, -2.3107e-02,  5.5435e-02, -4.1027e-02,
         1.3556e-01, -1.0142e-01,  4.0962e-02,  4.1655e-02, -1.4851e-01,
         1.3029e-01,  7.4944e-02, -1.6080e-01,  1.5561e-03,  1.1091e-01,
        -1.1114e-01,  1.0373e-02,  9.1190e-02, -3.9145e-02,  1.2515e-01,
        -4.4466e-02, -1.5527e-01,  1.1683e-01, -6.8118e-02,  5.3542e-02,
         4.9679e-02, -6.3587e-02,  1.8664e-01,  3.9439e-02,  2.8170e-02,
         6.1762e-02, -2.8978e-02, -1.0894e-01, -1.5347e-01,  1.1083e-01,
         7.9045e-02, -5.8623e-02, -5.1739e-02,  5.8255e-02, -1.1389e-01,
        -8.4531e-02, -1.3707e-01,  1.0981e-01, -2.6925e-02, -5.1689e-02,
        -6.2656e-02, -3.7381e-02, -1.7253e-01, -6.1143e-02,  1.0661e-01,
        -1.7170e-01,  1.3548e-01,  4.2078e-02, -1.3072e-01,  2.1276e-02,
         1.5339e-01, -9.9055e-02, -6.3970e-02, -9.5674e-02, -8.6100e-02,
        -2.4788e-02,  2.9829e-02,  1.3360e-01, -1.6792e-01, -1.6039e-01,
         1.7584e-02,  1.1767e-01, -9.9477e-02,  6.7729e-02,  1.6234e-01,
         6.1180e-03,  1.5198e-01,  9.9336e-02, -1.5601e-02,  6.5262e-02,
        -1.5578e-01, -1.6673e-01, -1.4058e-02, -3.4779e-02, -1.2721e-02,
        -4.5057e-02, -1.6990e-01,  7.5467e-02,  6.8201e-02,  1.9826e-02,
         2.8245e-02, -6.4882e-02, -1.4465e-01, -1.7556e-01, -8.4345e-02,
        -1.8158e-01,  1.5631e-04, -1.6822e-01,  1.4283e-01, -1.8123e-01,
        -9.2254e-02,  1.5963e-01,  5.5127e-03,  1.8908e-02,  8.0987e-02,
         9.2880e-02,  1.5286e-01,  9.4725e-02,  5.3760e-02, -9.7726e-02,
        -7.4045e-02,  1.8612e-02, -1.5011e-01, -3.2440e-02,  8.2932e-02,
        -7.4131e-02, -3.2211e-02, -1.6599e-01, -1.6472e-01, -1.3017e-01,
         9.2521e-03, -1.5739e-01, -1.0555e-01], device='cuda:0')
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.1691,  0.1240, -0.1178,  ...,  0.0665,  0.0831,  0.1623],
        [-0.1696,  0.1083,  0.0989,  ...,  0.1180, -0.0782, -0.0802],
        [ 0.0025, -0.1473, -0.0246,  ..., -0.0313,  0.1104, -0.1133],
        ...,
        [ 0.0796, -0.0566, -0.1329,  ..., -0.1694, -0.0888,  0.0229],
        [-0.1299,  0.1598,  0.0026,  ..., -0.1499,  0.1391,  0.1589],
        [ 0.1769, -0.1596, -0.0047,  ...,  0.0929,  0.1114, -0.1412]],
       device='cuda:0')
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.1390, -0.1157, -0.1324,  ...,  0.0675, -0.0718,  0.1507],
        [-0.1121,  0.0478,  0.1062,  ..., -0.0182, -0.1020,  0.1220],
        [-0.1191,  0.1474,  0.0178,  ..., -0.1122, -0.0645,  0.0707],
        ...,
        [-0.1301, -0.0188, -0.0256,  ..., -0.0284, -0.0798,  0.0063],
        [ 0.1499, -0.0400, -0.0477,  ...,  0.0566, -0.1501, -0.0799],
        [ 0.1670, -0.0562, -0.0767,  ...,  0.0033, -0.0382,  0.1516]],
       device='cuda:0')
recurrent_blocks.2.bias_ih_l0_reverse tensor([ 0.1594,  0.1096,  0.1548,  0.0443,  0.1397, -0.0470, -0.0405, -0.1065,
         0.0117, -0.0227,  0.1158, -0.1224, -0.0674, -0.1399, -0.0879, -0.1347,
        -0.1164,  0.0569,  0.0445, -0.0662,  0.0103,  0.0743, -0.0019,  0.0277,
         0.0779,  0.0650, -0.1571,  0.0108,  0.1583, -0.0168,  0.0309, -0.0147,
        -0.0033,  0.1245,  0.0211,  0.0330,  0.1275, -0.0023, -0.1725,  0.0558,
        -0.0679, -0.1543,  0.1174,  0.0166, -0.1156, -0.0381, -0.0071,  0.1391,
         0.1073, -0.0375,  0.1469, -0.0167, -0.1215,  0.0834, -0.0947, -0.0228,
        -0.0465,  0.1376,  0.0898,  0.1438, -0.0418,  0.1101, -0.1151,  0.0389,
        -0.1287, -0.0737, -0.0186, -0.1538,  0.0405,  0.1736,  0.1320,  0.0643,
         0.1301, -0.1230,  0.1036, -0.0847, -0.0919, -0.0990, -0.0330,  0.0737,
        -0.1365,  0.0256, -0.0456, -0.0008, -0.0166,  0.1596, -0.1359,  0.0958,
        -0.0366,  0.0616,  0.1265,  0.1391, -0.0334,  0.1667, -0.0253, -0.0709,
        -0.1169, -0.0949,  0.0867,  0.1805, -0.0296,  0.0725, -0.1109, -0.1263,
        -0.0345, -0.0584,  0.0642,  0.1826,  0.1661, -0.0165, -0.1852, -0.0649,
         0.1353,  0.0632, -0.0698, -0.0160,  0.1233,  0.0903,  0.1540,  0.0307,
         0.0804,  0.1599,  0.0210, -0.0146, -0.1590,  0.0147, -0.1682, -0.0228],
       device='cuda:0')
recurrent_blocks.2.bias_hh_l0_reverse tensor([ 0.0414,  0.1629,  0.1454,  0.1813, -0.1635,  0.0349,  0.0926,  0.0576,
         0.1614,  0.1297,  0.0090,  0.1517,  0.0548,  0.0027,  0.1203,  0.1628,
        -0.0131,  0.0428, -0.0015,  0.1118,  0.0431,  0.1539, -0.0291, -0.1480,
        -0.0759,  0.0468, -0.0366,  0.1239, -0.0196,  0.1209, -0.0366,  0.1497,
        -0.0657, -0.1352,  0.1571,  0.0761,  0.0365,  0.0713,  0.1331,  0.1343,
         0.0125,  0.1706,  0.1084, -0.1580, -0.0227,  0.0972, -0.1550,  0.1485,
        -0.0946,  0.0096, -0.1096,  0.1597,  0.1786,  0.0244, -0.1397,  0.1107,
         0.0263,  0.0513,  0.1193, -0.1008, -0.0430,  0.0629, -0.0804, -0.1387,
        -0.1780,  0.1236,  0.0354,  0.1082, -0.0641,  0.1074, -0.0397,  0.0782,
         0.0883, -0.0846, -0.1790, -0.1002,  0.0321, -0.1759,  0.1469, -0.0350,
        -0.0949,  0.0154, -0.1392,  0.1253,  0.1726, -0.1007,  0.0601,  0.1019,
        -0.1723, -0.0379, -0.0777, -0.1264, -0.0795,  0.0793,  0.0726,  0.1196,
        -0.0430, -0.0253,  0.0665, -0.1131, -0.0929, -0.0885, -0.0814, -0.0230,
        -0.1150,  0.0734,  0.0372,  0.1233, -0.1627,  0.1718,  0.0918, -0.0111,
         0.0545, -0.1477,  0.1074,  0.1433,  0.0978,  0.1642,  0.1390,  0.1145,
        -0.1535,  0.0133,  0.1598,  0.1576, -0.1317,  0.0750, -0.1551, -0.1426],
       device='cuda:0')
recurrent_blocks.3.weight_ih_l0 tensor([[ 0.1064, -0.0195, -0.0127,  ..., -0.0884, -0.1783,  0.1338],
        [-0.0951,  0.1314,  0.0949,  ...,  0.1066,  0.0100,  0.0897],
        [ 0.0869, -0.1274,  0.0005,  ..., -0.0523,  0.1170, -0.1414],
        ...,
        [ 0.1732, -0.0373,  0.0543,  ...,  0.0086,  0.1852, -0.0301],
        [ 0.1795, -0.0066,  0.0070,  ...,  0.1012,  0.1504,  0.1447],
        [-0.1161,  0.1041,  0.0957,  ..., -0.0278, -0.0475,  0.0159]],
       device='cuda:0')
recurrent_blocks.3.weight_hh_l0 tensor([[ 0.0426, -0.1051,  0.0268,  ..., -0.1498,  0.0704, -0.1201],
        [-0.0244, -0.0418, -0.0964,  ..., -0.0744, -0.1231,  0.0691],
        [ 0.1127, -0.1632, -0.1187,  ...,  0.0409,  0.1085,  0.1226],
        ...,
        [ 0.0899, -0.0146,  0.0484,  ..., -0.0335, -0.1852, -0.1645],
        [-0.0895, -0.1782, -0.1626,  ...,  0.0061,  0.0327,  0.0729],
        [-0.0012, -0.1306, -0.0264,  ...,  0.0498,  0.1059,  0.1505]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0 tensor([-0.0715, -0.0430, -0.0965, -0.1246, -0.1785,  0.1043,  0.1822,  0.1338,
        -0.0680,  0.1146, -0.0684, -0.0171, -0.0225,  0.1474,  0.0508, -0.1138,
        -0.0671, -0.1575, -0.0656, -0.1191, -0.0651,  0.0269, -0.1001, -0.1413,
         0.0212, -0.0811, -0.1623,  0.1472, -0.0075, -0.0155,  0.0885,  0.1728,
         0.0964, -0.0309,  0.0511, -0.1678, -0.0987,  0.0043, -0.1544, -0.0311,
        -0.0322, -0.1750,  0.0628,  0.1246, -0.1446,  0.1623, -0.1568, -0.0640,
         0.1175,  0.1375, -0.0486, -0.0224,  0.1310,  0.1496,  0.0106, -0.0086,
        -0.1230, -0.0057, -0.1546,  0.1666,  0.0395,  0.1594,  0.0838,  0.1003,
        -0.1513, -0.1375,  0.0912, -0.0522, -0.1614,  0.0022,  0.0653, -0.0874,
         0.1317,  0.1034,  0.0598, -0.0451,  0.0245,  0.1315, -0.0193,  0.1351,
        -0.1186, -0.1419,  0.0690,  0.1193,  0.0623, -0.1275,  0.1554, -0.0086,
        -0.0535,  0.0806,  0.1103,  0.1312, -0.0602, -0.0177, -0.0477, -0.1524,
        -0.0405, -0.0442, -0.1192,  0.1053, -0.1254,  0.0974, -0.0003, -0.0988,
        -0.1223,  0.0962, -0.0633,  0.0013,  0.1493, -0.0843,  0.1091, -0.1234,
        -0.1152,  0.1025,  0.1253,  0.1843,  0.1296, -0.1321, -0.0237,  0.1611,
        -0.0466,  0.0024, -0.1526,  0.0149,  0.0905, -0.0895,  0.0703,  0.1815],
       device='cuda:0')
recurrent_blocks.3.bias_hh_l0 tensor([ 0.0880,  0.1763, -0.1224, -0.0605, -0.0184, -0.1471,  0.1750,  0.1604,
        -0.1274,  0.0599,  0.0710, -0.0835,  0.1174,  0.0058, -0.0492, -0.0369,
         0.0757, -0.0182,  0.0561,  0.1518, -0.1124, -0.0042,  0.0627,  0.0778,
         0.0845, -0.1044,  0.1192,  0.0056,  0.0757, -0.1503,  0.0587,  0.0605,
        -0.0176,  0.1520, -0.0776,  0.1079, -0.1217, -0.1750,  0.1614,  0.1502,
        -0.1513, -0.0824, -0.0004, -0.0797, -0.0743, -0.0483, -0.0536, -0.1179,
        -0.1744,  0.0746,  0.0628, -0.1400, -0.1306, -0.0837,  0.0641,  0.1701,
         0.1397,  0.0047,  0.1788,  0.0788, -0.0239, -0.1858, -0.0140,  0.1457,
         0.0722,  0.1040, -0.0599, -0.0787, -0.0631,  0.1022, -0.1187,  0.1200,
        -0.1125,  0.0806,  0.0234,  0.1269, -0.0073,  0.1177,  0.0884,  0.0717,
        -0.0220,  0.0186,  0.1660,  0.0079, -0.0866, -0.0790,  0.0624,  0.1613,
         0.1434, -0.1406, -0.0698,  0.1080, -0.0290,  0.0798,  0.1499,  0.1287,
        -0.1198, -0.0711,  0.1234, -0.0435,  0.0172, -0.0181, -0.0969,  0.1224,
        -0.0129,  0.1347,  0.1436, -0.1486,  0.0484, -0.1104,  0.1057,  0.0721,
         0.1129, -0.0971,  0.1034, -0.1157,  0.1128, -0.0580,  0.0148,  0.0099,
        -0.1248,  0.0510,  0.1818, -0.1680,  0.1191,  0.1356,  0.0999, -0.1510],
       device='cuda:0')
recurrent_blocks.3.weight_ih_l0_reverse tensor([[ 0.1006,  0.1385,  0.1042,  ...,  0.0190, -0.0768,  0.1648],
        [ 0.1657, -0.1536, -0.1472,  ...,  0.1378,  0.1017,  0.0096],
        [-0.1407, -0.0289, -0.0152,  ..., -0.1009,  0.1336, -0.0300],
        ...,
        [ 0.0809, -0.0901,  0.0575,  ...,  0.1102,  0.1154,  0.0338],
        [ 0.0267, -0.1173,  0.1603,  ..., -0.0692,  0.0448, -0.0061],
        [-0.0176, -0.1089,  0.1545,  ...,  0.1152, -0.0983,  0.0636]],
       device='cuda:0')
recurrent_blocks.3.weight_hh_l0_reverse tensor([[ 0.1106,  0.1593, -0.1078,  ...,  0.0477, -0.0529,  0.1290],
        [-0.0407, -0.0190,  0.0423,  ..., -0.0791,  0.1829, -0.1384],
        [ 0.0419,  0.1441, -0.1349,  ...,  0.1457, -0.1473, -0.1823],
        ...,
        [ 0.1826,  0.0096, -0.1435,  ..., -0.0353,  0.0242, -0.0800],
        [-0.1009,  0.0386,  0.0265,  ..., -0.0587,  0.1408, -0.1779],
        [ 0.0488, -0.0483, -0.1244,  ..., -0.0807,  0.1045,  0.1800]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0_reverse tensor([ 0.1010,  0.0870,  0.0681, -0.1190,  0.0010,  0.0978, -0.0333, -0.1160,
        -0.0476, -0.1046,  0.1676, -0.0378,  0.0584,  0.0762,  0.0565,  0.1433,
         0.0539, -0.1856,  0.1530, -0.0343,  0.0337,  0.0643, -0.1218, -0.0712,
        -0.1390, -0.1451, -0.1646, -0.1589, -0.0776, -0.0295,  0.1407, -0.0501,
        -0.1606,  0.0037, -0.0041, -0.0759,  0.0477,  0.0689, -0.0240,  0.0081,
        -0.0883, -0.0979, -0.1284, -0.0216,  0.0708,  0.1592,  0.1488,  0.0154,
        -0.0952,  0.1391,  0.1198,  0.0879, -0.1461,  0.1207,  0.0611,  0.1724,
        -0.1367,  0.1542, -0.0678,  0.0347, -0.1594,  0.0482,  0.1059, -0.0325,
         0.0561, -0.1586, -0.1836, -0.0607, -0.0829, -0.0041,  0.0159, -0.0123,
         0.0274,  0.0841,  0.0340, -0.0916,  0.0583, -0.1232, -0.0756, -0.0133,
         0.1373,  0.0015,  0.0566,  0.0798, -0.1480,  0.0572, -0.1370, -0.0350,
        -0.0788, -0.1151, -0.1458,  0.0218, -0.0353,  0.0308,  0.0768, -0.0519,
         0.0052, -0.0162,  0.0818, -0.0185, -0.0221,  0.1544,  0.0445,  0.1298,
        -0.0230, -0.1555, -0.0330, -0.1042,  0.0466, -0.0513, -0.0829,  0.1409,
        -0.1694,  0.1211,  0.0508, -0.1436,  0.1310,  0.1324, -0.0061, -0.0343,
         0.0865,  0.0905, -0.0718, -0.0495,  0.0423, -0.1290,  0.0336, -0.0244],
       device='cuda:0')
recurrent_blocks.3.bias_hh_l0_reverse tensor([ 2.1769e-02,  1.1875e-01, -1.5025e-01,  6.8997e-02, -1.6311e-01,
         1.2717e-01, -7.8487e-02, -1.2574e-04, -7.1189e-02, -3.1314e-03,
         1.0660e-01,  8.1889e-02, -1.0750e-01,  6.4535e-02,  8.0485e-02,
         6.0791e-02, -9.3291e-02,  9.1445e-02,  1.0854e-01, -1.2082e-01,
         1.1564e-01, -7.9278e-02,  1.3391e-02, -3.1702e-02,  1.1255e-01,
        -9.4518e-02, -1.1452e-01,  1.7349e-01,  6.3439e-02,  7.7897e-02,
         3.2691e-02,  4.8097e-02,  4.8060e-02,  3.2892e-02, -1.6626e-01,
        -1.4506e-01,  7.1441e-02, -6.4814e-02,  1.0020e-01,  1.8224e-01,
         1.6604e-01,  1.6353e-01, -1.3375e-01,  3.0417e-02, -8.3797e-02,
        -4.0963e-02,  1.7422e-01, -1.0195e-01,  6.0650e-02,  1.2861e-02,
        -4.5502e-02,  3.6652e-02, -1.5634e-01, -6.2080e-02, -8.9603e-02,
        -1.3807e-02, -1.0918e-01, -3.5021e-02,  6.3831e-02,  1.5504e-01,
        -9.2451e-02,  8.5914e-02,  2.3064e-02, -1.4800e-01,  1.0288e-02,
         1.1786e-01,  6.5187e-02, -1.0372e-02, -1.5927e-01,  1.4196e-01,
         1.6983e-01,  4.2200e-02,  1.2192e-01,  3.7589e-02, -3.0122e-02,
         5.6523e-02,  1.5625e-01, -7.0375e-02,  1.6843e-01, -5.9056e-02,
        -9.1100e-02,  3.8900e-02,  5.3016e-02, -1.4752e-01, -3.9044e-02,
         8.1219e-02, -3.4614e-02,  1.1069e-01,  7.8729e-02,  1.4247e-01,
        -1.4250e-01, -3.3284e-02,  1.5166e-01,  1.3257e-01,  9.2214e-02,
         4.1770e-02, -1.0135e-01, -1.1631e-01,  1.3836e-01, -6.3480e-02,
        -9.3079e-02, -1.1091e-01,  7.4517e-02, -5.5815e-02,  5.1273e-02,
        -3.3469e-02,  9.4517e-02,  1.5834e-01,  4.5840e-02,  4.7277e-02,
         2.6071e-03, -1.1467e-01, -1.6284e-01, -7.7104e-02, -8.3226e-02,
        -1.5576e-01, -1.0256e-01, -4.1084e-02, -1.1688e-01, -1.5841e-01,
         9.7760e-02, -1.5758e-02, -2.3462e-02, -8.8002e-02,  3.2655e-02,
        -1.7315e-01, -9.4902e-02,  1.1409e-01], device='cuda:0')
fc_blocks.0.0.weight tensor([[-0.0269, -0.0500, -0.0275,  ..., -0.0126, -0.0418, -0.1066],
        [ 0.0117, -0.0726,  0.0629,  ...,  0.0753,  0.0285, -0.0626],
        [-0.0982,  0.0675, -0.0063,  ..., -0.0794, -0.0388, -0.0948],
        ...,
        [ 0.0585, -0.1073, -0.0044,  ...,  0.0807,  0.0722,  0.0059],
        [-0.0248, -0.0999, -0.0872,  ...,  0.1138,  0.1191,  0.0990],
        [ 0.0801, -0.0796, -0.0064,  ..., -0.0828, -0.0175, -0.0401]],
       device='cuda:0')
fc_blocks.0.0.bias tensor([-0.1209, -0.0905, -0.1298,  0.0876,  0.1320, -0.0038, -0.0751,  0.0380,
        -0.0837,  0.0364,  0.0949, -0.0601,  0.0324, -0.1338, -0.0375,  0.1279,
         0.0898,  0.1065,  0.0583, -0.0264, -0.0794, -0.0275,  0.0609, -0.0547,
        -0.0873, -0.0949,  0.1084,  0.0646, -0.0265,  0.0082,  0.1269,  0.0913],
       device='cuda:0')
fc_blocks.1.0.weight tensor([[-0.0328,  0.0833,  0.1443,  0.0065, -0.1312,  0.0792,  0.1227,  0.0851,
          0.0388,  0.0248,  0.1661,  0.1235,  0.1527,  0.1249,  0.0911, -0.0068,
          0.0032, -0.0518, -0.0705, -0.0830,  0.1266, -0.1244, -0.0922, -0.1778,
         -0.1679, -0.0378,  0.1088,  0.0651, -0.0239, -0.0305, -0.0805, -0.1473],
        [-0.1398,  0.0774, -0.0666, -0.1575,  0.1471, -0.0398,  0.0034, -0.0227,
          0.0528,  0.1364, -0.1395, -0.0627,  0.0271,  0.0361,  0.1275, -0.0435,
         -0.1175,  0.0415, -0.0757, -0.0398, -0.1168,  0.1780, -0.0070, -0.0364,
          0.0910,  0.1545,  0.1326, -0.0873, -0.0393, -0.0239, -0.0583, -0.0504],
        [ 0.0133, -0.0243,  0.1265, -0.1587, -0.0457, -0.0808, -0.1455,  0.0618,
         -0.1497,  0.1102,  0.1462, -0.1108,  0.1689,  0.1576,  0.0715, -0.1622,
          0.1084, -0.0258, -0.0438, -0.0957, -0.1358,  0.1826,  0.0272, -0.1568,
          0.1714, -0.0051,  0.1846,  0.0940,  0.1541, -0.0465,  0.0166,  0.0804],
        [-0.0880,  0.0864,  0.0681, -0.1335,  0.0485,  0.1265,  0.0788, -0.1099,
          0.0535, -0.1206, -0.0445,  0.1244, -0.0237,  0.0239, -0.0652, -0.1459,
         -0.1004,  0.0236, -0.1669,  0.0546, -0.0111,  0.1007, -0.0556,  0.0425,
          0.1354,  0.0405, -0.1206, -0.0362,  0.1027,  0.0956, -0.0674,  0.0469],
        [-0.0321,  0.0094, -0.0950, -0.1306,  0.1548,  0.1212,  0.0988,  0.1832,
          0.0140,  0.1454, -0.0907,  0.0356, -0.0709, -0.1032,  0.0832,  0.1281,
         -0.0460, -0.1373, -0.0507,  0.0399, -0.0832,  0.1495,  0.1614, -0.0802,
         -0.0909,  0.1186, -0.0862,  0.0626,  0.0557, -0.1115, -0.0129,  0.1041],
        [-0.0511,  0.0893,  0.1043, -0.1561, -0.1668, -0.0501,  0.1224,  0.1211,
          0.0943, -0.0085,  0.1775,  0.1212, -0.0949, -0.0827,  0.1797,  0.0349,
          0.1722,  0.0788, -0.0624, -0.0476, -0.1012, -0.0864,  0.1502, -0.0451,
         -0.1541,  0.1613,  0.0543,  0.0280,  0.0028, -0.0561, -0.1001,  0.1395],
        [ 0.1229, -0.1681, -0.0246, -0.0263, -0.1523, -0.1672,  0.0707,  0.0840,
         -0.0350, -0.0716,  0.1253, -0.1698,  0.1412,  0.0578, -0.0420,  0.1540,
          0.0749,  0.0983, -0.0465,  0.0539, -0.0877, -0.1580, -0.0942,  0.1424,
          0.0930, -0.1469,  0.0030, -0.1269,  0.1267, -0.1477, -0.0146, -0.1105],
        [-0.0090, -0.0864,  0.0655, -0.0675,  0.1489, -0.1617, -0.0325,  0.0461,
         -0.0067,  0.0358,  0.1271,  0.0039, -0.0766, -0.0689,  0.0806,  0.1597,
          0.1405,  0.0366, -0.0694, -0.0431, -0.0154,  0.1597, -0.0858,  0.0634,
          0.0793, -0.0075, -0.0084,  0.0147, -0.0843, -0.1056, -0.0292,  0.0919],
        [-0.1819,  0.0186,  0.1448, -0.0876, -0.0420,  0.1625, -0.0832,  0.0805,
         -0.0168, -0.1228, -0.0490, -0.1098, -0.0546,  0.1367, -0.0835, -0.0904,
          0.0461, -0.0198, -0.0675,  0.0634, -0.1244,  0.0608,  0.0086, -0.1349,
          0.1413, -0.1057,  0.1083,  0.0719, -0.0341,  0.1052, -0.1286, -0.0613],
        [-0.0277, -0.1300, -0.0440, -0.0597, -0.0366,  0.0420,  0.1779,  0.1023,
          0.0871,  0.0115, -0.0737, -0.0778, -0.1602, -0.0443, -0.0443,  0.1271,
         -0.1591, -0.0050,  0.0202,  0.0545, -0.0872, -0.1118,  0.0385,  0.1635,
         -0.0781,  0.0692, -0.1405,  0.0217,  0.0612,  0.1734,  0.0226,  0.1194],
        [-0.0298, -0.0311,  0.0210,  0.1014,  0.0155, -0.0421,  0.1237, -0.0014,
         -0.0060, -0.0154, -0.1077,  0.0596, -0.1181, -0.1451, -0.1486,  0.1441,
         -0.0184, -0.0556, -0.0316,  0.1651,  0.0270, -0.1631, -0.1328,  0.1277,
         -0.0346,  0.0117, -0.0335, -0.0413,  0.1175,  0.0085,  0.1697,  0.1700],
        [ 0.0488, -0.1218, -0.1510,  0.1426, -0.1330,  0.0941,  0.1535,  0.0855,
          0.1293, -0.0735, -0.0914,  0.1560,  0.1464,  0.0442,  0.0392,  0.0158,
          0.0572,  0.0680,  0.0418,  0.0594,  0.0467, -0.0662,  0.1365,  0.0789,
          0.0417,  0.1170, -0.0070,  0.1635, -0.0437,  0.1843, -0.1192,  0.0111],
        [-0.1210,  0.1427,  0.0988, -0.1568, -0.1829,  0.0070,  0.1292,  0.0341,
          0.0296,  0.1113, -0.0720, -0.1340, -0.0427, -0.1436,  0.0479, -0.1521,
         -0.0889,  0.0335,  0.1728,  0.0595,  0.1407, -0.1121, -0.1843, -0.1462,
          0.1017, -0.1280,  0.1064, -0.0629, -0.0120, -0.0300, -0.1187, -0.1005],
        [ 0.0905,  0.1510,  0.0968, -0.1693,  0.0134,  0.0820,  0.1634,  0.0224,
         -0.1293,  0.1574, -0.1707,  0.1393,  0.0559, -0.1765, -0.0514, -0.1594,
          0.0984, -0.1442, -0.0507, -0.1028,  0.1268, -0.0165,  0.1196, -0.1197,
         -0.1656, -0.0882, -0.1192, -0.0740, -0.1164, -0.0489, -0.1170,  0.1108],
        [ 0.0369,  0.1853,  0.1013,  0.1826,  0.1695, -0.0046,  0.0194, -0.0573,
          0.1790, -0.0338,  0.1641,  0.0412,  0.0895,  0.0594, -0.1193,  0.0821,
         -0.0500,  0.1407,  0.0307,  0.0464, -0.0543, -0.0757,  0.1803,  0.1298,
          0.1342, -0.0618, -0.1242, -0.1725, -0.1655,  0.0110,  0.0926,  0.1694],
        [-0.0068, -0.1421,  0.1598,  0.0338,  0.1622, -0.1236, -0.0511,  0.1562,
         -0.0762, -0.0254,  0.0706,  0.0678, -0.1319, -0.0781,  0.0175,  0.1407,
          0.1440, -0.1818, -0.1181, -0.0032,  0.0722,  0.1218,  0.0351, -0.1272,
          0.1282, -0.0610,  0.0097, -0.0482, -0.1041,  0.0965,  0.0197, -0.0613]],
       device='cuda:0')
fc_blocks.1.0.bias tensor([-0.1289, -0.0943,  0.1019,  0.0284, -0.0579, -0.1551, -0.1597, -0.0318,
         0.0563,  0.0150, -0.1314,  0.1359,  0.1423,  0.1570,  0.0792, -0.0306],
       device='cuda:0')
fc_blocks.2.0.weight tensor([[-2.3776e-01, -3.5103e-02,  1.5615e-01,  7.4889e-02, -2.0235e-01,
         -7.6613e-02,  2.1161e-01, -2.2343e-03, -8.6515e-02, -1.6993e-01,
         -1.2906e-01, -2.1259e-01, -2.0588e-01,  8.5058e-02, -3.8362e-02,
         -4.6571e-02],
        [-1.2030e-01,  2.5197e-02, -2.5628e-01, -2.5905e-01,  1.0425e-01,
          1.5131e-01, -2.3926e-01, -2.4441e-01, -1.5488e-01,  1.7164e-01,
         -7.5645e-02,  1.3105e-01, -1.3352e-01,  1.4993e-01,  2.0319e-01,
          1.4931e-02],
        [-1.3664e-02,  1.5283e-01,  1.6729e-01, -1.5369e-01,  5.4301e-02,
         -3.8909e-02,  1.2791e-01,  1.5698e-01, -8.1829e-02,  2.4809e-01,
         -1.6726e-01,  1.3616e-01, -2.4444e-01, -1.9284e-01,  1.2858e-01,
         -1.5277e-01],
        [ 1.8649e-01,  1.1842e-01, -1.2009e-01,  7.2646e-02,  2.2918e-02,
          1.6789e-01, -1.6437e-01, -6.1286e-02,  9.9518e-02,  2.3947e-01,
         -2.3309e-01, -2.0603e-01, -1.9164e-01, -1.9545e-01,  1.9707e-01,
          8.0861e-02],
        [ 1.8851e-01,  4.0884e-02, -2.7554e-02,  1.7230e-01, -8.5930e-02,
         -1.4833e-04,  1.9491e-01,  9.3678e-02,  1.5108e-01, -1.3071e-01,
         -1.5653e-01, -1.4308e-01, -9.4532e-02,  5.8817e-02, -9.5374e-02,
          6.0247e-02],
        [ 3.0364e-02, -1.4578e-03,  1.1064e-01, -4.2722e-02,  1.8422e-01,
          2.2855e-01,  1.1620e-01,  1.8337e-01, -2.9576e-03, -1.7774e-01,
         -1.4793e-01,  2.9060e-02,  6.2053e-02, -9.7299e-02,  4.3502e-02,
          2.8801e-02],
        [ 2.2575e-01, -3.0911e-02,  1.2126e-01,  7.0338e-02,  3.7700e-02,
         -5.4531e-02, -1.4336e-01, -1.7481e-01,  8.2659e-02,  1.2769e-01,
         -1.2877e-02, -1.3282e-01,  9.3424e-02, -2.2291e-01, -2.2674e-01,
          1.3012e-01],
        [-1.9633e-01,  1.8222e-01,  2.4112e-01, -8.8634e-02,  8.6999e-02,
          2.5214e-01, -2.7309e-02,  1.7679e-02,  1.2263e-01,  1.4805e-01,
         -6.0200e-02,  1.6348e-01,  2.0671e-01, -1.1530e-01, -1.7093e-01,
         -2.1473e-01]], device='cuda:0')
fc_blocks.2.0.bias tensor([ 0.2378, -0.1162, -0.1182, -0.0123,  0.0487,  0.1945, -0.0681,  0.2437],
       device='cuda:0')
fc_blocks.3.0.weight tensor([[ 0.0541,  0.0666, -0.1509,  0.0299, -0.3603, -0.3159,  0.2692, -0.2695],
        [ 0.2650,  0.3029, -0.0120, -0.3290,  0.2039,  0.0077,  0.0609,  0.1119],
        [-0.0990, -0.2680,  0.0329, -0.0317,  0.1166, -0.1683,  0.1346, -0.2733],
        [ 0.1578, -0.2018,  0.0244, -0.2160, -0.0263,  0.0061, -0.1476, -0.2277]],
       device='cuda:0')
fc_blocks.3.0.bias tensor([-0.0731, -0.1532, -0.2145, -0.3045], device='cuda:0')
fc_blocks.4.0.weight tensor([[-0.0304, -0.4668, -0.3672,  0.0024]], device='cuda:0')
fc_blocks.4.0.bias tensor([-0.1545], device='cuda:0')
h tensor([[[[ 0.5218, -0.5077,  0.8858,  ..., -0.5445,  0.3429,  0.1433],
          [-1.1199, -0.3811,  0.1032,  ...,  2.4424, -0.7208,  0.1462],
          [ 0.1093, -0.7003, -0.2945,  ...,  1.0745, -2.3419, -0.3373],
          ...,
          [ 0.3601,  0.7543,  0.5276,  ..., -1.7852,  0.1754,  0.4483],
          [ 1.8247,  0.6915,  0.8665,  ...,  0.2061, -0.2696, -0.7655],
          [-1.9708, -0.6403,  0.7066,  ..., -0.9409,  0.8246, -0.6213]],

         [[ 1.1357,  0.1447, -0.1562,  ..., -0.3820,  1.0951, -1.5812],
          [-0.9935,  0.6813, -0.7417,  ...,  0.1044, -0.6885,  0.1712],
          [-0.8460, -0.3302,  0.4982,  ..., -0.6147,  0.0845,  0.6132],
          ...,
          [ 0.8962,  0.6482,  0.3496,  ..., -0.1583, -0.8273, -0.4023],
          [-0.6653, -0.7051, -1.2513,  ..., -0.1229,  1.9360, -0.6677],
          [ 1.8216,  1.0691, -0.7842,  ...,  0.6830, -0.4666, -1.4069]]],


        [[[-1.4258, -0.5810, -0.2385,  ..., -1.5179, -0.0798,  0.0589],
          [-1.9164, -0.2479, -0.1720,  ..., -0.9383,  0.2468,  0.4198],
          [-0.7339,  0.2893, -0.0648,  ...,  0.2918, -0.9265,  0.5226],
          ...,
          [ 1.2801,  0.5921, -0.9335,  ..., -1.3967,  0.1096,  0.4021],
          [ 0.5279, -1.6687, -0.9006,  ..., -1.1761,  0.7973, -0.5323],
          [-0.2954,  0.0654,  0.2209,  ..., -0.6146, -0.9896,  0.2817]],

         [[-0.1980, -0.8150, -0.3969,  ...,  0.7319,  0.3532, -0.8881],
          [ 0.3492,  0.2932,  1.2037,  ..., -0.7402,  1.0225, -0.9487],
          [ 0.0985, -1.4607,  0.4073,  ..., -0.7290,  0.3683,  0.6920],
          ...,
          [ 0.0508,  1.1984,  0.0764,  ..., -0.2007,  1.4618, -0.2018],
          [ 0.8479, -2.3823,  0.3121,  ...,  0.6443, -0.7343, -0.6514],
          [-0.4459,  0.5705,  0.4954,  ...,  1.9169,  0.8841, -0.5288]]],


        [[[-0.0383, -0.8878, -0.3789,  ..., -0.7887,  1.5519,  0.2782],
          [ 0.9135,  1.9790, -2.5619,  ..., -1.0481, -0.2863, -2.2185],
          [-0.0515,  1.4116,  0.4798,  ..., -0.3516, -0.6716, -0.2846],
          ...,
          [ 0.8994, -0.3031, -2.5906,  ..., -0.5949,  0.8987, -1.0807],
          [ 2.3340, -0.2371, -0.8995,  ...,  0.4332, -0.1504,  0.6338],
          [ 0.1527, -1.5061, -0.4123,  ...,  0.3983,  0.7251, -0.2174]],

         [[ 0.4583,  1.8864,  0.4301,  ...,  0.1011,  1.4829, -1.1357],
          [-0.5668, -0.7617, -1.4469,  ..., -1.2674,  0.4586, -0.2712],
          [-1.0292, -0.6892, -3.0012,  ..., -0.3040, -0.8145,  1.0456],
          ...,
          [-0.0666,  0.5385, -0.1822,  ...,  1.9494,  0.1722,  0.6902],
          [ 1.0952, -1.1982, -0.2501,  ..., -1.5634, -0.6007, -0.1059],
          [ 0.1359, -0.2134, -0.9713,  ..., -0.9098, -1.0359, -0.8602]]],


        [[[ 2.2054,  1.0119, -1.3479,  ...,  0.8763,  0.1738,  0.8355],
          [-1.1564,  0.0565,  0.5712,  ...,  0.3034,  0.0641, -0.0662],
          [ 1.3545,  0.4111, -0.8265,  ..., -0.0298, -0.5133,  0.1687],
          ...,
          [ 0.2682, -0.0159,  1.1747,  ..., -0.2134, -0.6539, -2.1223],
          [ 0.8059,  0.0709, -0.9223,  ...,  0.3880, -1.7205,  0.0681],
          [ 1.0537,  0.2536,  0.4816,  ..., -0.9486, -1.0192, -1.1581]],

         [[ 1.4460,  1.4301,  0.7949,  ...,  0.2480,  0.4467,  0.9221],
          [-1.0947, -0.5185,  0.1058,  ..., -1.8879, -1.3244, -0.1749],
          [-0.0711, -0.2582,  0.5459,  ...,  2.0549,  0.1517, -1.6308],
          ...,
          [-0.1204,  0.8152,  0.1631,  ..., -0.0936, -0.9678,  0.5312],
          [ 0.2034, -0.6965, -0.6975,  ..., -1.6295, -1.5930,  0.5556],
          [ 0.1321, -0.1503, -1.0791,  ..., -0.0511, -0.3393, -1.3506]]]],
       device='cuda:0')
c tensor([[[[ 0.8997,  0.1249,  0.4729,  ...,  1.5168,  0.4731,  0.3420],
          [-0.5167, -0.4639,  0.5871,  ..., -2.1798,  0.8221,  0.2582],
          [ 2.6896, -0.9203,  0.7346,  ..., -0.8023,  0.2886, -1.6654],
          ...,
          [ 0.8483, -2.7003,  0.3623,  ..., -0.9676, -1.3246, -0.3706],
          [-1.5184, -1.5453, -1.3671,  ...,  1.3944, -0.9966,  0.2571],
          [-0.9409,  0.2737,  2.7135,  ..., -0.7080, -0.7587,  0.0407]],

         [[ 1.2124, -0.5665, -0.9390,  ...,  0.5945,  1.2052, -0.4600],
          [ 0.6170, -2.0249, -0.3179,  ...,  0.1478, -0.4721,  0.8670],
          [ 0.5835, -1.7051, -2.0075,  ...,  0.8338, -0.4770,  1.6562],
          ...,
          [-1.2713,  0.8281, -1.4790,  ...,  0.2540, -1.1570,  0.3260],
          [-0.1517, -0.0049,  0.1754,  ...,  0.4500, -1.2305,  2.5672],
          [ 0.0832, -0.4403,  1.5742,  ...,  1.5533, -0.8099,  0.3605]]],


        [[[-2.8051, -0.2415, -0.2984,  ...,  2.0559, -0.8433,  0.0181],
          [ 0.7338,  0.4045, -2.3306,  ...,  0.4235, -1.7335,  0.7268],
          [ 0.7005, -0.5996,  0.0842,  ...,  0.0409,  0.4402,  0.3818],
          ...,
          [-1.5009,  0.1645, -0.2130,  ...,  0.6274, -0.8868,  1.1626],
          [-1.4267,  1.9081, -0.4308,  ..., -0.1854, -2.6456, -0.7855],
          [-0.6256, -0.0992,  0.3999,  ..., -0.1708, -0.4840, -0.1152]],

         [[ 0.3821, -0.8534,  1.5598,  ..., -2.4601, -0.6451, -0.7708],
          [-0.0262,  0.7448, -0.0769,  ...,  0.0513, -1.3186, -2.0560],
          [-0.2925,  0.3839,  0.5104,  ...,  0.6133,  0.8385, -2.1330],
          ...,
          [-0.4897,  1.1796,  0.8108,  ...,  0.8962, -0.8871,  0.6374],
          [ 0.4803, -1.1352,  0.3812,  ..., -0.3985, -0.5925, -0.0333],
          [ 0.2378,  0.2392,  1.5386,  ..., -0.7999,  0.9696, -2.6166]]],


        [[[-2.0339,  0.2324, -0.2265,  ..., -0.0795, -1.7881, -3.0587],
          [ 0.8265,  0.6720,  0.6106,  ..., -0.4570,  0.2664,  0.0614],
          [-1.3098,  0.0539,  0.2397,  ...,  1.1496, -1.3051,  2.7271],
          ...,
          [ 0.4327, -0.2047, -1.6368,  ...,  0.2581, -0.3436,  0.1417],
          [-1.2117, -0.0648, -0.5731,  ...,  0.8197, -0.3180,  2.0017],
          [-0.2011,  0.2436, -0.9680,  ..., -0.4507,  0.9200, -0.1369]],

         [[-1.6239, -1.2101,  0.5757,  ..., -1.5505, -1.0395,  1.2355],
          [ 0.1899, -0.8603, -0.9416,  ..., -1.4759,  0.8419, -0.5757],
          [ 1.5344,  0.0649,  0.3616,  ...,  1.2701,  0.5946,  0.0167],
          ...,
          [-0.0585, -0.8089,  1.2988,  ...,  0.5868, -0.2466, -1.4559],
          [-2.0138, -1.3152, -0.5886,  ..., -1.1220, -0.0385, -1.1995],
          [ 0.4857, -0.5031,  0.0440,  ...,  0.0553,  0.3071,  0.6167]]],


        [[[-0.2428, -0.5661, -0.5796,  ..., -0.8672, -0.7674,  1.5575],
          [ 0.2212,  1.2823,  0.7510,  ..., -1.6797, -2.1225, -2.7246],
          [ 2.1742, -1.0333, -1.1481,  ...,  1.6888, -0.8233, -0.4213],
          ...,
          [-0.5559, -0.8308, -1.0667,  ...,  1.1955,  0.2231, -0.1113],
          [ 2.0541,  0.0181, -1.4593,  ...,  2.1342,  1.6932, -0.8565],
          [-0.7965,  0.6644,  0.8166,  ..., -0.4582, -0.3582,  0.7211]],

         [[-0.3137, -0.3417,  0.4188,  ..., -0.9012, -1.8926, -0.2901],
          [ 0.6605,  0.1335, -0.6215,  ..., -0.0369, -1.9368, -1.3547],
          [-1.4586, -0.5521, -0.7001,  ..., -0.1682,  0.9140,  0.2222],
          ...,
          [-1.0627,  2.0147, -0.2154,  ..., -1.2942,  0.1852,  2.3009],
          [-0.9387, -1.6958, -0.0530,  ..., -0.4049, -0.7170,  0.5145],
          [ 0.4302, -0.3550,  0.3027,  ...,  0.2729,  0.0186, -1.0062]]]],
       device='cuda:0')
recurrent_blocks.0.weight_ih_l0 tensor([[-1.8591e-01, -9.1221e-02,  1.1176e-01],
        [ 1.4936e-01, -1.0195e-01,  1.5142e-02],
        [-1.2038e-01,  1.5458e-01,  1.3429e-01],
        [ 4.8084e-02,  6.4498e-02,  1.2362e-01],
        [-1.3654e-01, -1.6549e-01,  1.2711e-01],
        [ 8.4467e-02,  3.5695e-02,  1.0860e-01],
        [-5.9289e-03, -1.5964e-01,  1.0547e-01],
        [-1.4490e-01, -1.1285e-02, -9.6256e-02],
        [ 1.2748e-01,  2.3719e-02, -1.1004e-01],
        [-1.6751e-01, -3.8113e-02,  5.7825e-02],
        [-1.1002e-01, -7.7997e-02, -1.7887e-01],
        [-1.5399e-01, -6.2730e-05, -1.4346e-01],
        [-1.2531e-01, -6.2615e-02, -1.2168e-01],
        [ 4.4916e-02, -2.9622e-03, -8.1680e-02],
        [-8.4338e-02, -3.0062e-02, -1.8082e-02],
        [-1.3887e-01, -8.9585e-02, -7.6932e-02],
        [ 1.5363e-01,  1.5792e-01,  1.0108e-01],
        [ 5.4933e-03, -1.7982e-02,  6.9184e-02],
        [-1.5796e-01,  1.4018e-01,  1.2962e-03],
        [ 1.1016e-01,  1.1911e-01, -8.6060e-02],
        [-1.4609e-02, -1.0405e-01, -1.1418e-01],
        [-1.6434e-01, -1.6166e-01,  1.1631e-01],
        [-1.6216e-02,  1.5098e-01, -9.5926e-02],
        [ 8.7410e-02, -1.6127e-01, -5.7415e-02],
        [-9.3608e-02,  1.5992e-01,  1.8208e-01],
        [ 7.5234e-02, -3.9613e-02, -1.5798e-01],
        [-7.7803e-02,  5.0071e-02,  1.8081e-01],
        [-4.7130e-02, -3.5335e-02,  2.2400e-02],
        [-1.1013e-01,  1.2557e-01,  9.8798e-03],
        [-6.9843e-02, -4.6901e-02, -6.7588e-02],
        [ 1.4546e-01,  1.0232e-01, -3.3055e-02],
        [ 4.2896e-02, -9.4865e-02,  1.1224e-01],
        [ 1.3309e-03,  9.8221e-02, -1.1021e-01],
        [ 1.6294e-01, -6.8665e-02, -8.7080e-02],
        [ 4.5105e-02, -5.6038e-02,  1.2698e-01],
        [ 1.5067e-01,  4.3118e-03, -8.6367e-02],
        [-1.1336e-01,  8.6595e-02,  4.8409e-02],
        [ 4.9061e-02,  1.1786e-01,  3.5496e-02],
        [-4.2409e-02, -1.5537e-01, -9.0354e-02],
        [-1.4210e-01, -1.4534e-01, -1.0774e-01],
        [ 1.8083e-01,  4.3752e-02,  3.0376e-02],
        [-1.3230e-01, -5.6868e-02, -1.5392e-01],
        [-1.3926e-02,  1.7522e-01, -1.1314e-01],
        [ 3.4630e-02, -1.6593e-02, -1.5570e-02],
        [ 1.4631e-01,  2.9745e-02, -1.0164e-01],
        [-9.0258e-02, -2.9690e-02, -2.9510e-02],
        [ 8.2603e-02, -3.5637e-02, -1.1607e-01],
        [-8.4606e-02,  9.4103e-02,  9.6150e-02],
        [ 3.5521e-02,  1.3104e-01, -5.8364e-02],
        [-1.1843e-01, -2.7869e-02, -1.2358e-02],
        [-1.5146e-01,  1.0966e-02, -2.8024e-02],
        [-9.5191e-02,  1.4349e-01,  1.2640e-01],
        [-1.5598e-01, -5.9073e-02, -6.0159e-02],
        [ 7.3629e-03,  1.8652e-02, -3.3066e-02],
        [-1.6482e-01, -3.8880e-02,  4.5678e-02],
        [-6.2579e-02, -1.3656e-01,  4.0659e-02],
        [-2.5542e-02, -1.5902e-01, -5.5237e-02],
        [-3.4966e-02,  3.6743e-02, -5.7383e-02],
        [ 1.3234e-01,  1.1163e-01, -1.5575e-01],
        [ 4.8835e-02, -1.3242e-01,  6.9473e-02],
        [ 4.1600e-02,  6.0945e-02,  3.6694e-02],
        [ 3.8119e-02,  3.2150e-02, -9.6494e-02],
        [-1.6363e-01, -1.5748e-01,  8.0651e-02],
        [-1.7205e-01,  2.1982e-02,  6.8820e-02],
        [-2.8747e-02, -1.3564e-01, -9.0478e-02],
        [-8.7792e-02, -1.0953e-01,  1.5946e-01],
        [-1.2693e-01,  1.5811e-01, -1.1968e-01],
        [-1.6657e-01, -1.4084e-01,  6.3168e-02],
        [-1.5576e-01,  8.5272e-02, -1.6649e-01],
        [ 8.3252e-02,  1.1188e-01,  1.5566e-01],
        [-1.3142e-01,  4.4543e-02,  8.4154e-02],
        [-6.9411e-02,  7.2490e-02,  5.8503e-02],
        [-5.1423e-02, -3.3950e-02, -7.0944e-02],
        [-3.8012e-02,  1.6852e-01,  1.1947e-02],
        [ 9.4645e-02,  1.3978e-01, -6.9197e-02],
        [ 6.2632e-02,  7.2156e-02,  1.8162e-01],
        [-7.8596e-02,  1.0356e-01, -7.6955e-03],
        [-1.2618e-01,  1.0465e-01, -1.4368e-01],
        [-7.9629e-02,  8.8087e-02, -2.9016e-02],
        [ 2.6245e-03,  1.1333e-01, -3.4161e-02],
        [ 2.5426e-02,  4.9670e-02, -1.3783e-01],
        [-1.6310e-02,  2.4726e-02,  1.0019e-01],
        [-1.0684e-01,  3.9111e-02, -1.1170e-02],
        [ 3.1068e-02, -3.8034e-02,  1.0563e-01],
        [ 1.2149e-01,  2.8326e-02,  8.8397e-02],
        [-1.2957e-02, -2.1769e-02,  2.6423e-02],
        [ 1.5883e-01, -6.1425e-02,  1.5467e-01],
        [-3.3626e-04, -5.1218e-02,  6.4863e-02],
        [-6.8826e-02, -1.4717e-01,  1.2183e-01],
        [ 2.3864e-02, -3.3044e-02,  1.3033e-01],
        [ 7.2135e-02,  4.8254e-02, -1.6128e-01],
        [ 3.3837e-02,  8.5301e-02, -1.2755e-01],
        [ 9.0180e-03,  1.0786e-01, -1.6967e-01],
        [ 1.0814e-01, -5.5098e-02,  4.0032e-02],
        [ 1.6467e-01, -1.0050e-01,  1.0234e-02],
        [ 1.2793e-01, -5.5141e-03, -1.6757e-01],
        [ 4.2303e-02, -2.5913e-02, -1.4546e-03],
        [ 1.5564e-01,  1.2031e-01,  2.0151e-03],
        [-9.5079e-04,  1.2441e-01, -5.1914e-02],
        [ 1.0141e-01,  1.7514e-01, -1.1389e-01],
        [-5.9867e-02, -8.5383e-02,  7.5200e-02],
        [-1.1602e-01, -3.3724e-02, -6.8083e-02],
        [ 1.2479e-01,  3.5324e-02,  2.2322e-02],
        [ 1.1703e-01, -6.2160e-02,  6.1891e-02],
        [ 1.3358e-01,  9.2364e-02,  1.1024e-01],
        [ 7.7552e-03,  1.1496e-01,  7.8292e-02],
        [ 4.3585e-02, -5.7542e-03,  7.5046e-02],
        [-2.0089e-02,  2.2133e-03, -9.0720e-02],
        [ 6.2396e-02, -1.7919e-01,  4.8047e-03],
        [ 1.4961e-01, -1.7523e-01, -1.1415e-01],
        [ 7.4378e-02,  7.4647e-03, -1.6160e-01],
        [ 1.5944e-01,  1.1298e-01, -1.3761e-01],
        [ 1.4591e-01,  6.8241e-02,  1.8414e-01],
        [ 7.7521e-04,  1.1153e-01, -6.9166e-02],
        [-1.2105e-01, -9.8287e-02,  9.8938e-03],
        [-4.3303e-02, -6.2168e-02, -1.8656e-01],
        [ 4.8901e-02,  1.3294e-01,  2.9335e-02],
        [-1.5716e-01,  5.8289e-02,  1.6535e-01],
        [-1.8282e-01,  3.4304e-02,  9.7361e-02],
        [-1.0756e-01, -1.2703e-02,  1.3788e-01],
        [ 2.6092e-02,  2.3916e-03, -1.1556e-01],
        [ 6.8600e-02, -2.2980e-02,  2.1333e-02],
        [-7.5759e-02,  3.3108e-03,  1.2667e-01],
        [ 1.4744e-01, -2.9619e-02, -1.0308e-01],
        [-1.4724e-01,  1.1934e-01,  1.6569e-01],
        [ 5.8638e-02,  3.7720e-03, -3.8481e-02],
        [-1.0293e-01, -4.5113e-02, -1.2212e-01],
        [-1.7984e-01, -1.2683e-01, -1.1196e-01]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.1129,  0.0009, -0.1215,  ..., -0.0657, -0.1573,  0.0186],
        [ 0.0289,  0.1192, -0.1455,  ..., -0.1483, -0.1841, -0.1113],
        [-0.0842, -0.0526, -0.0121,  ..., -0.0163,  0.0410, -0.0130],
        ...,
        [ 0.0607, -0.1473,  0.0404,  ...,  0.1559,  0.1361, -0.1602],
        [ 0.0823, -0.1131,  0.1529,  ...,  0.1560,  0.1627, -0.0490],
        [-0.0873,  0.0550, -0.1132,  ..., -0.0481, -0.0499,  0.1577]],
       device='cuda:0')
recurrent_blocks.0.bias_ih_l0 tensor([ 0.0203,  0.1128, -0.0414, -0.1326, -0.0651, -0.0216, -0.0399, -0.0539,
        -0.0947, -0.0522,  0.1114, -0.0966, -0.0722,  0.0853,  0.0899,  0.0255,
         0.1360, -0.0526,  0.1111,  0.0330,  0.0120,  0.0137, -0.0833,  0.1306,
         0.0906,  0.0208, -0.0391,  0.0112, -0.1657,  0.0200,  0.1528, -0.0314,
         0.1771,  0.0913, -0.0994, -0.0405, -0.0832, -0.0482,  0.0309,  0.0725,
         0.1706,  0.0163,  0.0540,  0.1579,  0.0649, -0.0750, -0.0091,  0.0945,
         0.0165, -0.1050, -0.1798,  0.0977, -0.0760,  0.1261, -0.1419,  0.0161,
         0.1192, -0.0845, -0.0234,  0.0690,  0.0785, -0.0524, -0.0076,  0.1500,
        -0.0550,  0.0098,  0.0988,  0.0732, -0.0488, -0.1313, -0.0151, -0.0770,
         0.0415,  0.1256,  0.0846,  0.1234,  0.0067,  0.1027, -0.1513, -0.1258,
        -0.0378,  0.1277, -0.1591, -0.0632, -0.0183, -0.1502,  0.0306, -0.1607,
        -0.1119,  0.0569, -0.1029, -0.0857,  0.0880, -0.1032,  0.1506, -0.0961,
        -0.1261, -0.1131, -0.0383, -0.1568,  0.0622,  0.0994,  0.0832, -0.1806,
         0.0094,  0.1133,  0.1423, -0.1276, -0.1154, -0.0410, -0.1088, -0.0688,
         0.0100,  0.0027,  0.0220, -0.1512, -0.1255, -0.0339, -0.0728,  0.1466,
        -0.0936,  0.0257, -0.0974,  0.0515, -0.1840,  0.0495, -0.1328, -0.0898],
       device='cuda:0')
recurrent_blocks.0.bias_hh_l0 tensor([-0.0555, -0.0051,  0.1645,  0.0751,  0.1368, -0.0058,  0.1590,  0.1623,
        -0.1662, -0.0330,  0.1593, -0.1441, -0.0113,  0.1400,  0.0564, -0.0417,
        -0.0263,  0.0462,  0.1322, -0.1722, -0.1266, -0.1431,  0.1497, -0.1557,
        -0.1411,  0.0418,  0.0430,  0.0406, -0.1668,  0.0547,  0.0301, -0.1010,
         0.1298, -0.1799,  0.0667,  0.0592, -0.0851, -0.1230,  0.0320, -0.0149,
        -0.1421,  0.0074, -0.0062, -0.1594,  0.1487,  0.1554, -0.0491, -0.0444,
         0.1112, -0.1556, -0.0552, -0.1760, -0.0670, -0.0394,  0.0583, -0.1357,
         0.1155,  0.0707,  0.1435,  0.1011,  0.0699,  0.0909,  0.1576, -0.1267,
         0.1186,  0.0625, -0.0136,  0.1004, -0.1500, -0.1330,  0.1287,  0.0490,
        -0.1772,  0.0416, -0.1437, -0.0117, -0.1696,  0.0718, -0.1124,  0.1168,
        -0.1637,  0.0291, -0.0239,  0.1324, -0.1139, -0.0160,  0.0839, -0.0760,
         0.0060, -0.0746,  0.1660, -0.0759,  0.0732, -0.1157, -0.0736, -0.0167,
         0.0888, -0.0762, -0.1406, -0.0866, -0.0937, -0.0091,  0.1051,  0.0949,
        -0.0884,  0.0222, -0.0996, -0.0133,  0.0024, -0.0454,  0.1230, -0.1564,
        -0.1222, -0.1321, -0.0065, -0.0895, -0.0916, -0.0986, -0.0874,  0.1621,
        -0.0040,  0.1321, -0.1029,  0.1805, -0.1089, -0.0381,  0.0466,  0.0420],
       device='cuda:0')
recurrent_blocks.0.weight_ih_l0_reverse tensor([[-3.6222e-02, -1.2388e-01, -6.0541e-02],
        [ 6.8234e-02,  1.5362e-01,  1.2516e-01],
        [-1.2493e-01,  1.3607e-01,  1.0267e-01],
        [ 1.5289e-01, -2.3702e-02,  1.3331e-01],
        [-3.1158e-02,  1.4145e-01, -1.7722e-01],
        [-3.0688e-02, -1.3119e-01, -4.0516e-02],
        [-1.1471e-01,  4.9942e-02,  7.4576e-02],
        [-1.2571e-01, -4.9627e-02,  1.3877e-01],
        [ 2.1908e-02,  1.5347e-01,  9.9459e-02],
        [-4.7724e-02,  1.6871e-01, -1.2483e-01],
        [-4.1113e-02, -1.3117e-01,  8.8658e-02],
        [ 1.7600e-01,  1.1334e-01, -8.8605e-02],
        [-4.7141e-02,  7.9181e-02, -6.4613e-02],
        [-6.1213e-02,  1.8117e-01,  1.0612e-01],
        [ 1.1731e-01, -1.6050e-01,  2.2340e-02],
        [ 1.6639e-01, -1.1015e-01, -3.1135e-02],
        [ 7.9081e-02,  1.8906e-05,  3.6532e-02],
        [ 2.6211e-02, -2.2581e-02,  1.0578e-01],
        [-8.9345e-03, -5.2502e-02,  1.2481e-01],
        [-2.7588e-02,  1.1228e-02, -3.3865e-02],
        [-7.7729e-02, -4.5781e-02, -5.9540e-02],
        [-4.6665e-02, -3.5381e-02, -9.6083e-02],
        [-3.4432e-02,  3.6659e-02,  8.0944e-02],
        [-1.0063e-01, -6.9104e-02,  4.5300e-02],
        [-1.5549e-02,  6.1246e-02, -1.6656e-01],
        [-6.5473e-03, -5.7788e-02, -1.1843e-02],
        [-8.5442e-02,  2.8679e-02, -1.0854e-01],
        [-1.8102e-01,  8.2781e-02,  1.2829e-01],
        [-1.6346e-01, -1.2012e-01, -1.1859e-02],
        [-6.5273e-02,  1.6359e-01,  7.5818e-02],
        [-1.0283e-01, -1.0537e-01, -1.7812e-02],
        [-1.9197e-02, -6.3114e-02, -1.3195e-01],
        [-1.3752e-01,  1.3978e-01, -9.9261e-02],
        [ 1.0639e-01, -1.2491e-01, -1.4673e-01],
        [ 1.8101e-01, -1.4258e-02, -2.4593e-02],
        [ 1.2033e-01,  8.7515e-02,  1.5232e-01],
        [ 1.2693e-01,  1.4982e-01,  1.5512e-01],
        [ 2.2542e-03,  1.0957e-01, -1.4562e-01],
        [ 1.5900e-01,  2.5575e-02,  1.6817e-01],
        [-3.9659e-02,  1.3743e-01, -1.4238e-01],
        [-1.0087e-01,  5.6116e-02,  1.2787e-01],
        [ 8.4958e-03, -7.2425e-03, -8.2476e-03],
        [ 9.2711e-04,  6.7059e-02, -7.7896e-02],
        [-1.2678e-01, -4.9799e-02, -9.9532e-02],
        [ 6.9254e-03,  1.2995e-01,  3.7380e-02],
        [ 4.9491e-02,  1.7203e-01,  1.4661e-01],
        [-6.6864e-02, -7.4432e-02,  1.0037e-01],
        [-8.8744e-02, -7.0886e-02,  1.8003e-01],
        [ 1.3379e-01, -1.3048e-01,  5.5959e-02],
        [ 1.0447e-01, -1.5039e-01, -1.4949e-01],
        [ 1.5417e-01, -7.7646e-02,  1.0774e-01],
        [ 8.0117e-02, -5.9588e-02, -1.4066e-01],
        [ 6.6568e-02, -6.0898e-02,  1.0387e-01],
        [-1.2965e-01,  1.6253e-01, -5.9754e-02],
        [ 9.6372e-02, -1.7815e-01,  1.2278e-01],
        [ 1.2359e-01,  3.5299e-02, -9.8777e-02],
        [-6.8439e-02, -8.2632e-02, -1.2422e-01],
        [ 3.3348e-03, -1.4133e-01,  4.9310e-02],
        [ 6.7335e-02, -5.8896e-02,  1.5767e-01],
        [ 1.0168e-01, -5.2827e-02,  1.3175e-01],
        [-7.7956e-02, -1.6240e-01,  6.2524e-02],
        [-1.6029e-01, -9.0792e-03,  1.4324e-01],
        [-4.9575e-02,  3.6275e-02, -6.2823e-02],
        [ 1.0114e-02,  5.6998e-03,  1.6073e-02],
        [-1.7806e-01,  7.1976e-02, -7.6144e-02],
        [ 3.4446e-02, -5.3295e-02, -1.4024e-01],
        [ 8.3442e-02,  1.5931e-01, -3.8307e-02],
        [ 4.2501e-02, -1.3065e-01,  1.3039e-01],
        [ 1.0165e-02,  1.6267e-01, -1.4965e-01],
        [-1.2340e-01, -4.7435e-02, -8.2947e-02],
        [ 3.3044e-02,  2.8556e-02,  4.9138e-02],
        [-5.6949e-02,  1.5041e-01,  2.9420e-02],
        [ 8.9537e-02,  1.0009e-01, -3.5675e-02],
        [-1.7570e-01,  5.9671e-02,  1.6268e-01],
        [ 6.8489e-02,  9.4356e-02,  1.5216e-01],
        [ 6.5313e-02,  9.2767e-02,  1.0992e-02],
        [ 1.0777e-01, -1.2637e-01, -5.9882e-02],
        [-3.8445e-02,  1.4561e-01, -1.4669e-01],
        [ 4.9616e-02, -1.1032e-02, -1.0764e-01],
        [-2.9286e-02, -2.5264e-02,  6.6248e-02],
        [-1.5668e-01, -9.6121e-02,  5.8163e-03],
        [-3.2567e-02, -2.6712e-02, -1.0077e-01],
        [-4.9451e-02,  8.7132e-02,  1.4208e-01],
        [-1.2593e-01, -7.2861e-03, -3.9732e-02],
        [ 1.5647e-01,  5.7421e-02, -2.7944e-03],
        [ 1.1307e-01, -6.2334e-02, -5.3871e-02],
        [ 4.0075e-02,  1.6163e-01, -1.6594e-01],
        [-1.2061e-01, -8.8040e-02,  1.8516e-01],
        [-1.5125e-01, -1.5047e-01, -7.9314e-02],
        [-1.2420e-01, -1.3192e-01,  2.4951e-02],
        [ 1.4472e-01,  1.0748e-01,  5.9315e-03],
        [ 6.9481e-02, -1.0635e-01,  8.8975e-03],
        [ 4.1614e-02,  9.6519e-02, -3.8486e-02],
        [-1.2108e-01, -1.4965e-01, -4.8374e-02],
        [ 1.2350e-01, -1.3593e-01, -1.8544e-01],
        [-6.9283e-02,  9.0917e-04,  9.2186e-02],
        [-9.8374e-04,  2.9425e-02, -3.8203e-02],
        [-1.8330e-01,  1.2905e-02,  6.3590e-03],
        [-1.7055e-02,  1.7723e-01,  8.2515e-03],
        [-5.0696e-02, -1.1971e-01,  2.3711e-02],
        [ 1.0445e-01,  1.7854e-01, -7.1153e-02],
        [ 1.7680e-01, -4.4077e-02, -5.2700e-02],
        [ 5.3342e-02, -8.4195e-02,  3.2214e-02],
        [ 9.4431e-02, -8.1325e-02,  1.2339e-02],
        [-1.6053e-01,  1.0029e-01,  7.5566e-02],
        [-4.8556e-02,  4.8973e-02,  1.1213e-01],
        [-1.5602e-01,  1.2330e-01,  1.0246e-01],
        [-1.5169e-01, -1.1605e-01, -5.4292e-03],
        [ 1.1594e-01,  6.4060e-02, -1.0845e-01],
        [-7.5339e-02, -1.6264e-01,  1.6464e-01],
        [-1.7048e-01,  4.5497e-02,  2.0575e-02],
        [ 1.2530e-01, -6.7543e-02, -5.8081e-02],
        [ 1.6137e-01,  1.1623e-01,  1.0113e-01],
        [ 1.7802e-01, -1.3615e-01, -4.3990e-02],
        [ 5.1128e-02, -2.5155e-02,  2.5941e-02],
        [-2.9544e-02, -1.0438e-01,  1.2710e-01],
        [-1.6879e-01,  7.9645e-02,  1.1141e-01],
        [ 1.4840e-01, -1.8802e-02, -3.8850e-02],
        [ 2.7549e-02, -1.0079e-01,  3.5848e-02],
        [ 1.1129e-01,  1.2258e-01, -2.4008e-02],
        [ 1.1881e-01, -1.4576e-01,  1.2637e-01],
        [-1.3442e-01,  4.4021e-04,  1.5860e-01],
        [ 6.3398e-02, -1.1643e-01, -1.7627e-05],
        [-5.0347e-02,  1.0727e-01,  1.7572e-01],
        [-4.3357e-02, -1.6565e-01, -1.0103e-01],
        [ 4.9705e-02,  8.5623e-02,  1.1149e-02],
        [ 1.1380e-01,  6.9349e-02, -5.0073e-02],
        [ 1.6965e-01,  5.3212e-02, -8.7339e-02]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.0402,  0.1520,  0.0610,  ..., -0.1389,  0.0414, -0.0730],
        [-0.0065, -0.1113,  0.0118,  ..., -0.0179,  0.0344,  0.0961],
        [-0.1282,  0.1599,  0.1062,  ...,  0.0908,  0.1831,  0.0696],
        ...,
        [-0.1280,  0.1276, -0.1162,  ...,  0.0834, -0.0462, -0.0632],
        [ 0.0303, -0.1327, -0.1297,  ...,  0.0904, -0.0286,  0.1440],
        [ 0.0845, -0.1444, -0.0368,  ..., -0.1392, -0.0899,  0.0232]],
       device='cuda:0')
recurrent_blocks.0.bias_ih_l0_reverse tensor([-0.1125,  0.1499,  0.0160, -0.0469, -0.0378, -0.1651, -0.1326, -0.0287,
         0.0256,  0.1212,  0.1626,  0.0473, -0.0525, -0.1673, -0.1348,  0.0174,
        -0.1298,  0.1258, -0.1385, -0.0589,  0.0576, -0.1469,  0.1274, -0.1451,
         0.1219, -0.0748,  0.1203,  0.1098, -0.1618,  0.0257, -0.0475,  0.0815,
        -0.1641,  0.1323, -0.0883,  0.0908,  0.0093, -0.1651, -0.1452,  0.0028,
        -0.0186, -0.0986,  0.0055,  0.1374, -0.0317,  0.0869,  0.1635,  0.1693,
         0.1212,  0.1191,  0.1846, -0.0148,  0.0310,  0.1138, -0.1073,  0.1271,
         0.0867, -0.1587,  0.1595,  0.0515,  0.0755, -0.0507, -0.1212,  0.0137,
         0.0226, -0.0190, -0.1040,  0.1125, -0.1387,  0.0936,  0.0119, -0.0826,
        -0.1291,  0.0625, -0.0459,  0.0193, -0.1425, -0.0154, -0.0259, -0.1551,
        -0.1685, -0.1596,  0.0877, -0.0352,  0.0213,  0.0861, -0.0311, -0.0084,
         0.0549,  0.0560, -0.1311, -0.0841, -0.0343,  0.1267, -0.1618, -0.1331,
         0.1815, -0.0205,  0.1368, -0.0128, -0.0980,  0.1179,  0.1028, -0.1457,
        -0.0556,  0.0312,  0.0311,  0.1406, -0.0420, -0.0138, -0.0071,  0.0182,
        -0.0274,  0.0785,  0.0238,  0.0699, -0.1038, -0.0905, -0.1313, -0.0157,
        -0.0892, -0.1410, -0.0479,  0.0995,  0.1761,  0.0591, -0.1465,  0.1158],
       device='cuda:0')
recurrent_blocks.0.bias_hh_l0_reverse tensor([ 0.0402,  0.0396,  0.1220,  0.0747, -0.0563, -0.0753,  0.0767, -0.1317,
         0.0856,  0.0790,  0.1461, -0.1349,  0.1065, -0.0083, -0.0445, -0.0225,
        -0.0043, -0.1274,  0.0670,  0.1140, -0.1724,  0.1096,  0.1545, -0.0639,
         0.1428, -0.1716,  0.1605,  0.1380,  0.1423,  0.0059, -0.0218,  0.0541,
         0.1841, -0.1635, -0.1837,  0.1107,  0.0497, -0.1330,  0.0919, -0.0550,
        -0.0698, -0.1635,  0.0170,  0.1259,  0.1467,  0.0458, -0.1212,  0.1233,
        -0.0504,  0.1352,  0.1211, -0.0628,  0.0975,  0.1615,  0.1458, -0.0569,
        -0.0788, -0.0809, -0.1281,  0.0567,  0.0083,  0.0274, -0.1016,  0.1196,
         0.1141, -0.1350, -0.1417, -0.1068, -0.1033, -0.1250, -0.0160,  0.1303,
        -0.0772, -0.0448,  0.1497, -0.1439,  0.1203, -0.0130, -0.0889, -0.1024,
        -0.0226,  0.0095,  0.1780,  0.1796,  0.1614, -0.1695, -0.0614,  0.1410,
        -0.0943, -0.0725,  0.0383, -0.1793, -0.1396, -0.0591,  0.1513, -0.1745,
         0.0187, -0.0469,  0.1423,  0.0460,  0.0385, -0.1616, -0.0603,  0.0074,
        -0.1085,  0.0754,  0.1296, -0.1035,  0.1212,  0.1055, -0.1060,  0.0505,
        -0.0166,  0.1813,  0.1472,  0.0445,  0.0370,  0.1507, -0.1694, -0.0848,
         0.1409, -0.0162, -0.1378,  0.0521,  0.1192,  0.0977,  0.1149,  0.0137],
       device='cuda:0')
recurrent_blocks.1.weight_ih_l0 tensor([[ 0.0008,  0.0988,  0.0597,  ..., -0.0391,  0.0542, -0.0730],
        [ 0.0189, -0.0107, -0.1523,  ...,  0.1247, -0.1306, -0.1744],
        [ 0.0152, -0.1260, -0.0884,  ..., -0.0853,  0.0838, -0.1229],
        ...,
        [ 0.1098, -0.0808, -0.1482,  ..., -0.0585,  0.1366,  0.0177],
        [ 0.1471,  0.1498, -0.0206,  ...,  0.0952,  0.0623,  0.1759],
        [ 0.0092,  0.0240,  0.1484,  ...,  0.1639, -0.0642, -0.0711]],
       device='cuda:0')
recurrent_blocks.1.weight_hh_l0 tensor([[ 0.0098, -0.1468, -0.0840,  ..., -0.1149,  0.0011, -0.0902],
        [-0.0163,  0.1173,  0.0771,  ...,  0.0886, -0.0028,  0.0718],
        [ 0.0616, -0.0450, -0.0499,  ..., -0.0332, -0.0595, -0.1705],
        ...,
        [-0.0546, -0.0551,  0.0903,  ...,  0.1108,  0.0825, -0.0075],
        [-0.0357,  0.1187,  0.0230,  ...,  0.0803, -0.1598,  0.0835],
        [ 0.0466,  0.1623,  0.0569,  ...,  0.1702,  0.0475,  0.1154]],
       device='cuda:0')
recurrent_blocks.1.bias_ih_l0 tensor([-0.0761, -0.1516, -0.0029,  0.1657,  0.1367, -0.0947, -0.1385,  0.0993,
         0.0864, -0.0821, -0.1429,  0.1022, -0.0526,  0.1857,  0.0691,  0.0359,
        -0.1572, -0.1384, -0.0373, -0.0099,  0.0480,  0.1412, -0.0683, -0.0434,
         0.1451,  0.1354,  0.1358, -0.0499, -0.1053,  0.0165, -0.0445, -0.0012,
         0.0993, -0.0933, -0.0470,  0.0537,  0.1143,  0.0044, -0.0286, -0.1277,
         0.1490, -0.1544, -0.0981,  0.0830,  0.1002,  0.1361,  0.0420,  0.0672,
        -0.0706,  0.1156, -0.0966, -0.1517,  0.1519,  0.1471, -0.0014,  0.1549,
        -0.0910,  0.1417,  0.1711, -0.1347, -0.1732, -0.0002,  0.0347, -0.0501,
        -0.1083, -0.0024,  0.1512,  0.0047, -0.1331, -0.0583, -0.1630,  0.0550,
         0.1153,  0.0529, -0.0566, -0.1299, -0.0245,  0.0637,  0.1527, -0.0415,
         0.1457,  0.1448,  0.0903,  0.0641,  0.0321,  0.1103,  0.0127, -0.1475,
        -0.1168,  0.1546, -0.0425, -0.1095,  0.1224, -0.1096, -0.1229, -0.1549,
        -0.1580, -0.0433,  0.0439,  0.1071, -0.1588,  0.0915, -0.1355,  0.0703,
        -0.0346,  0.1405,  0.0913, -0.1386, -0.1159,  0.0075,  0.0355,  0.1651,
        -0.1234, -0.0480, -0.0920, -0.0072, -0.1533, -0.1819,  0.1724,  0.0970,
        -0.0256, -0.0833,  0.1363,  0.1392,  0.1588, -0.0386, -0.0214, -0.0974],
       device='cuda:0')
recurrent_blocks.1.bias_hh_l0 tensor([-0.0438,  0.1609,  0.1023,  0.1407, -0.1322,  0.0601,  0.0873,  0.0884,
        -0.0966,  0.0444, -0.1461,  0.1180,  0.1810,  0.1097,  0.0585, -0.1324,
        -0.1279,  0.0446, -0.1659,  0.0533, -0.0732, -0.0359, -0.1383, -0.0339,
        -0.0747,  0.1338,  0.1748, -0.0218, -0.1208,  0.0490,  0.0236, -0.1580,
         0.1283, -0.0652,  0.1336,  0.0957, -0.1664, -0.1218,  0.0674, -0.0209,
        -0.0099, -0.1822,  0.0180, -0.1183, -0.0298, -0.0872, -0.1647,  0.0540,
        -0.0047, -0.1456,  0.0441,  0.0833, -0.0978,  0.0648,  0.0047, -0.1134,
         0.1615, -0.1661,  0.0272,  0.1604, -0.1164,  0.1523, -0.0719,  0.0417,
         0.1674, -0.0597, -0.1361,  0.0108,  0.1055,  0.1832,  0.0522, -0.0671,
         0.0107, -0.0951,  0.0021,  0.1367,  0.0487, -0.0717,  0.0025, -0.1576,
         0.0467,  0.0420, -0.1596,  0.0375,  0.1048, -0.0671, -0.0825,  0.0073,
        -0.0877, -0.1459, -0.1421,  0.1007,  0.0111, -0.1672,  0.1302,  0.1573,
        -0.0709, -0.0837,  0.1357,  0.0508,  0.1620, -0.1493, -0.0079, -0.1047,
         0.1629, -0.0364, -0.0489, -0.0200, -0.1510, -0.0190, -0.0715, -0.0192,
         0.1289,  0.1632, -0.0056,  0.0462,  0.1287,  0.1206,  0.1739,  0.0475,
        -0.1401,  0.1470,  0.0198,  0.1519, -0.0253, -0.0662, -0.1197, -0.1418],
       device='cuda:0')
recurrent_blocks.1.weight_ih_l0_reverse tensor([[-0.1167,  0.0373,  0.1442,  ...,  0.1854, -0.1746, -0.0917],
        [-0.0342, -0.1148,  0.0699,  ...,  0.0570, -0.1463,  0.1419],
        [ 0.0759,  0.0977, -0.0850,  ...,  0.0646,  0.1210,  0.0172],
        ...,
        [-0.1450,  0.1279, -0.1467,  ..., -0.0447, -0.1687,  0.1034],
        [-0.1527,  0.1596, -0.1440,  ..., -0.1292, -0.1445, -0.1436],
        [-0.1462, -0.0121,  0.0808,  ..., -0.0761, -0.1446,  0.1371]],
       device='cuda:0')
recurrent_blocks.1.weight_hh_l0_reverse tensor([[-0.0116,  0.1123, -0.0802,  ...,  0.1571, -0.0982,  0.0246],
        [-0.0509, -0.0981, -0.1684,  ...,  0.1269,  0.0259, -0.1198],
        [ 0.1333, -0.1523, -0.1068,  ..., -0.1638, -0.0834,  0.0415],
        ...,
        [ 0.0086, -0.1017,  0.1336,  ..., -0.1226, -0.0811,  0.1485],
        [ 0.1167,  0.1408,  0.0872,  ..., -0.1785,  0.1007, -0.1790],
        [ 0.0856,  0.0914,  0.0563,  ..., -0.1765,  0.1364,  0.0191]],
       device='cuda:0')
recurrent_blocks.1.bias_ih_l0_reverse tensor([ 1.2012e-01,  9.1605e-02, -1.8555e-01, -7.3964e-04,  2.2321e-02,
        -1.9227e-02, -3.4303e-02, -1.5193e-01, -5.2117e-04,  1.0875e-01,
        -5.4824e-02, -1.8225e-02, -1.5703e-02, -9.2201e-02,  6.9904e-02,
         8.4568e-02,  5.4285e-02,  3.3066e-02,  7.4901e-03, -7.6833e-03,
         1.0725e-01, -8.4548e-02, -1.1739e-02,  1.1701e-01,  4.2302e-02,
         1.4019e-01,  9.6978e-03,  5.1132e-02,  3.6707e-02, -1.1070e-01,
        -1.2221e-04,  5.9722e-02,  4.4429e-02,  1.6140e-01,  1.0568e-01,
         1.6566e-01, -8.6955e-02, -1.3527e-01,  1.8390e-01,  1.2442e-01,
         1.1241e-01, -1.2798e-01, -2.4332e-03, -5.0973e-02, -4.5301e-02,
        -1.6028e-01, -1.1621e-01, -1.7978e-01, -1.5078e-01,  2.1382e-02,
         9.1159e-03,  8.7048e-02,  7.4016e-02, -2.6181e-02, -3.0646e-02,
        -8.4825e-02, -1.1633e-01,  1.7522e-01, -5.0939e-02, -3.2462e-02,
         6.4162e-02, -8.9165e-02,  1.9959e-02, -9.6678e-02, -3.9903e-02,
        -6.0913e-02,  8.9039e-02,  4.3193e-02,  1.0159e-01,  1.5508e-01,
         1.6497e-01,  1.5879e-01,  3.4938e-02, -1.5596e-01, -1.2749e-01,
         9.1532e-02,  7.0728e-02,  2.2139e-02, -6.7064e-02, -1.6102e-01,
        -2.8169e-02, -4.7964e-02, -1.5736e-01,  1.2831e-01,  7.5409e-03,
        -1.0762e-01, -1.1967e-01, -1.4461e-01, -1.3736e-02,  3.4850e-02,
         6.5919e-02,  6.5112e-02,  6.3652e-02, -1.2388e-01,  1.3123e-01,
         5.2104e-02, -9.2000e-03, -1.0039e-01, -5.3094e-02,  9.6204e-02,
        -1.5363e-01, -1.0961e-01,  1.4201e-01,  3.1203e-02, -1.6283e-01,
        -1.5767e-01, -1.5766e-01,  1.7140e-01,  1.6344e-01, -5.8040e-03,
        -1.3308e-01, -1.1516e-01,  9.3299e-02, -1.2647e-01, -6.4100e-02,
        -8.4210e-02,  6.9436e-02, -1.6117e-01, -1.3697e-02, -1.0414e-01,
         6.4425e-02,  1.2509e-01,  1.5079e-01,  3.6849e-02, -1.6223e-01,
        -6.2827e-02,  8.2623e-02, -1.1888e-01], device='cuda:0')
recurrent_blocks.1.bias_hh_l0_reverse tensor([-1.5315e-02, -1.7542e-01,  1.6282e-01,  1.5993e-01,  7.9293e-02,
         3.6665e-02,  1.3735e-01,  1.3308e-01, -5.5823e-02,  1.1749e-01,
        -1.0728e-01,  4.8680e-03,  1.4004e-01,  2.1746e-02, -9.9804e-02,
         5.4966e-02, -1.4555e-01, -6.5169e-02,  1.2663e-01,  1.6963e-01,
        -1.4730e-01, -8.9809e-02,  1.7855e-01,  7.6042e-02,  1.6748e-01,
         5.4219e-06, -1.7603e-01, -1.4210e-01, -5.0346e-02, -2.2715e-02,
        -7.1745e-02, -1.6213e-01, -1.6141e-01,  2.5600e-02, -1.8553e-01,
         1.4919e-01, -8.4605e-02,  7.7387e-02,  8.0218e-02, -1.0711e-01,
         7.9200e-02, -1.1817e-01,  1.2742e-01,  2.1965e-02, -1.0935e-01,
         7.4632e-02,  8.2882e-02, -1.2350e-01, -6.0533e-02,  5.1073e-02,
         3.5009e-02,  1.5574e-01,  9.5180e-03, -8.2331e-02, -9.9129e-02,
        -1.4440e-02,  1.0895e-01,  6.3302e-02,  1.6166e-01,  1.3031e-01,
         1.5661e-02, -1.7642e-01, -1.3906e-01, -1.3571e-01,  1.8451e-01,
        -4.0331e-02, -9.3471e-03,  1.1952e-01, -5.4218e-02,  1.4875e-01,
         9.3361e-02,  2.7727e-02,  1.4021e-02,  1.4356e-01,  9.8965e-02,
         9.2894e-04,  1.0333e-01,  1.7512e-01, -1.3155e-01,  1.4287e-01,
        -1.0589e-02,  8.7896e-02,  5.7151e-02, -7.8075e-03, -1.3440e-02,
        -5.9094e-02,  6.2864e-02, -9.9433e-02, -1.0711e-01, -1.2851e-01,
         1.0676e-01,  1.5898e-01, -1.9654e-02,  1.3308e-01, -1.5175e-01,
        -7.4108e-02, -3.6390e-02, -2.3642e-02,  1.0070e-01,  1.1019e-01,
         1.1374e-01, -2.0126e-03, -1.4337e-01, -9.2179e-03,  1.3901e-01,
         1.3884e-02,  1.7583e-01, -9.9412e-02,  6.2240e-02,  1.7008e-01,
         1.6392e-01, -1.3680e-01,  1.4990e-01,  7.2471e-02, -4.3532e-03,
         1.3552e-01,  7.2926e-02,  1.3227e-01,  1.8786e-02,  5.9595e-02,
        -2.0565e-02, -4.2748e-02,  6.9961e-02, -8.6829e-02,  2.2449e-02,
         9.1505e-02, -9.0933e-02, -2.3680e-02], device='cuda:0')
recurrent_blocks.2.weight_ih_l0 tensor([[-0.0457, -0.1591, -0.0648,  ..., -0.1583,  0.1801, -0.0139],
        [ 0.1345, -0.1361,  0.0784,  ..., -0.0909, -0.1331, -0.1363],
        [-0.1368,  0.0133,  0.0837,  ..., -0.1035,  0.0817,  0.1637],
        ...,
        [ 0.0463, -0.1533, -0.0220,  ...,  0.1785, -0.1385, -0.0711],
        [ 0.0047, -0.0746, -0.0894,  ..., -0.1477, -0.0073,  0.0470],
        [-0.0094, -0.1635,  0.0523,  ..., -0.1362, -0.0926,  0.0227]],
       device='cuda:0')
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.0974, -0.0176, -0.1114,  ..., -0.1700, -0.0221,  0.0291],
        [-0.1056, -0.0995,  0.0239,  ...,  0.0934, -0.1059, -0.0153],
        [-0.0738,  0.1381,  0.1433,  ..., -0.1210, -0.1415, -0.1758],
        ...,
        [-0.1098, -0.0674,  0.0411,  ..., -0.0766, -0.1119, -0.1307],
        [ 0.0450,  0.0868,  0.0512,  ..., -0.0778, -0.0782, -0.1652],
        [-0.0164, -0.1264,  0.0193,  ..., -0.1057, -0.0448,  0.0546]],
       device='cuda:0')
recurrent_blocks.2.bias_ih_l0 tensor([-0.0384,  0.0503,  0.0706, -0.0535,  0.1799,  0.0054, -0.0325, -0.1860,
         0.0874,  0.0093,  0.1024,  0.0311, -0.1572,  0.1215, -0.1100, -0.0818,
         0.0036, -0.1391,  0.1788,  0.0116,  0.0105,  0.0759,  0.0227,  0.0186,
        -0.0724, -0.1859, -0.0671, -0.1254,  0.0626, -0.1612,  0.1252, -0.0062,
        -0.1391, -0.0930,  0.0076,  0.1661,  0.0945, -0.0543, -0.1310, -0.0659,
         0.1282, -0.0815, -0.0019,  0.0349, -0.1088,  0.1146, -0.0031,  0.1580,
         0.1107, -0.0592, -0.1242, -0.0159, -0.1322, -0.0413,  0.0083, -0.1816,
         0.0399, -0.1170, -0.0942,  0.1237,  0.1190,  0.0797, -0.0956,  0.0385,
         0.0281,  0.1216, -0.1212,  0.1453, -0.0793, -0.1609, -0.0620, -0.0648,
         0.0845, -0.0926,  0.1271,  0.1630, -0.0899, -0.0690,  0.0486, -0.0956,
         0.1193,  0.0065, -0.0304, -0.0598,  0.0104, -0.1131, -0.1108, -0.1380,
         0.0473,  0.0963, -0.1584,  0.1753,  0.0142, -0.1660,  0.1654,  0.1355,
         0.1122,  0.1475, -0.0435, -0.1290, -0.0439,  0.0162,  0.0066, -0.0375,
         0.0740,  0.0999, -0.1525, -0.0851, -0.1263, -0.0832, -0.1663,  0.0093,
         0.0358, -0.1339,  0.1498, -0.1280,  0.0848, -0.1270, -0.1489, -0.0585,
        -0.0170, -0.1039,  0.0321,  0.0909, -0.0776, -0.0714,  0.0460,  0.1092],
       device='cuda:0')
recurrent_blocks.2.bias_hh_l0 tensor([ 1.4576e-01, -1.1675e-01,  1.3403e-01, -9.8909e-02,  1.1343e-01,
        -9.9912e-02, -1.4459e-01,  8.5994e-03,  5.7693e-02, -1.2198e-03,
         1.1583e-01, -9.9940e-02,  3.3888e-02,  1.3154e-01, -1.0871e-01,
        -1.0181e-01,  8.9462e-02,  1.6922e-01, -1.6436e-01,  7.5085e-02,
        -1.3186e-01,  5.5930e-02,  1.7918e-01, -4.1161e-02, -1.2541e-01,
        -8.7304e-02, -5.6810e-02, -1.1022e-01, -1.2574e-01, -1.4304e-01,
         1.5764e-01, -3.3267e-02, -1.4276e-01, -2.0612e-02,  5.1070e-02,
         2.8914e-02, -9.7405e-02,  9.1443e-02,  3.0430e-02,  8.4134e-02,
         1.2950e-01, -1.7816e-01, -1.0074e-01, -1.0093e-01, -8.6390e-02,
        -1.5019e-01,  1.1614e-01,  1.3956e-01, -4.6985e-03, -2.6333e-02,
         6.6613e-02,  1.6944e-01, -9.8408e-02,  1.0147e-01,  7.6820e-02,
         8.2211e-02, -9.7108e-02,  5.7319e-02, -7.2927e-02,  8.3901e-02,
         1.4459e-01,  4.0507e-02, -1.1775e-01, -7.3935e-03,  1.2091e-01,
         3.8090e-02, -3.6401e-03, -1.6608e-01, -5.7533e-02,  4.3600e-02,
         1.2379e-01,  3.5617e-03,  2.9357e-02,  6.8724e-02, -5.5015e-02,
        -7.7437e-02,  6.6873e-02, -1.2317e-01,  9.7199e-02,  1.5184e-01,
        -1.8474e-02, -1.1846e-01,  1.0673e-01, -2.6559e-02,  1.6798e-01,
         5.9914e-02, -2.7018e-02, -9.0274e-02,  1.5233e-01, -2.6561e-02,
        -3.7483e-02,  1.3218e-01, -9.6840e-02, -5.4480e-05, -1.6050e-02,
         4.2311e-02,  1.1599e-01, -2.3911e-02, -3.3937e-02,  3.8027e-02,
        -7.9926e-02,  6.6397e-02,  1.6553e-01, -2.9172e-02,  4.1748e-02,
        -9.9124e-02,  4.2364e-02,  2.4756e-02,  3.7585e-02, -2.3175e-02,
        -5.7247e-02, -7.6980e-03, -1.3845e-01, -1.5198e-01, -5.7522e-02,
        -1.2571e-01,  9.4685e-02,  1.6511e-01, -1.3608e-01,  3.4189e-02,
        -6.5849e-02, -3.8753e-02, -1.3052e-01, -7.2371e-02, -3.2201e-02,
        -1.5900e-01,  1.8633e-02, -1.8461e-01], device='cuda:0')
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.1225,  0.0783, -0.0885,  ..., -0.1851,  0.0963, -0.1044],
        [ 0.0581,  0.0144, -0.0739,  ..., -0.1268, -0.0850,  0.0794],
        [-0.0677, -0.1565,  0.0993,  ..., -0.1356,  0.0517, -0.0873],
        ...,
        [ 0.0435, -0.1413,  0.0252,  ...,  0.1211, -0.1156,  0.0508],
        [-0.1219,  0.0488,  0.1537,  ...,  0.0262,  0.0096,  0.0047],
        [ 0.0188,  0.0059, -0.1557,  ..., -0.0959, -0.0355, -0.1630]],
       device='cuda:0')
recurrent_blocks.2.weight_hh_l0_reverse tensor([[ 0.1096, -0.1552, -0.0027,  ..., -0.0093, -0.1264, -0.1652],
        [ 0.0652,  0.1235, -0.0616,  ..., -0.0879,  0.1085,  0.1196],
        [ 0.1255,  0.1655, -0.1724,  ...,  0.0593, -0.0379, -0.1220],
        ...,
        [-0.1076,  0.1265,  0.0025,  ..., -0.0935, -0.0192, -0.1477],
        [ 0.1120, -0.1670, -0.0495,  ...,  0.1653, -0.1343,  0.1236],
        [ 0.1104,  0.0234,  0.1337,  ..., -0.0683, -0.0655,  0.0894]],
       device='cuda:0')
recurrent_blocks.2.bias_ih_l0_reverse tensor([ 0.0657,  0.1149, -0.1211,  0.0027, -0.0479,  0.1276, -0.0412,  0.1270,
         0.0177, -0.0029,  0.1504,  0.1486, -0.1215,  0.0407, -0.0657,  0.0114,
        -0.0244,  0.0908, -0.0821,  0.0133,  0.1384,  0.1007, -0.1506, -0.0859,
        -0.1185,  0.0821, -0.1230, -0.1300,  0.0159,  0.1400, -0.0065, -0.0715,
         0.1045,  0.1307, -0.0877,  0.0354, -0.1814,  0.1102,  0.0814,  0.1444,
        -0.0482, -0.0572,  0.1418,  0.0410, -0.1452,  0.0269,  0.1482, -0.1042,
        -0.0029,  0.0928,  0.1062,  0.0750,  0.1420,  0.0085, -0.1345, -0.1155,
         0.1497,  0.0958, -0.0271, -0.0635,  0.0831, -0.1076,  0.0689, -0.1495,
        -0.0595,  0.1457,  0.1081,  0.0979, -0.0704, -0.0083, -0.1429,  0.1038,
        -0.1528,  0.0314,  0.1469,  0.0628,  0.0822,  0.0188,  0.0224, -0.1621,
        -0.0225,  0.1156, -0.1336, -0.1388, -0.1323, -0.0420, -0.0625, -0.0463,
        -0.1404, -0.1801, -0.0116,  0.1581,  0.0045, -0.1067,  0.0269,  0.1181,
         0.1078, -0.1368,  0.1221, -0.1645, -0.1739,  0.1335,  0.0144, -0.0195,
        -0.1299,  0.1421,  0.1413,  0.1129, -0.0696,  0.0228,  0.1784,  0.1822,
        -0.0813,  0.1000, -0.0642, -0.1301, -0.0206, -0.0092, -0.1046, -0.0027,
        -0.0588,  0.0718,  0.0337, -0.1122, -0.1046, -0.0562, -0.1179,  0.1049],
       device='cuda:0')
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.1123,  0.1643,  0.0170, -0.0669,  0.0632,  0.1048, -0.0428, -0.0917,
        -0.0838,  0.1580, -0.0991, -0.0250,  0.1230,  0.1069,  0.0143, -0.0550,
         0.1068, -0.0258, -0.0725, -0.0678, -0.0622,  0.0381,  0.0850,  0.1641,
         0.0257, -0.0884,  0.0180,  0.1444, -0.0350, -0.1522, -0.0820, -0.0402,
        -0.0600, -0.0969,  0.0821, -0.1866,  0.0020,  0.0749,  0.0100,  0.1443,
         0.0842,  0.1271,  0.0836, -0.0843,  0.0742, -0.0980, -0.1168, -0.0052,
         0.0389, -0.1149, -0.0786,  0.1372,  0.0446, -0.1258,  0.0599, -0.0765,
        -0.1618, -0.1046,  0.0369, -0.0033,  0.0389, -0.0996,  0.0070,  0.0276,
         0.0893, -0.0029, -0.0460, -0.0771, -0.1264, -0.1202,  0.0904,  0.0261,
         0.1063,  0.1143,  0.0894, -0.1387, -0.1845, -0.0956, -0.1321,  0.0132,
         0.1132, -0.1445, -0.0313, -0.1494, -0.0668,  0.0241, -0.1360,  0.0267,
         0.1284, -0.1083, -0.0434, -0.0833, -0.1410, -0.1278,  0.0490,  0.1634,
         0.1166,  0.1442,  0.0152,  0.1332,  0.0374, -0.1089,  0.0974,  0.1453,
         0.1547, -0.1630,  0.1409,  0.1503, -0.1570,  0.1103, -0.0179, -0.0631,
         0.1752,  0.0938,  0.0329, -0.0484,  0.0440, -0.0074, -0.0438,  0.1499,
         0.1454, -0.0895,  0.1619,  0.0458,  0.0861, -0.0922, -0.1588,  0.0622],
       device='cuda:0')
recurrent_blocks.3.weight_ih_l0 tensor([[ 0.0637,  0.1484, -0.1848,  ...,  0.1407, -0.0840,  0.0409],
        [-0.0590,  0.0305, -0.0109,  ..., -0.1167,  0.0461,  0.0393],
        [-0.1809, -0.1033, -0.1242,  ...,  0.1388,  0.0808,  0.0371],
        ...,
        [ 0.0413,  0.0156,  0.0676,  ..., -0.1319, -0.0881,  0.0010],
        [ 0.0757,  0.0298, -0.0873,  ..., -0.1286,  0.1449, -0.0823],
        [-0.0699,  0.0226, -0.0957,  ..., -0.0778, -0.0963,  0.1458]],
       device='cuda:0')
recurrent_blocks.3.weight_hh_l0 tensor([[-0.1530, -0.0831,  0.0655,  ..., -0.1708,  0.0461,  0.0743],
        [ 0.1697,  0.0499,  0.0943,  ..., -0.0557,  0.0985, -0.0577],
        [-0.0245, -0.1410, -0.0722,  ..., -0.0084, -0.1481, -0.1333],
        ...,
        [ 0.1129,  0.1430, -0.0052,  ..., -0.0919,  0.0290,  0.0812],
        [ 0.1139, -0.1759, -0.1455,  ...,  0.0122, -0.1097, -0.0479],
        [ 0.0243, -0.0149,  0.0906,  ..., -0.0559,  0.0270,  0.1624]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0 tensor([ 0.0155, -0.1428,  0.1016, -0.1065,  0.1627, -0.0691, -0.1640,  0.1092,
         0.0688,  0.1543,  0.1330, -0.0345, -0.0869,  0.0013,  0.0497, -0.0742,
        -0.1400,  0.1508, -0.0241,  0.1414, -0.1506,  0.1548,  0.0572,  0.0906,
         0.0264,  0.0965, -0.0961,  0.0273, -0.0033,  0.0012, -0.0562, -0.0176,
         0.1503,  0.0805, -0.0132, -0.0632, -0.0028, -0.0014, -0.0183,  0.1566,
         0.0914,  0.0842, -0.1268,  0.0610, -0.1223, -0.1027, -0.0766,  0.1435,
         0.0963, -0.1654, -0.0403, -0.0960,  0.0476, -0.1121,  0.1055, -0.1774,
        -0.0463, -0.0599, -0.0616,  0.0642,  0.0350, -0.0058, -0.1305,  0.0833,
        -0.0506, -0.0309,  0.0603, -0.1071,  0.0984, -0.1179, -0.0902,  0.0258,
         0.0674, -0.0713,  0.0145, -0.0871, -0.0809,  0.1381, -0.0171, -0.0575,
        -0.1412, -0.0655,  0.1337, -0.0425,  0.1264,  0.1644, -0.0303, -0.0804,
        -0.0930,  0.1258, -0.0638,  0.1554,  0.0418, -0.1363,  0.0424, -0.0532,
        -0.0689,  0.0657, -0.0729,  0.1862, -0.0507, -0.0297,  0.1368, -0.0180,
        -0.0194,  0.1285, -0.1684, -0.0642, -0.0733,  0.0644,  0.1162,  0.1245,
         0.0457,  0.0989, -0.1109,  0.1087,  0.0174,  0.0167, -0.0682, -0.1800,
         0.0965, -0.0134, -0.0013, -0.0325, -0.0085, -0.0980,  0.1592, -0.0733],
       device='cuda:0')
recurrent_blocks.3.bias_hh_l0 tensor([-0.0885,  0.0910,  0.1375,  0.0587,  0.0262, -0.1710,  0.0716,  0.0429,
         0.1127,  0.1427, -0.0807,  0.1041,  0.0955, -0.1124, -0.0903,  0.1775,
        -0.1550, -0.1590,  0.0825,  0.0184,  0.0124,  0.0257, -0.0513, -0.0735,
        -0.1821,  0.1181, -0.1673,  0.1788, -0.1246, -0.0331,  0.1216, -0.1648,
        -0.1003, -0.1495,  0.0837, -0.1374, -0.0795, -0.0338, -0.0701, -0.0988,
         0.0498,  0.0296,  0.0201,  0.0375, -0.1186, -0.0972, -0.1184,  0.0853,
        -0.1232, -0.1409, -0.0021, -0.1409, -0.0278,  0.1160,  0.0306, -0.1388,
         0.0577,  0.0149, -0.0311,  0.1051,  0.0047,  0.0781, -0.0844,  0.1643,
         0.0230, -0.0364, -0.0816,  0.1253, -0.0984, -0.0109, -0.1849, -0.0671,
        -0.1601,  0.1018,  0.0266, -0.0047,  0.1514,  0.0879, -0.0559, -0.0652,
         0.0946, -0.0023,  0.1114,  0.0479,  0.0956,  0.0620, -0.0813,  0.1242,
         0.1391,  0.1596, -0.0004, -0.0732, -0.0706, -0.0448, -0.0992, -0.0972,
         0.0237,  0.0268,  0.0725, -0.0285, -0.1219,  0.0935,  0.0606, -0.0956,
        -0.0810,  0.1248, -0.1650, -0.0724, -0.0258, -0.1515,  0.0452,  0.0958,
        -0.0237,  0.1496, -0.0251, -0.0867, -0.0335, -0.1183,  0.0254,  0.1247,
         0.0831, -0.1357, -0.0371,  0.0496,  0.1637,  0.1133, -0.0701,  0.1557],
       device='cuda:0')
recurrent_blocks.3.weight_ih_l0_reverse tensor([[-0.0297,  0.0311, -0.1316,  ..., -0.0406,  0.0844,  0.0773],
        [-0.1057, -0.0979, -0.1074,  ...,  0.1787,  0.0924, -0.1730],
        [-0.1155,  0.1459,  0.0438,  ...,  0.0194,  0.0329,  0.0535],
        ...,
        [ 0.0557, -0.1177, -0.0287,  ..., -0.0545, -0.1192, -0.1095],
        [ 0.1250,  0.0475, -0.0458,  ...,  0.0190,  0.0997, -0.0678],
        [-0.1792, -0.0076,  0.1622,  ..., -0.1004,  0.0517, -0.0496]],
       device='cuda:0')
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.0949,  0.0100, -0.0533,  ..., -0.0843,  0.1531,  0.0010],
        [ 0.1224, -0.0599,  0.1404,  ...,  0.0291,  0.0269, -0.1395],
        [ 0.1160,  0.0767,  0.0004,  ...,  0.0707,  0.0731,  0.1103],
        ...,
        [ 0.0550, -0.1235, -0.0385,  ..., -0.1431, -0.1337,  0.1772],
        [ 0.0329, -0.0964, -0.1336,  ..., -0.0629, -0.1578,  0.1696],
        [-0.0766,  0.1469,  0.0563,  ..., -0.1519, -0.0771, -0.0904]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0_reverse tensor([ 0.1281,  0.0347,  0.0876,  0.1331,  0.0649, -0.1735, -0.0084, -0.0163,
         0.0102,  0.1379,  0.0312, -0.1024,  0.1243, -0.1067,  0.1220,  0.1181,
         0.1137, -0.1232,  0.1181,  0.1037,  0.1434,  0.0652, -0.1680, -0.0602,
         0.1474, -0.1133,  0.0723, -0.1119,  0.1863,  0.0232,  0.0191,  0.0294,
         0.1524, -0.1677, -0.1240,  0.0732,  0.1523,  0.1303, -0.0997,  0.1055,
         0.0525, -0.0820,  0.1712, -0.1698,  0.1209, -0.0214,  0.1242, -0.1577,
         0.0118,  0.0621, -0.1450, -0.0829,  0.1253, -0.0757,  0.1176,  0.1868,
         0.1000, -0.1381, -0.1635,  0.0373,  0.1469, -0.1619, -0.1585,  0.0213,
         0.0874,  0.1257, -0.0648, -0.1611,  0.0818,  0.1114, -0.1285,  0.1050,
        -0.0848, -0.1655, -0.0466,  0.0261, -0.1184, -0.0817,  0.0985, -0.0359,
        -0.0281,  0.1445,  0.0124,  0.0341,  0.0473,  0.0909, -0.0282,  0.1392,
        -0.0811, -0.0879, -0.0167,  0.0198, -0.1496, -0.1261, -0.0854,  0.0992,
        -0.0207, -0.0325,  0.0677,  0.0430, -0.0121,  0.0018,  0.1016,  0.0839,
         0.0889, -0.0098, -0.0208,  0.1215,  0.0925,  0.1074,  0.1642,  0.0820,
        -0.0094,  0.0635,  0.1112, -0.0531,  0.1250, -0.0120, -0.0665, -0.0829,
        -0.1675,  0.0688, -0.0953, -0.1105,  0.1672,  0.1153, -0.0050,  0.0068],
       device='cuda:0')
recurrent_blocks.3.bias_hh_l0_reverse tensor([-0.1148,  0.1466,  0.1591, -0.1264, -0.1807, -0.0330,  0.0085, -0.1507,
        -0.1673,  0.0648,  0.1067,  0.0319, -0.0429, -0.0315,  0.0557, -0.1510,
        -0.0305,  0.1008,  0.1369,  0.0872, -0.1394,  0.1326, -0.1307, -0.0118,
         0.1175, -0.0388, -0.0149, -0.1039,  0.1419, -0.0601,  0.1180,  0.0979,
         0.1442, -0.0503,  0.1422, -0.1387, -0.1252, -0.0429, -0.0983,  0.0273,
        -0.0096,  0.0893, -0.0443,  0.0983, -0.0710, -0.0214, -0.1019,  0.1212,
         0.0756, -0.1288, -0.0112, -0.1170,  0.0038, -0.0621, -0.1861,  0.0019,
         0.0063, -0.1447, -0.0066, -0.1444, -0.0075, -0.1583, -0.0236,  0.0362,
        -0.1402, -0.1598, -0.1664,  0.0056,  0.1116,  0.0945, -0.0768,  0.1299,
        -0.1627, -0.0609, -0.0749, -0.0043,  0.0694,  0.1684, -0.0618, -0.1455,
        -0.0855,  0.0235,  0.0602,  0.0816, -0.1350,  0.0602, -0.1339,  0.0736,
         0.0970,  0.1003, -0.1802,  0.0585, -0.1121, -0.1454,  0.0421,  0.1421,
        -0.0122, -0.1428, -0.1246,  0.1612, -0.0940, -0.0288,  0.0332,  0.1599,
         0.1339, -0.0035,  0.0767, -0.1072,  0.0040, -0.0151, -0.0586, -0.1043,
         0.0804, -0.0077,  0.0176,  0.0024, -0.0892, -0.1596, -0.1120,  0.1151,
        -0.0363,  0.0942, -0.1160,  0.1374,  0.0746,  0.1317,  0.1585,  0.1586],
       device='cuda:0')
fc_blocks.0.0.weight tensor([[ 0.0065, -0.0454,  0.1086,  ...,  0.0496, -0.0676,  0.0634],
        [ 0.1306,  0.0140, -0.1180,  ...,  0.0164, -0.0944, -0.0694],
        [ 0.1195, -0.1096, -0.0521,  ...,  0.0389,  0.0978,  0.0186],
        ...,
        [ 0.0669, -0.0798, -0.0566,  ...,  0.1076, -0.0268, -0.0959],
        [-0.1021, -0.0236,  0.0638,  ...,  0.0367, -0.1087, -0.0190],
        [ 0.0584,  0.0922,  0.0925,  ..., -0.0662,  0.0395, -0.0754]],
       device='cuda:0')
fc_blocks.0.0.bias tensor([-0.0495,  0.0925,  0.0696,  0.1105,  0.0407,  0.0847,  0.0828, -0.0381,
        -0.0979,  0.1220,  0.0885, -0.0838, -0.0292, -0.1278, -0.0021,  0.1232,
        -0.0077, -0.0625, -0.0450,  0.0705,  0.0156,  0.0515, -0.0909, -0.1199,
        -0.0941, -0.0351, -0.0948,  0.0053, -0.1195, -0.0284,  0.0854, -0.0958],
       device='cuda:0')
fc_blocks.1.0.weight tensor([[ 0.0336,  0.0912,  0.1507,  0.0401,  0.0324,  0.0919, -0.0101,  0.1767,
         -0.1134, -0.0562,  0.0284,  0.1652,  0.0206, -0.1665, -0.1294,  0.1610,
          0.1343,  0.0039, -0.0104, -0.1196, -0.0602, -0.0816,  0.1284, -0.0492,
          0.0301, -0.1449, -0.0008, -0.1138,  0.0117,  0.1568,  0.0921, -0.0485],
        [-0.0493,  0.0239,  0.0780,  0.0697, -0.1039, -0.0307,  0.1468, -0.0075,
         -0.1516, -0.1181, -0.0879, -0.1510,  0.0835, -0.0870,  0.1399,  0.0227,
          0.0617,  0.1640, -0.0929, -0.1311, -0.1637,  0.0130,  0.1836, -0.0681,
          0.1274, -0.0202, -0.0701,  0.0427,  0.0940,  0.0560,  0.1379, -0.0730],
        [-0.0244, -0.0984,  0.1536,  0.0915,  0.0275, -0.1744, -0.0898, -0.0483,
         -0.0865,  0.1361, -0.0767, -0.1622, -0.1447,  0.1028, -0.1274,  0.1642,
          0.1482, -0.0193, -0.0496,  0.0582,  0.0705, -0.0667,  0.0189, -0.1251,
          0.0267, -0.1062,  0.0773, -0.0893,  0.0527,  0.1358, -0.0847, -0.0071],
        [ 0.0854, -0.0823,  0.0140, -0.1307, -0.1186, -0.0419,  0.0926, -0.0941,
         -0.0983,  0.0438, -0.1487,  0.1623,  0.1266, -0.0125,  0.0049,  0.0666,
          0.1039,  0.0358, -0.1209, -0.0059,  0.1426, -0.0247, -0.0346, -0.1270,
         -0.0875, -0.0650, -0.1513,  0.0518, -0.1246,  0.1226, -0.1529, -0.0129],
        [-0.0091, -0.0472, -0.1028,  0.1404, -0.0370, -0.1427,  0.0659, -0.0085,
         -0.0846,  0.1224, -0.1143, -0.0196,  0.0323, -0.0417, -0.1345, -0.1654,
         -0.1356, -0.1067, -0.1036,  0.1404,  0.1648, -0.0309,  0.0853, -0.0801,
          0.1408,  0.0877, -0.1210, -0.1759,  0.1658,  0.0856, -0.1825,  0.0819],
        [-0.1594, -0.1220, -0.0308,  0.1258,  0.0377,  0.1284,  0.1547, -0.0066,
         -0.0661, -0.0313,  0.0953, -0.0481, -0.0672, -0.0089, -0.0758, -0.1375,
         -0.0403,  0.0388, -0.1830,  0.0691, -0.0026, -0.1484,  0.0941, -0.0190,
          0.0075, -0.1221, -0.0407,  0.1227, -0.0102, -0.0170, -0.1096,  0.0752],
        [-0.1729,  0.0640, -0.0266,  0.1627,  0.1285, -0.1805, -0.1664, -0.1049,
          0.0197,  0.0239,  0.1648,  0.1051, -0.1360,  0.0039, -0.0174,  0.0374,
         -0.1518, -0.1478, -0.1465,  0.0056,  0.0594, -0.0652,  0.0826, -0.1636,
          0.0717,  0.0210,  0.0619, -0.0678,  0.1752, -0.1384, -0.1167, -0.0843],
        [ 0.0219, -0.1014,  0.0917, -0.1779, -0.0566, -0.1508,  0.0552, -0.1259,
         -0.1399,  0.1483,  0.0673, -0.0178, -0.0093, -0.0050,  0.0370,  0.0316,
         -0.1040, -0.0299,  0.0382,  0.1565,  0.1268, -0.0262,  0.0362, -0.0675,
         -0.1861, -0.0474, -0.1486,  0.0082,  0.0108, -0.1234, -0.0582, -0.0519],
        [ 0.1110,  0.0823, -0.0639, -0.1604, -0.1461, -0.0890, -0.0410, -0.1159,
         -0.1361, -0.0694, -0.1699,  0.1097, -0.0925,  0.0464,  0.1028,  0.1092,
         -0.0947,  0.0371, -0.0975,  0.1056,  0.1143,  0.1011,  0.1220, -0.0043,
          0.0576,  0.1201, -0.1092,  0.0961, -0.1253,  0.0936,  0.1347,  0.1001],
        [ 0.1559, -0.1395,  0.0878,  0.0287, -0.0987, -0.1021,  0.0502, -0.0090,
         -0.0233, -0.0362, -0.1518, -0.0337, -0.1191,  0.1581,  0.1329,  0.1768,
         -0.1301, -0.0717, -0.1453, -0.0733, -0.1497, -0.0651, -0.1364, -0.0400,
         -0.0226, -0.0921,  0.0488,  0.1471, -0.1702,  0.0381, -0.0176, -0.0469],
        [-0.0258,  0.0704, -0.0674,  0.1645, -0.0647,  0.1445,  0.0557, -0.1318,
         -0.1275,  0.0402,  0.1828,  0.1559, -0.0346,  0.1361,  0.0191,  0.1462,
         -0.0113,  0.1648, -0.0423, -0.0925, -0.0139, -0.1395, -0.1848,  0.0858,
         -0.0930,  0.1158, -0.0469, -0.0403, -0.1410, -0.0240, -0.0159, -0.0407],
        [ 0.0983, -0.1415, -0.0224, -0.1188,  0.0578, -0.0326, -0.1088,  0.0383,
         -0.0181, -0.1400, -0.0153, -0.1403, -0.0366,  0.0726,  0.0173, -0.0995,
         -0.0158,  0.1260,  0.1385, -0.0355, -0.0703,  0.0573, -0.1601,  0.1433,
         -0.0046,  0.1449, -0.1362, -0.0210,  0.0436,  0.1202,  0.1064, -0.1435],
        [ 0.1073, -0.1863, -0.1580, -0.1202, -0.0008, -0.0208, -0.0190,  0.1568,
          0.1823,  0.0758, -0.0123,  0.1234,  0.0803, -0.0380,  0.1496,  0.0645,
         -0.1061,  0.0740, -0.1686,  0.0911, -0.0248, -0.1592, -0.0587,  0.0338,
          0.0446, -0.0103, -0.1010,  0.1516, -0.1463, -0.1788, -0.0154, -0.1136],
        [ 0.1627, -0.0281, -0.0258, -0.1800,  0.0753,  0.1076, -0.1695, -0.0275,
         -0.0457,  0.0228,  0.0182, -0.0845, -0.1791,  0.0334, -0.0834, -0.1090,
         -0.1123, -0.0432,  0.0886,  0.0065, -0.1692, -0.0793, -0.1174, -0.1168,
          0.0081, -0.1621,  0.0244, -0.1655,  0.1195,  0.1449,  0.0054,  0.0110],
        [ 0.1330,  0.0184, -0.0620, -0.0446,  0.1633,  0.0749, -0.0574, -0.1382,
          0.0669,  0.1313, -0.0884, -0.0769, -0.0272, -0.0611, -0.0699,  0.1584,
          0.1391,  0.1565,  0.0680,  0.1293,  0.1633,  0.0558,  0.0586,  0.1016,
         -0.1365, -0.0467,  0.0971,  0.1006, -0.0289, -0.1154,  0.0542,  0.0633],
        [ 0.0718,  0.0872,  0.0298, -0.1344,  0.1762,  0.1519, -0.1636,  0.0077,
         -0.0859,  0.1739,  0.0135, -0.0765,  0.1334, -0.0668,  0.1717,  0.1618,
          0.0257,  0.1216,  0.1653, -0.1326,  0.0201, -0.1294,  0.1610, -0.0527,
          0.1195,  0.0497, -0.1274, -0.0409, -0.0235, -0.0814,  0.0433,  0.1659]],
       device='cuda:0')
fc_blocks.1.0.bias tensor([ 0.1186, -0.0204, -0.1049, -0.0023,  0.1094,  0.0723,  0.0340,  0.1262,
        -0.1494, -0.0303,  0.1039,  0.0840,  0.0970, -0.1626,  0.1224,  0.0791],
       device='cuda:0')
fc_blocks.2.0.weight tensor([[-0.0566,  0.2034, -0.1340, -0.0268, -0.1537, -0.1577,  0.2448,  0.1158,
          0.0823, -0.0956,  0.0442, -0.1089, -0.1808, -0.2095,  0.0934,  0.2569],
        [ 0.0018,  0.1931, -0.2446,  0.0866, -0.0993, -0.2192,  0.0990, -0.0941,
         -0.0830,  0.0395,  0.1068,  0.2239,  0.2170, -0.1931,  0.1901,  0.0049],
        [ 0.0831, -0.1193,  0.1194, -0.1869,  0.0770, -0.1957,  0.1941,  0.0129,
         -0.2537, -0.1419, -0.1839, -0.0334, -0.1512, -0.2108,  0.1045,  0.2043],
        [ 0.0722,  0.1369,  0.2287, -0.1708,  0.0770,  0.2204, -0.0781, -0.1101,
          0.1028, -0.1236, -0.1264,  0.1743, -0.0699,  0.1996, -0.0300,  0.1324],
        [ 0.2335, -0.0756, -0.1439,  0.1004,  0.0359, -0.0146,  0.2320, -0.0965,
         -0.0246,  0.0925,  0.2285, -0.2094, -0.1944, -0.2427, -0.0257,  0.1846],
        [ 0.1091,  0.1587, -0.1369, -0.1851, -0.0660,  0.2206, -0.0096, -0.0088,
          0.1004,  0.2404, -0.2032, -0.1317,  0.0871,  0.1446, -0.1555,  0.2063],
        [-0.1463,  0.0410, -0.1297,  0.1657,  0.2114,  0.0252, -0.0376, -0.0273,
          0.0086,  0.1225, -0.0364, -0.0863,  0.0699, -0.1232,  0.0410,  0.2303],
        [-0.1571, -0.0923, -0.1517,  0.0821, -0.1552,  0.1210,  0.0655,  0.1992,
          0.1909,  0.1452,  0.0155, -0.0703, -0.2530, -0.1944, -0.0756, -0.2120]],
       device='cuda:0')
fc_blocks.2.0.bias tensor([ 0.0878,  0.0054, -0.0546,  0.2237,  0.0057, -0.0625,  0.0244,  0.1370],
       device='cuda:0')
fc_blocks.3.0.weight tensor([[-0.0802, -0.3600, -0.1948, -0.0181, -0.1933,  0.3602,  0.3340,  0.0499],
        [-0.0957,  0.1364,  0.0368,  0.2200, -0.2943, -0.0680, -0.2467, -0.1958],
        [ 0.0906,  0.0302,  0.2806, -0.1202,  0.2326, -0.1429,  0.2073, -0.0286],
        [-0.2854, -0.1982,  0.1602,  0.2073, -0.0126, -0.2132,  0.2521,  0.3322]],
       device='cuda:0')
fc_blocks.3.0.bias tensor([0.0860, 0.0572, 0.2891, 0.0965], device='cuda:0')
fc_blocks.4.0.weight tensor([[-0.4418, -0.0547, -0.1830,  0.0204],
        [ 0.2862, -0.0311,  0.3162, -0.2630]], device='cuda:0')
fc_blocks.4.0.bias tensor([-0.2238, -0.2699], device='cuda:0')
