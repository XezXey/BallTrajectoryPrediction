==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  []
1. input_col =  [3, 4]
2. input_startpos_col =  [3, 4, 5]
3. gt_col =  [5]
4. gt_startpos_col =  [0, 1, 2]
5. gt_xyz_col =  [0, 1, 2]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                      | 0/3 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 28.03it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 27.97it/s]
===============================Dataset shape===============================
Mixed : (6426,)
===========================================================================
Mixed:   0%|                                                                                      | 0/2 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 76.58it/s]
===============================Dataset shape===============================
Mixed : (1029,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 2]), initial position=torch.Size([128, 1, 3])
gt batch [0] : batch=torch.Size([128, 723, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 633, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 2]), initial position=torch.Size([128, 1, 3])
gt batch [1] : batch=torch.Size([128, 633, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 634, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 636, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 636, 2]), initial position=torch.Size([128, 1, 3])
gt batch [2] : batch=torch.Size([128, 636, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 637, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 620, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 620, 2]), initial position=torch.Size([128, 1, 3])
gt batch [3] : batch=torch.Size([128, 620, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 621, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 2]), initial position=torch.Size([128, 1, 3])
gt batch [4] : batch=torch.Size([128, 715, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 2]), initial position=torch.Size([128, 1, 3])
gt batch [5] : batch=torch.Size([128, 742, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 2]), initial position=torch.Size([128, 1, 3])
gt batch [6] : batch=torch.Size([128, 696, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 644, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 644, 2]), initial position=torch.Size([128, 1, 3])
gt batch [7] : batch=torch.Size([128, 644, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 645, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 2]), initial position=torch.Size([128, 1, 3])
gt batch [8] : batch=torch.Size([128, 698, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 2]), initial position=torch.Size([128, 1, 3])
gt batch [9] : batch=torch.Size([128, 680, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 2]), initial position=torch.Size([128, 1, 3])
gt batch [10] : batch=torch.Size([128, 688, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 2]), initial position=torch.Size([128, 1, 3])
gt batch [11] : batch=torch.Size([128, 752, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 2]), initial position=torch.Size([128, 1, 3])
gt batch [12] : batch=torch.Size([128, 718, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 2]), initial position=torch.Size([128, 1, 3])
gt batch [13] : batch=torch.Size([128, 802, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 2]), initial position=torch.Size([128, 1, 3])
gt batch [14] : batch=torch.Size([128, 680, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 2]), initial position=torch.Size([128, 1, 3])
gt batch [15] : batch=torch.Size([128, 687, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 2]), initial position=torch.Size([128, 1, 3])
gt batch [16] : batch=torch.Size([128, 687, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 707, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 2]), initial position=torch.Size([128, 1, 3])
gt batch [17] : batch=torch.Size([128, 707, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 682, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 2]), initial position=torch.Size([128, 1, 3])
gt batch [18] : batch=torch.Size([128, 682, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 2]), initial position=torch.Size([128, 1, 3])
gt batch [19] : batch=torch.Size([128, 688, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 677, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 677, 2]), initial position=torch.Size([128, 1, 3])
gt batch [20] : batch=torch.Size([128, 677, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 678, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 668, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 2]), initial position=torch.Size([128, 1, 3])
gt batch [21] : batch=torch.Size([128, 668, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 2]), initial position=torch.Size([128, 1, 3])
gt batch [22] : batch=torch.Size([128, 732, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 2]), initial position=torch.Size([128, 1, 3])
gt batch [23] : batch=torch.Size([128, 734, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 668, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 2]), initial position=torch.Size([128, 1, 3])
gt batch [24] : batch=torch.Size([128, 668, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 2]), initial position=torch.Size([128, 1, 3])
gt batch [25] : batch=torch.Size([128, 715, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 2]), initial position=torch.Size([128, 1, 3])
gt batch [26] : batch=torch.Size([128, 758, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 648, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 2]), initial position=torch.Size([128, 1, 3])
gt batch [27] : batch=torch.Size([128, 648, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 2]), initial position=torch.Size([128, 1, 3])
gt batch [28] : batch=torch.Size([128, 680, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 2]), initial position=torch.Size([128, 1, 3])
gt batch [29] : batch=torch.Size([128, 691, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 2]), initial position=torch.Size([128, 1, 3])
gt batch [30] : batch=torch.Size([128, 687, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 721, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 2]), initial position=torch.Size([128, 1, 3])
gt batch [31] : batch=torch.Size([128, 721, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 2]), initial position=torch.Size([128, 1, 3])
gt batch [32] : batch=torch.Size([128, 711, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 2]), initial position=torch.Size([128, 1, 3])
gt batch [33] : batch=torch.Size([128, 772, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 2]), initial position=torch.Size([128, 1, 3])
gt batch [34] : batch=torch.Size([128, 667, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 2]), initial position=torch.Size([128, 1, 3])
gt batch [35] : batch=torch.Size([128, 699, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 2]), initial position=torch.Size([128, 1, 3])
gt batch [36] : batch=torch.Size([128, 711, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 672, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 2]), initial position=torch.Size([128, 1, 3])
gt batch [37] : batch=torch.Size([128, 672, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 670, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 2]), initial position=torch.Size([128, 1, 3])
gt batch [38] : batch=torch.Size([128, 670, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 642, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 642, 2]), initial position=torch.Size([128, 1, 3])
gt batch [39] : batch=torch.Size([128, 642, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 643, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 685, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 685, 2]), initial position=torch.Size([128, 1, 3])
gt batch [40] : batch=torch.Size([128, 685, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 686, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 664, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 2]), initial position=torch.Size([128, 1, 3])
gt batch [41] : batch=torch.Size([128, 664, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 2]), initial position=torch.Size([128, 1, 3])
gt batch [42] : batch=torch.Size([128, 704, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 788, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 2]), initial position=torch.Size([128, 1, 3])
gt batch [43] : batch=torch.Size([128, 788, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 2]), initial position=torch.Size([128, 1, 3])
gt batch [44] : batch=torch.Size([128, 704, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 728, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 2]), initial position=torch.Size([128, 1, 3])
gt batch [45] : batch=torch.Size([128, 728, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 616, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 616, 2]), initial position=torch.Size([128, 1, 3])
gt batch [46] : batch=torch.Size([128, 616, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 617, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 617, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 617, 2]), initial position=torch.Size([128, 1, 3])
gt batch [47] : batch=torch.Size([128, 617, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 618, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 2]), initial position=torch.Size([128, 1, 3])
gt batch [48] : batch=torch.Size([128, 708, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 675, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 675, 2]), initial position=torch.Size([128, 1, 3])
gt batch [49] : batch=torch.Size([128, 675, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 676, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'model_depth': BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)}
{'model_depth': {'input_size': 2, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - model_depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/50].........
   [##] Training... Train Loss : 4582.042
   ======> Trajectory Loss : 3808.552, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.006, BelowGroundPenalize Loss : 773.484, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 25014.311
   ======> Trajectory Loss : 21594.111, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.029, BelowGroundPenalize Loss : 3420.171, MultiviewReprojection Loss : 0.000
tensor([[[ -0.7762,   3.9130],
         [ -0.6201,   3.7134],
         [ -2.1384,   5.5345],
         ...,
         [-10.5087,  -8.8892],
         [-11.1483, -11.2937],
         [ -8.3723,  -8.1917]],

        [[  4.1406,   1.7081],
         [  1.4850,   0.4890],
         [  2.6389,   0.3249],
         ...,
         [-12.1555, -10.3111],
         [ -8.2695,  -8.5055],
         [-11.6362, -10.6013]],

        [[  3.8763,  -3.8795],
         [  4.5880,  -7.3685],
         [  1.3422,   1.5025],
         ...,
         [-10.0000, -10.0000],
         [-10.0000, -10.0000],
         [-10.4001,  -9.6973]],

        ...,

        [[  0.5465,   3.5710],
         [  0.6922,   4.4540],
         [  0.0493,   2.9180],
         ...,
         [-10.6138, -10.8545],
         [-10.0144,  -8.1960],
         [ -8.4299,  -8.6599]],

        [[ -1.7883,  12.8109],
         [ -3.6298,  11.5089],
         [ -5.8414,  11.6501],
         ...,
         [ -8.0471,  -9.4244],
         [ -9.5342,  -9.1997],
         [ -9.8628, -12.0177]],

        [[  1.9330,  -1.3616],
         [  1.9328,  -1.7826],
         [  3.5714,  -0.1550],
         ...,
         [ -9.7144,  -9.9268],
         [-10.1733, -10.1711],
         [ -8.5010, -10.0198]]], device='cuda:0')
torch.Size([128, 681, 1]) torch.Size([128, 681, 2]) torch.Size([128, 681, 2]) torch.Size([128, 681, 1]) torch.Size([128])
tensor([[[ -0.7762,   3.9130],
         [ -0.6201,   3.7134],
         [ -2.1384,   5.5345],
         ...,
         [-10.5087,  -8.8892],
         [-11.1483, -11.2937],
         [ -8.3723,  -8.1917]],

        [[  4.1406,   1.7081],
         [  1.4850,   0.4890],
         [  2.6389,   0.3249],
         ...,
         [-12.1555, -10.3111],
         [ -8.2695,  -8.5055],
         [-11.6362, -10.6013]],

        [[  3.8763,  -3.8795],
         [  4.5880,  -7.3685],
         [  1.3422,   1.5025],
         ...,
         [-10.0000, -10.0000],
         [-10.0000, -10.0000],
         [-10.4001,  -9.6973]],

        ...,

        [[  0.5465,   3.5710],
         [  0.6922,   4.4540],
         [  0.0493,   2.9180],
         ...,
         [-10.6138, -10.8545],
         [-10.0144,  -8.1960],
         [ -8.4299,  -8.6599]],

        [[ -1.7883,  12.8109],
         [ -3.6298,  11.5089],
         [ -5.8414,  11.6501],
         ...,
         [ -8.0471,  -9.4244],
         [ -9.5342,  -9.1997],
         [ -9.8628, -12.0177]],

        [[  1.9330,  -1.3616],
         [  1.9328,  -1.7826],
         [  3.5714,  -0.1550],
         ...,
         [ -9.7144,  -9.9268],
         [-10.1733, -10.1711],
         [ -8.5010, -10.0198]]], device='cuda:0')
