==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.31it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.76it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.68it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 719, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 719, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 720, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 739, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 739, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 740, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 706, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 706, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 706, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 714, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 714, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 763, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 763, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 787, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 787, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 757, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 757, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 757, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 733, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 733, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 746, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 746, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 746, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 747, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 649, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 649, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 650, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 770, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 770, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 771, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........IDX = 0 :  tensor([[[ 0.3556, -1.2619,  0.9468,  ...,  0.1681,  0.3085, -1.5932],
         [ 0.0923,  0.4093,  0.4006,  ...,  0.5922, -1.2172, -0.7793],
         [ 1.1060,  0.0424, -0.7120,  ...,  0.6741,  0.2207,  0.7204],
         ...,
         [-0.9791, -1.0030,  1.3414,  ...,  0.5602,  0.0447,  1.6783],
         [-0.2236, -0.4351, -0.8037,  ..., -0.3034,  0.7335, -0.0845],
         [ 1.3460,  1.1885, -2.2458,  ..., -1.1234, -0.8693,  0.1438]],

        [[-0.4209, -1.6860, -0.3010,  ..., -0.8440, -0.6061, -2.0301],
         [ 1.7610,  0.3870,  0.0941,  ...,  0.8547, -2.0934,  0.1532],
         [-0.9902,  0.6108, -1.8855,  ...,  0.6830,  0.8262, -2.3186],
         ...,
         [-0.7544,  2.0194,  0.1012,  ...,  1.1246, -0.4745, -0.7032],
         [-0.5051,  1.6705,  0.6590,  ..., -0.1695, -0.5912,  0.6207],
         [-0.4585,  0.7455,  0.3548,  ..., -0.5428,  0.2923, -2.0610]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-1.0131e+00,  8.2446e-01, -5.0547e-01,  ..., -1.5861e-01,
           1.0739e-01, -1.7191e+00],
         [-2.1693e+00,  2.1215e-01, -7.7425e-01,  ..., -1.9181e-01,
          -1.5674e-01, -1.5106e+00],
         [-4.3919e-01,  1.1822e+00, -5.4077e-01,  ..., -1.1098e+00,
           1.4286e+00, -1.4975e-01],
         ...,
         [-1.0888e+00,  2.0235e+00, -3.9289e-01,  ..., -5.4367e-01,
          -6.6028e-01,  1.2091e+00],
         [ 1.6880e+00, -6.7940e-01, -4.1068e-01,  ..., -3.1402e-02,
           1.1930e+00,  2.7739e-01],
         [ 2.5416e-01, -1.1282e+00,  2.9522e-01,  ..., -1.7988e+00,
          -4.1935e-01,  1.5644e+00]],

        [[-1.8419e+00,  5.8366e-01,  1.3998e+00,  ..., -2.5546e-01,
          -1.3197e+00,  1.6442e+00],
         [ 2.0231e+00,  2.4660e+00,  2.2530e-01,  ...,  6.8435e-01,
           1.5042e+00, -3.7456e-01],
         [ 1.4508e+00,  1.4922e+00, -1.0117e+00,  ...,  1.7408e+00,
          -3.7271e-02, -2.0450e-01],
         ...,
         [ 8.3881e-01, -3.7408e-01,  9.8104e-01,  ...,  7.6440e-01,
           6.3141e-04,  1.3790e+00],
         [-1.3192e-01, -1.1645e+00, -1.5809e+00,  ..., -9.5535e-02,
          -5.8168e-01,  1.0323e+00],
         [-5.5943e-01, -3.6255e-01, -3.8224e-01,  ...,  5.4736e-01,
           1.1787e+00,  6.2087e-02]]], device='cuda:0',
       grad_fn=<SelectBackward>)
h tensor([[[[-1.0038e+00,  8.3285e-01, -5.1376e-01,  ..., -1.6731e-01,
            1.1604e-01, -1.7219e+00],
          [-2.1598e+00,  2.1949e-01, -7.6589e-01,  ..., -1.8669e-01,
           -1.4754e-01, -1.5040e+00],
          [-4.3912e-01,  1.1788e+00, -5.3308e-01,  ..., -1.1186e+00,
            1.4371e+00, -1.4072e-01],
          ...,
          [-1.0860e+00,  2.0190e+00, -3.9630e-01,  ..., -5.4797e-01,
           -6.5968e-01,  1.2130e+00],
          [ 1.6969e+00, -6.7689e-01, -4.1618e-01,  ..., -3.7330e-02,
            1.2017e+00,  2.8011e-01],
          [ 2.5905e-01, -1.1243e+00,  2.9730e-01,  ..., -1.8045e+00,
           -4.1212e-01,  1.5708e+00]],

         [[-1.8490e+00,  5.7459e-01,  1.3913e+00,  ..., -2.6172e-01,
           -1.3284e+00,  1.6530e+00],
          [ 2.0321e+00,  2.4584e+00,  2.1834e-01,  ...,  6.8857e-01,
            1.4963e+00, -3.8333e-01],
          [ 1.4426e+00,  1.4832e+00, -1.0058e+00,  ...,  1.7491e+00,
           -4.1749e-02, -1.9648e-01],
          ...,
          [ 8.3565e-01, -3.7695e-01,  9.8323e-01,  ...,  7.6313e-01,
            3.3069e-03,  1.3801e+00],
          [-1.3870e-01, -1.1725e+00, -1.5860e+00,  ..., -8.7517e-02,
           -5.7565e-01,  1.0254e+00],
          [-5.5318e-01, -3.6925e-01, -3.8408e-01,  ...,  5.5286e-01,
            1.1742e+00,  6.0442e-02]]],


        [[[ 1.6705e-01,  1.3839e+00,  6.4717e-01,  ..., -1.1930e+00,
           -1.7416e+00, -5.3555e-01],
          [ 1.3213e+00,  1.1751e+00, -1.0512e+00,  ..., -1.8203e-01,
           -4.2856e-02,  1.7257e+00],
          [ 1.0452e+00,  6.5864e-01,  5.8941e-01,  ...,  4.2977e-01,
           -2.1044e-01, -1.3748e+00],
          ...,
          [ 2.1780e+00, -3.6872e-01,  1.5683e+00,  ...,  8.2511e-01,
           -3.1519e-02, -1.2128e+00],
          [ 6.7226e-02, -1.1398e+00,  5.2479e-01,  ...,  2.8078e-01,
            8.7355e-01,  1.0286e+00],
          [ 8.8090e-01, -2.2691e+00,  1.2596e+00,  ..., -1.2969e+00,
            9.9112e-01,  2.5742e-01]],

         [[ 5.3894e-01,  1.5893e-01,  4.8223e-01,  ..., -2.9846e-02,
            1.0106e+00, -6.9434e-01],
          [ 7.9882e-02, -2.0390e+00,  5.2222e-01,  ...,  8.8552e-01,
            3.9290e-01, -1.9429e-01],
          [-3.8771e+00,  2.5304e-01,  4.5063e-01,  ...,  8.8836e-01,
           -1.7593e+00, -1.9198e+00],
          ...,
          [ 4.4321e-01, -6.6337e-01,  2.9494e-01,  ..., -6.9545e-02,
           -4.1790e-01, -1.4099e+00],
          [ 1.0853e+00, -1.7788e-01,  1.2968e+00,  ..., -2.0554e-01,
            6.1375e-01,  1.2556e+00],
          [ 4.0688e-01,  4.1762e-01, -2.2610e+00,  ...,  7.8059e-02,
           -7.7432e-02, -1.3594e+00]]],


        [[[-2.7342e-01,  2.5994e-01,  6.0854e-01,  ...,  6.5906e-01,
           -2.3977e-01,  2.3894e+00],
          [-3.2845e-02, -1.4329e+00, -1.1378e-03,  ..., -1.3864e+00,
           -1.4792e-01, -2.6450e-01],
          [ 1.1508e+00, -6.4307e-02,  5.7838e-01,  ..., -3.3694e-01,
           -2.5206e-01, -7.7153e-01],
          ...,
          [ 5.0115e-02,  4.1137e-01,  1.4122e+00,  ...,  5.4745e-01,
            1.3236e+00,  8.5617e-02],
          [ 7.4528e-01, -6.3114e-01, -1.3225e+00,  ..., -1.4062e+00,
            9.6285e-01, -2.1032e+00],
          [ 7.1195e-01, -2.0348e+00,  3.4212e-01,  ...,  1.7547e+00,
           -3.9506e-01, -3.6638e-01]],

         [[-1.2142e+00, -8.3284e-01,  9.4931e-01,  ..., -6.8114e-01,
            1.5368e+00,  1.0348e+00],
          [ 3.6547e-01,  5.8466e-01, -2.5421e+00,  ..., -8.5725e-02,
            1.4099e+00, -9.2640e-01],
          [ 5.7764e-01,  1.4601e+00,  4.1912e-01,  ...,  5.5276e-01,
            2.5441e-01, -1.0730e+00],
          ...,
          [ 1.7847e+00,  2.3782e+00, -2.2907e-03,  ..., -5.5357e-01,
            6.1585e-01, -1.1610e+00],
          [ 2.6204e-01, -9.7739e-01, -8.5391e-03,  ...,  8.7217e-01,
            9.2258e-02, -1.1547e-01],
          [-5.7901e-01,  1.5904e+00,  1.2439e+00,  ..., -5.5305e-01,
            1.3352e-01,  1.7693e+00]]],


        [[[-1.2929e+00,  2.6323e-01,  6.8986e-01,  ...,  1.2796e+00,
            5.6679e-01, -1.2112e+00],
          [ 1.2931e+00, -4.2320e-01,  4.6511e-01,  ...,  1.6555e+00,
            5.1730e-01, -2.2581e-01],
          [-4.8202e-02, -1.6396e+00, -3.2001e-01,  ..., -8.5529e-02,
            8.4805e-01, -1.1961e+00],
          ...,
          [-6.0719e-01,  1.0329e+00,  1.1162e+00,  ..., -1.2604e-01,
            9.9723e-01,  1.2114e+00],
          [ 6.3668e-01,  6.3605e-01, -2.2037e+00,  ..., -2.9013e-01,
            5.7260e-01, -2.2510e+00],
          [ 1.3544e+00,  6.0613e-01, -2.1526e-02,  ...,  3.1677e-01,
           -6.5691e-01,  1.0641e+00]],

         [[ 1.5807e-01,  3.0006e-01, -1.8375e-01,  ..., -6.4032e-01,
            2.6793e-01,  3.6176e-01],
          [-2.6495e-01, -1.4505e-01, -3.0926e-01,  ...,  1.0966e+00,
           -1.4903e+00, -6.5072e-01],
          [ 4.8393e-01,  9.1299e-02,  1.5613e+00,  ...,  2.4500e+00,
            1.4297e-01, -1.4626e+00],
          ...,
          [-5.0251e-01, -1.5319e-02,  3.3970e-01,  ...,  8.8745e-01,
            3.2914e-01, -1.5473e+00],
          [-1.0396e+00,  1.0505e+00, -1.5504e+00,  ...,  1.9635e-01,
           -1.9406e+00,  8.3329e-01],
          [-4.2082e-01, -2.0865e+00,  1.7013e+00,  ...,  1.1108e+00,
            1.5570e+00, -7.6219e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[-0.1600, -0.3127,  0.3946,  ...,  1.4813,  1.9023, -0.9018],
          [-2.2122, -2.2622, -0.5626,  ...,  0.2618, -0.1563, -0.9904],
          [ 1.1174, -0.2353,  1.0837,  ...,  0.2148, -0.6399,  0.5717],
          ...,
          [ 0.3834,  0.3144,  0.6205,  ..., -1.1260, -0.6935,  0.1385],
          [-1.1712,  0.0533,  0.9250,  ..., -1.4226, -0.9816, -2.2351],
          [-0.0148, -2.2438,  1.4813,  ..., -1.5774, -1.3639,  0.4520]],

         [[-1.9077,  0.5313, -1.0102,  ...,  0.6616, -0.9141,  0.2537],
          [ 0.2459, -1.7240,  0.3500,  ..., -0.0947,  0.7962,  1.2251],
          [-0.2449, -3.4991,  0.0379,  ..., -0.8586,  2.7550,  0.5607],
          ...,
          [ 2.2348, -0.3729,  0.1401,  ..., -0.0308,  1.6137,  0.0518],
          [-1.2563, -1.1112,  0.7139,  ..., -0.6645, -0.4417, -0.4069],
          [-0.2969, -0.2574, -1.1586,  ...,  1.1691, -0.3673, -0.8163]]],


        [[[-0.6449,  0.0886, -1.6286,  ...,  1.2053, -0.5064,  2.1795],
          [-1.0967, -0.9004,  0.1866,  ...,  1.2375,  0.0306,  1.0552],
          [-0.0996, -1.9103, -0.3115,  ..., -1.0554, -0.1441,  1.1107],
          ...,
          [ 0.3758,  1.6690,  1.2930,  ..., -1.2026,  1.6830, -0.4038],
          [-0.4392, -0.0921,  2.3453,  ..., -0.4224,  0.3529, -0.1283],
          [-1.0860, -2.2191, -0.3518,  ..., -1.7305, -1.0394,  0.1777]],

         [[-0.6238, -0.6442,  1.0868,  ...,  0.1178, -0.1596, -0.1952],
          [ 0.2715, -2.7565,  0.8832,  ...,  0.3209, -0.4798,  1.6459],
          [-0.6266, -0.8920, -0.1386,  ...,  0.7487, -0.3399,  0.8759],
          ...,
          [-0.0911,  0.8078, -1.4511,  ...,  0.2303,  0.6318,  0.7671],
          [-0.5671, -3.1614,  0.2310,  ..., -0.6049, -1.4847,  1.4327],
          [ 0.7096, -0.6380,  0.0704,  ..., -1.1613,  0.2995, -2.3050]]],


        [[[-1.0160, -2.4868, -1.4762,  ..., -0.2017, -2.1646,  0.4352],
          [ 0.1635,  2.1690,  0.1551,  ..., -1.4828, -0.7521, -0.4560],
          [ 0.1827,  0.1792,  0.1714,  ..., -0.5433,  0.1013, -1.6714],
          ...,
          [-0.2832,  0.3640,  0.2187,  ..., -0.3591, -0.7053,  0.5954],
          [-0.4970,  1.2874,  0.0831,  ..., -0.1723,  0.9310, -1.5192],
          [-2.1005, -0.6261,  0.3159,  ..., -1.3979,  0.7288, -0.4660]],

         [[-0.3187,  1.1174,  0.3216,  ...,  1.5369, -1.2335,  1.8113],
          [ 0.7540,  0.1963,  1.1598,  ..., -0.4804,  0.0445,  1.2379],
          [ 0.9817,  1.0295,  1.2122,  ..., -1.0517,  0.5731, -1.2644],
          ...,
          [-0.6562,  1.7230, -0.6343,  ...,  0.9369, -0.9331,  1.1326],
          [-0.0488, -1.1355, -0.1384,  ...,  1.9153,  1.3453,  0.9489],
          [-0.4429, -0.0991, -0.1023,  ..., -0.0772, -0.3067,  0.0178]]],


        [[[-2.1871, -0.7721,  0.1979,  ...,  2.1285,  0.0164, -0.5150],
          [ 0.5560,  0.0819, -0.2592,  ...,  0.4421, -1.4811,  0.2649],
          [-0.2354,  0.7652, -0.0199,  ..., -2.0752,  0.8029, -1.8098],
          ...,
          [ 1.0749,  0.8776,  1.7063,  ..., -1.0005, -1.7360, -0.2496],
          [ 1.3708, -0.1536, -0.4338,  ..., -0.6053,  0.0754,  0.0543],
          [ 1.3596, -1.2829,  0.5167,  ...,  1.0803,  1.1393,  0.8711]],

         [[-1.8131,  0.5757, -0.4049,  ..., -0.0587, -1.4351, -0.3833],
          [-0.3659, -1.3358, -1.1197,  ...,  0.4877,  0.1909, -0.8844],
          [ 0.2139, -0.9477,  0.2171,  ...,  0.5889, -0.7072,  0.3941],
          ...,
          [-0.8896, -0.8191, -0.5524,  ...,  1.0388,  1.5710, -0.0122],
          [-0.6190, -0.2070,  0.2813,  ...,  0.4534,  0.7271, -1.3014],
          [-0.8956,  0.4066,  1.2557,  ..., -0.3810, -0.3645, -0.6236]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
recurrent_blocks.0.weight_ih_l0 tensor([[ 0.1329,  0.0907,  0.1779],
        [-0.1601, -0.1212,  0.1359],
        [-0.1035,  0.1534,  0.0070],
        [-0.1075, -0.0957, -0.0882],
        [-0.1237,  0.1441,  0.1128],
        [ 0.0276, -0.1209,  0.1631],
        [-0.1648,  0.0366, -0.1405],
        [ 0.0347, -0.1358,  0.0197],
        [ 0.0190, -0.1002,  0.1534],
        [ 0.1102,  0.1531,  0.1395],
        [ 0.1640, -0.1643, -0.1597],
        [-0.1128, -0.1786,  0.1053],
        [ 0.1005, -0.0576,  0.1347],
        [ 0.1472, -0.1055, -0.1638],
        [ 0.0641,  0.0440,  0.1617],
        [ 0.1716,  0.1838,  0.0162],
        [-0.1035,  0.1469, -0.1482],
        [-0.1282,  0.0635,  0.0794],
        [-0.1416,  0.0281,  0.0687],
        [ 0.0576,  0.0106, -0.1017],
        [-0.0725,  0.0204,  0.1813],
        [ 0.0977, -0.1394, -0.0059],
        [-0.0289,  0.0918, -0.0732],
        [ 0.1291,  0.0541,  0.1182],
        [-0.0314,  0.1694, -0.0711],
        [-0.1639,  0.0055, -0.1394],
        [-0.1422,  0.0415, -0.1290],
        [-0.0572,  0.0227, -0.0864],
        [-0.0702,  0.0722, -0.1585],
        [ 0.1656, -0.0081,  0.0547],
        [ 0.0245, -0.1785,  0.1488],
        [-0.0643,  0.0574,  0.1355],
        [ 0.0139,  0.0498,  0.1432],
        [-0.1543,  0.1822,  0.1817],
        [ 0.0946, -0.0651, -0.1725],
        [-0.0314,  0.1229, -0.0353],
        [ 0.1224, -0.0479, -0.1708],
        [ 0.1525, -0.0010,  0.1033],
        [ 0.0409, -0.1434, -0.0457],
        [-0.1385, -0.1641,  0.0834],
        [ 0.0835, -0.0716,  0.1654],
        [-0.0770, -0.1568,  0.0395],
        [-0.0845, -0.1127,  0.1066],
        [ 0.0469,  0.1401, -0.1110],
        [ 0.1095,  0.0127,  0.1290],
        [ 0.0469, -0.1265,  0.0728],
        [ 0.0797,  0.0212, -0.0630],
        [ 0.1511,  0.0540, -0.1224],
        [-0.0234,  0.1500, -0.1444],
        [-0.0284, -0.1413,  0.0773],
        [-0.1060, -0.1232,  0.1386],
        [-0.1186,  0.1476,  0.0761],
        [ 0.0861, -0.0375, -0.0242],
        [-0.0307,  0.1550, -0.0920],
        [ 0.1034,  0.1658,  0.1625],
        [ 0.0253, -0.1112, -0.0553],
        [ 0.0576, -0.0675,  0.1476],
        [ 0.0735, -0.1626, -0.0142],
        [-0.0870,  0.1314, -0.1215],
        [ 0.1169, -0.1398,  0.1460],
        [ 0.0429,  0.1123, -0.0385],
        [ 0.1251, -0.0117, -0.1595],
        [-0.1099, -0.1563,  0.1277],
        [-0.0500, -0.0517,  0.1661],
        [-0.1763, -0.0848,  0.0107],
        [ 0.0244, -0.1103, -0.1565],
        [-0.1561,  0.0149, -0.1159],
        [-0.0848,  0.0576, -0.1028],
        [ 0.1214, -0.0357,  0.0467],
        [ 0.0312, -0.0325,  0.0855],
        [ 0.1383, -0.0811,  0.0079],
        [ 0.1600,  0.0308,  0.0025],
        [-0.0003,  0.1479, -0.0173],
        [-0.1780, -0.0576,  0.0472],
        [-0.0416, -0.0184, -0.0436],
        [-0.0277, -0.0211, -0.1011],
        [ 0.1001,  0.1157, -0.0989],
        [-0.0540, -0.0216,  0.1618],
        [-0.0321, -0.0212,  0.1472],
        [-0.1590, -0.0225,  0.0113],
        [-0.0752,  0.1509, -0.0585],
        [-0.1140, -0.1548, -0.0536],
        [ 0.0100,  0.0828, -0.0180],
        [ 0.0818, -0.0519, -0.1085],
        [-0.1867,  0.1502, -0.0653],
        [ 0.0385,  0.0232, -0.0305],
        [ 0.0726,  0.1810,  0.1407],
        [-0.0545, -0.1297, -0.1418],
        [ 0.1571, -0.0677, -0.0573],
        [-0.0523,  0.1206,  0.0519],
        [ 0.0904,  0.0271, -0.0106],
        [ 0.1250, -0.0788, -0.0788],
        [ 0.1407,  0.0616,  0.1174],
        [-0.0889, -0.1561,  0.0957],
        [ 0.1845, -0.0082, -0.0298],
        [-0.0485, -0.0620, -0.0915],
        [ 0.1693,  0.0456,  0.0123],
        [ 0.1034,  0.0460,  0.1711],
        [-0.0581,  0.1474,  0.0036],
        [-0.0307,  0.1183, -0.0459],
        [-0.0994, -0.1232,  0.0557],
        [-0.1638, -0.0696, -0.0355],
        [-0.0247, -0.1865, -0.1648],
        [-0.0381, -0.1296, -0.0449],
        [ 0.0338, -0.1095,  0.1527],
        [-0.0434, -0.1707,  0.1351],
        [-0.0315, -0.1140,  0.0965],
        [ 0.0916,  0.0687,  0.0918],
        [ 0.1454, -0.0768, -0.1143],
        [-0.0182, -0.1234,  0.0148],
        [-0.0198,  0.0889,  0.1069],
        [-0.1380,  0.1015, -0.0766],
        [-0.0161, -0.1137,  0.1378],
        [-0.0460,  0.1181, -0.0746],
        [ 0.0456, -0.1175,  0.1289],
        [ 0.1505,  0.0958,  0.1419],
        [ 0.0965, -0.0634, -0.0898],
        [-0.0961, -0.1740, -0.0215],
        [ 0.0473,  0.1704,  0.1025],
        [ 0.1631,  0.1630, -0.1435],
        [-0.1454,  0.1563, -0.1214],
        [-0.1045,  0.0930, -0.1585],
        [ 0.0947, -0.1668,  0.0029],
        [-0.1209, -0.1531,  0.1776],
        [ 0.0553, -0.0732,  0.0365],
        [-0.1044, -0.1818, -0.0335],
        [-0.0390,  0.1390,  0.1433],
        [ 0.0742, -0.0372, -0.0385]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.0733, -0.1719,  0.0788,  ..., -0.0891,  0.1186, -0.1323],
        [ 0.0201,  0.0543,  0.0017,  ...,  0.0178,  0.1550,  0.1076],
        [-0.0547,  0.0154,  0.0250,  ..., -0.0358, -0.0238,  0.1083],
        ...,
        [ 0.0474, -0.0178,  0.0913,  ...,  0.1477,  0.1434,  0.1207],
        [ 0.0360,  0.1078,  0.1774,  ..., -0.0663, -0.0283, -0.1113],
        [-0.0535,  0.1491,  0.0807,  ..., -0.1272,  0.0410, -0.0894]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0 tensor([-0.1356,  0.1049, -0.1015, -0.0579,  0.1122,  0.0101,  0.1055,  0.0277,
        -0.0438, -0.1549, -0.1001, -0.0278, -0.0888, -0.1451,  0.0883, -0.0296,
         0.0544, -0.1650, -0.0888,  0.1114, -0.0373, -0.1705,  0.1007,  0.0735,
        -0.0250,  0.0076,  0.1500,  0.0832, -0.0801, -0.1093, -0.1259,  0.1019,
        -0.0984, -0.1560,  0.1433,  0.1634,  0.0842, -0.1319,  0.1094, -0.1022,
         0.0720, -0.0212, -0.1756, -0.0231,  0.0973,  0.1452, -0.1392,  0.1384,
        -0.0552, -0.0756,  0.1378, -0.1071, -0.1445,  0.0979, -0.0048,  0.1215,
        -0.1240,  0.0857,  0.0475,  0.1017, -0.0359, -0.0307,  0.0281, -0.0763,
         0.1830, -0.0703,  0.0215, -0.1196, -0.1282, -0.0585,  0.0578,  0.1224,
        -0.1026, -0.1510, -0.0152, -0.0223,  0.1298,  0.0060, -0.1420, -0.0925,
        -0.1611,  0.1432,  0.0124,  0.1707,  0.0350, -0.0500, -0.0840, -0.1649,
        -0.1436,  0.1521,  0.0333,  0.1694, -0.0550, -0.1307,  0.1236, -0.1026,
        -0.1365,  0.1867, -0.0613,  0.1652, -0.1778, -0.0954,  0.1027, -0.1362,
        -0.0652,  0.1857, -0.0289,  0.0148,  0.1388, -0.0308, -0.0804,  0.0446,
        -0.1267,  0.1227,  0.0065,  0.1358, -0.0341, -0.0444, -0.0134,  0.1032,
         0.1679,  0.1164, -0.1471, -0.1492, -0.0633,  0.1085, -0.1054,  0.0212],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0 tensor([ 0.1359, -0.1564, -0.0325,  0.1069,  0.1192, -0.0570, -0.1008,  0.1521,
         0.1509,  0.1583,  0.0278,  0.1651,  0.1081, -0.0338,  0.0738,  0.1320,
        -0.0144, -0.1157,  0.0006,  0.0192, -0.0115, -0.0866, -0.0500, -0.1412,
         0.0464,  0.0823, -0.0506,  0.0870, -0.1279,  0.0553, -0.1618, -0.0425,
         0.0186,  0.0191, -0.0428, -0.0934,  0.0908, -0.0871, -0.1143, -0.0490,
         0.1106,  0.1573,  0.1493, -0.0923,  0.0090, -0.1540,  0.1642, -0.1747,
        -0.1237, -0.1264, -0.0391, -0.0121, -0.1343, -0.1623,  0.0414,  0.0204,
        -0.0354,  0.0683,  0.0013, -0.0691,  0.0127,  0.1257,  0.0446,  0.0980,
        -0.0512,  0.0281,  0.0774, -0.0209, -0.0586,  0.1608, -0.0021, -0.1061,
        -0.0308,  0.1379, -0.0065, -0.0214,  0.0922,  0.0642,  0.1531, -0.0163,
         0.0280,  0.0202, -0.0216,  0.1618, -0.0959, -0.1309,  0.0835, -0.0807,
         0.0994,  0.1589,  0.1225,  0.0817,  0.1276,  0.1744, -0.1235, -0.1162,
         0.1339, -0.0697, -0.0749, -0.0435,  0.0087,  0.1405, -0.0197, -0.0679,
         0.1600, -0.0610, -0.1132, -0.0477, -0.0039,  0.0894, -0.1060, -0.1760,
        -0.0264, -0.1054,  0.1670, -0.0202, -0.0996, -0.0619, -0.1076, -0.0915,
        -0.1070,  0.1187,  0.0160,  0.0911,  0.0181, -0.0522, -0.1442, -0.0457],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.weight_ih_l0_reverse tensor([[ 0.0763,  0.1443, -0.1152],
        [ 0.0385,  0.1420, -0.0783],
        [-0.1143, -0.0789, -0.0364],
        [-0.0097, -0.0410, -0.1493],
        [-0.0457,  0.0336,  0.1071],
        [ 0.0283,  0.0007,  0.1162],
        [-0.0652, -0.0003,  0.1258],
        [ 0.1636,  0.1232, -0.1705],
        [-0.0859, -0.0858, -0.0612],
        [ 0.0012,  0.1431, -0.0740],
        [ 0.0189, -0.1170, -0.0199],
        [-0.0952, -0.1082, -0.0086],
        [-0.1080, -0.1598,  0.1815],
        [ 0.1040,  0.1409, -0.0622],
        [-0.0873, -0.0976, -0.0937],
        [ 0.1106,  0.0592, -0.0458],
        [-0.0779, -0.0066,  0.0698],
        [-0.1309, -0.0930,  0.0720],
        [ 0.0732,  0.0743, -0.1350],
        [-0.0151, -0.0382, -0.1682],
        [-0.0525,  0.0965,  0.1628],
        [-0.0078, -0.0729, -0.0560],
        [ 0.0803, -0.0965, -0.0777],
        [ 0.0373, -0.1535, -0.0745],
        [-0.0233,  0.1483,  0.0815],
        [-0.0123,  0.1400, -0.0831],
        [ 0.0094, -0.1343,  0.1645],
        [-0.0736, -0.1437,  0.1210],
        [ 0.0700,  0.0605,  0.0510],
        [-0.1305, -0.0797, -0.1088],
        [ 0.1074, -0.1408, -0.1563],
        [ 0.1397,  0.1528,  0.0041],
        [ 0.1447,  0.1599,  0.0939],
        [ 0.1046, -0.1337, -0.1073],
        [-0.0337, -0.1669, -0.0793],
        [-0.1332, -0.1861, -0.1136],
        [ 0.1031, -0.1644, -0.0833],
        [ 0.0143, -0.0484, -0.0463],
        [-0.1610,  0.1419,  0.1256],
        [ 0.1321, -0.0244, -0.1132],
        [ 0.1707, -0.1384, -0.1648],
        [ 0.0323, -0.0209, -0.0548],
        [ 0.0142, -0.1259,  0.1862],
        [ 0.1283, -0.1820, -0.1481],
        [-0.0108,  0.0453,  0.1541],
        [-0.0751,  0.0440,  0.0512],
        [-0.1354,  0.1084, -0.0349],
        [ 0.0771, -0.0153, -0.1121],
        [-0.0672,  0.0682, -0.0122],
        [ 0.1560, -0.1381,  0.0737],
        [ 0.0766, -0.0360, -0.0751],
        [ 0.0143,  0.1112, -0.1328],
        [-0.1649,  0.0430,  0.0036],
        [ 0.1221, -0.1045, -0.0428],
        [-0.0071,  0.0735, -0.0426],
        [-0.0526, -0.0335, -0.0346],
        [ 0.0151,  0.0810,  0.0939],
        [ 0.1588, -0.1535, -0.0763],
        [ 0.0075, -0.1585,  0.1218],
        [ 0.0776,  0.0236, -0.1600],
        [ 0.1719, -0.1754, -0.1288],
        [-0.1254,  0.1544, -0.1453],
        [-0.1202,  0.0284, -0.0893],
        [-0.0795, -0.0013, -0.1504],
        [-0.0142,  0.0323, -0.0192],
        [-0.0368, -0.1093,  0.0786],
        [ 0.0173, -0.1184,  0.0921],
        [ 0.0610,  0.1569,  0.0422],
        [ 0.0298, -0.0498,  0.1268],
        [ 0.1711,  0.1030,  0.1135],
        [ 0.1456,  0.0517,  0.0024],
        [-0.1165, -0.1274,  0.0378],
        [ 0.0205,  0.0058,  0.0391],
        [ 0.1364,  0.1315, -0.0389],
        [ 0.0251,  0.1208, -0.0636],
        [ 0.0179, -0.0649, -0.1378],
        [ 0.0810,  0.1550,  0.0849],
        [-0.1296, -0.1101, -0.0024],
        [ 0.0582,  0.0163,  0.1338],
        [ 0.0899, -0.0134,  0.0155],
        [-0.0058,  0.1528,  0.0972],
        [ 0.1147, -0.0881, -0.0235],
        [-0.1406, -0.1329,  0.1619],
        [ 0.0895, -0.0110,  0.0901],
        [-0.1166,  0.0359, -0.0789],
        [-0.0042,  0.0245,  0.0479],
        [ 0.0591, -0.0849,  0.1578],
        [ 0.0926,  0.1578, -0.1258],
        [ 0.0195,  0.0109, -0.0828],
        [ 0.1338, -0.0913,  0.0639],
        [-0.1394,  0.1654,  0.0865],
        [ 0.1579, -0.1573,  0.0146],
        [-0.0057,  0.1600,  0.1747],
        [ 0.0916, -0.0571,  0.0860],
        [ 0.1520,  0.1468,  0.1617],
        [-0.1784, -0.0237,  0.1296],
        [-0.0266,  0.0425, -0.1364],
        [-0.0344,  0.0739,  0.1177],
        [ 0.1299, -0.1383,  0.0863],
        [ 0.0762, -0.0371,  0.0463],
        [-0.1610, -0.1083, -0.0332],
        [-0.0083,  0.1123, -0.0591],
        [-0.0960,  0.0201,  0.0966],
        [ 0.0769, -0.0897, -0.1847],
        [ 0.0888,  0.1355, -0.0057],
        [ 0.0197, -0.0897,  0.0363],
        [-0.1178, -0.0787, -0.0530],
        [ 0.0149,  0.0773,  0.0853],
        [ 0.0888,  0.0204, -0.0974],
        [-0.0410,  0.0827,  0.1086],
        [-0.1822, -0.0438,  0.0955],
        [ 0.0595,  0.1861,  0.0131],
        [-0.0583, -0.0632,  0.1152],
        [-0.1412,  0.0926, -0.0540],
        [-0.0580,  0.1120, -0.1063],
        [ 0.0087, -0.0351, -0.0870],
        [-0.1329,  0.1366,  0.0600],
        [ 0.0897,  0.0846,  0.0622],
        [ 0.1449,  0.0793,  0.0060],
        [ 0.0539, -0.1224, -0.1506],
        [ 0.1242,  0.0705, -0.0771],
        [ 0.0888,  0.1504,  0.0619],
        [ 0.0483,  0.0662,  0.1297],
        [ 0.1557, -0.1520,  0.0622],
        [ 0.1323,  0.1487,  0.1027],
        [-0.0875,  0.0784, -0.1659],
        [ 0.1240, -0.1187,  0.1423],
        [-0.0271,  0.0201, -0.0475]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0_reverse tensor([[ 0.0051,  0.0489, -0.1665,  ...,  0.0251,  0.0131,  0.0125],
        [ 0.1078, -0.1356, -0.1488,  ..., -0.1265, -0.0917,  0.0994],
        [ 0.0274,  0.1651,  0.0767,  ..., -0.0872, -0.1679,  0.1291],
        ...,
        [ 0.0124,  0.0118, -0.1491,  ..., -0.0977, -0.0451,  0.0170],
        [-0.1190, -0.0943, -0.0279,  ...,  0.0820, -0.0993, -0.1088],
        [-0.0061, -0.0633, -0.0468,  ...,  0.0279, -0.0831, -0.0006]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0_reverse tensor([-0.0942, -0.1422,  0.0842,  0.1246, -0.1345, -0.0154, -0.0104, -0.1595,
        -0.1622, -0.0111,  0.1174,  0.1551, -0.0901,  0.1248, -0.1415,  0.0314,
        -0.1376,  0.1222, -0.1845,  0.0930, -0.0593, -0.1651,  0.0996, -0.0197,
        -0.1637,  0.1197, -0.0132,  0.1520,  0.0803, -0.0646,  0.0908,  0.0413,
        -0.0264, -0.0202, -0.1145, -0.1016,  0.0234,  0.1356,  0.0662,  0.0247,
        -0.0160, -0.1102, -0.1051,  0.0307,  0.0674, -0.1406, -0.0074, -0.0760,
        -0.1191, -0.1306, -0.0626, -0.1160,  0.1613, -0.1454, -0.0638, -0.1167,
        -0.0432,  0.0743, -0.1236, -0.0967, -0.0204, -0.1008, -0.0861,  0.0415,
         0.1679,  0.1059,  0.0559,  0.1073,  0.1458,  0.0562, -0.1606, -0.0379,
         0.0331,  0.1534, -0.0991, -0.1576, -0.1080,  0.1402,  0.1211,  0.1087,
         0.1045,  0.0948,  0.1577,  0.0481, -0.0417, -0.1359, -0.1774,  0.1524,
        -0.0961,  0.1275,  0.0228, -0.0930,  0.0195, -0.0225,  0.1861,  0.0883,
         0.1328,  0.1321, -0.1433,  0.0738, -0.0553,  0.0761,  0.0623, -0.1062,
        -0.1338, -0.1735, -0.1018, -0.0936, -0.0280, -0.0279, -0.1251, -0.1366,
        -0.0010, -0.0510, -0.0499,  0.1412,  0.1576,  0.1555, -0.1509, -0.1582,
        -0.1686,  0.0494,  0.0059,  0.0848,  0.1104, -0.0546, -0.0491,  0.0344],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0_reverse tensor([-0.1154,  0.0089, -0.0543,  0.0417, -0.0807,  0.1513,  0.0133, -0.1562,
        -0.0963,  0.0902,  0.0345,  0.1443, -0.0980,  0.0287, -0.0227, -0.0204,
         0.0254, -0.1520,  0.0752,  0.0500,  0.1410, -0.0814, -0.0764,  0.0728,
         0.1643,  0.0916,  0.1744,  0.0142,  0.0678,  0.1768,  0.0792, -0.1247,
        -0.0872,  0.0159, -0.0773,  0.0536, -0.0222,  0.1556,  0.0791, -0.0620,
         0.0354,  0.1355, -0.1114,  0.1062,  0.1084, -0.1042,  0.1706, -0.0214,
        -0.0197,  0.1631,  0.0243,  0.0697,  0.0383,  0.0014,  0.0398,  0.1547,
        -0.1785, -0.0318, -0.1421, -0.0594,  0.1517,  0.0943,  0.0908, -0.1201,
         0.0702, -0.0916, -0.1289, -0.0184,  0.0703,  0.1616,  0.0240, -0.0157,
        -0.0689, -0.0390, -0.1603, -0.1046,  0.0962,  0.1575,  0.1200,  0.0736,
         0.0652,  0.1495,  0.0924, -0.1250, -0.0506,  0.0572, -0.1818,  0.0221,
        -0.1516, -0.1112, -0.0935,  0.0828, -0.0557,  0.0387,  0.1535,  0.0644,
        -0.1583,  0.0822,  0.1306,  0.1456, -0.1143,  0.0369, -0.1500, -0.1064,
         0.1255,  0.1222, -0.0386,  0.1237,  0.1186,  0.0582,  0.0558, -0.0786,
         0.1440, -0.1086, -0.0820, -0.0897, -0.0759,  0.0093,  0.0923, -0.1863,
        -0.0981, -0.0099,  0.0463, -0.0880,  0.0933, -0.0179,  0.1829, -0.1247],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0 tensor([[ 0.0991, -0.1593, -0.0476,  ..., -0.1421,  0.1398,  0.0933],
        [-0.0158,  0.0826,  0.0067,  ..., -0.0458,  0.1276, -0.1400],
        [-0.0088,  0.1495,  0.0484,  ..., -0.0019,  0.1483, -0.0561],
        ...,
        [ 0.1030,  0.0284,  0.0148,  ...,  0.0035, -0.1573, -0.1321],
        [ 0.0473,  0.1515, -0.1637,  ...,  0.1197,  0.1051, -0.0686],
        [ 0.0959, -0.1839, -0.0148,  ...,  0.0241,  0.1098,  0.1271]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0 tensor([[ 0.1430, -0.0407,  0.0955,  ...,  0.0391, -0.1076,  0.1421],
        [-0.1794, -0.0710, -0.0230,  ...,  0.0341,  0.0630, -0.0306],
        [-0.0330,  0.1524, -0.0236,  ..., -0.1345, -0.1148, -0.1652],
        ...,
        [-0.1136,  0.0692,  0.0199,  ..., -0.0860, -0.0815, -0.1134],
        [ 0.0959,  0.0155, -0.1029,  ...,  0.0087,  0.1768,  0.1295],
        [ 0.0617,  0.0473, -0.1278,  ...,  0.0398,  0.0753, -0.0719]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0 tensor([ 0.0863,  0.1068, -0.0389, -0.0534, -0.1710,  0.1734,  0.1107, -0.1238,
         0.1408,  0.1666, -0.0367,  0.1809, -0.0009,  0.0951, -0.1361,  0.1359,
         0.1178, -0.1724, -0.1141, -0.0165,  0.0994,  0.1305, -0.1747, -0.0853,
         0.1331,  0.0320,  0.0960,  0.1144, -0.0282,  0.1046, -0.0303, -0.0207,
        -0.0201,  0.1325, -0.1322,  0.0519, -0.0105,  0.1544, -0.1828,  0.0784,
        -0.0867,  0.1072,  0.0342, -0.0015,  0.0388, -0.1442,  0.1412, -0.1669,
         0.0237, -0.1082,  0.1130, -0.1268,  0.0881, -0.0320, -0.0218, -0.0275,
        -0.0269, -0.0393,  0.0696, -0.0603,  0.1447, -0.1538, -0.1318, -0.1179,
         0.0700,  0.0549, -0.0423,  0.1615,  0.0594,  0.1248, -0.0577, -0.0549,
        -0.1757,  0.1102, -0.1770, -0.0752, -0.0826, -0.0125,  0.1140,  0.0361,
         0.1263,  0.0549, -0.0362, -0.0661, -0.0723, -0.0528,  0.1666,  0.1626,
         0.0315,  0.0008, -0.0129, -0.0345,  0.0959, -0.0022, -0.0338, -0.0203,
        -0.1605, -0.0755,  0.1353,  0.1491,  0.0203,  0.1759,  0.0657,  0.1336,
         0.0426,  0.1333,  0.1670, -0.1268,  0.0150, -0.0384, -0.0328, -0.0841,
         0.0055, -0.1523, -0.1085,  0.1577, -0.1173, -0.1159,  0.0941, -0.1577,
        -0.1274, -0.0268,  0.0949,  0.0682,  0.1253, -0.1354,  0.1131,  0.0127],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0 tensor([-0.1237,  0.1268, -0.1368, -0.1056, -0.0663, -0.0124,  0.1355,  0.0372,
        -0.1152,  0.1559, -0.0429, -0.1377,  0.0574, -0.0843, -0.0162, -0.1565,
        -0.0046, -0.0009,  0.1835, -0.0692,  0.1584,  0.0982,  0.0185,  0.0197,
        -0.0945, -0.0051, -0.0518, -0.1805,  0.1430,  0.1584, -0.0469,  0.1148,
        -0.0503,  0.0153, -0.0462,  0.0875,  0.1667, -0.0562, -0.0559, -0.0531,
        -0.1046,  0.1564,  0.1849, -0.1485,  0.1836,  0.0989, -0.0790,  0.1303,
        -0.0561, -0.1394, -0.0185, -0.0747, -0.1566,  0.0735,  0.0349, -0.1690,
         0.0725,  0.0375,  0.1679, -0.0131,  0.0416, -0.0943, -0.0719,  0.0533,
        -0.1151,  0.0366,  0.0556,  0.1250, -0.1630, -0.0139,  0.1464, -0.1174,
        -0.1120,  0.0276, -0.0469,  0.1403, -0.1510, -0.0690,  0.0780, -0.1429,
        -0.0721,  0.0773, -0.0748,  0.0963, -0.1419,  0.0788, -0.1203, -0.1418,
         0.1166, -0.0421,  0.1503, -0.1442, -0.0227, -0.0090, -0.1516,  0.1717,
        -0.0624, -0.0872, -0.1419, -0.0777,  0.0089,  0.0244,  0.0926, -0.0796,
        -0.0394, -0.0803, -0.0124, -0.1072,  0.1353, -0.0749,  0.0019, -0.0530,
         0.1375, -0.0280,  0.0637, -0.1799,  0.1585,  0.1630, -0.1268,  0.0856,
         0.0324,  0.0866, -0.0829,  0.0598,  0.1225,  0.0638, -0.1019, -0.0373],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 1.0810e-01,  2.8982e-02,  1.1683e-01,  ..., -5.3069e-02,
          1.5805e-01,  1.1267e-01],
        [ 2.5339e-02,  1.8482e-01, -1.7868e-01,  ...,  2.5659e-03,
          1.0152e-01, -1.6255e-01],
        [ 3.6639e-02,  1.2122e-01,  7.2363e-02,  ...,  1.7585e-02,
         -1.1359e-01, -4.2060e-02],
        ...,
        [ 1.6202e-01,  1.4197e-04,  1.3883e-01,  ...,  2.8090e-02,
          4.5275e-02,  1.3655e-01],
        [-7.6012e-02, -1.1122e-02, -1.4099e-01,  ...,  1.2624e-01,
          1.3448e-01, -1.4842e-01],
        [ 6.3096e-02, -2.0343e-02, -6.0497e-02,  ...,  1.8158e-02,
         -1.3097e-01, -1.4943e-01]], device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0_reverse tensor([[-0.0091,  0.0645,  0.0950,  ..., -0.1036,  0.0237, -0.0646],
        [ 0.0215, -0.0980, -0.0953,  ...,  0.1731, -0.1834, -0.0241],
        [-0.1583, -0.0815, -0.1177,  ..., -0.1485,  0.1103,  0.0578],
        ...,
        [ 0.0929, -0.0367, -0.0886,  ..., -0.1159, -0.1327,  0.1654],
        [ 0.1668, -0.0891,  0.1485,  ...,  0.0984, -0.0687, -0.0260],
        [ 0.1658, -0.0134,  0.1736,  ..., -0.0138, -0.1603,  0.0119]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0_reverse tensor([ 0.0036,  0.0368,  0.1217, -0.0507, -0.1541, -0.0744, -0.0257, -0.0092,
         0.1785, -0.1044, -0.1002, -0.1236, -0.1104,  0.1378, -0.1106,  0.0097,
         0.1193, -0.0348,  0.1197,  0.0571, -0.0100,  0.1560,  0.1821, -0.1015,
         0.0235, -0.1134,  0.1605, -0.0639,  0.1794,  0.0991, -0.0839,  0.1370,
        -0.0313,  0.1827, -0.1579, -0.0460, -0.0177, -0.1408, -0.0697, -0.0095,
         0.0363, -0.0650, -0.0613,  0.1383, -0.1508, -0.1008, -0.1267,  0.1434,
        -0.1535, -0.0186,  0.0425, -0.1665, -0.1081,  0.1524, -0.0413, -0.0267,
         0.0220,  0.0036, -0.1249, -0.0599,  0.0364,  0.0583,  0.1060, -0.1356,
         0.0919,  0.0058,  0.1145,  0.1531,  0.1251,  0.1651,  0.0358, -0.0408,
         0.1777, -0.0296,  0.0423, -0.0123,  0.0543, -0.0263,  0.0472, -0.0671,
        -0.0695,  0.0988,  0.1759,  0.0412, -0.1391, -0.1192, -0.0053,  0.1844,
         0.1421,  0.1411,  0.0468,  0.1175,  0.1206,  0.1141,  0.1142, -0.1071,
        -0.1439,  0.1213,  0.1532,  0.1784, -0.0270,  0.0203, -0.0179,  0.1378,
         0.1014, -0.0954, -0.0431,  0.1490,  0.0845, -0.0054,  0.1394, -0.1124,
        -0.1617,  0.0292, -0.1417,  0.0268,  0.0468, -0.0794, -0.0617,  0.1850,
         0.1114, -0.1690,  0.1434,  0.1602,  0.0319,  0.1311, -0.0601, -0.1283],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.1019,  0.0026,  0.0283, -0.0912, -0.0929,  0.1442, -0.0704, -0.0777,
        -0.1310, -0.1012, -0.0499,  0.0230,  0.1178,  0.1197,  0.0172,  0.0291,
        -0.0223, -0.0976,  0.1363, -0.1335, -0.1094, -0.1109,  0.0212,  0.0012,
         0.1353, -0.0829, -0.0730, -0.1193,  0.1638,  0.0168,  0.1538,  0.0436,
        -0.1789, -0.0968,  0.1447, -0.1493,  0.1452, -0.1178, -0.1731, -0.0698,
         0.1126, -0.0266, -0.1552, -0.1409,  0.1182,  0.1502,  0.0562, -0.1402,
         0.0135, -0.0845,  0.0038, -0.1137,  0.1717, -0.1147, -0.0897,  0.1424,
         0.1511,  0.1549, -0.1761, -0.1406, -0.0363, -0.0825, -0.1268,  0.1117,
        -0.0287, -0.1572,  0.0861,  0.1164, -0.0164,  0.1677,  0.0757,  0.1291,
         0.1673,  0.0344, -0.1090,  0.0223, -0.0057, -0.1038, -0.0451,  0.0997,
         0.1144,  0.1253,  0.0016,  0.1476,  0.0692, -0.1300, -0.1623, -0.0076,
         0.0183,  0.1605, -0.0890,  0.0720,  0.1317,  0.0461, -0.1548, -0.0074,
        -0.0584,  0.0042,  0.0639, -0.1641, -0.0092,  0.0252,  0.1648, -0.0923,
         0.0115, -0.1721, -0.1255, -0.1129,  0.0574, -0.0106,  0.0977, -0.1727,
        -0.0867, -0.1538,  0.1454, -0.0243,  0.0694, -0.0954, -0.0123,  0.0136,
         0.1575, -0.1504,  0.0430, -0.0079,  0.1600, -0.0328, -0.0681, -0.0657],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.1111,  0.1090, -0.0659,  ...,  0.1528, -0.1194, -0.0119],
        [-0.0119, -0.1797,  0.0389,  ...,  0.0185,  0.0845, -0.0605],
        [ 0.1842,  0.1225, -0.0063,  ..., -0.0911,  0.0695,  0.1008],
        ...,
        [ 0.1812, -0.0399, -0.0318,  ...,  0.1104, -0.0837,  0.1208],
        [-0.1844, -0.0759,  0.1110,  ...,  0.1041,  0.0925,  0.1374],
        [ 0.1226,  0.1072,  0.0102,  ...,  0.1309,  0.1396,  0.1484]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.1849,  0.0049, -0.0851,  ..., -0.1025,  0.1417, -0.0470],
        [ 0.0464, -0.1278, -0.1574,  ..., -0.0728, -0.1179, -0.0558],
        [ 0.0420, -0.1733,  0.0335,  ...,  0.1196, -0.0525, -0.1272],
        ...,
        [ 0.1210,  0.1548, -0.1025,  ..., -0.0652, -0.0308, -0.1155],
        [-0.0757,  0.1343,  0.0650,  ..., -0.1129, -0.0603, -0.0438],
        [ 0.0746, -0.0361,  0.1554,  ..., -0.1564,  0.1858,  0.0031]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0 tensor([-1.6780e-02,  1.0165e-01,  6.0756e-02,  1.4743e-01, -1.8167e-01,
        -1.7799e-01,  2.4793e-02,  1.8239e-01,  1.6059e-01,  1.5079e-01,
        -4.9287e-02, -3.3707e-02, -1.4786e-01,  3.7323e-02,  1.3316e-01,
        -1.1771e-01, -1.8494e-02,  8.1458e-02, -1.8129e-01, -1.2700e-01,
         1.4401e-01, -5.5199e-02,  4.7938e-02, -7.4578e-02,  8.7639e-02,
         8.8312e-02, -1.6350e-01,  5.7552e-02, -2.7699e-02, -6.7801e-03,
        -1.3878e-01,  1.5532e-01, -1.1714e-01, -1.3028e-01, -1.6249e-01,
         5.6538e-02,  8.9436e-03,  7.6708e-02, -7.5978e-02, -5.3997e-02,
        -1.5324e-01, -1.0335e-01,  6.8656e-02,  1.3423e-01,  9.6183e-02,
        -1.1148e-01,  9.1934e-02, -1.0174e-01, -9.0216e-02, -1.8730e-02,
         1.6682e-02,  1.6172e-01,  1.3850e-02, -1.0633e-02, -2.6404e-02,
         9.4809e-02,  8.3972e-03, -1.3761e-01,  1.0435e-01,  1.1392e-01,
         1.4618e-01,  1.6202e-01,  1.0394e-01,  1.1548e-01,  1.6632e-02,
         1.6938e-01, -1.2934e-01, -3.3939e-02, -3.3254e-02, -1.2145e-01,
        -1.0704e-01, -1.1235e-01, -3.4772e-02, -6.2520e-02, -1.4593e-01,
         5.4125e-02, -1.4520e-01,  1.3105e-01, -1.4573e-01, -8.2705e-02,
         5.1564e-02, -2.0175e-02,  3.3222e-03,  2.6269e-02, -1.3847e-01,
         1.1671e-02, -6.3888e-02,  2.9455e-05, -7.6617e-03, -1.1095e-01,
         4.7745e-02, -1.7883e-01,  9.2810e-02, -1.1612e-01, -1.0661e-01,
        -1.5408e-01, -1.7287e-02, -1.6092e-01,  1.5461e-01, -7.0304e-03,
         6.3080e-02, -3.8598e-02, -1.6250e-01,  5.4243e-03, -3.5162e-02,
         8.7469e-02,  6.8453e-02, -1.2791e-01, -1.6138e-01, -9.7875e-02,
         1.6319e-01,  8.7767e-02,  1.4160e-03, -1.0309e-02, -1.6265e-01,
        -8.5399e-02, -9.6014e-02, -9.0172e-02,  1.0817e-01, -6.7262e-02,
        -9.5507e-02,  1.0327e-03, -1.3195e-01, -1.6184e-01, -8.9023e-02,
        -2.4287e-02,  1.6452e-01, -1.4062e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0 tensor([-0.1197, -0.1224,  0.0387,  0.0167,  0.1108,  0.0896, -0.0066,  0.1775,
        -0.1519, -0.0799, -0.0008, -0.1052, -0.0747, -0.0239, -0.0225, -0.0579,
         0.0462, -0.0418,  0.0657,  0.0317,  0.0872, -0.0260, -0.0316,  0.1087,
        -0.1280,  0.0086,  0.1515,  0.0767,  0.0912,  0.1226, -0.0358,  0.1401,
        -0.0119,  0.0916, -0.0201, -0.1278, -0.0553, -0.1823,  0.1360,  0.0811,
         0.0815,  0.1326,  0.0061, -0.0281,  0.1234,  0.1044, -0.0845, -0.1624,
        -0.0088,  0.1161,  0.0794,  0.0838, -0.1027,  0.0514,  0.0082,  0.1240,
        -0.1095,  0.0816,  0.0766, -0.0859, -0.0560,  0.1810,  0.0450, -0.0779,
         0.1509, -0.1196,  0.1632,  0.1020,  0.0482, -0.0657,  0.1319, -0.0935,
        -0.0234,  0.1139, -0.1788,  0.1730,  0.1100,  0.0904, -0.1507,  0.1127,
        -0.0800,  0.0593, -0.1661,  0.1358,  0.1262, -0.1309,  0.1046, -0.0867,
         0.0365, -0.0418, -0.0650, -0.1109, -0.0468,  0.1012, -0.1556, -0.0378,
         0.1578,  0.0126, -0.0546,  0.0317, -0.1303,  0.1396, -0.0443, -0.1193,
         0.1190,  0.1425,  0.1587, -0.0272, -0.1459, -0.0261,  0.0508,  0.0100,
        -0.1456,  0.0647,  0.0170, -0.1062,  0.1632, -0.0256, -0.0831, -0.0999,
        -0.0657,  0.0095, -0.0990,  0.0441,  0.1387,  0.1414,  0.1155, -0.0020],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.1511,  0.0071, -0.0501,  ..., -0.0824,  0.0858, -0.1024],
        [-0.0495, -0.0275,  0.1570,  ...,  0.1717,  0.0569,  0.0879],
        [-0.0319,  0.1796, -0.0234,  ..., -0.0755,  0.0018, -0.0444],
        ...,
        [-0.1781, -0.0840,  0.1443,  ..., -0.0559, -0.1313, -0.1440],
        [-0.1730,  0.1778,  0.1552,  ...,  0.0787,  0.1726, -0.1416],
        [ 0.1405, -0.0882, -0.0268,  ...,  0.1328,  0.1504, -0.0670]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.0105, -0.0453,  0.0552,  ..., -0.0482, -0.1037,  0.1739],
        [-0.0583, -0.0094, -0.1520,  ..., -0.0470, -0.0472, -0.0629],
        [-0.1600,  0.0542,  0.1855,  ...,  0.0073, -0.0227, -0.1743],
        ...,
        [ 0.0841,  0.0554,  0.0236,  ..., -0.1386,  0.1463,  0.1380],
        [ 0.0710, -0.0885, -0.0528,  ..., -0.0786,  0.1235, -0.0767],
        [ 0.0144, -0.0327,  0.1212,  ...,  0.0131, -0.1613,  0.0350]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0_reverse tensor([-4.2222e-02,  2.6975e-04, -4.4643e-03, -1.5953e-01, -1.5206e-02,
         2.9632e-02,  1.3482e-02,  1.6477e-01, -4.0012e-02, -6.3307e-02,
         9.2197e-02,  1.0497e-01,  1.4115e-01, -8.4582e-02, -1.4318e-01,
        -1.5819e-01,  1.5877e-01, -1.5322e-01,  1.6334e-01, -1.1602e-01,
         5.3075e-02,  1.3090e-01,  7.4245e-02,  1.0256e-01, -6.5679e-02,
         5.1439e-03,  8.9340e-02, -4.4654e-02, -5.9575e-02, -2.1629e-02,
        -1.2267e-01,  1.4280e-01, -6.1875e-02,  3.0142e-02,  1.5405e-01,
         1.2823e-03, -1.6468e-01,  6.3102e-02,  8.1310e-02, -1.2955e-01,
        -1.7495e-01,  1.4829e-01,  1.3502e-02, -4.3418e-02,  1.1222e-01,
        -3.7670e-02, -3.2359e-02, -6.0480e-02, -2.2804e-02, -9.5864e-02,
         6.5560e-02, -1.6287e-02, -8.6739e-02, -3.5625e-02, -1.0256e-01,
         1.0179e-01,  1.6984e-01,  1.3746e-01,  7.2925e-02, -6.1446e-02,
        -7.1462e-02,  6.5468e-02, -3.7702e-02,  7.3367e-02,  7.9449e-02,
         7.9087e-03, -1.4833e-01, -1.0034e-01,  1.3802e-01,  3.3274e-02,
         3.3241e-02, -1.0362e-01, -4.0263e-02,  1.0954e-01,  5.8467e-02,
        -1.3438e-01,  3.9808e-02, -6.4155e-05,  1.1859e-01,  4.2272e-02,
        -1.0556e-01, -9.3292e-02, -7.1727e-02,  1.5614e-01,  3.8281e-02,
         1.8243e-01,  3.7002e-02,  5.6027e-02,  1.8573e-01,  1.4850e-01,
         1.3273e-01, -3.5191e-02, -7.8324e-02,  1.5009e-01, -1.4881e-01,
        -1.5131e-02,  1.6119e-01, -4.4062e-02,  5.3192e-02, -1.7782e-01,
        -1.5398e-01, -5.5871e-02, -8.9167e-03, -2.3468e-03, -1.1861e-01,
         1.7979e-01, -1.7359e-01, -9.6708e-03, -2.7493e-02, -9.0325e-02,
         1.6088e-02, -2.5077e-02, -2.3538e-02, -1.4748e-01, -3.2991e-02,
         6.1421e-02, -6.9595e-02, -1.4205e-01, -1.7801e-01, -3.2128e-02,
         3.9699e-03, -1.2085e-02, -1.8084e-03,  1.0442e-01, -9.0670e-02,
         1.4741e-01,  1.1664e-01,  6.7960e-02], device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0_reverse tensor([ 0.0600,  0.0340, -0.0503, -0.1287, -0.0948, -0.0809, -0.0035,  0.1205,
         0.0128, -0.0798,  0.1139,  0.1753,  0.1620, -0.0975,  0.1801, -0.1084,
         0.1148,  0.1747, -0.1607,  0.1098, -0.0635,  0.1732, -0.0663, -0.0669,
        -0.0342, -0.1128, -0.1143,  0.0474, -0.1526, -0.1576, -0.0527,  0.0178,
        -0.1005, -0.0031,  0.0415, -0.1827,  0.0181, -0.1135, -0.1106,  0.0662,
        -0.1434,  0.0602, -0.0722, -0.1208,  0.0867, -0.1353, -0.1627,  0.1050,
         0.0706,  0.1337, -0.1812, -0.1057, -0.0730,  0.0273, -0.0626,  0.0825,
         0.0581,  0.0435, -0.1539,  0.1252, -0.0473, -0.1382, -0.0695, -0.0115,
         0.1698, -0.1029,  0.0203,  0.0116, -0.1273, -0.0879, -0.0891,  0.0035,
        -0.1533, -0.1128,  0.0928, -0.0045, -0.1790,  0.0702,  0.0673, -0.0066,
        -0.1105, -0.1158,  0.0332, -0.1639, -0.1203,  0.0379, -0.0325, -0.0954,
         0.0071,  0.0761, -0.0294,  0.1548, -0.0776,  0.0106, -0.0691, -0.0726,
        -0.0269,  0.1489, -0.1488, -0.1356, -0.0675, -0.0505,  0.1370,  0.1018,
        -0.0394,  0.1856, -0.0530,  0.1842, -0.0245,  0.1758,  0.0234, -0.0045,
        -0.0576,  0.0753, -0.0345,  0.1293,  0.0690,  0.1167,  0.1239,  0.1654,
         0.1837, -0.1155, -0.1828,  0.0883,  0.1433,  0.0130, -0.0901,  0.0552],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0 tensor([[-0.0281,  0.0611,  0.0265,  ...,  0.0260, -0.0073, -0.0497],
        [-0.0231, -0.1079, -0.0339,  ..., -0.0704, -0.0675, -0.0768],
        [-0.1528, -0.1508, -0.0926,  ...,  0.1035,  0.1381, -0.1296],
        ...,
        [-0.0035, -0.0813,  0.0690,  ..., -0.0712,  0.1324,  0.1094],
        [ 0.0309, -0.0393, -0.0702,  ...,  0.0827, -0.1051,  0.0784],
        [-0.1063,  0.1559,  0.1633,  ...,  0.1357,  0.0199, -0.0884]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0 tensor([[-0.0985,  0.1811,  0.0125,  ...,  0.0822, -0.0834,  0.0546],
        [ 0.0610,  0.1291,  0.0964,  ...,  0.1213, -0.1540, -0.0011],
        [ 0.0581, -0.1057,  0.0411,  ...,  0.0893, -0.0441, -0.0251],
        ...,
        [ 0.1511, -0.0283,  0.1241,  ...,  0.1844, -0.1186,  0.1561],
        [ 0.1272,  0.1144,  0.0524,  ..., -0.0518, -0.0152, -0.1084],
        [-0.1666,  0.1249, -0.1056,  ...,  0.1435,  0.1336,  0.1137]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0 tensor([ 0.1489,  0.1087,  0.0523, -0.0475,  0.0257,  0.1452, -0.0079,  0.0277,
         0.1566,  0.1019,  0.0921,  0.0865,  0.1171, -0.1073,  0.1523, -0.0422,
         0.0491,  0.1866, -0.0405,  0.1326, -0.1519, -0.1117,  0.0308, -0.0830,
         0.0394, -0.0630, -0.0816,  0.1102,  0.0342, -0.0722, -0.1641,  0.1406,
        -0.1196,  0.0111, -0.0889,  0.0486, -0.0851,  0.1795,  0.0069,  0.0074,
         0.0249,  0.0293, -0.1246, -0.0284, -0.1304,  0.1859, -0.0318,  0.0567,
        -0.0244, -0.0310, -0.1689, -0.0742,  0.1597,  0.0319,  0.0452,  0.1749,
        -0.0492,  0.0490, -0.1111, -0.1523, -0.0895, -0.1449,  0.1235, -0.1385,
         0.1657, -0.0386, -0.1621, -0.1013,  0.0953,  0.1572, -0.1842, -0.1327,
        -0.0884,  0.0648, -0.0658,  0.0903, -0.1220, -0.1295, -0.0085, -0.0046,
        -0.1071,  0.0030, -0.0361,  0.0561,  0.1254,  0.0973, -0.0668,  0.0433,
        -0.0150,  0.0191,  0.1079,  0.0133,  0.0678,  0.0706, -0.0163, -0.0149,
        -0.0017, -0.1166,  0.0499, -0.1571, -0.0189,  0.0209, -0.0460, -0.0408,
        -0.0448, -0.0400, -0.1316,  0.0607,  0.1074,  0.1671,  0.1235, -0.0390,
        -0.0322,  0.0559,  0.0249,  0.0208,  0.1211, -0.0032, -0.0490,  0.0737,
        -0.0439, -0.0987, -0.1566,  0.1269, -0.1247,  0.1620,  0.1471, -0.1504],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0 tensor([-0.0352,  0.0097,  0.0295, -0.0526,  0.0794, -0.0654, -0.0568,  0.0565,
        -0.0688,  0.1627, -0.1203,  0.0063,  0.0323,  0.0428,  0.1190, -0.1739,
        -0.0353, -0.1355, -0.1510,  0.0279, -0.1461,  0.1280, -0.0562,  0.1656,
         0.0841, -0.0499,  0.0117,  0.0283, -0.0879,  0.1653,  0.0545, -0.1250,
         0.1162,  0.0555,  0.1716, -0.0446, -0.1100,  0.0685,  0.1205,  0.0117,
        -0.1770,  0.0011, -0.0094,  0.0937,  0.0971,  0.1553,  0.0320, -0.0976,
         0.0319,  0.0937, -0.0418,  0.0188, -0.1315, -0.1314, -0.0205,  0.1552,
        -0.0922,  0.0185, -0.0860,  0.0128,  0.1184,  0.1352,  0.0458,  0.0981,
         0.1001,  0.0142,  0.0896, -0.1246, -0.1857,  0.0781, -0.0588, -0.0239,
         0.0822, -0.0096,  0.0922, -0.1067, -0.0029, -0.0218,  0.0890, -0.0842,
         0.0031, -0.1259, -0.0505,  0.0797, -0.1208,  0.1733,  0.0039,  0.0310,
        -0.1211,  0.0549, -0.0185,  0.1362,  0.0159, -0.1269,  0.1086, -0.0515,
         0.1466, -0.0410, -0.0478, -0.0509, -0.0129,  0.1043, -0.0749,  0.1244,
        -0.0400, -0.0579, -0.0848, -0.1499,  0.0945,  0.0459,  0.0467, -0.0884,
         0.0376,  0.0766, -0.0403, -0.0224,  0.0550, -0.1374,  0.1608,  0.0254,
        -0.1155,  0.0106, -0.0375, -0.1165,  0.0730,  0.1184, -0.1486,  0.0454],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0_reverse tensor([[ 0.0794, -0.1338, -0.0613,  ..., -0.0661,  0.0456, -0.0240],
        [-0.0862, -0.0886, -0.1518,  ...,  0.1590,  0.1228, -0.0221],
        [ 0.1033, -0.1337, -0.1357,  ...,  0.1226, -0.0550, -0.0418],
        ...,
        [-0.1223,  0.1686,  0.0968,  ...,  0.1372,  0.0190,  0.0139],
        [-0.0068,  0.1190, -0.0430,  ..., -0.0064,  0.0328, -0.1146],
        [ 0.0574,  0.1651,  0.1396,  ..., -0.0482,  0.0333, -0.1252]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.0190,  0.0248,  0.1646,  ..., -0.0015, -0.0588, -0.1057],
        [ 0.1302,  0.1843,  0.0153,  ...,  0.0059,  0.1301,  0.1512],
        [ 0.1577, -0.0876,  0.0075,  ...,  0.0221, -0.0225, -0.0862],
        ...,
        [ 0.0129, -0.0395,  0.0917,  ...,  0.0651,  0.1557, -0.1065],
        [ 0.0091, -0.1325, -0.0974,  ..., -0.1536, -0.1263, -0.1327],
        [ 0.0838,  0.0057,  0.0005,  ..., -0.1190,  0.1490, -0.1188]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0_reverse tensor([-0.0699,  0.0382,  0.1415, -0.0132,  0.0660, -0.1801,  0.1438, -0.0509,
        -0.1296,  0.1338,  0.0682, -0.1238, -0.0572, -0.0159, -0.0703,  0.1240,
         0.0274, -0.0266,  0.1735, -0.0944,  0.0682,  0.1434,  0.1423,  0.1000,
        -0.1502, -0.0102,  0.0769, -0.0160,  0.0986, -0.1304, -0.1652, -0.1439,
        -0.1115,  0.0937,  0.0693, -0.0114,  0.1717, -0.0534,  0.1157,  0.1119,
         0.0900, -0.1271,  0.0282,  0.0521, -0.1421,  0.0797, -0.0358,  0.0931,
         0.0221, -0.0068,  0.0424, -0.0070,  0.1093, -0.1594,  0.1024,  0.0168,
        -0.0575,  0.1487, -0.1247, -0.0492, -0.1203, -0.1373,  0.0090, -0.0163,
        -0.1227, -0.0257, -0.1806,  0.1625,  0.1628, -0.0685, -0.0342,  0.0012,
         0.1027, -0.1245, -0.1014, -0.0031,  0.0947, -0.1542, -0.0335, -0.0896,
        -0.1255, -0.1631, -0.1616, -0.0973,  0.1598, -0.0012, -0.1693,  0.1845,
        -0.1659,  0.1603,  0.0358, -0.0651,  0.0969,  0.1132,  0.0293,  0.1703,
        -0.0264, -0.0481,  0.1788,  0.0379,  0.0022, -0.0631,  0.0809,  0.1698,
        -0.0973, -0.1520, -0.1553,  0.0683, -0.1803, -0.0046,  0.0487,  0.0783,
         0.0117,  0.0445, -0.0125, -0.1692, -0.1412,  0.1548, -0.0023, -0.1531,
        -0.1253,  0.1099,  0.0375, -0.0068,  0.1548, -0.0222, -0.1324, -0.1524],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0_reverse tensor([-0.0896, -0.0174,  0.1807,  0.1132,  0.1809, -0.1127, -0.0146,  0.1028,
         0.0430,  0.0630,  0.0802,  0.1109,  0.1008, -0.1050, -0.0804,  0.0274,
         0.0277, -0.0272, -0.0418, -0.0987,  0.1375, -0.1410, -0.1190,  0.1196,
        -0.1169, -0.0890,  0.1372, -0.1485, -0.1025, -0.1444,  0.1349, -0.0025,
        -0.0685, -0.0505,  0.1598,  0.1486, -0.0187,  0.0786,  0.0430, -0.1308,
        -0.1383,  0.0390,  0.1438, -0.0541, -0.0334,  0.0114, -0.1738,  0.0711,
        -0.0477, -0.0418, -0.0794, -0.0243, -0.0911,  0.1385,  0.1749,  0.0476,
         0.1302,  0.0423,  0.0669, -0.0277, -0.0190, -0.0690, -0.0918, -0.0473,
        -0.0394, -0.0084, -0.0522, -0.0385, -0.0864, -0.0257,  0.0469,  0.1830,
         0.1096, -0.0904,  0.0852, -0.1752,  0.1479, -0.0244, -0.0791, -0.0506,
         0.0026, -0.1486, -0.1564,  0.0579, -0.0739,  0.1157, -0.0119,  0.1537,
         0.0432,  0.0678,  0.0199, -0.1645,  0.0169, -0.0563,  0.0970,  0.0387,
         0.0208, -0.0506,  0.1687, -0.0493, -0.1233,  0.1595,  0.1112,  0.1705,
        -0.1198, -0.1042, -0.1044, -0.0303, -0.0560, -0.0427, -0.1238, -0.0895,
         0.0683, -0.0176,  0.1223, -0.1555, -0.1732,  0.1044, -0.0916, -0.0987,
        -0.0323, -0.0539,  0.1663, -0.1264,  0.0692,  0.0937, -0.1763,  0.0422],
       device='cuda:0') torch.Size([128])
fc_blocks.0.0.weight tensor([[-0.1106,  0.1136,  0.0786,  ...,  0.0719, -0.0424, -0.1268],
        [ 0.0755, -0.1123,  0.0319,  ..., -0.0473,  0.0428,  0.0455],
        [-0.0236,  0.0032,  0.0855,  ...,  0.0718,  0.1071, -0.0872],
        ...,
        [-0.0291, -0.1081,  0.0584,  ...,  0.0460,  0.1063,  0.1020],
        [-0.0543, -0.0250, -0.0821,  ..., -0.0632,  0.1203, -0.0228],
        [-0.1062,  0.0921, -0.0167,  ..., -0.0443, -0.0400,  0.0900]],
       device='cuda:0') torch.Size([32, 64])
fc_blocks.0.0.bias tensor([ 0.0015,  0.0545,  0.0899, -0.1003, -0.1121,  0.0496, -0.0370, -0.0202,
        -0.1038,  0.0672,  0.1247,  0.0340, -0.0477,  0.0531,  0.0873,  0.0730,
        -0.0722, -0.0248, -0.1319,  0.0930, -0.0538,  0.1011, -0.0003,  0.0283,
        -0.0903, -0.0778, -0.0676,  0.0096,  0.0080, -0.0473, -0.0028,  0.0208],
       device='cuda:0') torch.Size([32])
fc_blocks.1.0.weight tensor([[-0.0492, -0.0943,  0.1108, -0.1106, -0.1405, -0.0156, -0.1001, -0.0582,
          0.1505, -0.1550,  0.0343,  0.1330, -0.1103,  0.0206, -0.0364, -0.1447,
          0.1240, -0.0882, -0.0337, -0.0296,  0.0851, -0.0297,  0.0524,  0.0243,
         -0.1271,  0.0361,  0.1301,  0.0507, -0.0876, -0.0437,  0.0740, -0.1189],
        [-0.1501, -0.0433, -0.1043, -0.0829, -0.0117,  0.0014,  0.0602,  0.0596,
         -0.0985,  0.0197, -0.0780,  0.1435,  0.1277, -0.0556, -0.0387,  0.0026,
          0.1158, -0.0758,  0.1852,  0.1259, -0.0413, -0.1100,  0.0549,  0.0162,
          0.0890, -0.0686, -0.0905, -0.1109,  0.0962, -0.0996, -0.1224, -0.0212],
        [ 0.1446, -0.1544, -0.1365, -0.1459, -0.1623,  0.1215,  0.1511, -0.0416,
         -0.1571, -0.1316,  0.0962, -0.1631,  0.0645, -0.1147,  0.0472, -0.1178,
          0.0852,  0.1150, -0.0890, -0.1678, -0.0057, -0.0317, -0.1255,  0.1610,
          0.1242,  0.1127, -0.1793,  0.1224, -0.1615, -0.0247,  0.1436,  0.0236],
        [ 0.0916,  0.1702,  0.0085, -0.1657, -0.0171, -0.0037,  0.1583,  0.1810,
          0.0108,  0.1533,  0.1409, -0.0662, -0.0160, -0.1745, -0.1257, -0.0485,
          0.1727,  0.0006,  0.1104,  0.0268, -0.1637,  0.0048,  0.0781, -0.1162,
          0.0082,  0.0912,  0.0749,  0.0035, -0.0181, -0.0511, -0.0166,  0.0438],
        [ 0.0212, -0.1078,  0.0808,  0.0367, -0.1625, -0.1575,  0.1707, -0.1683,
         -0.0628,  0.1308,  0.0239, -0.0690, -0.1274, -0.0440,  0.0838,  0.1002,
          0.1086,  0.1781, -0.0278,  0.0646,  0.0992,  0.0346, -0.0741,  0.1478,
          0.0406,  0.0944, -0.1172, -0.0089, -0.1234, -0.0708,  0.1534, -0.1534],
        [-0.1818, -0.0349,  0.0078, -0.1551,  0.0056, -0.0205,  0.1281,  0.0673,
          0.0318,  0.1419, -0.1197, -0.0727,  0.0576, -0.0075, -0.0508, -0.1352,
         -0.1196,  0.0261, -0.1262,  0.1134, -0.0962, -0.0829, -0.1491, -0.0115,
         -0.1547,  0.1548,  0.0048, -0.1441, -0.0100,  0.0902,  0.0101, -0.0841],
        [ 0.0895, -0.0957,  0.0965, -0.1286, -0.0087, -0.0617, -0.0333, -0.1754,
          0.1541,  0.0988,  0.0796,  0.1584, -0.1084,  0.0462, -0.0857,  0.1775,
         -0.1268,  0.1616, -0.0229,  0.0804, -0.0609,  0.0191,  0.0534,  0.0922,
         -0.0520, -0.1671, -0.1435,  0.0108,  0.0894, -0.0874, -0.1158, -0.1823],
        [-0.0064,  0.0080,  0.1618, -0.1812, -0.1405,  0.0245,  0.1000,  0.1340,
         -0.0478,  0.1221, -0.1065, -0.0927, -0.0371,  0.1577, -0.1409,  0.1351,
          0.0476,  0.0647, -0.1265,  0.0564, -0.0051, -0.1351, -0.1299,  0.1645,
          0.0030,  0.0036, -0.0390, -0.0481, -0.0842, -0.0559,  0.0259, -0.0705],
        [ 0.1674, -0.0709,  0.0763, -0.1565,  0.0140, -0.1391,  0.0188,  0.0711,
          0.0787, -0.1213, -0.0587,  0.0070, -0.0739, -0.0771,  0.0130, -0.0385,
         -0.0330, -0.0760, -0.1501,  0.1276, -0.0866,  0.0016,  0.0541,  0.1289,
          0.0629,  0.1031,  0.1242,  0.0792, -0.0638, -0.0317,  0.0808,  0.1013],
        [ 0.1026, -0.1036,  0.0903, -0.1049,  0.0561, -0.0625, -0.0607,  0.1054,
         -0.0519,  0.0043, -0.0868, -0.1115,  0.0993, -0.0220, -0.0391, -0.0604,
         -0.1073,  0.0499, -0.1765,  0.1362,  0.1187, -0.0450, -0.0770, -0.0075,
         -0.0568,  0.1392, -0.0851,  0.1510,  0.1576,  0.0412,  0.0113, -0.0946],
        [ 0.0350,  0.1400,  0.0496, -0.1249,  0.0533,  0.1697,  0.1452, -0.1602,
          0.0540,  0.1626, -0.0109,  0.0799,  0.1038,  0.0711, -0.0067, -0.0696,
         -0.0738, -0.1035, -0.1461, -0.0616,  0.1290, -0.1373, -0.0732,  0.0544,
          0.0873,  0.1148, -0.0580,  0.0119,  0.1077,  0.0388, -0.0048,  0.0658],
        [-0.0199,  0.1517, -0.0093,  0.0355, -0.1127,  0.0728, -0.0754, -0.0120,
         -0.1065, -0.1276, -0.0306, -0.0750,  0.0263,  0.0336,  0.0147,  0.1378,
         -0.1534, -0.0362, -0.1087,  0.1860,  0.0539, -0.0366,  0.0276, -0.1394,
         -0.0641, -0.1486, -0.0651, -0.0418, -0.0301, -0.0317, -0.0775,  0.1569],
        [-0.1307,  0.1128, -0.0958, -0.0013,  0.1595,  0.1542, -0.1411,  0.1690,
          0.1292, -0.1486, -0.0358,  0.1356,  0.1249,  0.0275, -0.0358, -0.0406,
         -0.0877,  0.1428,  0.0315,  0.0139, -0.1861, -0.0511,  0.0431, -0.0417,
         -0.0059,  0.1378, -0.1559, -0.1564, -0.0020,  0.1222,  0.0356,  0.0885],
        [-0.1297,  0.0600,  0.0633,  0.0465,  0.1283,  0.0801, -0.0948, -0.1308,
          0.1755, -0.1366,  0.0095,  0.0391,  0.1125, -0.0714,  0.0506,  0.0743,
          0.1403, -0.1539,  0.1528, -0.0620, -0.1797, -0.1117,  0.0498,  0.1231,
          0.0282,  0.0464, -0.0390,  0.0027,  0.0940,  0.0579,  0.1780, -0.0939],
        [-0.0320, -0.0641, -0.0400, -0.0190, -0.0584,  0.1240,  0.0663,  0.1632,
          0.1006,  0.1346, -0.0836, -0.0416, -0.1333, -0.0972,  0.0899, -0.0074,
         -0.0242, -0.0111, -0.1432,  0.0779,  0.0313, -0.0455, -0.0343, -0.1271,
         -0.1326, -0.1155,  0.0939,  0.1176, -0.0419,  0.0629, -0.1827, -0.1324],
        [-0.0350,  0.1097,  0.1121, -0.1273,  0.1048, -0.1403, -0.0736,  0.0879,
          0.0266, -0.1843, -0.1720,  0.0565,  0.1347, -0.0584,  0.1753,  0.0168,
         -0.0578, -0.1479, -0.1034, -0.1456, -0.1151, -0.0084,  0.0676, -0.0937,
         -0.0314,  0.1867, -0.0609,  0.0308, -0.1366, -0.1108, -0.0017, -0.0830]],
       device='cuda:0') torch.Size([16, 32])
fc_blocks.1.0.bias tensor([-0.0857,  0.1605, -0.1241,  0.0653, -0.1585,  0.0330,  0.1031,  0.1267,
         0.1135, -0.1371, -0.0250, -0.0546,  0.1533, -0.1274,  0.0003, -0.0867],
       device='cuda:0') torch.Size([16])
fc_blocks.2.0.weight tensor([[ 0.0474,  0.1365,  0.0644, -0.0120, -0.0823,  0.0347,  0.0078,  0.2377,
          0.1872,  0.0092, -0.0497, -0.1637, -0.1991,  0.1443, -0.0913,  0.2016],
        [-0.1179, -0.0707,  0.0894,  0.0954, -0.0602, -0.2194, -0.0726, -0.1108,
         -0.1855,  0.0481, -0.2413,  0.1830,  0.0980,  0.0245,  0.2264, -0.2418],
        [ 0.0712, -0.1609, -0.2359, -0.0794, -0.1582,  0.2037, -0.0105,  0.2077,
          0.0205, -0.1704, -0.0319, -0.1716,  0.0707,  0.2300,  0.2329, -0.1142],
        [-0.2202, -0.0369,  0.1444, -0.1648,  0.0921, -0.1463,  0.0393,  0.0844,
         -0.1629,  0.1022,  0.1273,  0.2404, -0.1290, -0.1180, -0.1795,  0.2396],
        [ 0.1274, -0.1719,  0.2578, -0.1732, -0.1948,  0.0549,  0.1164, -0.1324,
         -0.1105,  0.2483, -0.0405,  0.2224, -0.2275,  0.2424, -0.0941, -0.1320],
        [-0.0106,  0.0403, -0.0256, -0.2299,  0.0045,  0.1959,  0.1842,  0.1173,
         -0.0059, -0.1425,  0.1823,  0.0942,  0.2224,  0.0237,  0.0936, -0.1037],
        [ 0.1343,  0.0778,  0.0608,  0.1496, -0.1994,  0.0343, -0.0700,  0.1852,
          0.0293, -0.2028,  0.1663, -0.1865,  0.1163,  0.0919, -0.0516,  0.1616],
        [-0.0766, -0.1882,  0.0599,  0.0985, -0.0630,  0.0598,  0.0325, -0.2305,
          0.1070,  0.2420,  0.0053,  0.1880,  0.0421,  0.0006,  0.0856, -0.1641]],
       device='cuda:0') torch.Size([8, 16])
fc_blocks.2.0.bias tensor([-0.2130, -0.1851, -0.0680, -0.0505, -0.1326, -0.1684, -0.0040, -0.0854],
       device='cuda:0') torch.Size([8])
fc_blocks.3.0.weight tensor([[-0.1723, -0.1936,  0.2896,  0.2304,  0.0299, -0.1302,  0.1141,  0.0745],
        [ 0.1438,  0.3380,  0.3326,  0.2638, -0.2458, -0.1246, -0.0184,  0.0825],
        [-0.0981, -0.1347,  0.1121,  0.0606,  0.2998, -0.0463,  0.1568,  0.1465],
        [-0.2552,  0.0807, -0.2920,  0.1772, -0.2016, -0.0068, -0.2559, -0.2626]],
       device='cuda:0') torch.Size([4, 8])
fc_blocks.3.0.bias tensor([ 0.1257, -0.2330, -0.0760,  0.0043], device='cuda:0') torch.Size([4])
fc_blocks.4.0.weight tensor([[-0.3505, -0.2811, -0.0140,  0.2046],
        [ 0.3820, -0.2795,  0.1037, -0.4731]], device='cuda:0') torch.Size([2, 4])
fc_blocks.4.0.bias tensor([0.4280, 0.3968], device='cuda:0') torch.Size([2])
