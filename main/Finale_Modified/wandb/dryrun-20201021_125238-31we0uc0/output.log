==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 48.44it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.64it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........Train Loss : 14981.387, Val Loss : 14878.663
======> Trajectory Loss : 12841.420, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.378, BelowGroundPenalize Loss : 2002.190
===> [Minibatch 2/5].........Train Loss : 15152.895, Val Loss : 13848.585
======> Trajectory Loss : 12736.729, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.367, BelowGroundPenalize Loss : 2279.450
===> [Minibatch 3/5].........Train Loss : 13249.662, Val Loss : 12833.464
======> Trajectory Loss : 11208.111, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.360, BelowGroundPenalize Loss : 1905.516
===> [Minibatch 4/5].........Train Loss : 10854.514, Val Loss : 11773.224
======> Trajectory Loss : 9326.605, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.330, BelowGroundPenalize Loss : 1394.879
===> [Minibatch 5/5].........Train Loss : 12378.923, Val Loss : 10643.608
======> Trajectory Loss : 10403.620, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.290, BelowGroundPenalize Loss : 1846.280
[#]Finish Epoch : 1/100000.........Train loss : 13323.476, Val loss : 12795.509
[+++]Saving the best model checkpoint : Prev loss 20000000000.000 > Curr loss 12795.509
[+++]Saving the best model checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_best.pth
[#]Saving the lastest checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_lastest.pth
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 2/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........Train Loss : 9951.577, Val Loss : 8707.269
======> Trajectory Loss : 8500.844, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.224, BelowGroundPenalize Loss : 1328.330
===> [Minibatch 2/5].........Train Loss : 9378.729, Val Loss : 7436.791
======> Trajectory Loss : 7958.817, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.206, BelowGroundPenalize Loss : 1299.340
===> [Minibatch 3/5].........Train Loss : 7418.986, Val Loss : 6011.361
======> Trajectory Loss : 6248.076, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.175, BelowGroundPenalize Loss : 1053.447
===> [Minibatch 4/5].........Train Loss : 6118.853, Val Loss : 4450.074
======> Trajectory Loss : 5164.972, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.170, BelowGroundPenalize Loss : 836.871
===> [Minibatch 5/5].........Train Loss : 4683.018, Val Loss : 2479.956
======> Trajectory Loss : 3930.046, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.128, BelowGroundPenalize Loss : 640.218
[#]Finish Epoch : 2/100000.........Train loss : 7510.232, Val loss : 5817.090
[+++]Saving the best model checkpoint : Prev loss 12795.509 > Curr loss 5817.090
[+++]Saving the best model checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_best.pth
[#]Saving the lastest checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_lastest.pth
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 3/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........Train Loss : 2490.189, Val Loss : 131.233
======> Trajectory Loss : 2082.939, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.054, BelowGroundPenalize Loss : 301.813
===> [Minibatch 2/5].........Train Loss : 140.305, Val Loss : 6107.918
======> Trajectory Loss : 35.714, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.994, BelowGroundPenalize Loss : 5.182
===> [Minibatch 3/5].........Train Loss : 4942.820, Val Loss : 12740.936
======> Trajectory Loss : 4853.539, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.893, BelowGroundPenalize Loss : 0.000
===> [Minibatch 4/5].........Train Loss : 11585.964, Val Loss : 12014.806
======> Trajectory Loss : 11500.459, Gravity Loss : 0.002, EndOfTrajectory Loss : 0.855, BelowGroundPenalize Loss : 0.000
