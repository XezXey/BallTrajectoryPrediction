==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 30.06it/s]
===============================Dataset shape===============================
Mixed : (6426,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 80.15it/s]
===============================Dataset shape===============================
Mixed : (1029,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 669, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 669, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 681, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 681, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 603, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 603, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 603, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 604, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 653, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 653, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 653, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 654, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 698, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 722, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 722, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 704, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 651, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 651, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 651, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 652, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 672, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 672, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 645, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 645, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 645, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 646, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 707, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 707, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 643, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 643, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 643, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 644, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 679, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 679, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 679, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 712, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 712, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 721, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 721, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 728, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 728, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 752, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 685, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 685, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 685, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 686, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 651, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 651, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 651, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 652, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 660, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 660, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 661, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 664, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 664, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 708, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 663, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 663, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 788, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 788, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 689, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 689, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 690, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 632, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 632, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
[BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
), BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)]
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
[Parameter containing:
tensor([[ 1.1381e-01,  4.4333e-02],
        [ 1.5236e-02,  2.3068e-02],
        [-1.5197e-01, -1.0596e-01],
        [-1.5121e-01,  1.3463e-01],
        [-1.2508e-01,  4.5093e-02],
        [ 9.0876e-02,  1.4844e-01],
        [-8.0388e-02,  1.1157e-01],
        [ 2.5130e-02, -3.2364e-02],
        [ 1.0461e-01, -9.6454e-02],
        [ 1.0704e-01, -4.1621e-03],
        [-4.0121e-02, -1.4489e-02],
        [ 2.6178e-02, -9.2442e-04],
        [ 1.1017e-01,  2.5777e-02],
        [-5.6989e-02, -1.2761e-01],
        [ 1.5426e-01,  1.0806e-01],
        [ 1.4530e-01,  1.3942e-01],
        [-1.5480e-01, -6.3167e-02],
        [ 2.3817e-02,  1.1415e-01],
        [-5.1523e-02, -1.3830e-01],
        [ 7.8438e-02, -1.4950e-01],
        [ 8.1354e-02, -1.6776e-01],
        [-5.3014e-03, -1.7214e-01],
        [-6.1785e-03,  1.0979e-01],
        [ 1.7385e-01,  1.7231e-02],
        [-1.0450e-01,  1.7400e-01],
        [-1.7129e-01, -5.2437e-02],
        [ 7.0707e-02,  1.4036e-01],
        [ 3.4360e-02,  1.6093e-01],
        [-1.1675e-01,  2.3421e-02],
        [-2.8704e-02, -1.5772e-01],
        [ 1.5337e-01, -8.5942e-02],
        [ 1.7540e-01, -1.5575e-01],
        [-1.5396e-01,  1.7269e-02],
        [ 1.5696e-01, -3.0299e-03],
        [-5.0933e-02, -4.2470e-02],
        [ 1.7361e-01, -1.7293e-01],
        [-1.3120e-01, -8.5480e-02],
        [ 1.4426e-01,  2.3039e-02],
        [-1.2218e-01,  1.0991e-01],
        [ 1.6694e-01,  1.0332e-04],
        [ 3.1163e-03, -1.5518e-01],
        [-1.5633e-01,  1.9377e-02],
        [-5.4497e-02,  9.1930e-02],
        [ 1.0447e-01,  1.3958e-01],
        [-4.2231e-02, -9.5083e-02],
        [ 2.4011e-02, -2.2563e-03],
        [ 4.6290e-02, -7.3256e-02],
        [-3.4000e-02, -3.3420e-02],
        [ 8.9918e-02,  8.6190e-02],
        [-6.5327e-02,  8.3434e-03],
        [ 1.2000e-01,  1.4998e-01],
        [ 8.3676e-02,  6.8338e-02],
        [ 1.6263e-01,  5.0996e-02],
        [-1.0541e-03, -9.0642e-02],
        [-3.4620e-02,  9.9094e-02],
        [ 1.1845e-01, -1.2870e-01],
        [-9.0078e-02,  2.9453e-03],
        [ 1.4899e-01, -1.3969e-01],
        [-1.3209e-01,  9.6902e-02],
        [ 2.5459e-02,  5.6510e-02],
        [-1.4681e-02,  1.0801e-01],
        [ 6.7327e-02, -1.6295e-01],
        [-1.0384e-01,  9.3045e-02],
        [ 1.0678e-01, -1.5330e-01],
        [ 1.0293e-01, -1.4223e-01],
        [ 9.3480e-02, -7.5750e-02],
        [-5.4071e-02, -4.2603e-02],
        [ 1.0119e-01,  5.4773e-02],
        [ 8.5354e-05,  1.7039e-01],
        [-1.3025e-01,  1.5388e-01],
        [ 7.0566e-02,  2.3537e-02],
        [-1.1720e-01, -1.4371e-02],
        [ 2.0840e-02, -1.2613e-01],
        [ 1.4946e-01, -4.9438e-02],
        [ 1.1516e-01, -8.3619e-02],
        [ 1.1543e-01, -1.6887e-01],
        [ 1.2236e-01,  7.9505e-02],
        [-1.2070e-01, -1.2705e-01],
        [-1.2918e-01, -1.1896e-02],
        [ 1.8611e-02, -3.8189e-02],
        [-9.7087e-02,  1.7040e-01],
        [ 1.0770e-01, -6.3988e-02],
        [ 4.6251e-02, -1.5545e-01],
        [ 9.4079e-02,  3.7956e-02],
        [-8.0583e-02,  8.9331e-02],
        [ 4.9857e-02,  4.7710e-02],
        [-9.9924e-02, -3.9199e-02],
        [-1.2060e-01,  8.6305e-02],
        [-8.8823e-02, -5.7445e-02],
        [ 8.2738e-03, -1.1200e-01],
        [ 1.6366e-01,  1.1280e-01],
        [-7.3495e-02,  1.5604e-02],
        [-2.1176e-03,  1.3257e-01],
        [-1.5213e-01,  1.1841e-01],
        [-2.6758e-02, -6.0273e-02],
        [ 1.5011e-01, -9.5005e-02],
        [ 6.4420e-02,  1.3982e-01],
        [ 3.8504e-02, -6.6426e-02],
        [-1.1571e-02, -1.0036e-01],
        [ 1.3502e-01, -5.9360e-02],
        [ 1.1494e-01,  1.3483e-01],
        [ 1.2051e-01, -6.7145e-02],
        [ 1.7814e-03, -1.5789e-01],
        [-5.4066e-02, -2.5329e-02],
        [-1.4762e-01,  1.2312e-01],
        [ 2.7361e-02, -1.3248e-02],
        [-1.5253e-01, -1.3412e-01],
        [-1.2694e-01,  1.3976e-01],
        [-1.4738e-01, -4.7964e-02],
        [ 3.2661e-02, -5.4034e-03],
        [ 9.8077e-02,  5.9090e-02],
        [ 1.6771e-01,  1.6331e-01],
        [ 1.3089e-01,  1.6872e-01],
        [ 5.2511e-02,  4.6478e-02],
        [ 1.2389e-01, -2.0114e-02],
        [-6.2014e-02, -1.9231e-02],
        [ 1.1611e-01,  1.0051e-01],
        [-5.3609e-02, -2.4985e-02],
        [ 1.5452e-01,  8.5822e-02],
        [ 1.2193e-01, -1.3758e-01],
        [ 1.6138e-01,  8.7599e-02],
        [ 5.2087e-02, -1.2457e-01],
        [ 6.0999e-02, -3.0341e-03],
        [-1.1334e-01, -8.8453e-02],
        [-1.5256e-01,  1.0764e-03],
        [-1.3772e-01,  1.5546e-02],
        [ 1.4880e-01, -1.3141e-01],
        [-1.4130e-01, -3.3990e-02]], device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0940, -0.1018, -0.0668,  ..., -0.1194, -0.0792,  0.1418],
        [ 0.0998,  0.1175, -0.1746,  ...,  0.1196,  0.0925,  0.0816],
        [-0.1304, -0.0623, -0.0021,  ...,  0.1640, -0.0141, -0.0845],
        ...,
        [-0.0530,  0.1460,  0.0803,  ...,  0.1763, -0.1002, -0.0987],
        [ 0.0378,  0.0444,  0.1350,  ...,  0.0723, -0.1697, -0.0984],
        [ 0.1647,  0.1077,  0.0917,  ...,  0.0822, -0.0620,  0.1119]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0530, -0.0763, -0.1743,  0.0811, -0.0685, -0.0815, -0.0864,  0.0639,
        -0.0217,  0.1287, -0.0830,  0.1066,  0.0442,  0.1746,  0.1623,  0.0338,
         0.0940,  0.0304, -0.0713,  0.0525, -0.0885, -0.1476, -0.0539,  0.1693,
        -0.0567,  0.1194, -0.1749,  0.1213,  0.1320, -0.0169,  0.1259,  0.0974,
         0.0190, -0.1516,  0.0279, -0.1588,  0.1369, -0.1062,  0.0624,  0.1343,
        -0.0404, -0.0077, -0.1076, -0.0672, -0.0479,  0.0535,  0.0229, -0.1319,
         0.1375, -0.0735,  0.1537, -0.0788, -0.1013,  0.0853, -0.1665, -0.1012,
         0.1294, -0.0393, -0.0174,  0.0311, -0.0327,  0.1636, -0.1244,  0.0650,
         0.1551, -0.1277,  0.1551,  0.0267,  0.1046, -0.0259, -0.0581, -0.0034,
         0.0898,  0.1314,  0.0515,  0.0557,  0.0494,  0.1342,  0.1652,  0.0094,
         0.1744,  0.1113, -0.0186,  0.0380, -0.0617,  0.0744, -0.1294, -0.1025,
         0.0793,  0.1601,  0.0325,  0.1655,  0.1555,  0.0785, -0.0027, -0.0508,
        -0.1022, -0.0917,  0.0204, -0.1551,  0.1391,  0.0701,  0.1154, -0.0163,
        -0.0265, -0.0153, -0.1001,  0.1550, -0.1048, -0.1065, -0.0541,  0.0220,
        -0.1184,  0.1726, -0.0394,  0.1005,  0.0062,  0.1640, -0.0142,  0.0017,
        -0.1618,  0.1115, -0.0455, -0.0338,  0.0667, -0.1246,  0.0296,  0.0087],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1488, -0.0055,  0.1642, -0.1524,  0.0913, -0.1321,  0.1686, -0.0769,
         0.0648, -0.0732, -0.0911, -0.1683,  0.0485,  0.1439, -0.1662, -0.0949,
         0.0754, -0.1351,  0.0047, -0.1185, -0.1158, -0.1043, -0.1176,  0.1358,
         0.1476,  0.1714, -0.1359,  0.1339, -0.0579,  0.1133,  0.0915,  0.1280,
        -0.0963,  0.0035,  0.1706,  0.1030,  0.1766,  0.0888, -0.1358,  0.1322,
         0.1687, -0.1279,  0.1323, -0.1604,  0.0086,  0.1545,  0.1285,  0.1691,
         0.1562, -0.1662,  0.0252,  0.0010,  0.1130,  0.1104,  0.1441, -0.0886,
         0.0561,  0.1439,  0.0184, -0.0138,  0.1464, -0.1663,  0.1254,  0.1380,
         0.1673,  0.1667, -0.0427, -0.0555, -0.0624, -0.0097,  0.0465,  0.0753,
         0.0025,  0.0120,  0.1637,  0.1406, -0.0762,  0.1628,  0.1363,  0.1549,
         0.1218,  0.1731,  0.1190, -0.1157,  0.0858, -0.0581,  0.0677, -0.0804,
        -0.0629,  0.0383,  0.0500, -0.0830, -0.0839,  0.1027,  0.0889,  0.1550,
        -0.1034,  0.0400, -0.1261, -0.1060,  0.0998,  0.1288,  0.0523, -0.0995,
        -0.0830,  0.1346,  0.1565, -0.0988,  0.1360, -0.1255,  0.1121,  0.0833,
         0.1640,  0.0986,  0.0952, -0.0457,  0.0929,  0.0321,  0.0036,  0.0805,
        -0.0131, -0.1385,  0.1685, -0.1171,  0.0621,  0.0983, -0.1398,  0.0539],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.1180, -0.0055],
        [-0.1556, -0.1481],
        [ 0.0734, -0.1645],
        [ 0.0806, -0.1205],
        [-0.0183, -0.0079],
        [ 0.0221,  0.1057],
        [-0.0671, -0.0644],
        [-0.0088, -0.1164],
        [-0.1361,  0.0378],
        [ 0.1349,  0.1474],
        [-0.1330,  0.0026],
        [ 0.0206,  0.1181],
        [ 0.1134, -0.0675],
        [ 0.0827,  0.0629],
        [-0.0432,  0.0934],
        [-0.1391, -0.0403],
        [ 0.0024,  0.0057],
        [-0.1563,  0.0451],
        [ 0.0178, -0.0505],
        [ 0.1011,  0.0506],
        [ 0.1242, -0.0606],
        [ 0.0559,  0.0097],
        [ 0.1556, -0.1625],
        [ 0.0372, -0.0075],
        [ 0.1024,  0.1470],
        [-0.0764, -0.1083],
        [-0.0490, -0.1622],
        [ 0.0305,  0.1498],
        [ 0.0231,  0.1589],
        [ 0.0631, -0.0079],
        [ 0.0660,  0.0943],
        [-0.1663,  0.1487],
        [-0.1491, -0.0541],
        [-0.1402,  0.1519],
        [ 0.0996,  0.0964],
        [-0.0105, -0.0572],
        [-0.1174,  0.0235],
        [ 0.0953,  0.0998],
        [ 0.0778, -0.1689],
        [-0.0542, -0.1706],
        [ 0.0632,  0.1447],
        [ 0.1599, -0.1186],
        [-0.0970, -0.1638],
        [-0.0137,  0.0235],
        [ 0.0518,  0.0901],
        [-0.1492,  0.0955],
        [ 0.0992,  0.0726],
        [ 0.0022, -0.1511],
        [-0.0048,  0.1128],
        [-0.0146,  0.0703],
        [-0.1289,  0.1238],
        [-0.0493, -0.0533],
        [-0.0719, -0.1174],
        [ 0.0273, -0.0947],
        [-0.0877,  0.0968],
        [ 0.1260, -0.0609],
        [-0.0273,  0.1535],
        [ 0.1714,  0.1158],
        [-0.1454,  0.1473],
        [ 0.0147, -0.0123],
        [ 0.0825, -0.0993],
        [-0.1205,  0.0750],
        [ 0.1073,  0.0415],
        [ 0.0346, -0.1750],
        [-0.0898,  0.0516],
        [-0.1371, -0.1598],
        [ 0.0443,  0.0670],
        [-0.0159, -0.1048],
        [-0.1247, -0.0492],
        [ 0.0492,  0.0070],
        [-0.0464, -0.0843],
        [-0.0801,  0.0014],
        [ 0.1537, -0.1419],
        [ 0.1073, -0.1098],
        [ 0.1408, -0.0032],
        [-0.1660,  0.0848],
        [-0.1731, -0.0744],
        [ 0.1501, -0.0676],
        [-0.1296,  0.0483],
        [ 0.1311,  0.1696],
        [-0.0077,  0.0567],
        [-0.1685, -0.1755],
        [-0.0998, -0.1473],
        [ 0.1532,  0.0156],
        [-0.1665, -0.0188],
        [ 0.1132, -0.0822],
        [-0.0992, -0.1095],
        [-0.0659, -0.1360],
        [-0.0062, -0.1429],
        [ 0.0440, -0.0125],
        [ 0.0178, -0.0011],
        [ 0.1007,  0.1232],
        [-0.1610, -0.0491],
        [ 0.1585, -0.0926],
        [ 0.1114,  0.0207],
        [ 0.1155,  0.1066],
        [-0.1303,  0.1418],
        [-0.0131,  0.1635],
        [-0.0218,  0.0378],
        [-0.1247,  0.0299],
        [ 0.0231, -0.0219],
        [ 0.1186,  0.1464],
        [ 0.1756,  0.0024],
        [ 0.1280, -0.0749],
        [-0.1050, -0.0270],
        [ 0.0322,  0.1598],
        [ 0.0189, -0.1382],
        [-0.1097,  0.1618],
        [ 0.1385,  0.0548],
        [-0.1454,  0.0092],
        [-0.0468,  0.0540],
        [-0.1016, -0.1472],
        [ 0.1324,  0.0233],
        [ 0.0795,  0.1568],
        [-0.1127, -0.1732],
        [ 0.0661,  0.0446],
        [ 0.0167, -0.1538],
        [ 0.0818, -0.0049],
        [ 0.0399, -0.0747],
        [-0.0214, -0.1591],
        [-0.0182, -0.1597],
        [ 0.0026,  0.1296],
        [-0.0875, -0.1058],
        [ 0.0137,  0.0427],
        [-0.0994,  0.0204],
        [-0.1447, -0.0633],
        [-0.0233, -0.0749],
        [-0.0351,  0.0306]], device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1415,  0.1555,  0.0408,  ...,  0.0686,  0.0314, -0.1131],
        [ 0.1160,  0.0355,  0.0355,  ..., -0.0720,  0.0206,  0.0627],
        [ 0.1008, -0.0195,  0.1191,  ...,  0.0794,  0.0400, -0.0454],
        ...,
        [ 0.1099, -0.1084, -0.1358,  ...,  0.1744,  0.0106, -0.0997],
        [-0.1420,  0.0802, -0.0198,  ..., -0.0401, -0.0577,  0.0094],
        [ 0.0516, -0.0023,  0.0103,  ..., -0.0408, -0.0736,  0.0649]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0087, -0.1063,  0.0774, -0.0329,  0.1658,  0.1254, -0.1460, -0.1212,
        -0.0381, -0.1587,  0.0708,  0.0691, -0.1354,  0.0625,  0.0810,  0.0451,
        -0.0218, -0.0597, -0.1413,  0.1599, -0.1199,  0.1004,  0.1153, -0.0832,
        -0.0145, -0.1103, -0.0200, -0.1528, -0.0411,  0.0082,  0.1219,  0.1617,
         0.0303,  0.1665, -0.1312,  0.1245,  0.1111, -0.1336, -0.1425,  0.0624,
        -0.1406,  0.0346,  0.0574, -0.1537,  0.0213, -0.0615, -0.1146,  0.1478,
         0.1689, -0.1586,  0.0547, -0.1571, -0.0422, -0.1320,  0.0352, -0.1015,
         0.0848,  0.1482,  0.1525, -0.1152, -0.0152,  0.1705, -0.1428, -0.0802,
        -0.0199,  0.0754,  0.1601, -0.0165, -0.0591, -0.0185, -0.0252, -0.0613,
         0.1638,  0.0953, -0.1692, -0.0991, -0.0540,  0.0892, -0.1728, -0.1375,
         0.1313, -0.1137, -0.0524,  0.1112, -0.0655, -0.1460,  0.0085,  0.0347,
         0.0453, -0.0753,  0.0245, -0.1620,  0.0973,  0.0270,  0.1086, -0.0574,
         0.1668,  0.0302,  0.1263,  0.1301,  0.1299,  0.0908,  0.0577,  0.0533,
        -0.0545, -0.0720,  0.1240, -0.0715,  0.1375, -0.0330, -0.1169, -0.1659,
        -0.1426, -0.1203,  0.1060, -0.0241,  0.0961,  0.0156, -0.0974,  0.1094,
        -0.1082, -0.0302,  0.1020, -0.0800, -0.0615, -0.0071,  0.1554, -0.0463],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-4.2187e-02, -6.9629e-03,  1.3300e-01,  1.9843e-02, -1.4763e-01,
        -6.4047e-02,  1.2852e-01,  9.1059e-02, -1.2598e-01,  1.2084e-01,
        -9.0455e-03,  1.6290e-01, -5.8659e-03, -8.6330e-02,  1.7771e-02,
        -3.8368e-02,  1.3450e-01, -1.3637e-01,  1.5248e-01, -2.3816e-03,
         8.9969e-02,  1.6218e-01, -8.8865e-02, -4.9232e-02, -1.0869e-01,
        -9.3284e-02, -2.7694e-02, -1.3544e-01, -6.5183e-02, -6.8177e-02,
        -1.6889e-01, -9.9451e-02,  1.7281e-01, -1.4641e-03,  6.3275e-02,
        -2.9656e-02,  1.1550e-01,  1.5406e-02,  1.3058e-01, -9.9740e-02,
        -6.9543e-02,  1.4153e-01, -1.5843e-01,  1.6801e-01,  4.7939e-02,
        -2.4443e-02,  1.4426e-01, -1.5108e-01, -1.6546e-01,  2.8541e-02,
        -2.1544e-02,  2.2577e-03,  1.7201e-02, -1.3384e-01,  2.3070e-03,
         1.3706e-01,  1.3741e-01,  9.8772e-02, -1.2973e-01,  6.1833e-02,
        -8.1568e-02,  1.7481e-01, -4.1260e-02, -5.1800e-02,  1.5831e-01,
         9.8980e-02,  7.4691e-02,  1.3361e-01, -1.4611e-02,  1.5939e-02,
         6.6252e-02,  7.1210e-02, -1.6507e-02,  9.5221e-02, -4.8110e-02,
        -1.7385e-04, -5.2047e-02,  1.4187e-01,  6.6890e-02,  1.2958e-02,
        -1.2662e-01,  1.6735e-01, -8.4435e-02,  1.0016e-01,  6.4777e-02,
        -1.0313e-01, -8.3437e-02,  5.1048e-03, -1.0353e-01,  9.8337e-02,
         3.7925e-02,  9.0519e-02, -1.5641e-01, -1.6695e-01, -1.4887e-01,
         2.5699e-02, -1.1345e-01, -1.0951e-02,  1.1684e-01,  6.5540e-02,
         4.2539e-02, -7.9972e-02,  7.5169e-02,  1.1709e-01, -3.8642e-02,
         3.1254e-02,  1.0258e-01,  5.1238e-02,  1.0300e-01,  1.0536e-02,
        -1.3788e-01,  9.6855e-02,  7.5129e-02, -1.2135e-01,  6.8057e-02,
         5.5820e-02, -1.3599e-01, -2.8954e-02,  1.0559e-01, -1.7142e-01,
        -8.3885e-02,  8.2315e-02, -1.4058e-01, -1.1283e-01, -3.7054e-03,
         7.3367e-02, -8.3490e-02, -9.3965e-02], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([[ 0.0790,  0.1763, -0.1166,  ...,  0.0572,  0.0449, -0.1156],
        [ 0.1308, -0.0625,  0.0636,  ...,  0.1499, -0.0800, -0.0768],
        [-0.0014, -0.1109, -0.1004,  ...,  0.0734, -0.1106, -0.1267],
        ...,
        [ 0.1232, -0.1045,  0.0304,  ...,  0.0365, -0.1147,  0.0682],
        [ 0.1596, -0.0373,  0.1226,  ...,  0.1288, -0.0396,  0.0366],
        [ 0.0332, -0.0559,  0.0902,  ..., -0.0987,  0.0258, -0.0511]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1175,  0.1580,  0.0733,  ..., -0.0905, -0.0260,  0.0170],
        [-0.1550, -0.0692, -0.1073,  ...,  0.0461,  0.1345,  0.0753],
        [ 0.1465,  0.1191,  0.0555,  ...,  0.1266, -0.0537,  0.1442],
        ...,
        [ 0.1261, -0.1550, -0.1046,  ..., -0.0488,  0.0048,  0.1316],
        [ 0.1004,  0.1224,  0.1146,  ...,  0.1020, -0.0855,  0.0823],
        [ 0.0547, -0.1715,  0.1097,  ...,  0.1205, -0.0293,  0.1629]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0752, -0.1530,  0.1488,  0.0678,  0.0102,  0.0909,  0.0093, -0.0786,
        -0.0621,  0.1124, -0.0626, -0.0298, -0.1387, -0.0887, -0.1654,  0.0595,
         0.1379, -0.1730,  0.0816, -0.1000,  0.0696, -0.0628,  0.0723,  0.1013,
         0.0996, -0.0242, -0.1492, -0.0687,  0.1589, -0.1357, -0.1713,  0.0378,
        -0.0403,  0.0239,  0.0541, -0.0502,  0.0207,  0.1643,  0.0289, -0.1249,
        -0.1396,  0.1149, -0.0218,  0.1269,  0.0378, -0.1591,  0.0922,  0.1372,
        -0.0165,  0.0600, -0.0030,  0.1213,  0.0887,  0.1193, -0.0242, -0.1244,
        -0.1486, -0.0778, -0.0425, -0.0123, -0.0920, -0.0966,  0.0410,  0.0620,
         0.0826, -0.1644, -0.1171,  0.0108,  0.0779, -0.0485,  0.1037,  0.0509,
        -0.0712, -0.1565,  0.0715, -0.0317,  0.1320,  0.0224, -0.0174, -0.0521,
         0.0849,  0.0692, -0.0908,  0.1116,  0.0455,  0.1028, -0.1140,  0.1293,
        -0.0403, -0.1289, -0.0268, -0.1213, -0.0239, -0.1121,  0.1525,  0.0265,
         0.0204,  0.1429,  0.1261, -0.1171,  0.0227,  0.1571,  0.0783, -0.0032,
        -0.0125, -0.1228,  0.1385, -0.0306, -0.0622, -0.1493,  0.1018,  0.0137,
        -0.1526, -0.0277, -0.1323, -0.0086, -0.0858, -0.1503, -0.0743, -0.0559,
        -0.1546,  0.0480,  0.1421,  0.0800, -0.0950,  0.0227, -0.0069,  0.1069],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0083,  0.0563, -0.0680, -0.0260,  0.1442, -0.0494, -0.1036,  0.0093,
         0.0268, -0.1579,  0.0357,  0.1017,  0.0709, -0.0193,  0.1280,  0.1347,
        -0.0626,  0.1107, -0.0780,  0.1494, -0.1560,  0.1213, -0.0942, -0.0967,
         0.0590,  0.0126,  0.0683, -0.1603, -0.0482,  0.1547, -0.1063,  0.1340,
        -0.0177,  0.0068, -0.0228,  0.1483,  0.1180, -0.0649, -0.0344, -0.0552,
         0.1208,  0.0252, -0.0789, -0.0238, -0.0821, -0.1659,  0.1615, -0.1548,
         0.0303,  0.0923, -0.1725,  0.1365, -0.0296, -0.1429, -0.0913,  0.0475,
         0.1207,  0.1684, -0.0859,  0.1679,  0.0511, -0.1546, -0.0073, -0.1743,
        -0.1665,  0.0125,  0.1111,  0.0226, -0.1198,  0.0174,  0.1288, -0.0897,
         0.1391,  0.0730, -0.0953, -0.0492,  0.0706,  0.0090, -0.0117, -0.1685,
         0.1735, -0.1059, -0.1056, -0.0853, -0.0231, -0.0431, -0.0347, -0.0009,
        -0.1523, -0.0172, -0.1321,  0.1627, -0.1672, -0.1732,  0.0861,  0.1011,
         0.1299,  0.1558,  0.0663,  0.1536,  0.1227, -0.0565, -0.0610, -0.0407,
        -0.1635,  0.0650, -0.0250, -0.1019, -0.1268, -0.0613, -0.1188, -0.0955,
         0.0586, -0.0191, -0.0041,  0.0585,  0.0517,  0.0551,  0.0542, -0.1469,
         0.0439, -0.0445,  0.0068,  0.1255,  0.0780, -0.1279, -0.0942,  0.0648],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0445,  0.1273, -0.1712,  ..., -0.1083,  0.0818, -0.0899],
        [ 0.1375, -0.1353,  0.0689,  ..., -0.1432, -0.1650, -0.0983],
        [ 0.1037, -0.0163, -0.0094,  ..., -0.0336, -0.1026,  0.1072],
        ...,
        [-0.1451, -0.1686,  0.1356,  ..., -0.0815,  0.0476,  0.1212],
        [-0.0096, -0.0800,  0.0641,  ..., -0.0239, -0.1483,  0.0279],
        [ 0.0250, -0.1582,  0.1128,  ...,  0.1200, -0.0961,  0.1645]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1733,  0.0214, -0.0533,  ..., -0.0645,  0.1661, -0.0462],
        [-0.0014,  0.0571, -0.0551,  ...,  0.1105, -0.0819, -0.0693],
        [ 0.0853,  0.0190,  0.1642,  ..., -0.1696,  0.0804, -0.1169],
        ...,
        [-0.1746,  0.0598, -0.0669,  ...,  0.1418,  0.1338,  0.1312],
        [-0.0830, -0.1303,  0.1274,  ..., -0.1303, -0.1047,  0.1533],
        [-0.1120, -0.0200, -0.1020,  ..., -0.1600,  0.0769, -0.1718]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0830, -0.1566, -0.1399,  0.0280, -0.0216, -0.0879, -0.0645, -0.0143,
         0.0102, -0.0523, -0.1735,  0.0720,  0.0735,  0.0703, -0.0063, -0.0238,
         0.1381,  0.0736,  0.1161, -0.0869, -0.1532, -0.0127, -0.1307, -0.0716,
         0.1318, -0.1375, -0.0710, -0.0898,  0.0527,  0.0470, -0.0971, -0.1328,
        -0.1155,  0.0241,  0.0670, -0.0767,  0.0430, -0.1582, -0.0633, -0.0148,
        -0.0742, -0.0066, -0.0794,  0.1723,  0.0197, -0.1452, -0.1515, -0.0075,
        -0.1758,  0.0525, -0.1618, -0.1249,  0.0351, -0.0834,  0.0899,  0.1286,
        -0.1223,  0.1212, -0.0731,  0.1001, -0.1486, -0.0149,  0.0493,  0.0972,
         0.1744,  0.1721,  0.1458,  0.1607, -0.0795, -0.1756,  0.1633,  0.0456,
        -0.1761,  0.1308,  0.1538, -0.1686, -0.1206, -0.0844, -0.0954,  0.1192,
        -0.0683, -0.0473, -0.0598, -0.1406, -0.0610,  0.1497, -0.1061, -0.0602,
         0.0099,  0.1471,  0.0112,  0.0699, -0.0829,  0.1109, -0.0846,  0.1615,
        -0.1099, -0.1606,  0.1536, -0.0733, -0.0956, -0.1297,  0.1507,  0.0655,
         0.0521,  0.0479,  0.0258, -0.0313, -0.0728,  0.0665,  0.0524,  0.0514,
         0.1194,  0.0451,  0.1390, -0.0453, -0.0921, -0.0069, -0.0051, -0.1515,
        -0.0083, -0.0246,  0.1674,  0.0994, -0.0562,  0.0657, -0.0911,  0.0765],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1053, -0.1114,  0.0383, -0.1253,  0.0940,  0.1637,  0.0603,  0.0757,
         0.0026, -0.1660,  0.0537, -0.0370, -0.0205, -0.1648,  0.1328, -0.1374,
        -0.0397, -0.0046,  0.1118,  0.0726,  0.1272, -0.1061, -0.0031,  0.0168,
        -0.1669, -0.0464, -0.0669, -0.1164, -0.1447, -0.0946,  0.1450, -0.1752,
         0.1450, -0.1558,  0.0492, -0.1557, -0.0821,  0.0319,  0.1235,  0.0122,
        -0.0169, -0.0909,  0.0795,  0.0474,  0.0685, -0.0352,  0.1436, -0.1426,
         0.0971, -0.1487,  0.0587,  0.0429, -0.0069,  0.1141, -0.1489,  0.1003,
        -0.0179, -0.0482, -0.1506, -0.1034,  0.1634,  0.1701,  0.0284, -0.0851,
        -0.0302,  0.0642, -0.1210, -0.1187,  0.1672, -0.0126,  0.1015,  0.1401,
         0.0287,  0.1681, -0.1168, -0.0923,  0.0448, -0.1417,  0.0303,  0.0122,
        -0.1358, -0.0208, -0.0058, -0.0646, -0.0528,  0.0148, -0.0915, -0.1767,
        -0.1309,  0.1378, -0.1501,  0.0167,  0.0854,  0.1718, -0.1330,  0.1343,
        -0.0989, -0.0888, -0.0735, -0.0143, -0.1446, -0.1746, -0.0488,  0.1470,
         0.1315, -0.1710,  0.0930, -0.0862,  0.0510, -0.0096, -0.0523, -0.0981,
         0.0194, -0.0677, -0.0508,  0.1036, -0.0405,  0.0188,  0.1517, -0.0919,
        -0.0701, -0.1741, -0.0540,  0.0901, -0.0257,  0.0892, -0.0119,  0.1608],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1334, -0.1571, -0.0358,  ..., -0.1579, -0.1584,  0.0229],
        [-0.0340,  0.0751, -0.0903,  ..., -0.0221,  0.0843, -0.1611],
        [-0.1620, -0.0679, -0.1246,  ...,  0.1145,  0.0632, -0.0104],
        ...,
        [ 0.1230,  0.1418,  0.1193,  ..., -0.1153, -0.0659,  0.0487],
        [-0.1160,  0.1626, -0.1570,  ...,  0.0770, -0.0015,  0.0310],
        [ 0.0637,  0.0978,  0.0450,  ...,  0.1081,  0.0410, -0.1497]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0122, -0.0636, -0.1436,  ..., -0.1739, -0.0707,  0.1418],
        [ 0.0528,  0.0011,  0.0986,  ..., -0.0928,  0.1045,  0.0362],
        [-0.0369,  0.1100,  0.0577,  ...,  0.1049, -0.0816,  0.1263],
        ...,
        [ 0.0199, -0.0032, -0.0119,  ...,  0.0749,  0.0374, -0.0634],
        [-0.0347,  0.1604, -0.1067,  ...,  0.1305, -0.0043, -0.0401],
        [ 0.0871,  0.0727, -0.1465,  ..., -0.0070,  0.1043,  0.0847]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0149, -0.0915, -0.0392,  0.0445,  0.0664,  0.0678, -0.1238,  0.1529,
         0.0351, -0.1735, -0.1565,  0.1112, -0.1387, -0.0156,  0.0466, -0.1609,
         0.0076, -0.0534, -0.1007,  0.1410, -0.0363, -0.0381, -0.1728, -0.0259,
        -0.0855, -0.0656, -0.0770, -0.0355, -0.0124, -0.1350,  0.1642,  0.1229,
         0.1328, -0.0402,  0.1543,  0.1047,  0.0752,  0.0885, -0.0791,  0.1431,
         0.0353,  0.0915, -0.1443,  0.1189,  0.0701, -0.1344,  0.0792,  0.1040,
         0.0810,  0.1140, -0.0239,  0.1462, -0.1135, -0.0702, -0.0621,  0.1458,
        -0.0620,  0.0449,  0.0637, -0.0632,  0.0468,  0.0479,  0.1639,  0.0685,
         0.0439,  0.1419,  0.0166, -0.0110,  0.1046, -0.0670,  0.1441, -0.0755,
         0.0152, -0.0636, -0.0009, -0.1610,  0.0113, -0.1703,  0.0830,  0.1349,
         0.1010, -0.0978,  0.0255,  0.0644,  0.0530,  0.0675, -0.0623, -0.0459,
         0.1025, -0.0549, -0.1284, -0.0043,  0.0715,  0.1403, -0.1178, -0.1290,
         0.1265, -0.0647, -0.1098,  0.0975,  0.0594, -0.1242,  0.0799, -0.1731,
        -0.0136, -0.0125,  0.0892, -0.0295,  0.1508, -0.1480, -0.1292,  0.0982,
         0.0860,  0.0408,  0.0191,  0.0829, -0.1142,  0.0594,  0.0470, -0.0540,
        -0.1355, -0.1557, -0.0372, -0.1564, -0.0873, -0.1709, -0.0910, -0.1158],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-1.7379e-01,  1.7316e-02, -1.0048e-01, -5.1180e-02, -5.0656e-02,
         4.1820e-02, -1.6569e-01,  1.4870e-01, -2.3560e-02,  3.1210e-02,
         8.1273e-02,  9.8213e-02,  1.4774e-02, -1.0890e-01, -1.0002e-01,
        -6.1401e-02,  1.1638e-01, -9.7528e-05,  5.3998e-02, -1.3336e-01,
        -4.7490e-02,  5.3933e-02, -1.2310e-01, -1.6005e-01,  1.0571e-01,
         4.0852e-03, -5.5433e-02,  1.4925e-01, -9.8299e-02, -1.5715e-01,
         1.4738e-01,  1.2308e-02, -5.5037e-02, -2.0728e-02,  4.2550e-02,
        -5.2187e-02, -1.6118e-01,  1.1750e-03, -1.2868e-01, -1.5209e-01,
        -1.5002e-01, -1.4987e-03,  1.5106e-01, -7.0526e-02, -2.2659e-02,
        -2.0581e-02, -6.4778e-02, -4.0944e-02,  7.9974e-02, -1.4114e-01,
         2.1394e-02, -1.3158e-01,  3.2614e-02,  8.0286e-02, -1.6102e-01,
         1.0674e-01,  1.4459e-01,  1.2046e-01,  4.0227e-02,  1.7430e-01,
        -1.0171e-01, -9.3702e-02, -1.9287e-02,  8.3312e-02,  4.2337e-02,
        -1.5814e-01,  1.2587e-01, -1.6971e-01, -1.5649e-01,  2.5298e-02,
         1.7842e-02,  1.6668e-02, -7.8173e-02, -5.1876e-02,  5.1904e-03,
        -7.5715e-02,  2.4562e-02, -1.2041e-01, -6.9917e-02, -9.2642e-02,
        -9.5398e-02, -6.3640e-02,  2.7462e-02,  1.4978e-01, -1.0837e-02,
         1.2965e-01,  1.7115e-01, -1.4786e-01,  8.5695e-02, -6.9581e-02,
         1.6299e-02, -7.7377e-02, -8.3781e-02, -7.6759e-02, -1.2150e-01,
        -7.5546e-03,  1.0032e-02, -1.2732e-01, -6.9946e-02, -5.7368e-02,
        -1.3753e-01, -1.6222e-01, -1.5668e-01,  1.2071e-02, -1.5046e-01,
        -1.1241e-02, -1.2667e-01,  8.1428e-02, -4.3582e-02, -3.1811e-02,
         2.6441e-02,  9.4603e-02, -1.1668e-01, -1.3964e-01,  1.1627e-01,
        -6.8398e-03, -3.6937e-02, -9.3306e-03, -2.7905e-03,  8.7193e-02,
        -1.6739e-01, -6.8479e-02, -1.6096e-01,  1.5154e-01,  8.9089e-02,
        -9.1654e-02,  1.0051e-01, -2.1642e-02], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([[-0.1313, -0.1499,  0.0889,  ...,  0.1054,  0.0223,  0.1177],
        [ 0.1216, -0.1467, -0.0005,  ..., -0.0503, -0.0702,  0.0138],
        [-0.0943, -0.0738, -0.0392,  ..., -0.1568, -0.1177,  0.0603],
        ...,
        [ 0.1518, -0.0987, -0.0037,  ...,  0.1039, -0.0307, -0.1272],
        [ 0.0915, -0.0254,  0.0656,  ..., -0.1543, -0.0590,  0.0322],
        [-0.0457, -0.0139, -0.1422,  ..., -0.1253,  0.0439,  0.0703]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0761, -0.0072, -0.1114,  ..., -0.1145, -0.0058, -0.1264],
        [ 0.1627, -0.0687,  0.1489,  ...,  0.1749, -0.1649, -0.0577],
        [-0.1679, -0.1453,  0.1421,  ..., -0.0417, -0.1660,  0.1105],
        ...,
        [-0.1729, -0.1685, -0.0528,  ..., -0.0017,  0.0376, -0.0365],
        [ 0.0427, -0.0407,  0.0147,  ...,  0.0266,  0.0263, -0.0793],
        [-0.0423,  0.1080,  0.1073,  ..., -0.1388,  0.0081,  0.1727]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1544,  0.0428, -0.1751,  0.1748,  0.0733, -0.1549,  0.0860, -0.1648,
        -0.1420,  0.1304,  0.1739,  0.0914,  0.0888,  0.0648,  0.0185,  0.0902,
         0.0866, -0.0704, -0.0790,  0.1614, -0.0559,  0.0042, -0.0304,  0.1230,
         0.0936, -0.1422, -0.1660,  0.0476, -0.0675,  0.0994,  0.1274, -0.0871,
        -0.0510, -0.0829,  0.0266,  0.0373,  0.1451, -0.0183, -0.0978, -0.0717,
        -0.1046, -0.1449, -0.1411,  0.0363,  0.0617, -0.1754,  0.0435, -0.0157,
        -0.1549, -0.0333, -0.0966,  0.1203,  0.1326,  0.0541,  0.1142,  0.0265,
        -0.1163,  0.0258, -0.0359,  0.1244,  0.0236,  0.0003, -0.0789, -0.1179,
        -0.1478,  0.1607, -0.0228,  0.0345,  0.0041, -0.0335,  0.1014, -0.0304,
        -0.0616, -0.0164,  0.0284, -0.0899, -0.0849, -0.0365, -0.0168,  0.1630,
         0.0309, -0.1139,  0.1145,  0.0526, -0.1312,  0.0265,  0.1201, -0.0759,
         0.1497,  0.0134,  0.0883, -0.1042, -0.0265, -0.0689,  0.0421, -0.0431,
         0.1675,  0.1308, -0.0388, -0.0123, -0.0652, -0.0555, -0.0229,  0.0282,
        -0.0654,  0.0820, -0.1071, -0.0564,  0.1244, -0.0154, -0.1552,  0.1721,
        -0.0879,  0.1630, -0.1250, -0.0322,  0.0945,  0.1040,  0.0210,  0.1483,
        -0.0246, -0.0817,  0.1209,  0.1286,  0.0098,  0.1050, -0.0120, -0.0035],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1354,  0.0441, -0.1064,  0.0588, -0.0496, -0.1284, -0.1628,  0.0778,
        -0.1679,  0.0538, -0.0890,  0.1537, -0.0773,  0.1550,  0.0192,  0.1703,
        -0.0774, -0.0454, -0.1079,  0.0756, -0.0156, -0.1726,  0.0577,  0.0510,
        -0.1556,  0.1282,  0.1500, -0.0431, -0.1219, -0.0110,  0.0108, -0.1000,
         0.0797, -0.0028, -0.0399,  0.1083,  0.1004, -0.0735, -0.0687, -0.1209,
         0.1407,  0.0946, -0.0116,  0.0290,  0.0519, -0.0138, -0.1231,  0.0602,
        -0.0630, -0.0305, -0.1424, -0.0631,  0.0450, -0.0346,  0.0160,  0.1025,
         0.0694, -0.0272,  0.1305,  0.1324, -0.1084,  0.0893,  0.1383,  0.1728,
         0.1670, -0.1063,  0.0937, -0.0629,  0.0856, -0.0885, -0.1421,  0.1730,
         0.0772,  0.0165,  0.0100,  0.0418, -0.1535, -0.1224,  0.0463, -0.0338,
        -0.0877, -0.1225,  0.0474, -0.0665,  0.0884,  0.1742,  0.1244, -0.1639,
         0.1671,  0.1038,  0.0242,  0.0605, -0.0962,  0.1451, -0.0793, -0.1498,
         0.0137,  0.1719, -0.1667,  0.0422, -0.0790, -0.0443,  0.1479, -0.1351,
        -0.0102,  0.1567,  0.0443, -0.0019,  0.1562,  0.1443,  0.1261,  0.0516,
        -0.1552, -0.1365, -0.1259, -0.0825,  0.0313,  0.1683, -0.1353, -0.1581,
         0.1482,  0.1117, -0.0459,  0.1032, -0.1730, -0.0804, -0.1242,  0.0494],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0765,  0.0144, -0.0817,  ...,  0.0170, -0.0391,  0.0699],
        [-0.0781,  0.1139, -0.0547,  ..., -0.0052,  0.1551,  0.0613],
        [-0.1596,  0.1129, -0.1222,  ...,  0.1042,  0.0423,  0.1112],
        ...,
        [ 0.0582, -0.1091,  0.1675,  ...,  0.0713,  0.1052, -0.1474],
        [ 0.0512, -0.0250, -0.0332,  ...,  0.0520, -0.0481, -0.1557],
        [ 0.0214, -0.1096, -0.1606,  ..., -0.1067,  0.1643, -0.0237]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0804, -0.0895, -0.1687,  ..., -0.1698,  0.0991,  0.0740],
        [-0.1642, -0.1037, -0.1703,  ..., -0.0180, -0.1200, -0.0529],
        [-0.1069,  0.0206, -0.1266,  ..., -0.1504, -0.0513,  0.0513],
        ...,
        [ 0.1102, -0.0135,  0.1558,  ...,  0.1401,  0.1702,  0.1043],
        [-0.1075,  0.1599,  0.0090,  ...,  0.1725, -0.0026, -0.1453],
        [-0.0834,  0.0280,  0.0906,  ..., -0.1012,  0.0140,  0.0797]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0220,  0.0012, -0.1745,  0.1283,  0.1532, -0.0481,  0.0963, -0.0339,
        -0.0777,  0.0800,  0.1286,  0.1311, -0.0229,  0.1402,  0.1635,  0.1032,
         0.0528, -0.0390, -0.0548, -0.0141,  0.0228, -0.1069,  0.1127, -0.0077,
         0.1008, -0.1352,  0.1476, -0.1107, -0.0257, -0.1155, -0.0440,  0.0427,
        -0.0949, -0.0842,  0.0271, -0.0681, -0.0198, -0.0569, -0.1577, -0.0183,
        -0.1244,  0.1379, -0.0229,  0.0359,  0.0060, -0.0391, -0.0367, -0.0314,
        -0.0891,  0.0693,  0.0597, -0.0953,  0.0450,  0.1384,  0.0397,  0.0987,
        -0.0720,  0.0712,  0.1659, -0.0850, -0.1108,  0.1197, -0.1546, -0.1678,
        -0.1173, -0.1198, -0.0420, -0.0456,  0.1711,  0.0029,  0.0109,  0.1317,
        -0.1460, -0.0522, -0.1692,  0.0289, -0.1682, -0.0749, -0.0800,  0.1041,
         0.1277,  0.0914,  0.0748,  0.0183,  0.1475,  0.1544, -0.1505,  0.0975,
         0.1677, -0.0387, -0.0862, -0.1114,  0.1458,  0.0890, -0.0366,  0.0980,
        -0.0096,  0.0898,  0.0109,  0.1028,  0.0195, -0.1560,  0.0124,  0.1672,
        -0.0412, -0.0658,  0.0924, -0.0066, -0.0551,  0.1357,  0.1670, -0.0650,
         0.1540, -0.0075,  0.0455,  0.1177,  0.0717,  0.1312, -0.1041,  0.1458,
        -0.0382,  0.1279, -0.1506,  0.0526,  0.0999,  0.0431,  0.0012, -0.0397],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1169,  0.0692,  0.0532,  0.1412, -0.1262, -0.0736, -0.0472, -0.0348,
        -0.0821, -0.0591, -0.0169,  0.0607,  0.0714, -0.1243,  0.0532, -0.0937,
        -0.1161, -0.1076, -0.0818,  0.1069, -0.1763,  0.0646, -0.0925, -0.1105,
         0.0943,  0.1076, -0.1307, -0.1717,  0.1257, -0.1690,  0.1313, -0.1027,
        -0.0673, -0.0195, -0.0722,  0.0659,  0.1604, -0.1017,  0.1618,  0.0510,
         0.0584,  0.0263,  0.0933,  0.1148, -0.1631, -0.1738,  0.0808, -0.0658,
         0.1661, -0.1546,  0.1188,  0.0186, -0.1650,  0.1461,  0.0799, -0.0271,
        -0.0863,  0.1294, -0.0284,  0.1108,  0.0770,  0.1165,  0.0254,  0.0230,
         0.1341, -0.0995, -0.0745, -0.0977,  0.0833, -0.1127,  0.1200, -0.1404,
         0.0728,  0.1635,  0.1286,  0.0840, -0.0749, -0.1461, -0.0534, -0.0758,
        -0.1265,  0.1195, -0.0254,  0.0207,  0.0305,  0.1741, -0.0884, -0.0863,
        -0.1436, -0.0929, -0.0347, -0.0696, -0.0590,  0.0142, -0.1282, -0.1343,
        -0.0371, -0.0966, -0.1754,  0.0262, -0.1413,  0.1254,  0.0974, -0.1328,
         0.0563,  0.1441,  0.0708,  0.0251,  0.1554, -0.0023,  0.0810, -0.0010,
        -0.1004, -0.0240, -0.1143, -0.1077,  0.0970, -0.1608, -0.1762, -0.1033,
        -0.1496, -0.1484,  0.1041,  0.0827,  0.1690,  0.1264, -0.0620,  0.0014],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1478, -0.0164, -0.1635,  ...,  0.0546, -0.1258,  0.0902],
        [ 0.1536,  0.0605, -0.0332,  ..., -0.0765, -0.0905,  0.0803],
        [ 0.0009,  0.1354,  0.0652,  ..., -0.0789, -0.0827, -0.1225],
        ...,
        [ 0.0768, -0.0984, -0.0445,  ..., -0.1004,  0.0427, -0.1107],
        [-0.1524, -0.0350, -0.0349,  ...,  0.1012, -0.1201,  0.1440],
        [ 0.0064,  0.0368,  0.1648,  ...,  0.1358, -0.0027,  0.1136]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0698, -0.1346, -0.1559,  ..., -0.0762,  0.1376,  0.0636],
        [-0.0739,  0.0624, -0.0161,  ...,  0.0369, -0.1503, -0.1343],
        [-0.0166,  0.1048,  0.0329,  ...,  0.0438,  0.1147, -0.1366],
        ...,
        [ 0.0645,  0.1593, -0.1766,  ..., -0.0140, -0.1492,  0.0601],
        [ 0.1116,  0.0233, -0.0896,  ..., -0.0440, -0.1212, -0.0827],
        [ 0.0008, -0.1180,  0.0196,  ..., -0.0814,  0.0497, -0.0075]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0368, -0.0433, -0.0841, -0.0296,  0.0932,  0.0384, -0.0742, -0.0736,
         0.0775, -0.0836, -0.0141,  0.0150,  0.0750, -0.1441, -0.1720, -0.0522,
         0.1294,  0.1690,  0.1192, -0.1572,  0.0284,  0.1659,  0.1652,  0.0461,
         0.1353,  0.1414, -0.0892, -0.0687,  0.1608, -0.0753,  0.1169,  0.1147,
         0.0558, -0.1111, -0.0163, -0.1457,  0.1437, -0.0609,  0.1539, -0.0591,
         0.1226,  0.1194, -0.1283, -0.1413,  0.0212, -0.1638, -0.1285, -0.0628,
        -0.0889, -0.0947, -0.0920,  0.0822, -0.0686, -0.0833,  0.1198,  0.1306,
        -0.0376, -0.1211,  0.0099,  0.0140,  0.0777, -0.0030,  0.1371, -0.0884,
        -0.0265,  0.0860, -0.0683, -0.1031,  0.0938, -0.0640, -0.0141,  0.0185,
        -0.0488,  0.1409, -0.0278, -0.1732,  0.1244,  0.0737,  0.0604, -0.0824,
         0.0676,  0.1035, -0.1392, -0.1102, -0.1133, -0.0981,  0.0819, -0.0355,
         0.1510,  0.0187, -0.0889,  0.0354, -0.0425,  0.0888, -0.1358,  0.0990,
         0.0784, -0.1309, -0.0020, -0.1232, -0.1695,  0.0341,  0.0760, -0.0913,
        -0.1675, -0.1593, -0.0961, -0.1362,  0.0440,  0.1739, -0.1413, -0.0523,
        -0.1550,  0.0287,  0.0343, -0.0640,  0.0195, -0.1296,  0.1292,  0.0801,
         0.1652,  0.0485,  0.1427, -0.0619, -0.0410,  0.1126,  0.1382, -0.1003],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0189, -0.1023, -0.0720, -0.0309,  0.0094,  0.1058,  0.0596,  0.1336,
         0.0410,  0.0449,  0.1537, -0.1727, -0.0215, -0.0379, -0.1631,  0.0190,
         0.0141,  0.1134, -0.1445, -0.1004, -0.1594, -0.1091, -0.1639, -0.0768,
        -0.0037,  0.1093,  0.0008, -0.0871, -0.0863, -0.0254, -0.0305,  0.1559,
         0.0510, -0.1552, -0.0795, -0.1114,  0.1021, -0.0659, -0.0352, -0.0287,
         0.0942,  0.1227,  0.0065, -0.1443,  0.0561, -0.0269, -0.0439,  0.1349,
         0.1447,  0.0676, -0.0615, -0.0773, -0.1441,  0.0285, -0.1387, -0.1638,
        -0.1707, -0.0327, -0.1510, -0.1684,  0.1288, -0.0741,  0.1518,  0.0392,
         0.1478,  0.0285, -0.0946,  0.0928,  0.0830,  0.1748, -0.1117,  0.0109,
         0.0125, -0.1445, -0.0192, -0.1490, -0.0706,  0.0420,  0.1093, -0.0033,
         0.0488,  0.1459, -0.0069,  0.1050,  0.1596,  0.0447, -0.0771,  0.0836,
        -0.0172, -0.0056, -0.1091,  0.0254, -0.1587, -0.0886,  0.0342,  0.0355,
         0.0377, -0.1263,  0.0186,  0.1365,  0.0604,  0.1235, -0.0506,  0.1573,
         0.1767,  0.1711, -0.0795,  0.0328,  0.1459, -0.1690,  0.0891, -0.0580,
        -0.1415,  0.0138,  0.0177, -0.0355, -0.1435,  0.1325,  0.0018,  0.0712,
         0.0386, -0.1614,  0.1414,  0.1171, -0.1434, -0.0225,  0.0780, -0.1058],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0817, -0.0760,  0.0045,  ...,  0.0099,  0.0568, -0.0958],
        [ 0.1162, -0.0619,  0.0139,  ...,  0.0457, -0.0718, -0.0985],
        [ 0.0584, -0.0858,  0.1066,  ..., -0.0472,  0.1172, -0.0179],
        ...,
        [-0.0314,  0.0521,  0.0181,  ..., -0.0998, -0.0788, -0.0987],
        [-0.0021, -0.0431, -0.0416,  ...,  0.0717,  0.1204, -0.1012],
        [ 0.0465,  0.1102, -0.0546,  ...,  0.0663,  0.0714,  0.1193]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0029,  0.1064,  0.0022, -0.1080, -0.0536, -0.0142,  0.1002,  0.0262,
        -0.0022, -0.0820,  0.0911,  0.0167,  0.0120, -0.0673, -0.1035, -0.0281,
         0.0426,  0.1197, -0.0377,  0.0565, -0.0314,  0.0453,  0.0604,  0.1142,
        -0.0675,  0.0225,  0.0406,  0.0221, -0.1188,  0.0426, -0.0997, -0.0052],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.1186,  0.0843, -0.1010,  0.0008,  0.1727, -0.1242, -0.0335, -0.1297,
          0.1495, -0.0500,  0.1174,  0.1285,  0.1200, -0.0961, -0.1029, -0.0433,
          0.1422,  0.1485,  0.1270, -0.1526, -0.0389,  0.0242,  0.0428, -0.1761,
         -0.1002, -0.0294,  0.1696, -0.0902, -0.1100, -0.1250, -0.0171, -0.1680],
        [-0.1588, -0.1480,  0.1000, -0.0862, -0.0208, -0.0489,  0.0561, -0.0333,
          0.0538, -0.1015,  0.1402,  0.1222,  0.1713,  0.0491, -0.1256, -0.0132,
         -0.1114, -0.0104,  0.1609, -0.1360, -0.0433,  0.1262, -0.1552,  0.1541,
         -0.0472, -0.0682, -0.0622, -0.0351, -0.1670,  0.1400,  0.1527, -0.1433],
        [ 0.0762, -0.0590, -0.1189, -0.1001,  0.0528, -0.0920,  0.1232, -0.1459,
         -0.1756, -0.0046, -0.0964, -0.1224, -0.0677,  0.1736, -0.0580, -0.1077,
          0.1227, -0.1656, -0.0494,  0.1550,  0.0314,  0.0296,  0.0904, -0.0635,
         -0.1677, -0.0493, -0.0778, -0.0835,  0.1653, -0.1457,  0.0769,  0.0761],
        [-0.0755,  0.0846, -0.1417, -0.0411,  0.0473, -0.1748, -0.0680,  0.1233,
         -0.0276,  0.1195,  0.0843, -0.0529, -0.1448, -0.0078,  0.1594, -0.0150,
         -0.1392, -0.1046,  0.1210, -0.0010,  0.0030,  0.0654,  0.0196,  0.0540,
         -0.1518, -0.1699,  0.0015,  0.0694, -0.1026,  0.0259,  0.1151, -0.0594],
        [-0.0176, -0.1600,  0.0978, -0.0194, -0.0609,  0.0855, -0.0648,  0.0425,
          0.0552,  0.1355,  0.0865, -0.1726,  0.1510,  0.1512,  0.1182,  0.1263,
         -0.0084, -0.0510,  0.0225, -0.1550,  0.1395, -0.0361, -0.1623,  0.0070,
         -0.1137,  0.0820,  0.0388, -0.1510,  0.1501, -0.0994,  0.1513, -0.0327],
        [ 0.0660,  0.0710, -0.1072,  0.0357,  0.0020, -0.0314,  0.0786, -0.1525,
         -0.1756,  0.0734,  0.0269,  0.0127,  0.1318,  0.1059, -0.1260, -0.1167,
         -0.0338, -0.1416, -0.0623,  0.0738, -0.0814, -0.1606,  0.1432,  0.0013,
          0.0952, -0.1436, -0.1493, -0.0291,  0.0132,  0.0162,  0.0678, -0.0224],
        [ 0.0451,  0.1008,  0.1113,  0.1632, -0.0978, -0.0332, -0.1120,  0.1546,
          0.0616,  0.1459,  0.0916,  0.0282, -0.0796,  0.0475, -0.0456,  0.0163,
          0.1487,  0.0030, -0.0437,  0.0492, -0.0966,  0.1692,  0.0701,  0.1738,
         -0.0576, -0.1082, -0.0006, -0.0337,  0.0386,  0.1148, -0.0290,  0.0232],
        [ 0.1386, -0.1362, -0.1228,  0.1392, -0.0286, -0.0375,  0.1194, -0.0530,
         -0.1610,  0.0118, -0.0607, -0.0385,  0.0165, -0.0224,  0.0467, -0.1435,
          0.0498,  0.0798,  0.0746, -0.0711,  0.0095, -0.1527, -0.0561, -0.0332,
          0.0887, -0.1457, -0.1621, -0.0769,  0.0060,  0.0839,  0.0584, -0.0344],
        [ 0.1679,  0.1606, -0.1553, -0.0872,  0.1633, -0.0104,  0.0755, -0.1215,
          0.0862, -0.0570,  0.1401,  0.0265, -0.0962, -0.1598,  0.0490,  0.1260,
         -0.0231, -0.0690,  0.1450,  0.0563, -0.0764,  0.0010,  0.0996,  0.1488,
          0.1068, -0.1330, -0.1102, -0.0605, -0.1304, -0.0450,  0.0763,  0.1164],
        [-0.0275,  0.0666, -0.0139,  0.1599, -0.1742, -0.1198,  0.0158, -0.1011,
         -0.0947, -0.0904, -0.1740,  0.0370,  0.1007,  0.1150,  0.1763,  0.0094,
          0.1532,  0.1614,  0.0516,  0.1547, -0.0508,  0.1026, -0.0565, -0.0875,
          0.0838,  0.0070, -0.1650, -0.0587, -0.0759, -0.1122, -0.1278,  0.1006],
        [-0.0080, -0.1665,  0.1309,  0.0594, -0.0371,  0.1690, -0.0107, -0.1205,
         -0.1476, -0.0179, -0.0134,  0.1363,  0.0729, -0.0806,  0.0102,  0.0912,
         -0.1122,  0.1049, -0.1553, -0.0028, -0.0591, -0.0540,  0.0927, -0.0428,
          0.0128, -0.0329, -0.0095,  0.0399,  0.1671,  0.1141,  0.1443,  0.1012],
        [ 0.1055, -0.1672,  0.0804, -0.1314,  0.0558,  0.1542, -0.0097,  0.0960,
         -0.0676, -0.0831,  0.0043,  0.1066, -0.1463, -0.0006,  0.0446, -0.1283,
         -0.1699,  0.0568, -0.0423,  0.1737, -0.0956,  0.0533,  0.1087,  0.1705,
          0.1695,  0.1023, -0.1351, -0.0456, -0.0580,  0.0608,  0.0147, -0.1273],
        [ 0.1193,  0.1556,  0.0646,  0.0372, -0.0317, -0.1731,  0.1711,  0.1356,
          0.1640,  0.0041, -0.0982, -0.0398, -0.1401,  0.0592,  0.0772, -0.0276,
          0.0561,  0.0392,  0.1411, -0.0148,  0.0769,  0.1399, -0.1174,  0.1195,
          0.1058,  0.1688,  0.1139, -0.0850, -0.1282,  0.1758, -0.1345, -0.0011],
        [ 0.0560, -0.1055,  0.1220, -0.0765,  0.0586,  0.1304, -0.0193, -0.0209,
          0.0564, -0.1414,  0.0032, -0.0645,  0.1754, -0.0557,  0.1232,  0.1557,
          0.0756, -0.0261, -0.0999, -0.0085, -0.0807,  0.0434, -0.1367,  0.1396,
         -0.1015, -0.0488,  0.0216, -0.0089,  0.1546, -0.0245, -0.0354,  0.0693],
        [-0.1189, -0.0430, -0.1614,  0.0572,  0.0095, -0.1412,  0.0947,  0.1418,
         -0.0395,  0.0240,  0.0601, -0.0039,  0.0564,  0.1309,  0.0484, -0.0533,
          0.0505,  0.0508,  0.0723,  0.0751,  0.0645, -0.0914,  0.1236,  0.0415,
         -0.0991, -0.0814, -0.1355, -0.0497, -0.0187, -0.0011,  0.0765,  0.0316],
        [-0.1315,  0.1546, -0.1274,  0.1236,  0.0102,  0.0468,  0.1697, -0.0483,
          0.0108,  0.0369,  0.1653, -0.0481, -0.1534,  0.0890,  0.0480,  0.1215,
          0.0365,  0.0789,  0.0791, -0.1086, -0.1570,  0.1337, -0.0698, -0.0745,
          0.0183,  0.1711,  0.0112, -0.0459, -0.0915, -0.0600,  0.0166, -0.1428]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0326, -0.1608, -0.0936,  0.0407,  0.1761,  0.1268,  0.1227,  0.0402,
         0.0379, -0.1473,  0.0938, -0.1190,  0.1051,  0.0811, -0.0616,  0.1112],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0999, -0.1923,  0.0334, -0.2303,  0.0667,  0.0546, -0.0943, -0.2445,
         -0.1622,  0.1267,  0.0063, -0.1159,  0.0548, -0.2037, -0.0012, -0.0942],
        [ 0.0481, -0.2207,  0.1347, -0.2082, -0.2348,  0.1720, -0.2277,  0.1374,
         -0.0314, -0.0365,  0.1578, -0.2150,  0.2297, -0.1680,  0.0793, -0.0042],
        [-0.0688, -0.0142,  0.0990, -0.1294, -0.0110, -0.0726, -0.2359, -0.0287,
         -0.0248,  0.1191, -0.0696, -0.2396,  0.1059,  0.0697,  0.0640, -0.0666],
        [ 0.2199, -0.2265,  0.1855,  0.1663, -0.1395, -0.1262, -0.2416,  0.1813,
          0.2048, -0.0873, -0.1835, -0.1860, -0.1045,  0.1667, -0.1286, -0.0491],
        [ 0.0299,  0.0461,  0.1689,  0.1117, -0.1145,  0.0556, -0.0647,  0.0170,
          0.0260,  0.1897, -0.0628,  0.0877, -0.1858,  0.1939, -0.0857,  0.2086],
        [-0.2471, -0.1460, -0.1201, -0.0195,  0.0416,  0.0056,  0.0123,  0.0287,
         -0.0091, -0.0127, -0.0066,  0.2263,  0.0884, -0.1964,  0.0270, -0.1292],
        [ 0.0363, -0.2478,  0.0630, -0.0229, -0.0591,  0.1367, -0.1916, -0.1294,
          0.0738,  0.0766, -0.1118,  0.2250,  0.2388,  0.1541,  0.2017,  0.0538],
        [ 0.0816,  0.0346, -0.1891, -0.0760, -0.0592, -0.1677, -0.1825, -0.1202,
         -0.2173, -0.0858,  0.1211, -0.2166,  0.2455,  0.2133, -0.0608,  0.0929]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1571, -0.1006,  0.2059, -0.1496,  0.2117, -0.0994, -0.0535, -0.0125],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1922,  0.2574,  0.2525, -0.1679, -0.2119, -0.2379,  0.0708,  0.0573],
        [-0.1400,  0.0413,  0.2200, -0.2087,  0.0504, -0.3082, -0.1157,  0.2094],
        [-0.3504, -0.0363,  0.1396, -0.2692, -0.1037, -0.2108,  0.1056, -0.1038],
        [-0.3468, -0.0650, -0.1941,  0.3433,  0.0554,  0.1009,  0.0322,  0.2319]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.2737, -0.0980, -0.0979, -0.1766], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([[-0.1102, -0.4942,  0.0753, -0.3481]], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([0.0574], device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0804,  0.0913,  0.0461],
        [-0.0958, -0.1384,  0.1345],
        [ 0.0352, -0.1513,  0.1689],
        [ 0.1125, -0.0122,  0.0255],
        [-0.1768,  0.1546,  0.0918],
        [ 0.0659,  0.1328, -0.1029],
        [ 0.0034,  0.0830, -0.1722],
        [ 0.1226, -0.1103, -0.0397],
        [-0.1632, -0.0516, -0.1620],
        [-0.1174, -0.1372,  0.1564],
        [ 0.0331, -0.0599,  0.1641],
        [-0.0934,  0.0427,  0.1650],
        [-0.0317,  0.0345,  0.0569],
        [ 0.1359,  0.0733, -0.0888],
        [-0.0206, -0.0695,  0.0384],
        [-0.1028, -0.1392, -0.1153],
        [ 0.1071,  0.1529, -0.1651],
        [ 0.1475, -0.0730,  0.0505],
        [-0.0686,  0.0045, -0.1609],
        [-0.0697, -0.1426, -0.0499],
        [ 0.0411, -0.1022,  0.0736],
        [ 0.0296, -0.1282,  0.0099],
        [ 0.0482, -0.0961, -0.1244],
        [-0.0373, -0.0252,  0.1690],
        [-0.0347, -0.1051, -0.0287],
        [-0.0373, -0.0828,  0.0156],
        [-0.0236,  0.1511,  0.1180],
        [-0.0464, -0.1661, -0.1087],
        [ 0.1124, -0.1343,  0.0882],
        [-0.1096, -0.0946, -0.0190],
        [-0.0891,  0.1532,  0.0739],
        [-0.0845,  0.0459, -0.0769],
        [ 0.1311, -0.1347,  0.0033],
        [ 0.1349, -0.0901, -0.0848],
        [-0.0062,  0.1736, -0.1145],
        [-0.0707,  0.1053, -0.0231],
        [-0.0377,  0.0363, -0.1415],
        [ 0.0582, -0.1115,  0.0464],
        [ 0.0634,  0.1282,  0.1376],
        [-0.0404, -0.0007, -0.1595],
        [ 0.0258, -0.0289,  0.0273],
        [ 0.0514, -0.1024, -0.0217],
        [ 0.0567,  0.1464,  0.0037],
        [-0.0848, -0.0687, -0.0622],
        [-0.0932,  0.0259, -0.1144],
        [ 0.1496,  0.1516,  0.0478],
        [-0.1596,  0.1306,  0.0351],
        [ 0.1113,  0.1049,  0.0792],
        [ 0.0514,  0.0611,  0.0236],
        [-0.0137,  0.1255,  0.0544],
        [ 0.0178,  0.0929, -0.1752],
        [ 0.0701,  0.0961, -0.0367],
        [ 0.0636,  0.1577, -0.1596],
        [-0.1436, -0.1669,  0.1154],
        [-0.1135, -0.0541,  0.0378],
        [ 0.1044, -0.1469,  0.0762],
        [-0.0628,  0.1005, -0.0621],
        [-0.0769,  0.0433,  0.1616],
        [ 0.1158, -0.0931, -0.1250],
        [ 0.0646,  0.0815, -0.1324],
        [ 0.0041, -0.0445,  0.0212],
        [ 0.0821, -0.1274,  0.0403],
        [ 0.0012,  0.0866, -0.0776],
        [ 0.0667,  0.1041, -0.0592],
        [-0.0798, -0.0942, -0.1401],
        [ 0.0901,  0.1306,  0.0630],
        [-0.0387,  0.0488, -0.1547],
        [-0.1025, -0.1513,  0.0475],
        [ 0.0374, -0.0450,  0.0027],
        [-0.0848,  0.0461,  0.1171],
        [ 0.0828,  0.1298, -0.0350],
        [ 0.1401, -0.0971,  0.1092],
        [ 0.0726,  0.1148,  0.1478],
        [ 0.0395,  0.0447,  0.0547],
        [ 0.1671, -0.1023, -0.1673],
        [-0.0355, -0.1059,  0.0448],
        [-0.0135, -0.0504, -0.0945],
        [ 0.0327, -0.1039, -0.1666],
        [-0.0983, -0.0686,  0.1185],
        [ 0.0657,  0.0050,  0.1176],
        [-0.1299, -0.0418,  0.1228],
        [ 0.1517,  0.0432, -0.0196],
        [ 0.1536, -0.1604, -0.1583],
        [-0.1637, -0.0088, -0.1608],
        [-0.0753, -0.1614, -0.1551],
        [ 0.0916, -0.0745,  0.0656],
        [ 0.1359,  0.0826,  0.0187],
        [ 0.1388,  0.1594,  0.0477],
        [-0.0477,  0.1745,  0.0180],
        [-0.0812, -0.1444, -0.1749],
        [-0.1765, -0.1362,  0.0076],
        [-0.1107, -0.0596, -0.1555],
        [ 0.1273, -0.1109, -0.1570],
        [ 0.1329,  0.1668, -0.1042],
        [-0.0932,  0.0432,  0.0985],
        [ 0.1193, -0.1174,  0.0763],
        [ 0.0940, -0.0286,  0.0764],
        [-0.0903,  0.0450,  0.0536],
        [ 0.0398,  0.1417, -0.0405],
        [ 0.1648, -0.1713, -0.1286],
        [-0.1720, -0.1536,  0.0079],
        [ 0.0959, -0.0712, -0.0760],
        [ 0.0013,  0.1637, -0.0154],
        [ 0.1437,  0.1626,  0.0186],
        [-0.0247, -0.0896,  0.1172],
        [-0.0166, -0.1731,  0.1036],
        [-0.0305,  0.0324,  0.1016],
        [-0.1579, -0.1206, -0.1081],
        [ 0.1031, -0.1118, -0.0921],
        [ 0.1209, -0.1129, -0.1316],
        [-0.1390, -0.1249,  0.0591],
        [-0.1006,  0.0339, -0.0686],
        [ 0.0726,  0.0811,  0.1410],
        [ 0.1736, -0.1238,  0.1029],
        [-0.0867,  0.1655,  0.0131],
        [-0.0626, -0.1550,  0.0572],
        [-0.1560,  0.0975, -0.0190],
        [-0.0631, -0.0064,  0.0366],
        [-0.0026, -0.1332, -0.0649],
        [ 0.0193,  0.1421, -0.0815],
        [ 0.1177,  0.1059, -0.1575],
        [-0.0608,  0.0182, -0.1185],
        [ 0.0936,  0.0593,  0.0440],
        [-0.0587, -0.1757, -0.0066],
        [ 0.1224, -0.1360,  0.0303],
        [-0.1739,  0.1077, -0.0150],
        [ 0.0733, -0.1398,  0.1077],
        [ 0.1666, -0.1479,  0.1509]], device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0095, -0.1547,  0.1038,  ...,  0.1270, -0.0213,  0.0658],
        [ 0.1341,  0.1476,  0.0882,  ...,  0.1578, -0.0904, -0.1443],
        [-0.0842,  0.0375, -0.0016,  ..., -0.0095, -0.0159,  0.0342],
        ...,
        [ 0.0120, -0.1170,  0.0216,  ...,  0.0543, -0.1135, -0.0746],
        [-0.1308, -0.0934,  0.0486,  ..., -0.0340, -0.1334, -0.1425],
        [-0.1765, -0.1179, -0.1109,  ..., -0.1090, -0.0723,  0.1604]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1364, -0.1210, -0.0933,  0.0940, -0.0075,  0.1740, -0.0752, -0.1264,
         0.0529, -0.0675, -0.1683, -0.1541, -0.1020,  0.1178, -0.1447, -0.0623,
        -0.0009,  0.0950, -0.0621,  0.1084,  0.1471, -0.1416, -0.1739, -0.1515,
         0.0704, -0.0945, -0.1718, -0.0331, -0.1247, -0.0554, -0.0560, -0.0817,
         0.1658, -0.0664,  0.0136,  0.1482, -0.1227,  0.0022,  0.0523,  0.0189,
         0.1471, -0.0357,  0.1041, -0.0411,  0.0694, -0.0513,  0.0490,  0.0396,
        -0.0872,  0.0996,  0.0561,  0.0459, -0.1250, -0.0897,  0.1422, -0.0265,
        -0.0690, -0.0785, -0.1013,  0.1390,  0.0265,  0.0683, -0.0440, -0.0407,
        -0.0501, -0.0982, -0.1462, -0.0330, -0.1340,  0.1264, -0.0553, -0.0587,
         0.1471,  0.0403, -0.1744, -0.1256, -0.1287,  0.0238, -0.0284,  0.0787,
         0.0014,  0.1459, -0.1580, -0.1117,  0.0210,  0.1225,  0.0882, -0.1639,
         0.0300,  0.1270,  0.1521,  0.0386,  0.0006,  0.0775, -0.1617, -0.0478,
        -0.0266, -0.0683,  0.0353, -0.0162, -0.0692,  0.1354, -0.0009,  0.1500,
         0.0294,  0.0375,  0.0674,  0.0352,  0.0160, -0.0995,  0.1081,  0.0167,
        -0.1626,  0.0086, -0.1482, -0.0049,  0.0329,  0.1582, -0.0021, -0.0231,
         0.0795, -0.0038,  0.1345,  0.0487, -0.0234, -0.0295,  0.0843,  0.0849],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0732,  0.1619, -0.1581,  0.1246,  0.1035,  0.0914,  0.0285,  0.1414,
         0.0876, -0.0997,  0.1135, -0.0365, -0.1218,  0.1491, -0.0053, -0.0746,
         0.0272, -0.0715,  0.0134,  0.1374,  0.0755, -0.0720, -0.0373, -0.0206,
         0.1469, -0.0678,  0.1651,  0.1630, -0.0176,  0.1511,  0.1322, -0.1145,
         0.1743,  0.1300, -0.1246,  0.1506,  0.1689, -0.0334, -0.0173, -0.0903,
        -0.0912, -0.0300, -0.0870,  0.0055, -0.0077, -0.0965, -0.1204, -0.0560,
         0.0752,  0.0232,  0.0840, -0.0864,  0.0651,  0.0672,  0.0933, -0.1466,
         0.1330, -0.1231,  0.0127,  0.1185,  0.1669, -0.0494,  0.1508,  0.0400,
         0.1102,  0.1596, -0.0362,  0.0983,  0.1200, -0.1364, -0.1233, -0.0265,
        -0.1766, -0.0949,  0.0900,  0.1147,  0.0858, -0.1528,  0.0987,  0.0359,
        -0.0029,  0.1559,  0.0481,  0.1166, -0.1026, -0.0529, -0.0765,  0.0702,
         0.0323,  0.0939, -0.0039,  0.1490,  0.0750, -0.1453, -0.0945,  0.0436,
         0.0023,  0.1389, -0.0520,  0.0069,  0.0610,  0.1654,  0.1132, -0.1196,
         0.1267,  0.0292, -0.0014,  0.0736,  0.1037,  0.0810,  0.0798, -0.0426,
         0.0397, -0.1691,  0.0893,  0.1548,  0.0844,  0.0118, -0.1594, -0.0635,
        -0.0418,  0.0611, -0.0984, -0.0638, -0.0541,  0.1323,  0.0539,  0.0065],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-1.3902e-01,  2.0332e-02,  2.4858e-02],
        [ 5.4941e-02,  3.2550e-02, -8.7657e-02],
        [-7.4685e-02, -1.2706e-01,  7.6482e-02],
        [-2.6658e-02,  1.5799e-01,  1.7659e-01],
        [-9.1846e-02,  1.5310e-01, -9.4537e-02],
        [ 4.6994e-02, -1.4343e-01, -1.6993e-02],
        [-1.2546e-01, -8.3334e-03, -1.2017e-01],
        [-1.3100e-01,  3.3015e-02, -1.5286e-01],
        [ 8.9778e-02, -1.7170e-01, -1.1224e-01],
        [-7.8216e-02,  2.0880e-02, -1.7009e-02],
        [ 5.0291e-02,  6.6258e-02,  1.1279e-01],
        [ 1.2057e-01,  1.4139e-01, -1.6772e-01],
        [-2.1431e-02, -4.2850e-02,  1.5712e-02],
        [ 1.3648e-01, -1.4994e-01, -1.0035e-01],
        [ 1.7315e-01,  7.6588e-02,  1.0817e-01],
        [ 1.4236e-01, -1.0001e-01, -1.4246e-02],
        [ 3.9233e-02, -1.7030e-01,  7.4060e-02],
        [ 6.4254e-02, -6.9380e-02,  1.2369e-01],
        [ 1.3588e-01,  4.9921e-02, -1.4089e-01],
        [-1.5670e-01,  1.4276e-01, -1.1468e-01],
        [ 1.5468e-01, -2.0013e-02, -3.5939e-02],
        [-1.1235e-01,  8.6425e-02,  3.6154e-02],
        [-6.8019e-02, -1.5194e-01,  9.9915e-02],
        [-1.1269e-01, -8.1001e-02,  8.6531e-02],
        [-8.3189e-02,  3.2580e-02,  1.8818e-02],
        [ 3.5895e-02, -5.8396e-02, -1.1688e-01],
        [ 4.2602e-02,  8.8107e-02, -1.1531e-01],
        [ 4.6235e-02, -8.8295e-02, -5.1505e-02],
        [-1.5241e-01,  8.4241e-04,  6.0956e-02],
        [-4.0222e-02,  4.3515e-02, -2.5017e-02],
        [-1.5156e-01, -8.6693e-04,  3.7156e-02],
        [ 5.1734e-02, -4.1355e-02,  3.2908e-02],
        [-9.9879e-03,  1.5083e-01,  1.6260e-01],
        [ 1.4272e-01,  1.6497e-02,  2.6177e-02],
        [-8.7386e-02, -1.4499e-01,  5.5360e-02],
        [-9.5374e-02,  7.8544e-02, -1.9815e-02],
        [-9.8658e-02,  2.8141e-02, -6.6366e-02],
        [-3.5009e-02,  1.5294e-01, -8.5371e-02],
        [ 1.2323e-01,  3.1618e-02, -1.3456e-01],
        [-9.2473e-02,  1.3266e-01, -6.0715e-02],
        [-1.1572e-01,  5.1920e-02,  1.3521e-01],
        [-1.1592e-01, -2.4002e-02, -5.0944e-02],
        [-9.6719e-02, -5.0905e-02, -5.3570e-02],
        [-2.4735e-02,  2.1070e-02,  1.1207e-01],
        [-9.5482e-02, -1.3515e-01,  4.8994e-02],
        [-1.6700e-02,  1.0125e-01,  1.0926e-01],
        [-2.5258e-02,  1.1963e-01,  1.2593e-01],
        [-1.6976e-01, -7.5916e-02,  1.1051e-01],
        [ 3.5962e-02, -2.7494e-02, -2.4706e-02],
        [-8.1875e-03, -3.0862e-02,  1.1230e-01],
        [ 9.6172e-02,  6.2828e-02, -1.5705e-03],
        [ 1.1287e-01, -1.5238e-01, -2.5478e-02],
        [-1.6891e-01, -1.5637e-01,  1.1388e-01],
        [ 4.7511e-02, -1.4869e-01,  1.4165e-02],
        [ 1.0838e-01,  1.0860e-01, -1.3550e-01],
        [-3.4263e-02, -5.5282e-02, -5.7119e-02],
        [ 7.3773e-03, -1.6365e-01,  1.9835e-02],
        [ 9.6293e-02, -8.2009e-02, -1.5575e-01],
        [-7.6480e-02,  1.2193e-01, -1.0800e-02],
        [-1.3380e-01,  1.2689e-01,  5.3124e-02],
        [ 1.4156e-01, -1.1904e-01, -1.0311e-01],
        [-1.1606e-01, -1.7495e-01, -5.3209e-02],
        [ 9.1467e-02,  2.5660e-02, -1.1184e-01],
        [ 7.6559e-02, -3.2546e-02, -1.2158e-01],
        [-2.8381e-02, -1.3295e-01, -7.9575e-02],
        [-4.4470e-04, -1.0104e-02, -1.6294e-01],
        [-1.0799e-01,  1.1455e-01,  1.2519e-01],
        [-3.8400e-02,  3.1422e-02, -5.5263e-02],
        [ 8.3207e-02,  1.6614e-01,  1.3022e-01],
        [ 1.4569e-01,  1.5382e-01,  1.1443e-01],
        [ 8.3865e-02,  1.4123e-01,  5.0115e-02],
        [ 1.9110e-02, -6.6331e-02, -8.1078e-02],
        [-2.0032e-02, -1.2415e-01,  1.1779e-01],
        [-1.4963e-02,  1.5721e-01, -5.8454e-02],
        [-1.3190e-02,  1.3816e-01, -9.7570e-02],
        [-1.7150e-01,  4.0504e-02, -9.6664e-02],
        [ 1.0172e-01, -1.0926e-01,  1.1781e-01],
        [-1.1601e-02,  1.2456e-01, -1.1248e-01],
        [ 9.9614e-02, -8.0524e-02, -4.5058e-02],
        [ 1.2934e-01, -8.3045e-03, -1.1428e-01],
        [ 1.3451e-01,  6.1768e-02, -2.9261e-02],
        [-9.9401e-02, -6.4243e-02, -8.5462e-02],
        [ 3.2785e-02,  1.1069e-01, -1.6242e-01],
        [ 1.9504e-02, -1.2315e-01,  4.4026e-02],
        [ 8.8524e-03, -1.5056e-01, -3.2376e-02],
        [ 1.2956e-01, -6.3685e-03,  2.0738e-03],
        [-6.3465e-03, -1.1898e-01,  5.7140e-02],
        [ 6.2695e-02,  1.2773e-01, -1.0413e-01],
        [ 9.9828e-02,  7.3266e-02, -5.7421e-02],
        [ 1.5157e-01,  6.1394e-02,  6.9926e-02],
        [-3.0061e-02,  1.0422e-01, -9.6249e-02],
        [-7.6254e-02,  1.2599e-01,  4.4512e-02],
        [-1.2685e-01, -2.1301e-02, -7.0901e-02],
        [ 5.8234e-02,  1.4520e-01,  1.6185e-01],
        [-1.4189e-01,  6.7895e-02,  9.5364e-02],
        [ 1.4332e-01,  4.7603e-02, -9.5188e-02],
        [-8.2970e-02,  3.0013e-02, -2.7348e-03],
        [ 4.9545e-02,  1.4752e-01, -1.7029e-01],
        [-8.8944e-03, -8.2880e-02,  1.7074e-01],
        [-9.1458e-02,  1.5474e-01,  9.8911e-02],
        [-8.3683e-02,  4.7522e-02, -8.7338e-02],
        [-3.7683e-02, -6.6568e-02, -1.0517e-02],
        [-1.5425e-01,  1.0449e-04,  6.9631e-02],
        [ 5.8626e-02,  1.6118e-01, -3.9676e-02],
        [-1.4771e-02, -4.0403e-02,  4.9787e-02],
        [ 1.0326e-01, -5.7628e-02,  1.0490e-01],
        [ 1.3892e-01,  1.3958e-02, -1.7450e-01],
        [-1.7008e-01, -6.1387e-02, -2.9771e-02],
        [ 3.7896e-02, -7.0082e-02, -2.9868e-03],
        [-1.1264e-01, -5.2218e-02, -1.2670e-01],
        [ 1.4023e-01, -1.2058e-01, -1.5872e-02],
        [ 7.1929e-02, -3.0223e-02,  8.6308e-02],
        [ 1.7393e-01,  1.6423e-01,  1.0604e-01],
        [ 9.2411e-02,  4.5995e-02,  1.3105e-01],
        [ 1.6832e-02, -4.0601e-02,  7.2298e-02],
        [-7.7203e-02,  6.2818e-02, -5.5949e-02],
        [-6.2937e-02,  8.4968e-02, -3.2222e-02],
        [ 3.6381e-02,  1.4919e-01, -8.4861e-02],
        [-1.7368e-01,  5.6629e-02, -1.2413e-01],
        [ 1.5818e-01,  1.7432e-01, -9.0002e-02],
        [ 1.5431e-01,  3.5064e-02, -1.6935e-01],
        [-7.2041e-03,  9.7261e-02,  8.7946e-02],
        [-3.8878e-02,  1.3485e-01,  9.3653e-02],
        [-1.5923e-01,  9.2763e-02,  1.1835e-01],
        [-1.4667e-02, -1.1476e-01,  3.6656e-02],
        [ 4.4781e-02, -1.4234e-01,  1.3145e-01],
        [-8.7635e-02,  7.1538e-02,  6.4808e-02],
        [ 1.3454e-01, -1.6902e-01,  1.3745e-01]], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([[ 0.1463,  0.0840,  0.0516,  ...,  0.1689,  0.0764, -0.1494],
        [-0.0766,  0.1621, -0.1577,  ...,  0.0774,  0.1005,  0.0509],
        [-0.0693,  0.0249,  0.1123,  ..., -0.1305, -0.1265,  0.1078],
        ...,
        [ 0.1463,  0.1354,  0.0142,  ..., -0.1740,  0.0939, -0.0990],
        [ 0.1381,  0.0910,  0.0265,  ..., -0.0673,  0.1717,  0.0043],
        [-0.1284,  0.0429,  0.0249,  ...,  0.0433, -0.1688, -0.0268]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1131,  0.0296, -0.1521,  0.0179, -0.1176, -0.1007,  0.1422,  0.1261,
         0.1467,  0.0807, -0.1432,  0.0415,  0.0196, -0.0099,  0.1560, -0.0265,
        -0.0275,  0.0923,  0.0243, -0.1490, -0.0829, -0.0785,  0.1080,  0.1436,
        -0.0332,  0.1374,  0.1746,  0.0445,  0.1440, -0.0885,  0.1131,  0.1457,
         0.0069,  0.1749,  0.0274, -0.1458,  0.0604, -0.0204, -0.0005, -0.0764,
        -0.0649, -0.0603,  0.0402,  0.0896, -0.0093, -0.1596, -0.1549,  0.0272,
        -0.1030,  0.1015,  0.1662, -0.0825,  0.1290,  0.0830, -0.0181, -0.1486,
        -0.1063, -0.1303, -0.0513,  0.0817,  0.0338,  0.0203,  0.0751,  0.0149,
         0.0341,  0.0479, -0.1032, -0.1392,  0.1188, -0.1042, -0.0920,  0.0590,
        -0.1166, -0.1161, -0.1615,  0.0742, -0.0783,  0.1701,  0.0662,  0.0217,
        -0.0204,  0.0126, -0.1279,  0.0908,  0.1182, -0.0759,  0.0076, -0.1281,
        -0.0818, -0.1699, -0.1387, -0.0131, -0.0809,  0.1480,  0.1668, -0.0893,
        -0.0704, -0.1369,  0.1726, -0.0563,  0.1005, -0.0232, -0.0597,  0.0367,
        -0.0525,  0.1533,  0.0954, -0.0480,  0.1067,  0.1135,  0.0519, -0.0665,
        -0.0504, -0.1363, -0.0352,  0.0300, -0.0344, -0.1685,  0.1592,  0.1295,
         0.1739, -0.1287,  0.1151,  0.0529, -0.0262,  0.0310, -0.1146, -0.1059],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0588, -0.1542,  0.0039,  0.1634, -0.1689,  0.0824,  0.0618, -0.1058,
         0.0670,  0.0448,  0.0772, -0.1718, -0.1109, -0.1746,  0.1383,  0.1575,
         0.0716, -0.1416, -0.1583,  0.1457, -0.0011, -0.0402, -0.0125, -0.0415,
        -0.1463,  0.0399, -0.1413,  0.0851, -0.1047,  0.0127, -0.1655,  0.1082,
        -0.0010,  0.0569,  0.0045, -0.0842,  0.0464,  0.0257, -0.0939,  0.1262,
        -0.0732,  0.0960, -0.1375,  0.1119, -0.1150, -0.0740, -0.1644,  0.0635,
        -0.1356,  0.0701,  0.1359, -0.0985,  0.0778, -0.0930, -0.1216,  0.0530,
        -0.1334,  0.0401,  0.0465, -0.0770, -0.1278,  0.1620,  0.0972,  0.1663,
         0.0829, -0.0688, -0.0913, -0.1363,  0.1264,  0.0759, -0.1695, -0.0276,
        -0.1391,  0.1675,  0.0688,  0.0997,  0.0933, -0.1731, -0.1373, -0.0024,
         0.0934, -0.1140, -0.1640,  0.0976,  0.0702,  0.1403, -0.0545, -0.1520,
         0.1222, -0.0926,  0.1515,  0.1103, -0.1556, -0.1206, -0.0076, -0.1487,
         0.0989,  0.1027,  0.0882, -0.0782, -0.0281, -0.1200, -0.1355,  0.0331,
         0.1362,  0.0467,  0.0191, -0.1515,  0.0211, -0.1129,  0.1443,  0.0906,
         0.1517, -0.1209,  0.0949,  0.1469,  0.0775,  0.0731,  0.0052,  0.0659,
         0.0527, -0.1425,  0.1568, -0.1133, -0.1323,  0.0716,  0.1687, -0.0523],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0751,  0.1575, -0.1076,  ..., -0.0759, -0.1211, -0.1363],
        [-0.0145,  0.0300,  0.0756,  ...,  0.0453,  0.1428, -0.1227],
        [-0.1645,  0.0066,  0.0989,  ..., -0.1272, -0.0598, -0.0889],
        ...,
        [-0.0862,  0.1699, -0.1442,  ..., -0.1647,  0.0068,  0.1262],
        [ 0.0576, -0.0825, -0.0563,  ...,  0.0297,  0.1630, -0.0148],
        [ 0.0400, -0.1004, -0.1366,  ...,  0.0297,  0.0469, -0.0222]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.1516, -0.1579, -0.1580,  ...,  0.0021,  0.0261, -0.0631],
        [-0.1090, -0.1714, -0.1545,  ..., -0.1662,  0.1513,  0.0410],
        [ 0.1718,  0.1034, -0.0235,  ..., -0.1199,  0.0146,  0.1124],
        ...,
        [ 0.0815,  0.0206,  0.1516,  ..., -0.1516,  0.0353,  0.0520],
        [-0.0666, -0.1595,  0.0194,  ...,  0.0308,  0.0345,  0.1645],
        [-0.1694,  0.0180, -0.1687,  ..., -0.0827, -0.0613,  0.0439]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0439, -0.1211, -0.0667, -0.1030,  0.1336,  0.1305,  0.0344, -0.0286,
         0.0682,  0.1300,  0.0182,  0.0684,  0.0322,  0.0930, -0.1244,  0.0918,
        -0.0315, -0.0144, -0.0781, -0.1436, -0.1149, -0.0557, -0.0533,  0.1238,
        -0.0558, -0.1759,  0.1150,  0.0469, -0.1419,  0.1521,  0.1038, -0.1378,
         0.0155,  0.1525, -0.0248, -0.0906, -0.1478,  0.0738, -0.0375,  0.0095,
         0.0547,  0.1134,  0.0117,  0.0516,  0.0022, -0.0547, -0.0900,  0.0055,
         0.1168, -0.1627, -0.1378, -0.0774, -0.1182,  0.0261, -0.0300,  0.1736,
        -0.0844,  0.0233, -0.0964, -0.1459, -0.0189, -0.1681, -0.0765,  0.0308,
         0.1236,  0.1451, -0.0148, -0.1656,  0.1678, -0.1722,  0.0550,  0.1473,
         0.0244,  0.0983, -0.1254,  0.1764, -0.0408,  0.0503, -0.0596,  0.0630,
        -0.0322, -0.1329,  0.1359,  0.1124,  0.0636, -0.1277,  0.1226, -0.1700,
         0.1617,  0.0297,  0.0537,  0.0720, -0.0774, -0.1281, -0.0375,  0.1552,
        -0.1682,  0.0751,  0.0141,  0.0146,  0.1060, -0.0964,  0.0312,  0.1314,
        -0.1548,  0.1034,  0.1274, -0.0948, -0.1422,  0.0104,  0.1444, -0.0163,
         0.1223, -0.1041,  0.1402,  0.1730,  0.0084, -0.1525, -0.1421, -0.1655,
        -0.1294, -0.1612,  0.1283, -0.0229,  0.0078,  0.1269, -0.0808,  0.0897],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1625,  0.1677, -0.0180,  0.0678, -0.0977, -0.0175, -0.1686, -0.1635,
        -0.0414,  0.0070, -0.0434,  0.1284, -0.0991, -0.0669, -0.0144,  0.0592,
         0.0674,  0.0346, -0.1059,  0.1155, -0.1208, -0.1439, -0.1655, -0.0125,
         0.0015,  0.1144,  0.0103,  0.0261,  0.1063,  0.1676, -0.1234, -0.0801,
        -0.0664,  0.0639, -0.1129,  0.1722,  0.0962,  0.0603, -0.0306,  0.0946,
         0.0377,  0.0769, -0.0508,  0.0165, -0.0815, -0.0649, -0.0931,  0.0747,
         0.1235, -0.0333,  0.1018,  0.1310,  0.0925,  0.1222,  0.1118,  0.1611,
         0.0048, -0.0829, -0.1049,  0.1730, -0.0569,  0.0547,  0.0554,  0.0981,
         0.1173, -0.1258, -0.0207,  0.1748,  0.0635,  0.0593,  0.0543, -0.0407,
         0.0696, -0.1437,  0.0369,  0.0247, -0.0254, -0.0756, -0.1725, -0.0460,
        -0.0234, -0.1631, -0.1563,  0.0245, -0.0613,  0.1036, -0.0134,  0.1647,
        -0.1457,  0.1386,  0.1380, -0.0822,  0.0803,  0.0595, -0.0687, -0.1102,
         0.0328,  0.1697,  0.0923, -0.0053,  0.0267,  0.0465, -0.1319,  0.1391,
         0.0161,  0.0214,  0.1620,  0.0838,  0.1048, -0.0890,  0.1001,  0.0128,
         0.1199, -0.1016, -0.0170, -0.1430,  0.0611,  0.1478,  0.0177, -0.1660,
         0.1245, -0.0833,  0.0032,  0.0890,  0.0034, -0.0512,  0.0839, -0.0611],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0544, -0.0585, -0.0856,  ...,  0.0251, -0.0963,  0.1711],
        [ 0.0832,  0.1406, -0.0107,  ..., -0.0831,  0.0143, -0.0017],
        [ 0.0719, -0.1037,  0.0308,  ...,  0.0692, -0.0073,  0.1302],
        ...,
        [-0.1624,  0.1072, -0.1352,  ..., -0.0604, -0.0050, -0.1192],
        [ 0.0261, -0.0646, -0.0458,  ..., -0.0856, -0.1118, -0.0046],
        [-0.0874, -0.0533, -0.1509,  ..., -0.0543, -0.0925,  0.1054]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1351,  0.0563,  0.1362,  ..., -0.0451, -0.0989,  0.1321],
        [ 0.0773,  0.0542, -0.1603,  ...,  0.0990,  0.0050, -0.0094],
        [-0.1330, -0.0418,  0.1621,  ..., -0.1116,  0.1494, -0.1542],
        ...,
        [-0.1745,  0.1649, -0.1191,  ..., -0.1291, -0.0072,  0.1044],
        [ 0.1111,  0.1468,  0.0720,  ...,  0.1390,  0.0652,  0.0422],
        [ 0.1477, -0.0493, -0.0200,  ..., -0.0826,  0.0852,  0.1389]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0550,  0.1506,  0.0481, -0.0581,  0.1482, -0.0712,  0.0068,  0.1732,
         0.0333,  0.0942,  0.0543, -0.1292,  0.1197,  0.1105,  0.1518,  0.1040,
        -0.1495, -0.0018, -0.1231,  0.1138, -0.0271, -0.0633, -0.0977, -0.1599,
         0.1735,  0.1154,  0.0339, -0.1631,  0.0495,  0.0784,  0.0820, -0.1249,
        -0.0246,  0.0440,  0.0078,  0.1544, -0.0828, -0.1591, -0.1577, -0.1248,
        -0.1457, -0.0199,  0.1710, -0.1105,  0.1418,  0.1568,  0.1614, -0.1765,
         0.0361,  0.0156,  0.0272, -0.0199, -0.0428, -0.1175, -0.0233, -0.0747,
         0.0739, -0.1557, -0.0378,  0.1096, -0.1548, -0.0168, -0.0269,  0.1259,
        -0.0107,  0.1249,  0.1609, -0.0442,  0.0215,  0.0339,  0.0367, -0.1158,
        -0.0851, -0.0907, -0.1667, -0.1416,  0.0161, -0.0625, -0.0494, -0.0362,
        -0.0877, -0.0518,  0.1089,  0.0961, -0.1498,  0.1160, -0.0650,  0.1670,
        -0.0407,  0.0639, -0.0490, -0.0044, -0.0712,  0.1233,  0.1280, -0.1533,
        -0.0820,  0.1390,  0.1106,  0.0198, -0.0509, -0.1249, -0.1569,  0.1070,
         0.0895,  0.0768,  0.0173, -0.0967, -0.1268, -0.0957, -0.1532,  0.1369,
        -0.1056, -0.0644,  0.0536,  0.1378, -0.0343, -0.0722, -0.0865, -0.0439,
        -0.0302,  0.0244,  0.1532, -0.0604,  0.0094,  0.1302,  0.0364,  0.0025],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1539,  0.0194,  0.0074,  0.1243,  0.1321,  0.0887, -0.0952,  0.1442,
         0.1615, -0.1509,  0.1669, -0.0440, -0.1763, -0.0557,  0.0311, -0.1545,
         0.1128,  0.0497, -0.0403, -0.1737, -0.1626, -0.0119,  0.1458,  0.1607,
        -0.0425, -0.0705, -0.0695,  0.1635,  0.1216, -0.1089,  0.0010, -0.1413,
         0.0617,  0.0507, -0.1481,  0.0177, -0.1083, -0.1161, -0.0175,  0.0483,
         0.0231,  0.0230, -0.0544, -0.0049,  0.1657,  0.1235,  0.0573, -0.1098,
         0.1670, -0.0963, -0.1601,  0.0201,  0.1571,  0.0250, -0.0298, -0.1212,
         0.0284, -0.1037,  0.1084, -0.0706, -0.1446, -0.1660, -0.0382, -0.1042,
         0.0664, -0.0467, -0.0615, -0.1341, -0.1193, -0.1282,  0.0459,  0.0908,
        -0.1141, -0.1765, -0.0899, -0.0086, -0.0863, -0.0786,  0.1276, -0.0279,
        -0.0409,  0.0528, -0.0947,  0.1416,  0.0851,  0.0985,  0.0678, -0.0742,
        -0.1596, -0.1567,  0.1512, -0.0264, -0.1699,  0.1458,  0.1034, -0.0062,
        -0.1736,  0.0201, -0.1164, -0.0276,  0.1511, -0.1632, -0.0667,  0.0523,
         0.0534,  0.1268,  0.1534,  0.0527,  0.0017,  0.0746,  0.0633, -0.0682,
        -0.0224,  0.0706,  0.0993, -0.1131,  0.1239,  0.1570, -0.0282,  0.1657,
        -0.0386, -0.0570, -0.0711,  0.1188, -0.0854,  0.1257,  0.1267,  0.1729],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1386, -0.0590, -0.0004,  ..., -0.0219, -0.0964, -0.0719],
        [ 0.1680, -0.1746,  0.1708,  ..., -0.1451, -0.1385, -0.1144],
        [-0.0361,  0.0621,  0.0865,  ...,  0.0297, -0.1034,  0.0371],
        ...,
        [ 0.1581, -0.0686,  0.1366,  ...,  0.0710,  0.1330,  0.0197],
        [ 0.0146,  0.1675,  0.1447,  ..., -0.1449, -0.1373, -0.1074],
        [ 0.1096, -0.0494, -0.0085,  ..., -0.1456,  0.1481, -0.1397]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0247, -0.0097,  0.1650,  ...,  0.0944,  0.0669, -0.0699],
        [ 0.0121,  0.0685, -0.1579,  ..., -0.0685,  0.0215,  0.1572],
        [ 0.0329, -0.0477,  0.0207,  ..., -0.0456, -0.1761,  0.0525],
        ...,
        [-0.0880,  0.0571,  0.0747,  ..., -0.0747,  0.1169,  0.1216],
        [-0.1044,  0.0029,  0.1596,  ..., -0.1095, -0.0140,  0.0200],
        [-0.0998,  0.0481,  0.0978,  ...,  0.0662, -0.0472, -0.0563]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1666, -0.1234,  0.0114,  0.0581,  0.1307, -0.0595, -0.1104,  0.1167,
        -0.1561,  0.1643,  0.1149, -0.1226,  0.1399, -0.1036, -0.0792, -0.0803,
         0.1454, -0.0757,  0.0356, -0.1409,  0.0248, -0.1196, -0.1303, -0.0595,
        -0.0977, -0.1040, -0.1662, -0.1001, -0.1478, -0.1251, -0.1169,  0.0049,
         0.0966, -0.1603,  0.0883, -0.1752,  0.1660,  0.0691,  0.0407, -0.0926,
         0.1581,  0.0972,  0.1230,  0.1306, -0.1151,  0.1064,  0.1733, -0.1352,
        -0.1122, -0.1138, -0.1459, -0.1358, -0.1485,  0.1211, -0.0617, -0.1189,
         0.0804, -0.1147, -0.0162, -0.1057, -0.1052,  0.0846, -0.0151,  0.1370,
        -0.0565, -0.1564, -0.0553, -0.0298, -0.1638,  0.1402, -0.1387, -0.0335,
         0.1671, -0.0430, -0.0249,  0.0847, -0.0604,  0.0913,  0.1637,  0.0354,
         0.1183, -0.0530,  0.1365, -0.0022,  0.0860, -0.1233, -0.0684, -0.0226,
         0.1105,  0.1718,  0.1096, -0.0740, -0.0358,  0.1094,  0.1403,  0.0130,
        -0.0668, -0.1666,  0.0335,  0.1167,  0.1194,  0.0119,  0.0383,  0.0887,
         0.0017,  0.0935, -0.1373,  0.1443, -0.1588,  0.1761, -0.1700,  0.1509,
         0.0757,  0.1703,  0.0280,  0.0295, -0.1002,  0.0392, -0.1530,  0.0677,
         0.1692, -0.1379, -0.0329,  0.1013,  0.1729, -0.1564,  0.1253,  0.1698],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 9.3502e-02, -8.4811e-02,  1.4753e-01, -1.4427e-01, -4.1217e-03,
         1.5917e-01, -1.4865e-01,  6.9242e-02,  2.1694e-02,  7.2517e-03,
        -2.2293e-02, -7.7805e-02, -1.0786e-01,  2.9030e-02, -1.4184e-01,
         8.2878e-02,  4.0356e-02, -7.6960e-02,  5.8517e-02,  1.2724e-01,
         6.4426e-02,  5.9900e-02,  1.3299e-01,  5.2552e-02, -7.8381e-02,
         4.6305e-02, -1.0317e-01, -4.4572e-02, -1.2234e-04, -1.5724e-01,
         2.8417e-02, -1.4109e-01, -2.2214e-02,  6.4422e-02,  5.5519e-02,
         3.3054e-02, -1.4884e-01,  1.5938e-01, -2.5339e-02,  5.3388e-03,
        -1.2179e-01, -1.4212e-01,  7.7259e-02,  8.5182e-02, -1.0310e-01,
        -9.7908e-02,  8.5334e-02,  1.6762e-02,  1.2722e-01,  9.3036e-02,
         1.6379e-01,  3.1000e-02,  1.3863e-01,  1.2214e-01,  1.5887e-01,
         1.2081e-01, -2.3839e-02, -9.8048e-02, -2.2792e-02,  9.3081e-02,
        -2.9882e-03,  6.7470e-02,  1.7650e-01, -1.1493e-01,  1.1080e-02,
        -1.2499e-01,  3.0115e-02,  1.6451e-01, -9.7689e-03, -8.8051e-02,
         4.4740e-02,  4.4315e-02,  1.5771e-01, -1.0242e-01, -1.3370e-01,
        -5.8211e-02,  1.0205e-01, -1.2334e-01,  1.0184e-01,  6.6583e-02,
        -1.2948e-01,  1.0740e-02,  1.1224e-02,  1.5265e-01, -1.9995e-02,
        -8.8033e-02,  2.3424e-02, -6.0150e-02, -3.0006e-02,  1.0199e-01,
         1.3653e-01, -8.5652e-02,  8.2897e-03, -1.0268e-01,  9.3700e-02,
        -1.7290e-01,  9.7754e-02, -3.8720e-02,  7.1515e-02,  8.6364e-02,
        -1.7599e-01, -1.7014e-01,  1.1751e-01, -1.6546e-01,  1.4347e-01,
        -6.5083e-03,  1.3989e-01, -1.4245e-01,  1.5106e-02,  2.4632e-02,
        -5.7604e-02, -1.0039e-01,  2.7651e-02,  1.2647e-02,  1.6636e-01,
         1.4175e-01,  1.2819e-01, -1.7636e-01,  7.1266e-02, -9.7890e-02,
        -1.0703e-01,  4.2181e-02, -1.5574e-01, -3.7167e-02,  1.3784e-02,
         7.0560e-02,  1.3921e-01,  2.6454e-02], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([[ 0.1041,  0.1698,  0.1079,  ..., -0.0410,  0.1313,  0.1674],
        [-0.0386,  0.0265, -0.0218,  ..., -0.1742,  0.1480, -0.1076],
        [ 0.1728,  0.0094, -0.1391,  ..., -0.0135, -0.1219, -0.0064],
        ...,
        [ 0.1625,  0.1309,  0.1074,  ..., -0.1692,  0.1482, -0.1032],
        [-0.1206,  0.1572, -0.1753,  ...,  0.1692, -0.0617, -0.1080],
        [-0.1249, -0.0568,  0.1375,  ...,  0.1531,  0.1604, -0.0915]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.1560,  0.1579,  0.1608,  ...,  0.0487, -0.0180, -0.1664],
        [ 0.1422, -0.1355, -0.0219,  ...,  0.1096, -0.1177, -0.1477],
        [-0.1121, -0.1578, -0.0225,  ..., -0.1019,  0.0025, -0.0729],
        ...,
        [ 0.0786, -0.1538, -0.0232,  ...,  0.0262, -0.0759, -0.0912],
        [-0.0368,  0.1033, -0.1641,  ...,  0.0858,  0.0443, -0.0281],
        [-0.1442, -0.0355, -0.1182,  ...,  0.0648,  0.0087,  0.1663]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1413,  0.0861, -0.1348, -0.1099, -0.0238,  0.0913,  0.0886,  0.1683,
         0.0840, -0.0985,  0.0867,  0.1592, -0.1197,  0.1057,  0.0263,  0.1297,
        -0.0937,  0.1756,  0.1706, -0.0472,  0.1617, -0.0110, -0.1084, -0.0457,
         0.0751,  0.0811, -0.0875, -0.0570,  0.0782,  0.1546, -0.0567, -0.1669,
        -0.1708,  0.0822, -0.0002, -0.0872,  0.0027,  0.0880,  0.1764,  0.1663,
         0.1096, -0.0741, -0.0744, -0.0566,  0.1559,  0.0202,  0.1274,  0.1071,
        -0.1052, -0.1306, -0.1310, -0.1289, -0.1457,  0.0589,  0.0693,  0.0653,
         0.0285,  0.1299, -0.0549, -0.1182, -0.0933, -0.0682, -0.0318,  0.0398,
         0.0169, -0.1041, -0.1277,  0.1094,  0.0653,  0.1057, -0.0824,  0.0460,
        -0.1701, -0.0352,  0.1319, -0.0835,  0.0127, -0.0487,  0.0256, -0.0644,
        -0.0436, -0.1241,  0.0061,  0.0445,  0.1677,  0.0648, -0.1026,  0.1208,
        -0.0505,  0.0159, -0.0035, -0.0165, -0.1483,  0.1686,  0.1446, -0.0100,
         0.0265,  0.1374, -0.1187, -0.0199, -0.0364,  0.1159, -0.1155,  0.1065,
         0.0081,  0.0153, -0.1286,  0.1113, -0.0241, -0.1547, -0.1672, -0.1526,
         0.1537,  0.0444, -0.1481, -0.0966,  0.1271,  0.0269,  0.1197, -0.0466,
        -0.0048, -0.0189, -0.0513, -0.0231,  0.1696,  0.0369, -0.0975,  0.0771],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0158,  0.1380,  0.1127, -0.0209, -0.0834, -0.0339,  0.1650,  0.1001,
        -0.1700,  0.1573, -0.0015, -0.0758,  0.0667,  0.0838,  0.0995,  0.0371,
         0.0821, -0.0537, -0.0317, -0.0709, -0.1138,  0.0028,  0.0633,  0.1033,
        -0.0803, -0.1252, -0.0498, -0.1431,  0.1507,  0.0173, -0.0135,  0.0116,
         0.1233, -0.0841, -0.1643, -0.1441,  0.1612,  0.1444, -0.0872, -0.0206,
         0.0888,  0.0634,  0.1579,  0.1621,  0.0732,  0.0563,  0.1635, -0.0165,
        -0.1384,  0.1189, -0.0202, -0.0517, -0.0764, -0.1208, -0.1400,  0.0689,
        -0.0783,  0.0223,  0.0079, -0.1251, -0.0087,  0.0049,  0.1281, -0.0889,
        -0.0981,  0.1677,  0.0954, -0.0328,  0.1643, -0.0042, -0.0807, -0.0610,
         0.0630, -0.0202, -0.1633,  0.0290,  0.1017, -0.0141, -0.1635,  0.0006,
         0.0459,  0.1086, -0.0937, -0.0365, -0.0364,  0.0910, -0.1564, -0.0280,
        -0.1178,  0.1484, -0.0406, -0.1092, -0.0189, -0.1535,  0.0761, -0.0968,
        -0.1164, -0.0201,  0.0656,  0.1748, -0.0863, -0.0893,  0.0903, -0.1050,
        -0.1394, -0.0880, -0.0203,  0.0399, -0.0367,  0.0387,  0.0733, -0.1679,
         0.0453,  0.1254, -0.1692,  0.1652,  0.1392, -0.0063,  0.1342, -0.1336,
        -0.0207, -0.1200,  0.1644,  0.1488,  0.0435,  0.0611,  0.0531, -0.0074],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0371,  0.0158, -0.1028,  ..., -0.0455, -0.1154,  0.0812],
        [-0.0530,  0.0453, -0.0043,  ...,  0.0113, -0.0855,  0.1015],
        [ 0.0043,  0.0577, -0.0898,  ..., -0.1712,  0.1116,  0.1569],
        ...,
        [-0.1305,  0.0935,  0.1266,  ..., -0.1356,  0.1346, -0.0483],
        [ 0.0231,  0.1606,  0.0541,  ..., -0.0745,  0.0913, -0.0586],
        [-0.0282,  0.0057,  0.1468,  ..., -0.0840,  0.1440, -0.1350]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0170, -0.0474,  0.1332,  ...,  0.1062,  0.0057,  0.0879],
        [-0.0605, -0.1282,  0.0259,  ..., -0.1666,  0.0650, -0.0149],
        [ 0.0233,  0.0549,  0.0323,  ...,  0.1174, -0.1165,  0.0568],
        ...,
        [-0.1456, -0.0808,  0.0834,  ...,  0.1065, -0.1453,  0.0815],
        [ 0.0561, -0.1575, -0.1090,  ..., -0.0312,  0.0096, -0.0882],
        [-0.1110,  0.1153,  0.0246,  ...,  0.1014, -0.1020,  0.0062]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0821,  0.1164, -0.1155, -0.1676, -0.0796, -0.0809, -0.1370,  0.1323,
         0.1229, -0.0589,  0.0573,  0.1407, -0.1188, -0.1198, -0.1285, -0.0603,
         0.0958,  0.1723, -0.0124, -0.1661,  0.0125, -0.0556,  0.0345, -0.0432,
         0.0378,  0.1351, -0.0496, -0.1553,  0.1511, -0.0966,  0.1469, -0.0586,
        -0.0986,  0.0411,  0.1544,  0.1173,  0.0484,  0.1496, -0.0400,  0.0171,
        -0.0398,  0.0277,  0.1105,  0.0937, -0.0736, -0.0911, -0.1217, -0.1552,
         0.0292, -0.0717,  0.0622, -0.1475,  0.1629, -0.0913,  0.1261,  0.0900,
         0.0180, -0.0550, -0.0863, -0.0637, -0.1104,  0.1348, -0.0777, -0.0433,
         0.0046,  0.1169, -0.0409,  0.0912, -0.0689, -0.0066, -0.0404, -0.1757,
         0.1015, -0.0014, -0.1627, -0.1659, -0.0468,  0.0365, -0.1182, -0.1210,
         0.1110,  0.1166, -0.0888,  0.1677, -0.1271,  0.1365,  0.1143, -0.0402,
        -0.0015,  0.0325,  0.1087, -0.1323,  0.0749, -0.0408, -0.0780,  0.1628,
        -0.1385,  0.0358,  0.1321, -0.0271, -0.0572, -0.0840,  0.0282,  0.1714,
         0.0852,  0.1332,  0.1482, -0.1470, -0.0779, -0.1316, -0.0845, -0.0792,
         0.1295, -0.1462, -0.0076,  0.1101, -0.1377,  0.0016, -0.1364, -0.1418,
         0.1024,  0.0240, -0.1380,  0.1609,  0.0509,  0.1590, -0.1232, -0.0273],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1449,  0.0294, -0.0867, -0.0988,  0.0185, -0.0987, -0.0403, -0.0861,
        -0.1353, -0.1646, -0.1414, -0.0916,  0.1605, -0.0217, -0.1720,  0.0551,
         0.0416, -0.1386,  0.1764, -0.1088, -0.0217, -0.1683, -0.1151, -0.1274,
         0.1400, -0.1314,  0.0640,  0.1015, -0.0893,  0.1468, -0.0866,  0.0785,
         0.0970,  0.0801,  0.0468,  0.0606,  0.0992,  0.0790,  0.0978,  0.0040,
         0.0406,  0.1686, -0.0750,  0.0834, -0.0402, -0.1324, -0.1562,  0.0141,
        -0.0644,  0.0500, -0.0166, -0.0063, -0.1107, -0.1713, -0.0156, -0.0964,
         0.0963,  0.0787, -0.0970, -0.1167,  0.1529, -0.0637,  0.0686,  0.1269,
        -0.0043, -0.1283, -0.1704, -0.0896,  0.1380, -0.0450,  0.0132, -0.1689,
        -0.0679, -0.0070, -0.1416,  0.1402,  0.0178, -0.0113, -0.0470,  0.1676,
         0.0725, -0.1564,  0.0569,  0.1202,  0.0528,  0.1260, -0.1122, -0.0170,
        -0.0625, -0.1272,  0.0810,  0.0632,  0.1431,  0.0407, -0.0160, -0.0679,
        -0.0616, -0.0575, -0.1352,  0.1419, -0.0735,  0.1255,  0.1387,  0.1626,
         0.1619, -0.0908, -0.1643,  0.0898, -0.0602,  0.1212,  0.0003,  0.0581,
        -0.1684,  0.0767, -0.0436,  0.0402,  0.1044, -0.0550, -0.1743, -0.0611,
        -0.0639,  0.0512, -0.1414, -0.1568,  0.0421,  0.1681, -0.0295,  0.1570],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.1317,  0.1514, -0.1393,  ..., -0.1094,  0.0551,  0.1309],
        [ 0.0179,  0.0183,  0.1068,  ...,  0.0845,  0.0416, -0.0094],
        [ 0.1602,  0.0412, -0.0835,  ..., -0.0594, -0.0665,  0.1254],
        ...,
        [ 0.0383,  0.1575, -0.0015,  ...,  0.1151, -0.0177,  0.0122],
        [ 0.0842, -0.1148,  0.0976,  ...,  0.0920,  0.0114,  0.0243],
        [-0.1006,  0.1315, -0.0172,  ..., -0.1246,  0.0060, -0.0133]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[ 0.0944,  0.0501, -0.0522,  ...,  0.0354,  0.0885, -0.0980],
        [-0.1689,  0.1593,  0.0129,  ..., -0.1647,  0.0417, -0.1441],
        [ 0.0601, -0.0944,  0.1752,  ..., -0.0778, -0.1133,  0.1677],
        ...,
        [-0.1031,  0.0361, -0.0426,  ...,  0.1509, -0.1256,  0.1154],
        [ 0.1368, -0.0621,  0.1278,  ..., -0.0994, -0.0079,  0.0221],
        [ 0.1423, -0.0997,  0.1681,  ..., -0.1522,  0.1107,  0.1263]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1293, -0.0452, -0.0295,  0.0495, -0.1157,  0.1667,  0.0363, -0.1222,
        -0.0902,  0.0375, -0.1009, -0.1717,  0.0347, -0.0902, -0.0627, -0.1375,
        -0.0636,  0.0600, -0.1192,  0.1506, -0.0974,  0.1128,  0.0634,  0.1516,
        -0.0599, -0.1089,  0.0052, -0.0560, -0.1290, -0.0557, -0.0594,  0.0884,
         0.0400,  0.0397,  0.0550, -0.1756, -0.1381,  0.0737,  0.0951,  0.0307,
        -0.0991,  0.0493,  0.1726, -0.0486, -0.0320,  0.0568,  0.0972,  0.0881,
         0.0194, -0.1700, -0.0275, -0.1095,  0.0658,  0.1251,  0.1697, -0.0273,
        -0.1393, -0.0570, -0.0994,  0.1752,  0.1125,  0.0159, -0.1030, -0.1463,
        -0.1764, -0.0789,  0.0739, -0.1245,  0.0379, -0.1346,  0.1740,  0.0227,
         0.1345,  0.1733, -0.0506, -0.0591, -0.1186,  0.1723,  0.0057, -0.0620,
        -0.0497,  0.0995, -0.0042,  0.1232,  0.1336,  0.0393, -0.0331,  0.0997,
        -0.0259,  0.1756, -0.0328, -0.1140,  0.0784, -0.0134, -0.1432,  0.0601,
         0.0248,  0.0919,  0.0431,  0.0261,  0.0871,  0.0134,  0.0668, -0.0141,
         0.0200, -0.1106, -0.0294, -0.1712,  0.0004,  0.0973,  0.1311,  0.0798,
         0.0363, -0.0779, -0.1465,  0.0077, -0.1175,  0.1341, -0.0808,  0.0709,
        -0.1425,  0.0848, -0.0370,  0.0305,  0.1157, -0.1232,  0.1587, -0.0814],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0148,  0.1374, -0.0491, -0.1353,  0.1464,  0.0678, -0.0623,  0.0172,
         0.0610, -0.0027, -0.0510,  0.1096, -0.1573,  0.0711,  0.0851,  0.0890,
        -0.0494,  0.0843,  0.1604, -0.0942, -0.1634,  0.1262,  0.1728, -0.1065,
         0.1010,  0.1459, -0.1403, -0.0324, -0.0095, -0.1327,  0.1554, -0.0953,
         0.0725, -0.1584,  0.0809,  0.1412,  0.1105,  0.1560,  0.1701,  0.1445,
        -0.0064, -0.1274, -0.0785, -0.0028,  0.1624,  0.1090, -0.0492, -0.1729,
        -0.1589,  0.0426, -0.1622,  0.1736,  0.0921,  0.1104,  0.1529, -0.1237,
         0.0778,  0.0848,  0.1358,  0.0716,  0.1407, -0.0677,  0.1287,  0.0451,
         0.1286, -0.0229,  0.0488,  0.1189,  0.0302,  0.0646, -0.0221,  0.0557,
         0.1735,  0.1099,  0.0237, -0.0307,  0.1420, -0.0917,  0.0407, -0.0736,
         0.1365,  0.1107, -0.0675,  0.0801,  0.1056, -0.0525, -0.0560, -0.0896,
         0.0909, -0.1395, -0.0516, -0.1288,  0.1031, -0.1434,  0.1266, -0.0915,
        -0.1167,  0.0737, -0.0769, -0.0289, -0.0787, -0.1747, -0.0468, -0.0695,
         0.1523,  0.1316, -0.0870, -0.0790, -0.0298,  0.1621, -0.0178, -0.1393,
        -0.0806, -0.0846, -0.1172, -0.0031, -0.0057, -0.1434, -0.1063, -0.0425,
        -0.0820,  0.0927, -0.1387, -0.1448,  0.0433, -0.1027,  0.1488, -0.0938],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0652,  0.0540,  0.0486,  ...,  0.0596,  0.0246,  0.0540],
        [-0.0514, -0.0476,  0.1074,  ...,  0.0165, -0.1051, -0.1104],
        [-0.0308, -0.0163, -0.0199,  ..., -0.0355, -0.0931,  0.0533],
        ...,
        [-0.0382, -0.1049,  0.0003,  ..., -0.0007,  0.0023, -0.0764],
        [-0.1096,  0.0717,  0.0235,  ...,  0.1078,  0.0007, -0.0389],
        [ 0.0058,  0.0895, -0.0206,  ..., -0.0134, -0.1137,  0.1053]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.0300,  0.0516,  0.0008, -0.1241, -0.0088, -0.0979, -0.0455,  0.1222,
         0.0187,  0.0775, -0.0731,  0.0486,  0.0917,  0.0709,  0.0235, -0.0188,
         0.0117, -0.0398,  0.0621,  0.0171, -0.1141, -0.0157,  0.1233,  0.1072,
        -0.1202,  0.0932,  0.0927, -0.0711, -0.0950,  0.0148, -0.0464, -0.0385],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.1569,  0.0746,  0.0473, -0.1076,  0.0622,  0.1304,  0.0730, -0.1531,
          0.0794, -0.0807, -0.0916, -0.1181, -0.0016,  0.0722, -0.1561, -0.1153,
          0.0603,  0.1376, -0.1622,  0.1497,  0.1647, -0.0784, -0.1212, -0.1504,
          0.1360, -0.0055,  0.0430, -0.1479,  0.0901,  0.0075,  0.0929,  0.1175],
        [ 0.1220, -0.0081, -0.1256,  0.0181,  0.1395,  0.1577, -0.1357,  0.0923,
          0.0240, -0.1172, -0.0195, -0.0658,  0.0058, -0.1184,  0.1100,  0.1637,
          0.0714,  0.1686, -0.0280,  0.1215, -0.1395,  0.0391,  0.1482, -0.0323,
          0.1255,  0.1476,  0.0910, -0.0269,  0.1243,  0.1621,  0.1491, -0.0225],
        [ 0.0804,  0.1049, -0.1675, -0.0156, -0.0191,  0.0200, -0.0090, -0.1510,
          0.0222, -0.1313, -0.0799,  0.1046,  0.0834,  0.1110,  0.1154, -0.1180,
          0.1684,  0.1522, -0.0903, -0.0978,  0.0349, -0.0250,  0.1209,  0.0435,
          0.1245, -0.0236,  0.1227, -0.1723,  0.0117, -0.1619,  0.1004, -0.0003],
        [-0.0731,  0.1308, -0.1213,  0.0995,  0.0772,  0.1456, -0.1495, -0.0784,
         -0.1544, -0.0632,  0.1474, -0.1051, -0.1187, -0.0431, -0.0013, -0.1356,
          0.0598,  0.1589, -0.0729,  0.0740,  0.1668, -0.1611, -0.0031,  0.0338,
         -0.0684, -0.0458, -0.0641,  0.0468, -0.1121, -0.0472, -0.1392,  0.0089],
        [-0.1525, -0.0788, -0.0893, -0.1394, -0.0896, -0.1487, -0.0272,  0.0437,
          0.0077, -0.1490,  0.1219,  0.0766,  0.1103,  0.0012,  0.0964,  0.0493,
          0.0915, -0.1416, -0.0413,  0.1246,  0.1138,  0.0406, -0.0150, -0.0465,
          0.0982, -0.1093,  0.1410,  0.0953,  0.0046, -0.1227,  0.1566, -0.0534],
        [-0.1234, -0.0619, -0.0218, -0.0170, -0.0979,  0.0682,  0.1020,  0.0725,
          0.0881, -0.0705,  0.0040,  0.1068,  0.0633,  0.0022,  0.0252, -0.0484,
         -0.0275,  0.1038, -0.1724,  0.0264,  0.1084,  0.0434, -0.0377,  0.1483,
         -0.0521, -0.0203,  0.0394,  0.1133,  0.1648,  0.0085,  0.0284, -0.1361],
        [-0.1110, -0.0584,  0.0189,  0.1097, -0.0702, -0.0943,  0.1163,  0.0342,
          0.0546,  0.1571,  0.1470, -0.1465, -0.1061,  0.0918,  0.0081, -0.1523,
         -0.0164,  0.1557,  0.0013, -0.1488,  0.0557,  0.0736, -0.0165, -0.1414,
          0.0412, -0.1443,  0.0068,  0.1160,  0.1510,  0.1305,  0.0314, -0.1545],
        [-0.0155,  0.1448,  0.1466, -0.1147,  0.0913,  0.1162,  0.1218,  0.0985,
         -0.0149, -0.0360, -0.0057, -0.1691,  0.1519, -0.1614,  0.1315,  0.0556,
          0.0161,  0.0820,  0.0820, -0.1037,  0.1454,  0.1610, -0.1273,  0.1134,
          0.0877,  0.1109, -0.0337, -0.0615,  0.1323,  0.1411,  0.0869,  0.1140],
        [ 0.1257,  0.0237, -0.1485,  0.0477,  0.0132, -0.1339,  0.0496, -0.0998,
         -0.1739,  0.1651, -0.0182, -0.0577,  0.0577,  0.1201, -0.0246,  0.0109,
         -0.0519, -0.1380, -0.1237,  0.0985,  0.0508, -0.0655, -0.0747, -0.0320,
          0.0526, -0.0863,  0.0158,  0.1703, -0.1388,  0.1134,  0.0316,  0.0420],
        [ 0.1478, -0.1378, -0.1182,  0.0715, -0.0524, -0.0818, -0.0479,  0.0797,
          0.0014,  0.0471,  0.0324, -0.1596, -0.0096, -0.0489,  0.0332, -0.0271,
          0.0983, -0.0062,  0.0212,  0.0257,  0.1735, -0.0773,  0.0701,  0.0479,
         -0.0448,  0.0612,  0.0593, -0.1118,  0.0666,  0.1586, -0.0924,  0.0019],
        [ 0.1273,  0.0162,  0.1622,  0.0953,  0.1137, -0.0983, -0.0775, -0.0167,
          0.1753,  0.0901,  0.0487, -0.1381, -0.0131, -0.0713,  0.0760,  0.0299,
          0.0311, -0.0567, -0.0513, -0.1081, -0.0288,  0.1034,  0.1257,  0.1730,
          0.0426,  0.0673, -0.1530,  0.0769,  0.1589,  0.0204, -0.0196,  0.0552],
        [-0.1762,  0.1632, -0.1202, -0.1496, -0.0857,  0.0432,  0.0957, -0.0252,
         -0.0098, -0.0066,  0.0169, -0.0144, -0.1086, -0.1386, -0.0456,  0.1696,
         -0.0497, -0.0814, -0.0601,  0.0366, -0.1640,  0.0981, -0.1172, -0.1153,
          0.1753,  0.1361, -0.0052, -0.1504,  0.0091, -0.0330,  0.0120,  0.0272],
        [ 0.1341,  0.0316, -0.1179,  0.1587,  0.1651, -0.0709, -0.0738,  0.1535,
         -0.0442,  0.1024, -0.1071,  0.0538, -0.0073,  0.0719,  0.0876, -0.0230,
         -0.1654,  0.1270,  0.0689,  0.1078,  0.0589,  0.0106, -0.0327, -0.0974,
          0.1116, -0.0781, -0.0629,  0.1511,  0.0145,  0.0604, -0.0508, -0.1673],
        [-0.0562,  0.1486,  0.1732,  0.0603, -0.0223,  0.0791, -0.0010, -0.0702,
          0.1397, -0.0374, -0.1491,  0.1730, -0.0777, -0.1669,  0.1353, -0.0918,
          0.1764, -0.0465, -0.0062, -0.0134, -0.0456, -0.1526,  0.1015, -0.1611,
          0.0126,  0.0744,  0.1005,  0.1486, -0.0296, -0.1611, -0.0842, -0.0257],
        [-0.1374,  0.1345,  0.0198, -0.0619, -0.1389, -0.0587,  0.0031,  0.1440,
          0.0955, -0.1491,  0.1251,  0.0389, -0.1441,  0.0504, -0.0769, -0.0593,
         -0.1176, -0.0177, -0.1215, -0.0911, -0.1372, -0.0545, -0.0809,  0.0393,
         -0.1699, -0.1015,  0.0024, -0.0280,  0.1441,  0.0740,  0.0169, -0.1377],
        [-0.0175,  0.0536,  0.1052, -0.0822,  0.1162, -0.0343,  0.1544,  0.0858,
          0.0958,  0.1439, -0.0084, -0.0045, -0.0888, -0.1759,  0.1335,  0.1313,
         -0.1721, -0.1351,  0.1256, -0.0770,  0.0840, -0.0590, -0.1159, -0.1198,
         -0.0730,  0.0992, -0.1179,  0.1235, -0.1761,  0.1106, -0.0104,  0.1472]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([-0.1461,  0.0139, -0.1185,  0.0244,  0.0882, -0.1406,  0.1141, -0.1290,
        -0.1176, -0.0564, -0.1667, -0.0891,  0.1320,  0.0071, -0.1422,  0.0251],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0091, -0.2048,  0.0361, -0.0750,  0.0564,  0.0720,  0.1214,  0.2376,
         -0.1872,  0.0913,  0.0493,  0.2170, -0.1476,  0.2457,  0.1656,  0.1043],
        [ 0.2201, -0.0768,  0.0666,  0.2093,  0.2424,  0.2184,  0.0005, -0.1874,
         -0.1406, -0.1192, -0.0429, -0.1752,  0.1036,  0.0139,  0.0133, -0.0998],
        [-0.1239, -0.0546,  0.1315,  0.0316,  0.0081, -0.1284,  0.1996,  0.0055,
         -0.0567,  0.1312, -0.2324, -0.0575, -0.2309,  0.1647, -0.0731, -0.2103],
        [-0.1602,  0.2117, -0.0741, -0.1549, -0.1506,  0.1137,  0.1364, -0.0723,
         -0.1355,  0.0154, -0.2051, -0.0173, -0.1477, -0.0327,  0.0704, -0.1562],
        [ 0.2390, -0.1069, -0.1092, -0.1845, -0.0966,  0.2436, -0.1002, -0.0584,
         -0.1218, -0.1498, -0.2473,  0.1776,  0.1172,  0.0769, -0.2346,  0.0154],
        [ 0.0873,  0.2467,  0.0392,  0.0417,  0.1063,  0.1081, -0.2285, -0.2163,
         -0.1161, -0.0998,  0.1432, -0.2091, -0.0209, -0.1959, -0.0435, -0.1835],
        [ 0.0638, -0.0427,  0.1834,  0.2449, -0.2142, -0.1506, -0.1892,  0.1196,
          0.2315,  0.0298, -0.0721, -0.0889, -0.0993, -0.1789, -0.1532,  0.1220],
        [ 0.0717, -0.0316, -0.2126,  0.1858,  0.1282,  0.1096,  0.1226, -0.2135,
          0.0650, -0.2049, -0.0961,  0.2308, -0.0267, -0.1273, -0.2245, -0.1995]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.1543, -0.1889, -0.1045,  0.1870,  0.0967, -0.2098, -0.1374, -0.1554],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([[-0.0894, -0.1662,  0.0135, -0.3363,  0.3065,  0.3185,  0.2782,  0.2975],
        [-0.0569, -0.2886,  0.0884, -0.2071, -0.0424,  0.3327, -0.0425, -0.2643],
        [ 0.3167,  0.0109, -0.0080, -0.0103, -0.2678,  0.1278, -0.2363, -0.2168],
        [ 0.0283, -0.0683, -0.2355,  0.2492, -0.2459,  0.3006,  0.1726, -0.0666]],
       device='cuda:0', requires_grad=True), Parameter containing:
tensor([ 0.0107, -0.2854, -0.0579, -0.0772], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([[ 0.2182,  0.2619, -0.2515,  0.2476],
        [-0.0753,  0.1763, -0.3349,  0.2224]], device='cuda:0',
       requires_grad=True), Parameter containing:
tensor([0.4987, 0.2451], device='cuda:0', requires_grad=True)]
