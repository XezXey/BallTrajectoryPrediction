==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.06it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.56it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.18it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 833, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 767, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 767, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 767, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 778, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 778, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 778, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 787, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 787, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 752, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 721, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 721, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 708, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 710, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 710, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 710, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 717, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 717, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 717, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 738, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 738, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 738, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 730, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 730, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 832, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 832, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........Beofre UPDATE
h tensor([[[[ 0.9795,  0.4728,  1.0813,  ...,  0.6057,  0.3104,  1.4018],
          [-1.0687, -0.4270, -0.8925,  ..., -1.4321,  0.1364, -0.3838],
          [ 0.3733,  0.5806, -0.2306,  ..., -0.6696,  0.1884,  0.6018],
          ...,
          [ 0.0600,  0.4780,  0.4537,  ...,  1.0982,  0.5794, -1.3529],
          [-0.4002,  0.5419, -0.1999,  ...,  1.6362, -0.7019,  1.8703],
          [ 0.2984, -0.0530, -0.3048,  ..., -0.6888,  2.8243, -1.4227]],

         [[ 1.9696,  1.1084, -2.8812,  ...,  1.4539, -0.0147, -1.1474],
          [ 0.4007, -0.7905,  2.1089,  ...,  0.1322,  0.6785, -0.7273],
          [-0.7896,  1.4249, -1.4019,  ..., -0.9380,  1.0035,  0.2918],
          ...,
          [-0.5374, -1.5395, -0.9396,  ..., -2.8540,  1.1134, -1.7463],
          [ 1.5059, -1.2493, -0.2032,  ..., -0.8228, -1.0114, -0.6138],
          [ 0.4089, -0.1071, -2.2705,  ..., -1.2382,  1.2039,  1.7006]]],


        [[[-1.6920, -0.9777,  0.4315,  ..., -0.6907, -0.5917,  0.6042],
          [ 0.3329,  1.9515, -0.0629,  ..., -0.5859, -0.7235,  0.8254],
          [-0.5828, -1.3683, -0.7326,  ...,  0.0532, -0.5054,  0.3535],
          ...,
          [ 0.0925, -0.0688,  1.3709,  ...,  1.3627,  0.8816,  0.7768],
          [-1.5985,  0.7570, -0.9348,  ..., -0.3081, -1.5793,  0.7097],
          [-0.9511,  1.8690, -0.4099,  ..., -3.0663, -0.1563,  0.1430]],

         [[ 0.7676,  0.1156,  0.9529,  ...,  0.4791, -1.5258,  0.2519],
          [-0.8289,  0.3007,  0.8021,  ..., -0.2271, -0.8632, -1.3527],
          [-0.0750,  0.8297,  0.8190,  ..., -0.5910, -0.0256, -0.8144],
          ...,
          [-1.1442,  0.2163,  0.2388,  ...,  0.1836, -0.5390,  0.4615],
          [-1.2945,  1.3106,  1.0457,  ...,  0.7800, -2.1510,  1.1829],
          [ 0.0831, -0.5028, -1.2089,  ..., -0.0361, -0.7993,  0.2257]]],


        [[[-0.0734, -0.7253, -0.4187,  ..., -0.5456, -2.3499, -0.2369],
          [-0.5493,  1.1701, -0.8899,  ...,  0.0786, -0.3244,  0.9449],
          [ 0.0053,  0.0414, -0.3392,  ..., -0.1010, -0.7612, -1.2780],
          ...,
          [ 1.1326,  0.6775, -1.0411,  ..., -1.3391,  0.4610,  0.3181],
          [-1.5325,  0.3553,  1.0190,  ...,  0.9086, -0.6603,  1.2956],
          [ 0.3064,  1.9656, -2.9717,  ..., -1.8020,  0.4135,  0.1289]],

         [[ 0.6436,  0.7879, -1.0437,  ..., -0.0923,  2.0054, -1.0894],
          [ 0.4537, -0.7867, -0.3388,  ..., -1.3108,  0.6706, -0.1199],
          [ 0.7282,  0.8460,  1.2066,  ..., -0.8042,  0.1424, -0.8982],
          ...,
          [-0.9434,  0.4078,  1.6240,  ..., -0.0677, -1.1010, -0.7548],
          [-1.6496,  0.6753, -0.5606,  ...,  0.1575,  0.2571,  0.5599],
          [ 1.9599,  1.9776, -1.4399,  ...,  0.0964,  0.8450, -0.4987]]],


        [[[ 1.2989,  1.0498,  0.7148,  ...,  0.0812, -1.7380,  0.4739],
          [-0.0117,  0.7500, -0.2614,  ..., -0.8467,  0.3452,  1.6161],
          [ 1.3530,  0.3325,  0.5719,  ..., -0.3950,  0.3511,  0.1930],
          ...,
          [-1.6858, -0.3560, -0.4680,  ..., -1.3969,  0.9508,  0.8157],
          [-0.9744,  0.2456, -1.0081,  ...,  0.2180, -0.1881,  1.2067],
          [-1.2014,  0.4739, -0.0150,  ...,  0.9447,  0.5504,  0.2722]],

         [[ 1.0540,  1.4689,  0.2197,  ...,  2.1050,  1.0103,  0.4551],
          [-1.4362, -0.0606, -2.7481,  ...,  1.1380, -0.0349,  1.3753],
          [ 0.6326,  1.3704,  0.2778,  ..., -0.3459, -1.6508, -0.0864],
          ...,
          [ 0.0541,  0.0261,  1.6011,  ...,  1.0284,  1.0288,  0.7407],
          [ 0.2482, -0.0474, -1.0024,  ...,  1.7647, -1.5265, -0.9601],
          [ 0.7059,  0.0920,  0.7094,  ..., -0.8630,  0.5657, -0.5983]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 1.0110, -1.5775,  1.6496,  ..., -0.3343, -0.2508, -0.3008],
          [-0.9994,  0.0086, -0.3518,  ...,  2.6673, -0.5995,  0.6346],
          [-0.0219,  0.5705, -0.3515,  ..., -1.1052, -1.1269, -0.7949],
          ...,
          [-0.7089, -0.5827, -0.5083,  ..., -1.6516,  1.8322,  0.4606],
          [-0.0164, -0.2878,  0.6908,  ...,  0.4076,  0.4278, -0.1653],
          [-1.2692,  0.4337,  0.1297,  ..., -1.1610, -0.2844,  1.4173]],

         [[-1.3828, -0.1190, -0.8743,  ...,  0.1307,  0.8338,  0.5764],
          [-0.6670,  1.0722,  1.4751,  ..., -1.6725, -1.8776,  0.1289],
          [ 0.0398, -0.9825,  1.4553,  ...,  1.7946, -0.5416,  1.0397],
          ...,
          [-0.9070,  1.4476,  0.5853,  ...,  0.6400,  1.0480, -0.2804],
          [-2.8330, -0.0892,  0.3079,  ..., -0.2566, -0.2398, -0.2743],
          [-0.0537,  0.0875, -1.3812,  ...,  0.5659, -0.1127, -0.1606]]],


        [[[-1.1690, -2.1044, -0.7391,  ..., -1.7483,  0.5091,  0.6090],
          [ 0.1729,  0.0788, -0.6294,  ...,  0.1125,  1.1343, -0.9702],
          [-0.9134, -1.6012,  0.6115,  ...,  1.4563, -2.1713,  1.2339],
          ...,
          [ 0.1204,  0.8696,  0.6837,  ..., -0.6556, -1.0780, -1.7190],
          [ 1.0863,  0.1659,  1.3981,  ..., -0.9469,  0.8782, -0.7161],
          [ 0.9863, -0.9776, -0.0649,  ..., -0.6280,  0.1898, -1.3000]],

         [[-0.6595,  0.9645, -0.5366,  ..., -0.8797,  0.4822, -1.3541],
          [ 0.3554,  1.6102, -0.6804,  ..., -1.2710, -0.6150,  0.6383],
          [ 1.1682,  0.8625,  1.8480,  ...,  1.1627, -0.2980,  0.3156],
          ...,
          [ 1.0553, -0.5996, -0.3162,  ...,  0.2976, -1.6708, -0.4101],
          [-1.4552,  1.3625, -0.8145,  ...,  0.3750, -0.5726,  0.2496],
          [-0.4998,  0.3681,  1.1046,  ...,  1.2672, -1.5622,  0.2794]]],


        [[[-0.9972, -0.3480,  0.3566,  ..., -0.1091, -1.2473,  0.2188],
          [ 0.2351, -0.4928,  1.2199,  ..., -0.0174,  3.3443, -0.4492],
          [ 1.7772, -1.2040,  1.5330,  ..., -0.7072, -1.7918, -0.2737],
          ...,
          [ 0.2066,  0.3069, -0.6702,  ...,  0.2639, -0.0612,  1.3485],
          [-0.5218, -0.8082, -1.6798,  ...,  0.7185, -0.9327,  1.1322],
          [ 0.3704,  0.7090, -0.2019,  ..., -0.5551, -0.1063, -0.0526]],

         [[-0.1916,  0.4681, -0.2506,  ...,  1.4798, -0.2937, -0.6139],
          [-0.5938, -0.2728, -0.8172,  ..., -0.0055, -0.2622,  0.0862],
          [ 0.1435,  0.0622, -0.3785,  ..., -0.7255,  1.4843,  0.9769],
          ...,
          [ 0.5993,  0.0964, -0.1572,  ..., -0.8175, -0.8139, -1.4962],
          [ 0.5793, -1.5649,  0.0448,  ..., -0.0265,  1.1979,  0.7867],
          [ 0.6459,  0.4150, -1.2674,  ..., -1.3519, -0.2546, -0.4622]]],


        [[[ 0.2881, -0.6330, -0.4262,  ...,  0.0339,  1.2894, -0.4894],
          [-1.0648, -1.8177,  0.2103,  ...,  0.9204,  0.1548, -1.5744],
          [-0.0994, -1.5866,  0.7229,  ..., -0.6755, -0.4461, -0.9978],
          ...,
          [ 1.6680, -0.2917, -0.6422,  ..., -1.1967,  0.6867, -0.6569],
          [ 0.0628,  0.6196, -1.5647,  ...,  1.0702,  0.6126, -0.1602],
          [ 0.6279, -1.2267, -0.5414,  ...,  0.7009,  2.2139,  2.8099]],

         [[ 0.4134, -0.7410, -0.0160,  ...,  0.9870,  0.2857,  0.7844],
          [-2.3608,  0.2865,  0.4009,  ..., -1.0061, -0.3325, -0.8485],
          [ 0.8222, -0.1525,  1.7445,  ..., -0.6519,  0.1534,  0.7370],
          ...,
          [-0.4031, -0.9100,  0.6282,  ...,  0.9186, -1.6468,  0.0956],
          [-1.8670,  0.7143, -1.3199,  ...,  0.9449, -1.4601, -0.7111],
          [-0.6627,  0.3114, -0.1358,  ..., -0.6666, -1.0397, -0.0061]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
h tensor([[[[ 0.9894,  0.4634,  1.0717,  ...,  0.5959,  0.3006,  1.3919],
          [-1.0591, -0.4180, -0.9023,  ..., -1.4416,  0.1267, -0.3911],
          [ 0.3640,  0.5898, -0.2402,  ..., -0.6783,  0.1971,  0.5922],
          ...,
          [ 0.0652,  0.4875,  0.4449,  ...,  1.1079,  0.5882, -1.3433],
          [-0.3920,  0.5388, -0.2090,  ...,  1.6417, -0.7102,  1.8616],
          [ 0.3078, -0.0435, -0.3142,  ..., -0.6981,  2.8147, -1.4154]],

         [[ 1.9606,  1.0987, -2.8908,  ...,  1.4621, -0.0053, -1.1376],
          [ 0.4101, -0.7969,  2.1002,  ...,  0.1381,  0.6880, -0.7366],
          [-0.7800,  1.4153, -1.4100,  ..., -0.9294,  0.9953,  0.3000],
          ...,
          [-0.5283, -1.5475, -0.9479,  ..., -2.8596,  1.1051, -1.7414],
          [ 1.5062, -1.2569, -0.1984,  ..., -0.8287, -1.0086, -0.6080],
          [ 0.4160, -0.1165, -2.2617,  ..., -1.2461,  1.1952,  1.6918]]],


        [[[-1.7017, -0.9685,  0.4216,  ..., -0.6809, -0.6017,  0.6055],
          [ 0.3420,  1.9599, -0.0726,  ..., -0.5955, -0.7329,  0.8348],
          [-0.5749, -1.3776, -0.7237,  ...,  0.0629, -0.5145,  0.3438],
          ...,
          [ 0.0838, -0.0596,  1.3613,  ...,  1.3715,  0.8902,  0.7675],
          [-1.6062,  0.7495, -0.9432,  ..., -0.2999, -1.5718,  0.7159],
          [-0.9433,  1.8648, -0.4192,  ..., -3.0746, -0.1475,  0.1358]],

         [[ 0.7749,  0.1254,  0.9434,  ...,  0.4877, -1.5163,  0.2571],
          [-0.8376,  0.3098,  0.7926,  ..., -0.2360, -0.8537, -1.3471],
          [-0.0841,  0.8380,  0.8106,  ..., -0.5817, -0.0338, -0.8057],
          ...,
          [-1.1412,  0.2159,  0.2295,  ...,  0.1762, -0.5299,  0.4532],
          [-1.3021,  1.3173,  1.0416,  ...,  0.7838, -2.1440,  1.1746],
          [ 0.0791, -0.4961, -1.2001,  ..., -0.0399, -0.7901,  0.2165]]],


        [[[-0.0637, -0.7159, -0.4088,  ..., -0.5554, -2.3597, -0.2270],
          [-0.5397,  1.1782, -0.8811,  ...,  0.0868, -0.3338,  0.9357],
          [ 0.0149,  0.0321, -0.3295,  ..., -0.0913, -0.7663, -1.2865],
          ...,
          [ 1.1233,  0.6693, -1.0319,  ..., -1.3294,  0.4521,  0.3124],
          [-1.5402,  0.3619,  1.0273,  ...,  0.9179, -0.6681,  1.2891],
          [ 0.3102,  1.9569, -2.9622,  ..., -1.7927,  0.4040,  0.1203]],

         [[ 0.6531,  0.7976, -1.0527,  ..., -0.0848,  2.0140, -1.0848],
          [ 0.4630, -0.7938, -0.3481,  ..., -1.3049,  0.6626, -0.1285],
          [ 0.7375,  0.8550,  1.2009,  ..., -0.7955,  0.1496, -0.9071],
          ...,
          [-0.9499,  0.4014,  1.6313,  ..., -0.0586, -1.1100, -0.7623],
          [-1.6547,  0.6676, -0.5528,  ...,  0.1508,  0.2492,  0.5663],
          [ 1.9684,  1.9863, -1.4459,  ...,  0.1046,  0.8513, -0.5068]]],


        [[[ 1.3087,  1.0399,  0.7246,  ...,  0.0713, -1.7282,  0.4839],
          [-0.0214,  0.7401, -0.2708,  ..., -0.8562,  0.3550,  1.6260],
          [ 1.3621,  0.3416,  0.5621,  ..., -0.3853,  0.3590,  0.1839],
          ...,
          [-1.6953, -0.3658, -0.4662,  ..., -1.3876,  0.9606,  0.8254],
          [-0.9659,  0.2362, -1.0019,  ...,  0.2137, -0.1787,  1.2155],
          [-1.2061,  0.4642, -0.0056,  ...,  0.9353,  0.5601,  0.2811]],

         [[ 1.0452,  1.4786,  0.2174,  ...,  2.1147,  1.0192,  0.4461],
          [-1.4269, -0.0665, -2.7387,  ...,  1.1347, -0.0437,  1.3815],
          [ 0.6236,  1.3633,  0.2873,  ..., -0.3380, -1.6600, -0.0941],
          ...,
          [ 0.0467,  0.0352,  1.6089,  ...,  1.0353,  1.0233,  0.7447],
          [ 0.2401, -0.0512, -0.9960,  ...,  1.7713, -1.5343, -0.9555],
          [ 0.6974,  0.0999,  0.7184,  ..., -0.8538,  0.5731, -0.6061]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 1.0210e+00, -1.5871e+00,  1.6593e+00,  ..., -3.2436e-01,
           -2.6064e-01, -2.9088e-01],
          [-9.8963e-01, -1.0032e-03, -3.6125e-01,  ...,  2.6763e+00,
           -6.0924e-01,  6.4451e-01],
          [-1.2031e-02,  5.6056e-01, -3.6055e-01,  ..., -1.0964e+00,
           -1.1359e+00, -7.8499e-01],
          ...,
          [-6.9967e-01, -5.7285e-01, -5.1736e-01,  ..., -1.6423e+00,
            1.8228e+00,  4.5398e-01],
          [-6.7132e-03, -2.7972e-01,  6.8228e-01,  ...,  4.1543e-01,
            4.3590e-01, -1.5603e-01],
          [-1.2595e+00,  4.4304e-01,  1.1988e-01,  ..., -1.1521e+00,
           -2.9360e-01,  1.4086e+00]],

         [[-1.3733e+00, -1.2838e-01, -8.6516e-01,  ...,  1.2109e-01,
            8.4298e-01,  5.8547e-01],
          [-6.5776e-01,  1.0810e+00,  1.4660e+00,  ..., -1.6808e+00,
           -1.8710e+00,  1.1953e-01],
          [ 4.8706e-02, -9.8651e-01,  1.4460e+00,  ...,  1.8030e+00,
           -5.3210e-01,  1.0339e+00],
          ...,
          [-8.9761e-01,  1.4381e+00,  5.7600e-01,  ...,  6.4424e-01,
            1.0406e+00, -2.8665e-01],
          [-2.8292e+00, -9.4468e-02,  3.1341e-01,  ..., -2.6514e-01,
           -2.4602e-01, -2.6827e-01],
          [-4.5604e-02,  7.8112e-02, -1.3890e+00,  ...,  5.5662e-01,
           -1.1012e-01, -1.5152e-01]]],


        [[[-1.1749e+00, -2.1142e+00, -7.2920e-01,  ..., -1.7384e+00,
            4.9919e-01,  6.1898e-01],
          [ 1.8247e-01,  6.8990e-02, -6.3791e-01,  ...,  1.2208e-01,
            1.1438e+00, -9.6033e-01],
          [-9.0390e-01, -1.6110e+00,  6.2052e-01,  ...,  1.4483e+00,
           -2.1620e+00,  1.2436e+00],
          ...,
          [ 1.3010e-01,  8.5997e-01,  6.8373e-01,  ..., -6.6115e-01,
           -1.0687e+00, -1.7273e+00],
          [ 1.0960e+00,  1.6970e-01,  1.3913e+00,  ..., -9.4098e-01,
            8.8641e-01, -7.0808e-01],
          [ 9.9557e-01, -9.8666e-01, -7.4563e-02,  ..., -6.3529e-01,
            1.9940e-01, -1.3086e+00]],

         [[-6.5002e-01,  9.5514e-01, -5.2691e-01,  ..., -8.8901e-01,
            4.9119e-01, -1.3638e+00],
          [ 3.5128e-01,  1.6181e+00, -6.8970e-01,  ..., -1.2803e+00,
           -6.1820e-01,  6.2884e-01],
          [ 1.1777e+00,  8.5542e-01,  1.8402e+00,  ...,  1.1712e+00,
           -2.8916e-01,  3.0655e-01],
          ...,
          [ 1.0638e+00, -6.0869e-01, -3.2531e-01,  ...,  3.0594e-01,
           -1.6774e+00, -4.1948e-01],
          [-1.4501e+00,  1.3578e+00, -8.0763e-01,  ...,  3.6812e-01,
           -5.6877e-01,  2.4232e-01],
          [-4.9094e-01,  3.5967e-01,  1.1096e+00,  ...,  1.2598e+00,
           -1.5545e+00,  2.7152e-01]]],


        [[[-9.8811e-01, -3.5794e-01,  3.6661e-01,  ..., -9.9614e-02,
           -1.2572e+00,  2.2874e-01],
          [ 2.4486e-01, -5.0260e-01,  1.2295e+00,  ..., -9.5595e-03,
            3.3372e+00, -4.3932e-01],
          [ 1.7867e+00, -1.2139e+00,  1.5427e+00,  ..., -7.1682e-01,
           -1.8001e+00, -2.6425e-01],
          ...,
          [ 2.1636e-01,  2.9727e-01, -6.6056e-01,  ...,  2.7109e-01,
           -7.0064e-02,  1.3530e+00],
          [-5.1218e-01, -8.0128e-01, -1.6846e+00,  ...,  7.2543e-01,
           -9.3048e-01,  1.1414e+00],
          [ 3.7981e-01,  7.0330e-01, -2.1128e-01,  ..., -5.4563e-01,
           -1.1394e-01, -6.1851e-02]],

         [[-1.8177e-01,  4.5835e-01, -2.4073e-01,  ...,  1.4702e+00,
           -2.9034e-01, -6.2356e-01],
          [-5.8528e-01, -2.6414e-01, -8.2602e-01,  ..., -1.5216e-02,
           -2.6475e-01,  7.6484e-02],
          [ 1.5288e-01,  5.3579e-02, -3.8795e-01,  ..., -7.1811e-01,
            1.4934e+00,  9.6750e-01],
          ...,
          [ 6.0877e-01,  8.7592e-02, -1.6594e-01,  ..., -8.1545e-01,
           -8.2265e-01, -1.5053e+00],
          [ 5.8686e-01, -1.5667e+00,  5.1930e-02,  ..., -3.4682e-02,
            1.1929e+00,  7.7875e-01],
          [ 6.5467e-01,  4.0907e-01, -1.2752e+00,  ..., -1.3608e+00,
           -2.6119e-01, -4.6164e-01]]],


        [[[ 2.9789e-01, -6.4291e-01, -4.1624e-01,  ...,  4.2853e-02,
            1.2796e+00, -4.7944e-01],
          [-1.0550e+00, -1.8275e+00,  2.1851e-01,  ...,  9.1194e-01,
            1.6460e-01, -1.5644e+00],
          [-9.0595e-02, -1.5965e+00,  7.3203e-01,  ..., -6.8423e-01,
           -4.5448e-01, -9.8845e-01],
          ...,
          [ 1.6779e+00, -3.0149e-01, -6.3321e-01,  ..., -1.1887e+00,
            6.9470e-01, -6.4874e-01],
          [ 7.2595e-02,  6.1070e-01, -1.5620e+00,  ...,  1.0695e+00,
            6.1922e-01, -1.5085e-01],
          [ 6.3754e-01, -1.2364e+00, -5.5095e-01,  ...,  6.9481e-01,
            2.2233e+00,  2.8182e+00]],

         [[ 4.2305e-01, -7.5075e-01, -6.2348e-03,  ...,  9.7879e-01,
            2.9263e-01,  7.7587e-01],
          [-2.3530e+00,  2.9420e-01,  3.9218e-01,  ..., -1.0157e+00,
           -3.2450e-01, -8.5787e-01],
          [ 8.3164e-01, -1.6152e-01,  1.7369e+00,  ..., -6.4423e-01,
            1.6304e-01,  7.2806e-01],
          ...,
          [-3.9385e-01, -9.1946e-01,  6.1974e-01,  ...,  9.1214e-01,
           -1.6541e+00,  8.6201e-02],
          [-1.8624e+00,  7.0763e-01, -1.3137e+00,  ...,  9.3662e-01,
           -1.4598e+00, -7.1935e-01],
          [-6.5400e-01,  3.0280e-01, -1.4270e-01,  ..., -6.7434e-01,
           -1.0471e+00, -1.1658e-02]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
