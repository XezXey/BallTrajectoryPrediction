==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.41it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.88it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.80it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 781, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 781, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 771, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 771, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 771, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 694, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 694, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 695, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 708, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 751, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 751, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 751, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 744, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 744, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 744, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 729, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 729, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 767, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 767, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 767, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 703, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 703, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 703, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 797, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 797, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 813, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 813, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 813, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 767, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 767, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 767, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 743, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 743, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 744, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........IDX = 0 :  tensor([[[-0.3187, -1.1956,  0.8767,  ...,  0.6942, -0.4515, -1.7324],
         [ 0.0470,  0.0426, -0.0482,  ..., -1.5336,  0.5029, -0.3908],
         [-0.4662, -1.2129, -0.4280,  ...,  2.0931,  1.4561, -0.8515],
         ...,
         [-0.5494,  0.3824, -0.8394,  ...,  0.0245,  0.2461,  0.1830],
         [ 0.2407, -0.2894,  0.0723,  ..., -0.4973,  0.2383, -0.8214],
         [-0.1204,  0.5033, -0.4186,  ..., -0.0720, -1.3560,  2.0334]],

        [[-0.6558, -0.1644,  0.4017,  ...,  0.4841, -0.9120,  3.3629],
         [ 0.7542, -0.2443,  0.4162,  ...,  1.2244,  0.3531,  0.1405],
         [ 0.7246,  0.0069,  0.5877,  ...,  0.3762,  0.4104, -1.0194],
         ...,
         [-1.0395,  1.3534,  0.5104,  ..., -0.2329,  1.1783,  1.3907],
         [ 1.3488, -0.4823,  1.4795,  ...,  1.4959,  0.4187, -0.5917],
         [ 1.0168, -0.4053,  0.4180,  ...,  0.4494,  0.1181, -0.1400]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.4152, -0.3246,  0.2403,  ..., -0.2689, -1.2746,  0.9576],
         [-0.1496,  0.7873, -2.0599,  ...,  0.2980, -0.4958,  0.4050],
         [-1.4126, -0.3302, -0.1067,  ..., -0.4720,  0.2399, -0.0530],
         ...,
         [-0.9683, -2.1367,  1.0378,  ..., -0.2602,  1.0267, -1.0127],
         [ 0.7678,  0.3921,  0.6531,  ...,  0.9679,  0.1123, -0.5716],
         [ 0.9984, -0.1304,  0.1531,  ...,  1.1259, -0.9865,  0.1253]],

        [[-1.1025,  1.2918,  0.7454,  ...,  1.1310, -0.5434,  1.0744],
         [-0.3927, -0.8489, -0.0650,  ...,  2.2334, -1.7979,  0.6124],
         [-0.3241,  0.0714, -0.1603,  ..., -1.1063,  0.0738, -1.5795],
         ...,
         [ 0.1734,  0.5304,  1.7408,  ..., -0.0462,  1.6836, -0.6959],
         [ 0.6395,  0.9292,  0.3725,  ..., -0.5173,  0.8639, -0.3705],
         [ 1.6298,  0.2689,  0.1064,  ...,  1.3560,  0.3939, -1.3731]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[-0.3285, -1.2047,  0.8677,  ...,  0.6847, -0.4605, -1.7226],
          [ 0.0371,  0.0330, -0.0580,  ..., -1.5434,  0.4934, -0.3810],
          [-0.4760, -1.2227, -0.4378,  ...,  2.1026,  1.4463, -0.8420],
          ...,
          [-0.5590,  0.3727, -0.8486,  ...,  0.0147,  0.2364,  0.1927],
          [ 0.2310, -0.2987,  0.0624,  ..., -0.4878,  0.2286, -0.8116],
          [-0.1302,  0.5126, -0.4285,  ..., -0.0818, -1.3465,  2.0432]],

         [[-0.6458, -0.1744,  0.3917,  ...,  0.4741, -0.9220,  3.3529],
          [ 0.7443, -0.2543,  0.4062,  ...,  1.2344,  0.3431,  0.1305],
          [ 0.7346,  0.0169,  0.5777,  ...,  0.3862,  0.4004, -1.0294],
          ...,
          [-1.0295,  1.3634,  0.5204,  ..., -0.2231,  1.1683,  1.3807],
          [ 1.3388, -0.4923,  1.4895,  ...,  1.4859,  0.4087, -0.6017],
          [ 1.0268, -0.4153,  0.4280,  ...,  0.4594,  0.1081, -0.1300]]],


        [[[-1.0999, -0.8964, -0.4294,  ..., -1.9635,  0.4970, -0.0854],
          [-0.0385,  0.8708, -1.3153,  ..., -1.3909,  1.5453, -1.9699],
          [-0.5950, -2.0156,  2.0882,  ...,  0.7812,  1.0846,  0.7897],
          ...,
          [ 0.8720,  0.8303,  0.9254,  ...,  0.1883,  0.0458, -0.2512],
          [-1.1974,  1.5655, -0.1879,  ..., -0.8725, -0.3083,  0.4031],
          [ 0.8818, -0.5478,  0.7518,  ...,  1.0820,  2.0731,  0.2081]],

         [[-0.1226,  0.9747,  0.4562,  ..., -0.0407, -1.0944, -1.3658],
          [-1.8641,  2.0220,  1.0467,  ...,  1.0051,  0.3058, -0.5172],
          [ 0.2528, -0.8565, -0.5825,  ..., -0.9978,  1.0449, -0.8943],
          ...,
          [-1.1716,  0.4401, -1.7246,  ...,  0.4079, -0.4322, -0.9263],
          [-1.2725, -2.5755, -1.4626,  ...,  0.9199, -0.5165,  2.4705],
          [-1.1782,  0.1398, -0.3386,  ..., -1.6795,  1.4615,  0.4240]]],


        [[[ 1.1056,  1.2075, -0.3889,  ...,  0.0260, -0.5736,  0.6081],
          [ 2.2007, -0.0968, -1.1369,  ...,  1.9641,  1.3544,  1.0919],
          [ 0.2622,  0.2719, -1.2171,  ..., -2.0609,  1.9810, -0.1281],
          ...,
          [ 1.6261, -0.0330, -0.0547,  ..., -0.2824, -0.0478, -0.1400],
          [ 1.0335, -0.5476,  0.2088,  ..., -1.7535, -1.6269, -1.1991],
          [ 0.3998,  0.1008,  1.3508,  ..., -0.5625,  0.8392, -0.8132]],

         [[ 0.8666, -0.3947, -2.1850,  ...,  0.4526,  0.5183, -1.3679],
          [-2.1760, -0.5493, -1.0533,  ..., -0.3594,  0.4735, -1.7973],
          [-1.2280,  1.9214,  3.0031,  ..., -0.2232,  0.7318, -1.2060],
          ...,
          [-0.1465, -1.5717, -1.1409,  ..., -0.3634,  1.0163, -0.0680],
          [-2.4900, -0.6924,  0.4251,  ...,  0.2205,  0.0427, -0.2615],
          [ 1.8811, -0.4182,  2.6879,  ...,  1.0486,  0.0457, -0.8543]]],


        [[[-0.1075, -0.6390, -1.0196,  ..., -0.5866, -0.2228, -0.7751],
          [-1.0711,  1.1717, -0.1640,  ...,  0.8561, -0.3006,  0.9268],
          [-1.1307,  2.0194, -0.5289,  ..., -0.9507,  1.9928, -0.2797],
          ...,
          [ 0.6580, -0.8137,  0.1204,  ...,  0.1605, -1.0386, -1.1361],
          [-0.0502, -1.3848,  0.0792,  ...,  1.7490, -0.8012, -0.1457],
          [-0.1638,  1.1857,  1.4926,  ..., -1.4856,  0.1253, -0.9365]],

         [[ 0.5196, -1.0963,  1.1079,  ...,  1.6163, -0.2388, -0.2589],
          [-0.7013, -0.4964, -0.3934,  ..., -1.7765,  0.2171,  1.0278],
          [ 1.2628,  1.2087,  0.3783,  ..., -1.1142, -0.7754,  0.0041],
          ...,
          [-0.7395, -2.3354,  0.1881,  ..., -1.2361, -0.3285, -0.6464],
          [ 0.1310,  1.6617, -0.0284,  ..., -1.2094, -2.2857, -0.9018],
          [-0.7778, -1.3775, -0.3963,  ...,  1.5309,  1.5522,  0.2579]]]],
       device='cuda:0')
c tensor([[[[ 0.5867, -0.4161, -0.8789,  ...,  1.2637, -0.8327, -0.0383],
          [-0.4990,  1.2264, -1.6642,  ..., -0.4891, -1.7791, -0.4155],
          [-0.2354, -1.3869, -0.3433,  ..., -1.4917, -0.9787,  0.3100],
          ...,
          [-0.5066, -0.6971,  0.2889,  ..., -0.2898, -0.3092, -0.7268],
          [ 0.5418,  1.3915,  1.0494,  ..., -0.5093,  0.5129, -1.0262],
          [ 0.5908,  2.9659,  0.3064,  ...,  0.2238,  1.4338,  0.4252]],

         [[ 0.6090,  0.4280, -0.3652,  ..., -1.4023,  1.3311,  1.3893],
          [-0.0612, -0.3216,  0.5228,  ...,  0.2113,  2.1437,  1.0700],
          [ 0.5457, -0.6219, -0.3487,  ..., -1.2148,  0.5141,  0.6820],
          ...,
          [-1.7545, -0.6178,  0.8283,  ..., -0.6330, -1.3925,  2.2788],
          [ 0.2399, -1.0484, -0.7241,  ..., -0.6333,  1.2672,  0.8769],
          [-1.7303,  0.7487, -0.2017,  ..., -0.8681, -0.7996,  1.1462]]],


        [[[-0.5325,  0.7452, -1.0005,  ..., -0.0506,  0.0605,  0.4082],
          [-1.6119,  0.3041, -1.8106,  ..., -1.3944, -1.0057, -1.3571],
          [-0.5751, -0.7989, -0.4849,  ..., -0.4849,  1.6275,  0.2961],
          ...,
          [ 1.3550,  1.2925,  1.4429,  ...,  0.6676,  0.1023,  1.4157],
          [ 2.5752, -0.0245,  0.1130,  ...,  0.2343,  0.7688, -0.4848],
          [ 0.7197,  0.7127, -0.7943,  ...,  0.8931,  0.2614, -0.4460]],

         [[ 0.8423, -1.8945,  0.5886,  ..., -1.0113, -0.0652,  0.1145],
          [ 0.8560, -0.7628, -0.5508,  ...,  0.4524, -0.2602,  0.2986],
          [ 0.3838, -0.6852,  0.4434,  ..., -0.8990,  0.0279, -0.4842],
          ...,
          [-0.1231,  0.8625, -0.4024,  ...,  0.5705,  0.5088,  0.1625],
          [-1.6228, -0.3061, -0.3074,  ...,  0.7994, -0.8757,  0.2537],
          [ 0.9845, -1.2672, -2.5857,  ...,  1.7033,  0.7804, -0.6048]]],


        [[[-0.3621,  0.7609, -0.5609,  ...,  1.2933, -0.1207,  1.1622],
          [ 0.3072,  0.3912, -0.6584,  ..., -0.1002,  0.3716, -1.9818],
          [ 1.0935,  1.6396,  1.3673,  ...,  0.9360,  0.0765, -0.0577],
          ...,
          [ 1.5155, -0.1296,  0.1337,  ...,  1.0566, -0.0851, -0.4193],
          [ 1.1820, -0.3014, -0.5849,  ...,  0.5726, -0.1765,  0.4046],
          [ 1.5972, -2.3449,  0.2491,  ..., -0.2630, -0.2301, -1.0926]],

         [[-0.4698,  0.3243, -0.4980,  ..., -0.4524, -0.2946, -0.4837],
          [-0.2593, -1.7150, -1.2402,  ...,  0.7359,  1.6238, -0.4337],
          [-1.2488,  0.2335, -0.1320,  ..., -0.3508,  0.2752,  0.5869],
          ...,
          [-0.8517,  1.0164,  0.6757,  ...,  0.5971, -1.0566,  0.1456],
          [ 0.4206, -0.5922,  0.0079,  ...,  0.8080, -0.0714,  0.2545],
          [-0.1763, -1.3444,  0.6099,  ..., -0.6329,  1.7308,  0.5062]]],


        [[[-0.5481,  0.1678,  0.9962,  ...,  0.8524,  0.3085, -0.8506],
          [-0.9346,  0.1849,  0.4540,  ...,  0.3160,  1.0823, -1.9698],
          [ 0.8177, -3.0775, -0.7231,  ..., -1.5766, -1.5795,  0.0700],
          ...,
          [ 1.2319, -1.6560, -0.3943,  ...,  1.9615, -1.0832,  1.5032],
          [ 0.0989,  0.4156, -1.7742,  ..., -0.7057,  1.0069,  0.4184],
          [-0.1598, -2.6459, -0.9034,  ...,  1.8645,  0.4468,  0.9493]],

         [[-1.3981, -0.2905, -0.5847,  ..., -0.2667, -1.4239,  0.5375],
          [ 1.3532, -0.7851,  0.6621,  ...,  0.3348,  0.6325, -1.2540],
          [ 0.3212,  0.5936,  0.0340,  ...,  0.8448,  0.5287,  1.2884],
          ...,
          [-0.7407,  0.3450,  0.4411,  ...,  0.0732, -0.0274,  0.8150],
          [-0.9157,  2.3522, -0.0776,  ...,  0.2009,  0.6759,  0.8763],
          [ 0.6367, -0.6015, -0.7742,  ..., -0.8646,  0.8064,  0.9697]]]],
       device='cuda:0')
recurrent_blocks.0.weight_ih_l0 tensor([[ 2.1964e-02, -1.2431e-01],
        [ 2.1858e-02,  9.0557e-02],
        [ 1.8077e-01, -7.0825e-02],
        [-1.5873e-01, -8.9876e-02],
        [ 1.5421e-01,  1.5552e-01],
        [-1.3723e-01, -3.2509e-02],
        [ 1.6788e-02,  6.6898e-02],
        [ 5.1509e-03,  1.3857e-01],
        [ 8.2561e-02, -9.6832e-02],
        [ 1.1606e-01,  1.0892e-01],
        [-1.5124e-01,  5.8384e-03],
        [-1.5493e-01, -1.4201e-01],
        [-1.9122e-02, -3.7622e-02],
        [ 1.1519e-01,  1.3532e-01],
        [ 1.5255e-02,  1.6817e-02],
        [ 1.2335e-01, -4.6116e-02],
        [-1.0715e-01, -7.7475e-02],
        [-1.5007e-01, -6.0188e-02],
        [ 7.4798e-02, -6.4150e-03],
        [-5.6323e-02, -1.0277e-01],
        [ 8.0240e-02,  1.8063e-01],
        [ 2.7424e-02,  5.7053e-02],
        [ 5.6353e-03,  3.5909e-02],
        [-4.3283e-02, -1.5121e-02],
        [ 9.9838e-02, -1.4952e-01],
        [ 1.5611e-01, -1.5905e-01],
        [-1.3061e-01, -1.3587e-01],
        [-1.3220e-01, -1.1625e-01],
        [ 7.3339e-02,  1.7557e-01],
        [ 1.3577e-01, -4.0156e-02],
        [ 4.7875e-02,  1.8516e-01],
        [-7.4413e-02,  6.9832e-02],
        [ 1.7472e-01,  5.4301e-02],
        [ 5.2257e-02,  4.4955e-02],
        [-9.8959e-02, -1.4564e-01],
        [-1.7950e-01, -1.8244e-01],
        [ 1.7085e-04, -1.8475e-01],
        [-1.1766e-01,  1.0176e-01],
        [-1.0161e-01,  3.8892e-02],
        [ 3.7239e-02, -1.2638e-01],
        [-8.4642e-02, -1.1230e-01],
        [ 5.6642e-02, -1.0016e-02],
        [-1.6096e-01, -4.7520e-02],
        [ 1.0963e-01, -1.4443e-01],
        [ 1.4793e-01, -1.5223e-01],
        [ 1.0442e-01,  9.2466e-02],
        [ 9.3315e-02, -1.5998e-01],
        [ 1.2841e-01,  1.8941e-03],
        [-4.8936e-02, -1.4892e-01],
        [-3.3688e-02, -4.9585e-02],
        [ 1.3894e-02, -3.2796e-02],
        [-7.9751e-02, -4.3198e-02],
        [ 3.8389e-02, -1.2101e-01],
        [-1.3691e-01,  1.1244e-01],
        [ 7.4575e-02, -1.5014e-01],
        [ 1.2946e-01, -1.0322e-01],
        [-8.7884e-02,  8.6615e-02],
        [-1.4427e-01,  4.6197e-02],
        [-3.4045e-02, -7.2021e-02],
        [-1.6603e-01,  9.7440e-02],
        [-9.3710e-02, -1.5801e-01],
        [ 7.8871e-02, -6.3694e-02],
        [-3.2339e-02, -1.0099e-01],
        [-4.6601e-02, -9.3989e-02],
        [-1.7355e-01,  5.9272e-02],
        [-1.1662e-01,  1.0052e-01],
        [ 7.0898e-02, -4.8073e-02],
        [-1.5204e-01, -3.6533e-02],
        [ 8.8483e-02,  1.1858e-01],
        [ 1.2018e-01, -1.8375e-02],
        [ 1.4866e-01, -1.0614e-01],
        [ 5.4364e-02,  1.8573e-01],
        [-1.5455e-01, -1.5375e-01],
        [ 1.1235e-01,  1.4750e-01],
        [-1.5986e-03,  1.0894e-01],
        [ 1.4982e-01, -4.4074e-02],
        [ 1.4016e-01, -1.2958e-01],
        [-6.4929e-02,  1.3076e-01],
        [-8.7691e-02,  5.8883e-02],
        [-7.6640e-02, -4.9133e-02],
        [-6.5945e-02, -6.9761e-02],
        [ 1.3171e-01, -1.7199e-01],
        [ 7.1900e-02, -2.8619e-02],
        [ 4.5024e-02, -1.1536e-01],
        [ 1.0355e-01, -1.2339e-01],
        [ 3.3557e-02, -1.0657e-01],
        [-8.0538e-02, -8.2890e-02],
        [-1.8748e-02, -1.7882e-01],
        [-1.4295e-01, -1.5873e-01],
        [-8.5352e-02, -1.6206e-01],
        [ 9.5976e-02,  6.1872e-02],
        [ 1.2644e-02,  1.9421e-02],
        [-7.9290e-02,  8.4627e-02],
        [-1.8446e-02, -8.5032e-02],
        [ 1.3311e-01, -1.1959e-01],
        [-1.0721e-01,  6.1931e-02],
        [-7.5293e-02,  5.2418e-02],
        [-6.2665e-02,  1.4746e-01],
        [ 1.4983e-01, -1.4990e-02],
        [-6.5463e-02, -1.4743e-01],
        [-1.3136e-01, -1.6801e-01],
        [-6.4539e-02, -8.8305e-02],
        [-8.5922e-02, -6.5705e-02],
        [ 2.8523e-02, -3.9058e-02],
        [-3.4229e-02, -3.3111e-02],
        [-5.4149e-02, -8.5028e-02],
        [ 7.1126e-02, -1.2166e-01],
        [ 8.2036e-02,  2.7221e-02],
        [-1.7389e-01,  1.0486e-01],
        [-1.3060e-01, -8.8974e-02],
        [-1.2774e-01, -4.2522e-03],
        [ 1.3378e-01, -1.1376e-01],
        [-6.8112e-02, -4.5749e-02],
        [ 1.2174e-01,  8.0163e-02],
        [-1.3507e-01, -2.0507e-02],
        [-1.0735e-01,  9.6613e-02],
        [ 8.6024e-02, -1.3822e-01],
        [ 7.3447e-02, -4.6189e-02],
        [ 2.0849e-02,  6.0684e-02],
        [-1.6560e-01, -6.9128e-02],
        [ 1.0571e-01,  1.5299e-01],
        [-3.0262e-02,  1.2640e-01],
        [ 3.5075e-02, -1.5506e-01],
        [ 9.3983e-02, -6.7409e-02],
        [-6.6041e-02,  6.3976e-02],
        [-3.3917e-02,  1.1394e-01],
        [-3.2912e-02,  1.2848e-01],
        [ 9.9589e-02, -1.3281e-01]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0 tensor([[-0.0549, -0.1617, -0.0857,  ..., -0.1243, -0.1427, -0.0748],
        [-0.1037,  0.1250,  0.1353,  ...,  0.0179, -0.1187, -0.1665],
        [ 0.0594, -0.1165,  0.1391,  ..., -0.1202, -0.0474,  0.0730],
        ...,
        [ 0.0787,  0.0240,  0.1434,  ..., -0.1492,  0.0985,  0.1474],
        [-0.0028,  0.0610, -0.0811,  ...,  0.0190, -0.0245,  0.1294],
        [-0.0332, -0.1097, -0.0397,  ..., -0.0535, -0.0096, -0.1490]],
       device='cuda:0')
recurrent_blocks.0.bias_ih_l0 tensor([-0.1292,  0.0090,  0.0670, -0.0763,  0.0772,  0.1690, -0.1084,  0.1268,
        -0.0656, -0.0167, -0.0296,  0.0853, -0.1393, -0.0612,  0.1290, -0.0431,
         0.1466,  0.0754,  0.1052, -0.0194,  0.0475, -0.1355, -0.0776, -0.0168,
        -0.0497, -0.0588,  0.0096, -0.0906,  0.0470,  0.0525, -0.0233,  0.1140,
        -0.1205, -0.1333, -0.0665, -0.0307, -0.1656, -0.1368, -0.0829, -0.1659,
        -0.0012,  0.0454,  0.0187, -0.0732,  0.0238,  0.0866, -0.0830, -0.0461,
        -0.1153, -0.1376, -0.0595, -0.1419,  0.0169, -0.0366,  0.1012,  0.0403,
         0.1202,  0.0083,  0.1070, -0.0071,  0.0065,  0.0175,  0.1594,  0.0445,
        -0.0162,  0.0403,  0.0849, -0.1185, -0.1032,  0.0925,  0.1596,  0.0146,
        -0.1620,  0.1410, -0.0612,  0.1781,  0.0115, -0.0901,  0.0437, -0.1769,
         0.0577,  0.0177,  0.0636,  0.0841, -0.0409,  0.1635, -0.0471, -0.0943,
        -0.0278,  0.1628,  0.1564,  0.1282, -0.0188,  0.0914,  0.1066,  0.1216,
        -0.1263,  0.0262, -0.1727, -0.1319,  0.0422,  0.0850, -0.1267,  0.1284,
        -0.1265,  0.1651,  0.1724,  0.0282, -0.1414, -0.0852, -0.0765,  0.0790,
        -0.0951, -0.0373, -0.1303,  0.1415, -0.0068,  0.1440, -0.0523, -0.0579,
        -0.0780,  0.0308,  0.0357, -0.1173, -0.0695, -0.1734, -0.1465, -0.1590],
       device='cuda:0')
recurrent_blocks.0.bias_hh_l0 tensor([ 0.1226, -0.1690, -0.0097,  0.1248, -0.1530, -0.1647, -0.1346,  0.0054,
        -0.0191,  0.0430, -0.1126,  0.1830, -0.1069,  0.0406, -0.0117,  0.0479,
         0.1671,  0.0420, -0.1394,  0.1664,  0.0833, -0.0810,  0.1127,  0.0580,
         0.0673,  0.1233,  0.1092,  0.0611,  0.0075, -0.1381,  0.0988,  0.1377,
        -0.1107,  0.1643, -0.0880,  0.0681,  0.0226,  0.1532, -0.0524, -0.0492,
         0.0387, -0.1290,  0.0400,  0.0540, -0.1361, -0.0248, -0.0608,  0.0644,
        -0.0989, -0.0076,  0.1525,  0.1614, -0.0879,  0.1067, -0.0406, -0.0253,
        -0.0372, -0.1823, -0.0461,  0.0388, -0.0513,  0.0026, -0.1207,  0.0088,
         0.0146, -0.1174, -0.0562, -0.1258, -0.0585, -0.1371, -0.0987,  0.1088,
         0.1024, -0.1071, -0.1474,  0.1373,  0.0618,  0.1571,  0.0267,  0.0963,
        -0.0876,  0.0060,  0.0501,  0.0005, -0.1069,  0.0214, -0.1763, -0.1333,
         0.1638,  0.0380,  0.0635,  0.0134, -0.0788,  0.1416,  0.0512,  0.0233,
         0.1096,  0.1484, -0.0097,  0.1329,  0.0522,  0.0202,  0.0610,  0.0081,
         0.0730, -0.0521,  0.1548, -0.0970,  0.1167, -0.1483,  0.1439,  0.0426,
        -0.1136, -0.0264, -0.1450, -0.1542, -0.0190, -0.0896, -0.0675,  0.0101,
         0.0714,  0.0769, -0.1503, -0.0377,  0.0488, -0.0799, -0.1284,  0.0941],
       device='cuda:0')
recurrent_blocks.0.weight_ih_l0_reverse tensor([[ 0.0292,  0.0564],
        [-0.0160,  0.0742],
        [-0.0874,  0.0566],
        [ 0.1479, -0.1091],
        [ 0.1076,  0.0065],
        [-0.0423, -0.1480],
        [ 0.0077,  0.1189],
        [-0.0588,  0.0894],
        [ 0.0830,  0.1584],
        [ 0.1424, -0.1435],
        [-0.1023,  0.1847],
        [ 0.1143, -0.0486],
        [-0.0963,  0.1097],
        [-0.0926,  0.1068],
        [-0.0546, -0.1235],
        [-0.0489,  0.0578],
        [-0.0591, -0.0928],
        [ 0.1847,  0.1107],
        [ 0.0112, -0.0947],
        [ 0.1303,  0.1541],
        [-0.0270, -0.0003],
        [ 0.1179, -0.0322],
        [-0.0688, -0.0758],
        [-0.0723,  0.1639],
        [ 0.1390, -0.0814],
        [-0.0592,  0.0472],
        [ 0.0827,  0.0037],
        [ 0.1481,  0.1535],
        [ 0.1505, -0.0755],
        [ 0.1718,  0.0241],
        [-0.0180, -0.1419],
        [ 0.1491, -0.1339],
        [ 0.1195, -0.0405],
        [-0.0441, -0.0050],
        [-0.0255,  0.1371],
        [ 0.0611,  0.1178],
        [-0.0771,  0.0300],
        [-0.1390,  0.0504],
        [ 0.0897,  0.1268],
        [-0.0262, -0.0657],
        [ 0.1620,  0.0604],
        [ 0.0274,  0.0683],
        [ 0.1827, -0.0964],
        [ 0.0070,  0.0304],
        [ 0.0892,  0.0200],
        [ 0.0645,  0.0781],
        [ 0.0071, -0.1365],
        [ 0.0703, -0.0565],
        [ 0.0287,  0.0028],
        [-0.0434,  0.0591],
        [-0.1557, -0.0668],
        [-0.0118, -0.1362],
        [-0.1064, -0.0113],
        [-0.1348,  0.1798],
        [-0.1449, -0.0257],
        [ 0.0129, -0.0487],
        [ 0.1087,  0.0350],
        [ 0.1510, -0.0279],
        [-0.0798, -0.1129],
        [-0.1158,  0.0260],
        [-0.0451,  0.0099],
        [ 0.0013,  0.0306],
        [-0.0243,  0.0213],
        [ 0.1575, -0.0574],
        [-0.0333, -0.1337],
        [-0.0196, -0.1465],
        [ 0.0098,  0.1418],
        [ 0.0324,  0.0768],
        [-0.1190,  0.0619],
        [-0.1419,  0.1263],
        [ 0.1308,  0.1188],
        [-0.1280, -0.1457],
        [ 0.1161, -0.1153],
        [-0.1265,  0.1030],
        [-0.0687,  0.1393],
        [-0.0958,  0.1765],
        [ 0.1097,  0.1805],
        [ 0.1729, -0.0202],
        [ 0.1451, -0.1595],
        [ 0.0627, -0.0698],
        [ 0.0710, -0.0120],
        [-0.0802,  0.1488],
        [ 0.1217, -0.1142],
        [-0.1286,  0.1250],
        [-0.0156, -0.1260],
        [ 0.0343, -0.1396],
        [ 0.0272, -0.0230],
        [-0.0294,  0.0173],
        [ 0.0875,  0.0629],
        [ 0.0558, -0.1364],
        [-0.1270,  0.0782],
        [-0.0297, -0.1640],
        [-0.0637, -0.1388],
        [ 0.0855,  0.0928],
        [ 0.1334, -0.0421],
        [-0.0785,  0.1786],
        [ 0.0158,  0.0563],
        [ 0.1193, -0.1190],
        [-0.0399, -0.0895],
        [-0.1269,  0.1648],
        [-0.1349,  0.0903],
        [ 0.0044, -0.0681],
        [ 0.0339, -0.1849],
        [ 0.1398, -0.1237],
        [-0.1511,  0.0093],
        [-0.0570, -0.1347],
        [-0.0715, -0.1124],
        [-0.0540, -0.0062],
        [-0.0368,  0.1577],
        [-0.0920,  0.0112],
        [ 0.1272, -0.0147],
        [ 0.1439, -0.1730],
        [ 0.0327,  0.1027],
        [-0.1619,  0.0050],
        [ 0.0532, -0.0834],
        [-0.1817,  0.0252],
        [ 0.0877, -0.1412],
        [ 0.1085,  0.1127],
        [ 0.1564,  0.1645],
        [ 0.0338,  0.1073],
        [ 0.1719, -0.1649],
        [-0.0113, -0.1275],
        [ 0.0803,  0.1543],
        [ 0.0508,  0.1266],
        [-0.1165,  0.1725],
        [ 0.0423,  0.1087],
        [-0.0245,  0.1522],
        [ 0.0768, -0.0552]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.0650,  0.0644,  0.0271,  ...,  0.1264, -0.0098,  0.0977],
        [-0.1652,  0.0921,  0.1041,  ...,  0.1040,  0.1660,  0.1328],
        [ 0.1176,  0.0174,  0.1101,  ...,  0.1393,  0.0918,  0.0932],
        ...,
        [-0.0677,  0.1639, -0.0196,  ..., -0.0212, -0.0211, -0.1630],
        [-0.1176, -0.0344, -0.0321,  ..., -0.1825,  0.1269,  0.0485],
        [-0.1250, -0.1564, -0.0757,  ...,  0.0050, -0.0102,  0.0985]],
       device='cuda:0')
recurrent_blocks.0.bias_ih_l0_reverse tensor([-3.9383e-02, -1.3775e-01,  1.7337e-02, -1.4256e-01,  3.9313e-02,
         7.7328e-02,  1.6158e-01, -3.1797e-02,  1.3053e-01, -1.3008e-01,
        -5.1716e-02, -1.5354e-01, -1.0991e-01,  1.0028e-01, -9.0426e-02,
        -1.2757e-01, -1.3828e-02, -5.4680e-02,  3.4208e-02,  1.4496e-01,
         1.3078e-01, -4.1520e-02, -1.1117e-02,  1.5120e-01, -1.5231e-01,
        -1.6915e-02, -9.6236e-02,  6.5367e-02, -2.7417e-02, -1.2933e-01,
        -7.2384e-02,  1.6242e-02, -1.2371e-01,  5.6046e-02, -4.8251e-02,
         2.0329e-02,  1.0328e-01, -8.7111e-02, -1.4196e-01,  1.3015e-01,
        -1.2149e-01, -1.4326e-01,  1.3532e-01,  6.5539e-02,  1.6147e-01,
        -4.7664e-02,  6.7425e-02,  8.7712e-02,  6.4146e-03,  5.2044e-02,
         1.3655e-01,  1.8968e-02, -7.4859e-02, -7.3658e-02, -1.7230e-01,
         2.6333e-02, -1.5146e-01,  9.8870e-02, -3.4946e-02, -4.8334e-02,
         3.9962e-02, -1.2907e-01,  8.3411e-02, -1.0880e-01,  1.2373e-02,
        -5.2599e-02, -1.2598e-01,  1.1587e-01,  8.3291e-02,  1.1604e-01,
        -1.5227e-01,  1.0455e-01, -8.1785e-03, -5.6794e-02, -1.4379e-02,
        -1.8411e-01,  6.1763e-02, -8.3587e-02, -3.6954e-03,  1.6309e-01,
         8.9515e-02,  1.1268e-01, -8.9211e-02,  9.3477e-02,  1.2065e-01,
        -1.2910e-01,  1.2693e-01, -1.1001e-01,  6.9506e-02,  4.9165e-02,
        -6.9091e-02,  2.9994e-02, -3.9874e-02, -1.3544e-01, -1.6029e-01,
        -6.6982e-02,  6.6078e-02,  1.0532e-01,  9.4478e-03,  7.8938e-02,
        -7.4558e-05, -1.5136e-01,  1.3996e-01, -1.0129e-01, -1.3313e-01,
         9.9441e-02,  1.4482e-01, -2.6015e-02, -1.5086e-01,  1.7940e-02,
        -3.1433e-02,  3.0750e-02,  2.1835e-02, -1.3232e-01, -1.0478e-02,
        -1.6346e-01, -1.6501e-01,  8.9537e-02,  8.1677e-02,  2.4755e-02,
        -7.3316e-02,  6.4650e-02, -9.8831e-03, -1.0800e-01,  1.2201e-01,
        -3.9398e-02,  5.3419e-02,  1.4423e-01], device='cuda:0')
recurrent_blocks.0.bias_hh_l0_reverse tensor([-0.0795, -0.0383, -0.1650,  0.1610, -0.0112,  0.1622, -0.1527, -0.1072,
         0.1449,  0.1248,  0.0025,  0.1242,  0.0267,  0.0847,  0.0466,  0.0400,
        -0.1670, -0.0031, -0.1276,  0.1207, -0.1191, -0.0367, -0.0436, -0.0358,
        -0.0072, -0.0794,  0.1861,  0.0816,  0.1590,  0.1497, -0.1281, -0.0140,
        -0.1608, -0.0497, -0.0117,  0.0458, -0.0832, -0.0334, -0.0538,  0.0952,
        -0.1344,  0.0884, -0.1298,  0.0372,  0.1333,  0.0613,  0.1103, -0.1357,
         0.1534, -0.0478,  0.0294,  0.1044, -0.1215,  0.1048, -0.1055, -0.0275,
         0.0042,  0.1666, -0.1583,  0.0899,  0.0297,  0.0213,  0.1192,  0.0809,
         0.1223,  0.0524,  0.1666, -0.0726,  0.0518, -0.0709, -0.0874,  0.1508,
        -0.1451, -0.1331,  0.1575, -0.0165,  0.1105, -0.0981,  0.0776,  0.1091,
         0.0374, -0.1079,  0.0614, -0.0572,  0.1419, -0.1116, -0.0048, -0.1119,
        -0.0518, -0.1542,  0.1639, -0.0929,  0.1523, -0.1266, -0.0886, -0.1677,
        -0.0944,  0.0051,  0.0269,  0.1664,  0.0912,  0.0923, -0.0785,  0.1643,
        -0.1258,  0.0314,  0.0358,  0.0534,  0.0300,  0.1609, -0.0819,  0.0344,
         0.1034, -0.0978,  0.1771,  0.0012, -0.1381,  0.0383,  0.1383, -0.0459,
         0.0950,  0.0157, -0.1457,  0.0400,  0.0836,  0.0006, -0.0618,  0.1017],
       device='cuda:0')
recurrent_blocks.1.weight_ih_l0 tensor([[ 0.0440, -0.1793,  0.0601,  ...,  0.0770,  0.1390,  0.1258],
        [-0.1312, -0.0005,  0.1457,  ...,  0.0358,  0.1330, -0.0770],
        [ 0.1640, -0.0605, -0.0701,  ..., -0.0513,  0.1270, -0.1316],
        ...,
        [-0.0215, -0.0908, -0.0810,  ..., -0.0003, -0.0426, -0.0801],
        [-0.0578,  0.1196, -0.1693,  ...,  0.0020,  0.1804, -0.0626],
        [-0.1525,  0.0012,  0.0003,  ..., -0.1455,  0.0481, -0.0249]],
       device='cuda:0')
recurrent_blocks.1.weight_hh_l0 tensor([[-5.3049e-03, -4.5853e-02,  1.0721e-01,  ...,  1.8917e-02,
         -2.1536e-02,  1.6782e-01],
        [-1.9694e-02,  1.5899e-01,  1.5491e-02,  ..., -1.4156e-01,
         -8.6693e-03,  1.2239e-04],
        [ 3.9131e-02, -1.6932e-01, -5.6527e-02,  ..., -8.7736e-02,
         -1.3437e-01,  1.3423e-01],
        ...,
        [-1.3346e-01,  1.7988e-01, -5.1775e-02,  ..., -1.3991e-01,
         -3.3520e-02, -1.6406e-01],
        [ 5.1632e-02, -1.0871e-01,  3.2117e-02,  ..., -1.5925e-01,
          9.6706e-02,  1.4727e-01],
        [-1.5573e-01, -6.8172e-02,  1.7091e-01,  ...,  1.3856e-01,
          1.3710e-01,  7.0106e-02]], device='cuda:0')
recurrent_blocks.1.bias_ih_l0 tensor([-8.8607e-02, -1.4642e-01,  6.9060e-02, -1.6149e-01, -9.7432e-02,
        -1.1642e-01,  1.6003e-02, -2.6938e-03, -4.6864e-03, -1.6455e-01,
         1.0583e-01, -6.2550e-02,  4.7254e-02, -1.5690e-02, -1.5967e-01,
        -1.0738e-01, -1.8006e-01, -1.1784e-01,  1.3357e-01, -1.4603e-01,
        -1.3936e-01, -1.7397e-01, -2.8227e-02, -1.1667e-01,  7.3339e-02,
         9.2541e-02, -9.8594e-02,  1.0343e-01,  1.6214e-01,  7.1834e-02,
         1.6081e-01, -4.7719e-02,  1.5657e-01,  1.3239e-02,  3.3126e-02,
        -7.2878e-02, -7.8004e-02,  4.6999e-02,  4.3885e-02,  1.1825e-01,
         1.3081e-01, -5.6724e-03, -5.6002e-02, -1.3842e-01, -8.7325e-02,
         1.1513e-01, -1.5537e-01, -9.7901e-02, -9.0337e-02, -5.3399e-02,
         8.9624e-02, -9.0217e-02, -1.8789e-03,  1.0128e-01, -1.5112e-01,
        -7.3155e-02, -4.8772e-02, -1.1718e-01,  1.3194e-01, -5.7074e-02,
        -1.0196e-01,  1.5828e-01,  6.2842e-03, -1.8871e-02, -4.5482e-02,
         3.0004e-02, -3.2076e-03, -6.0470e-02, -1.0216e-01, -8.4604e-02,
        -5.5635e-02, -3.0912e-02,  1.2727e-01,  4.0814e-02, -4.9938e-02,
         6.9715e-02,  1.8660e-01, -6.2246e-02, -9.2489e-02, -4.6193e-02,
        -1.5121e-01, -1.3394e-01, -8.0904e-03,  1.3179e-01,  1.3112e-01,
        -1.9570e-02,  1.3555e-01,  1.5413e-01,  1.5431e-01,  1.6735e-01,
        -6.4998e-02,  1.0212e-02, -1.6472e-01, -2.9662e-03,  1.4595e-01,
        -1.0621e-01,  2.7305e-02, -1.6873e-01, -1.5338e-01,  8.2541e-02,
        -1.8188e-01,  8.1518e-02, -7.0601e-02,  9.2207e-02, -1.1970e-01,
        -2.6342e-02,  6.9946e-02, -1.4696e-01,  8.7846e-02,  5.7697e-02,
        -1.2294e-01, -6.7995e-02,  6.5106e-03,  1.1818e-02,  2.5037e-02,
        -2.6219e-02,  6.0216e-05, -1.5324e-01,  1.4707e-01, -8.9120e-02,
         1.0804e-01, -1.4205e-02,  9.6892e-02, -8.1234e-02, -1.8250e-01,
        -8.7219e-02, -3.5879e-02,  1.0025e-01], device='cuda:0')
recurrent_blocks.1.bias_hh_l0 tensor([ 1.4992e-01,  9.1395e-02, -1.4684e-01, -6.8526e-02, -1.2534e-01,
         1.1511e-01,  9.9397e-02, -8.7634e-03,  7.8098e-02, -1.4670e-01,
         1.5123e-01, -6.7791e-02, -1.1421e-01,  1.2374e-01,  1.8631e-01,
         9.6748e-02, -6.9588e-02,  1.5213e-01, -1.2798e-01, -1.2921e-01,
         5.6361e-02,  2.3682e-02, -1.0649e-01,  3.2345e-02, -1.6653e-01,
        -1.1524e-01, -6.6428e-02,  2.2447e-02,  5.5053e-02,  5.5580e-02,
        -2.0820e-02, -6.0399e-02,  5.1940e-02,  9.3599e-02,  2.3660e-02,
         7.3967e-02,  1.0462e-02, -7.4706e-03,  1.4731e-01, -5.7529e-02,
         6.2413e-02,  1.5905e-01, -9.5283e-02,  1.3979e-02, -8.2949e-02,
        -1.5618e-01,  1.3189e-01,  1.8123e-01, -1.8009e-01,  1.6020e-01,
        -1.5717e-01, -4.1882e-02, -1.1749e-01,  1.1815e-01, -1.0569e-01,
         5.4606e-02, -4.2461e-04, -8.8721e-02,  3.5809e-02, -6.1417e-05,
         9.4230e-02, -5.7121e-02, -1.3002e-01,  3.1074e-02,  1.5588e-01,
         5.7629e-02, -8.2069e-02,  3.9898e-02, -4.9706e-02, -1.4148e-01,
         4.3856e-02, -1.3923e-01,  2.6392e-02, -1.2216e-01, -1.1889e-01,
        -3.9129e-02,  8.1269e-02,  1.0272e-01, -7.2800e-02,  5.2932e-02,
         9.2844e-02, -4.0707e-02, -1.1516e-03,  1.7080e-01, -5.4577e-02,
        -5.4403e-02, -1.6984e-01, -3.7838e-02,  4.8701e-02, -7.2470e-03,
         9.1681e-04, -1.4512e-01, -1.5413e-01, -9.2270e-02,  1.5010e-03,
         7.0925e-02, -9.8947e-02, -6.4007e-03, -1.5611e-01,  1.2651e-01,
        -1.8638e-01, -1.4213e-01, -2.7395e-02, -9.6719e-02, -5.3377e-02,
        -3.9278e-02, -1.6470e-01, -3.9218e-02,  1.4185e-01,  3.8305e-02,
         7.0434e-03, -5.8164e-02, -9.6631e-02, -3.9895e-02,  7.0809e-02,
        -1.3395e-01,  1.5921e-01, -1.6714e-01,  2.2851e-02, -8.6671e-02,
         8.2659e-02,  1.7130e-01, -1.3319e-01,  6.6332e-02,  1.3685e-01,
        -4.0687e-02,  6.2431e-02,  8.5881e-02], device='cuda:0')
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 0.1323,  0.0694, -0.0590,  ..., -0.0490, -0.0819,  0.0822],
        [ 0.1464, -0.1168,  0.0398,  ..., -0.0097, -0.1231, -0.1351],
        [ 0.1099, -0.1251,  0.0413,  ...,  0.1103, -0.0226,  0.1412],
        ...,
        [ 0.0069,  0.0974,  0.0753,  ..., -0.0723, -0.0032, -0.1182],
        [ 0.1341, -0.0130, -0.0828,  ..., -0.0489, -0.1260,  0.1411],
        [-0.0866, -0.0583,  0.0851,  ...,  0.0050,  0.0839, -0.1140]],
       device='cuda:0')
recurrent_blocks.1.weight_hh_l0_reverse tensor([[ 0.1018,  0.1781,  0.0057,  ..., -0.1441,  0.1615,  0.0762],
        [-0.1477,  0.1517, -0.0072,  ..., -0.0341,  0.1332, -0.1855],
        [-0.1083, -0.0099,  0.1185,  ...,  0.0014,  0.0487, -0.1083],
        ...,
        [-0.0821,  0.0482, -0.1177,  ..., -0.0211,  0.1127,  0.1675],
        [-0.1031,  0.0927, -0.0230,  ...,  0.1338, -0.0354,  0.1720],
        [ 0.1368, -0.0182,  0.0342,  ...,  0.1015, -0.0141,  0.0335]],
       device='cuda:0')
recurrent_blocks.1.bias_ih_l0_reverse tensor([ 0.0068, -0.0150,  0.0119,  0.0311,  0.0242, -0.0689,  0.1115, -0.1571,
         0.1079, -0.1424,  0.0806,  0.0454,  0.0164, -0.1376,  0.0239,  0.0040,
         0.0846,  0.1064,  0.1219, -0.0020, -0.1134, -0.1446, -0.1187,  0.0694,
        -0.0554,  0.1376, -0.1582, -0.1448, -0.1460, -0.1222, -0.0873, -0.1258,
         0.0877, -0.0080,  0.1023, -0.1449,  0.0504, -0.1816, -0.0389,  0.0499,
         0.1439, -0.0169, -0.0947,  0.1137,  0.0419,  0.0388, -0.0942,  0.0584,
        -0.1337, -0.0386,  0.0232, -0.0907, -0.0529, -0.1212,  0.0843,  0.1427,
         0.1270, -0.1346, -0.1498, -0.0243,  0.0485, -0.0391,  0.0029, -0.1783,
         0.1006, -0.1496,  0.0299,  0.0212, -0.1409, -0.1408, -0.0470, -0.0281,
         0.0769, -0.1343,  0.0064,  0.0615,  0.1429,  0.1864, -0.0880, -0.0465,
        -0.0799,  0.1486, -0.0562,  0.0906, -0.1102,  0.1616,  0.0366, -0.0227,
         0.1266,  0.1359,  0.1038,  0.1604, -0.1519,  0.1239, -0.0348,  0.1567,
        -0.0354, -0.1068,  0.0481, -0.1307,  0.0978,  0.0634, -0.0437, -0.1027,
        -0.1154,  0.1717,  0.1550, -0.0058, -0.0609,  0.1030,  0.1754, -0.0641,
         0.1471,  0.1143, -0.1343,  0.1541, -0.1490, -0.1252, -0.1411, -0.0920,
        -0.0178, -0.0727,  0.1867, -0.0363, -0.1425,  0.0366, -0.1467,  0.1474],
       device='cuda:0')
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.1307, -0.0415, -0.1637, -0.0681, -0.0728, -0.0433, -0.1215,  0.0572,
         0.0396,  0.0167,  0.0094, -0.1803, -0.1025,  0.0464,  0.1263,  0.0727,
         0.0091,  0.1416,  0.1782, -0.0762,  0.1671, -0.1369, -0.0074, -0.0171,
         0.0973, -0.1256, -0.0152,  0.0073,  0.1866, -0.0592, -0.0780,  0.1385,
        -0.1237, -0.1396, -0.0116, -0.1351, -0.0077, -0.1436, -0.0864, -0.1203,
        -0.1306,  0.1144, -0.1246,  0.0135, -0.1477,  0.1411, -0.0321, -0.1354,
         0.1274,  0.0148, -0.0052, -0.0999, -0.0004,  0.0133,  0.0084,  0.1090,
         0.1865,  0.0110,  0.1429, -0.0553, -0.1565, -0.1362, -0.1359,  0.0895,
         0.0818, -0.0779,  0.1195,  0.1431,  0.0410, -0.0337, -0.1087, -0.0526,
         0.0271, -0.1163, -0.0567, -0.0213, -0.1864,  0.0698,  0.0554,  0.0819,
        -0.0144,  0.1855,  0.0283, -0.0425,  0.0824,  0.0482, -0.0582,  0.1606,
         0.0495,  0.0143,  0.1486,  0.0488,  0.1577, -0.0803, -0.1129, -0.1630,
        -0.0122,  0.1601,  0.0576,  0.0265,  0.1492, -0.0623, -0.1146,  0.0965,
         0.0186, -0.1551, -0.0085,  0.0168, -0.1268, -0.0616, -0.0621, -0.0349,
         0.0196,  0.1535,  0.1761,  0.0625, -0.0657,  0.1069,  0.0321, -0.0783,
         0.0266,  0.0461,  0.0065, -0.1734,  0.0168, -0.1582, -0.1720,  0.1224],
       device='cuda:0')
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.1734,  0.0203, -0.0404,  ..., -0.0810, -0.0794, -0.0110],
        [ 0.1199,  0.1314,  0.1458,  ..., -0.1063, -0.1242, -0.1776],
        [-0.1646,  0.0727, -0.0818,  ...,  0.1113,  0.1633, -0.1107],
        ...,
        [-0.1359,  0.1145,  0.1004,  ...,  0.0258,  0.0022,  0.0193],
        [ 0.0498, -0.1718,  0.0066,  ..., -0.0372, -0.1193,  0.0012],
        [ 0.0215, -0.0388,  0.1096,  ...,  0.0758, -0.1357,  0.1508]],
       device='cuda:0')
recurrent_blocks.2.weight_hh_l0 tensor([[-0.1038,  0.1553,  0.1155,  ..., -0.0463, -0.1236,  0.1244],
        [ 0.0099,  0.1850,  0.1531,  ...,  0.0486, -0.0206, -0.1027],
        [-0.1041, -0.1583, -0.1086,  ...,  0.0270,  0.0590, -0.1817],
        ...,
        [ 0.0569, -0.0176,  0.0136,  ..., -0.1075, -0.0356,  0.0896],
        [ 0.0047,  0.1472, -0.1225,  ...,  0.0205, -0.1479, -0.1496],
        [-0.1650, -0.0437, -0.0591,  ..., -0.0823, -0.1696, -0.0959]],
       device='cuda:0')
recurrent_blocks.2.bias_ih_l0 tensor([ 0.1554, -0.1002,  0.0093,  0.0870,  0.1561,  0.0129,  0.1383, -0.1599,
         0.1015, -0.0883, -0.0463, -0.1407, -0.0329, -0.0569, -0.1352, -0.1257,
         0.0152, -0.0217,  0.1529, -0.0356,  0.1003, -0.1446,  0.1749, -0.1602,
         0.0227, -0.0947, -0.0071,  0.1230,  0.1290, -0.0951, -0.0744, -0.0133,
        -0.1396, -0.0303,  0.1662,  0.1120, -0.1551,  0.0708,  0.1168, -0.0463,
        -0.0077, -0.0240,  0.1700, -0.1627, -0.0749, -0.1106, -0.1195, -0.1576,
        -0.1372, -0.0440, -0.0972, -0.1859,  0.0356, -0.1502,  0.0094, -0.0205,
        -0.1364,  0.0095, -0.1188,  0.1270,  0.1686, -0.0506, -0.0254, -0.0727,
         0.0344, -0.1575,  0.0136, -0.0894,  0.0007,  0.1188,  0.1825,  0.0474,
        -0.1084,  0.0947,  0.0960,  0.1651, -0.1317,  0.1140, -0.1366,  0.1605,
        -0.0217, -0.1398, -0.1502,  0.0786,  0.1322, -0.1433, -0.1364, -0.0623,
         0.1629,  0.1478,  0.1261, -0.1586,  0.0934, -0.1336,  0.1139, -0.1727,
        -0.0641, -0.0652, -0.1052,  0.1167, -0.0477,  0.0455,  0.1753,  0.0444,
        -0.0258,  0.1143, -0.0512,  0.0234,  0.1164,  0.0680,  0.0108, -0.1333,
         0.0091, -0.0686, -0.1626,  0.0380,  0.1182,  0.1411,  0.1389,  0.0441,
        -0.1533,  0.1568,  0.1214, -0.0276,  0.1658,  0.0756,  0.0735, -0.0462],
       device='cuda:0')
recurrent_blocks.2.bias_hh_l0 tensor([ 0.0842,  0.0094, -0.0405,  0.0568, -0.0334, -0.0636, -0.0701, -0.1352,
         0.0186, -0.0834, -0.1593, -0.1863, -0.0004, -0.0824,  0.1592,  0.0417,
        -0.0541, -0.0148, -0.0354,  0.0794,  0.1023, -0.0928,  0.0881, -0.1837,
         0.0038, -0.1665, -0.0075, -0.1189, -0.1154, -0.1071, -0.0106,  0.0497,
        -0.1489,  0.1669, -0.1410, -0.1474, -0.1401, -0.1532, -0.1631, -0.0127,
         0.0277,  0.0774,  0.0512, -0.1658,  0.0180, -0.0057,  0.0924,  0.0741,
         0.0870,  0.0717,  0.0201,  0.0760, -0.1586, -0.0656, -0.1662,  0.0086,
         0.0730,  0.1309, -0.1508, -0.0090, -0.1006,  0.0539,  0.0421, -0.1514,
         0.1530, -0.0208,  0.0367,  0.1240, -0.0010, -0.1343, -0.0746, -0.0093,
        -0.1131,  0.0211,  0.0651, -0.1094,  0.0803,  0.1624,  0.0826, -0.0113,
        -0.1862,  0.1012,  0.1580, -0.1620, -0.1202,  0.0841,  0.0658, -0.1030,
         0.0561,  0.1833, -0.0819,  0.1095, -0.0613,  0.0850, -0.1305, -0.0012,
        -0.0070,  0.0366,  0.1466,  0.0241, -0.1583,  0.1006,  0.1834,  0.0011,
         0.0619, -0.1060,  0.0497,  0.0665, -0.0816, -0.1366,  0.1234,  0.0670,
        -0.1135,  0.0810, -0.0575,  0.0840,  0.1262, -0.1015,  0.1505,  0.1534,
         0.0385, -0.1410, -0.1253,  0.0975, -0.0241,  0.1122, -0.0646,  0.0885],
       device='cuda:0')
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.0235, -0.0486,  0.0017,  ..., -0.1301,  0.0638,  0.0043],
        [ 0.1143, -0.0852,  0.0364,  ...,  0.1352,  0.0242,  0.1094],
        [ 0.1324, -0.0434, -0.0376,  ...,  0.0121,  0.1275, -0.1446],
        ...,
        [-0.0813, -0.0250,  0.0299,  ...,  0.0030,  0.1024,  0.0229],
        [ 0.1696,  0.1020,  0.1493,  ...,  0.0648,  0.0111,  0.1399],
        [ 0.0160,  0.1255, -0.1294,  ..., -0.0680,  0.0014, -0.1084]],
       device='cuda:0')
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.0534, -0.0796,  0.0051,  ..., -0.0762,  0.0871,  0.0675],
        [ 0.1785,  0.1280, -0.0829,  ...,  0.0528,  0.0917, -0.0417],
        [ 0.0931, -0.0989, -0.1347,  ..., -0.0295,  0.0420,  0.1065],
        ...,
        [ 0.0516, -0.0826, -0.0909,  ...,  0.0569, -0.1027,  0.0203],
        [ 0.1583, -0.0485,  0.0123,  ..., -0.1277,  0.0012, -0.0898],
        [-0.1028,  0.1725,  0.1408,  ..., -0.1197,  0.0062, -0.0300]],
       device='cuda:0')
recurrent_blocks.2.bias_ih_l0_reverse tensor([-0.1612, -0.0457,  0.0116,  0.1149, -0.1064,  0.0202,  0.0292,  0.0767,
         0.1614,  0.0048,  0.0702,  0.0682,  0.0451, -0.1305,  0.1155, -0.1517,
         0.0792,  0.0385, -0.1201,  0.1475, -0.1736,  0.0377, -0.0603,  0.0255,
         0.0944,  0.1847, -0.1287, -0.0485,  0.0725,  0.0703, -0.1508, -0.0237,
         0.0419, -0.0912,  0.1268,  0.0444,  0.0713, -0.0813,  0.0504,  0.0431,
         0.1124, -0.1741, -0.0588,  0.0461, -0.0705, -0.1426,  0.0317,  0.0068,
         0.0781, -0.0194, -0.1861, -0.1713, -0.0677,  0.0522, -0.0818, -0.0616,
         0.0786, -0.0367, -0.0224, -0.0141,  0.0079, -0.1180,  0.0480, -0.0461,
         0.1046,  0.1397,  0.1597,  0.0993,  0.1107, -0.0696,  0.0804, -0.0007,
         0.0106, -0.0509,  0.1062, -0.1051,  0.0305, -0.0632, -0.0433, -0.0736,
        -0.0291, -0.0162, -0.1249, -0.0641, -0.1192, -0.1307, -0.1401,  0.0727,
         0.1394, -0.1346, -0.0044,  0.0728,  0.1863,  0.1163,  0.1739,  0.0623,
         0.0120, -0.0681,  0.0173, -0.0128,  0.1376, -0.0688, -0.1749,  0.0798,
         0.0586,  0.0872, -0.1370, -0.1170,  0.0274,  0.1682,  0.0947,  0.0407,
         0.0082,  0.0197,  0.1163, -0.0027, -0.1433,  0.0636, -0.1032, -0.0529,
         0.1408,  0.0651, -0.0441,  0.0589,  0.1292, -0.0204, -0.0851, -0.1281],
       device='cuda:0')
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.1414,  0.1645,  0.1118,  0.1637, -0.1656,  0.0213, -0.0432, -0.0306,
        -0.0965,  0.1436, -0.0480,  0.1391,  0.1047, -0.0299, -0.1453,  0.1070,
         0.1540,  0.0290, -0.0699, -0.1374,  0.1666,  0.0905,  0.1391, -0.0350,
         0.1129, -0.0267, -0.0942, -0.1530,  0.0951,  0.1189, -0.0945,  0.0482,
         0.1141, -0.0162, -0.1271, -0.0189, -0.0002, -0.1755,  0.0280, -0.0713,
        -0.1695, -0.0642, -0.1204, -0.0276, -0.0483, -0.1434,  0.1790,  0.1460,
         0.0401,  0.0209, -0.1024,  0.0937,  0.0419, -0.0573,  0.1753,  0.0951,
         0.1862, -0.1214,  0.0614, -0.0026,  0.0055,  0.1500, -0.1581,  0.0019,
        -0.0395, -0.0950,  0.1015, -0.1621,  0.0421,  0.1028,  0.0751,  0.0849,
         0.1326,  0.1151, -0.0150, -0.1556,  0.0910, -0.0657, -0.0593,  0.1315,
        -0.1635,  0.0279,  0.1657, -0.0817, -0.0595, -0.1308, -0.0734,  0.1053,
         0.0413,  0.1715, -0.0214, -0.1046, -0.0306, -0.0945, -0.0332, -0.1267,
         0.1757, -0.0954,  0.0437,  0.1019, -0.0641, -0.1402,  0.1265, -0.1844,
        -0.1718, -0.1316,  0.0541, -0.0536,  0.0987, -0.0312,  0.0479, -0.1413,
        -0.1460,  0.0408,  0.1373,  0.1794, -0.0806,  0.1150,  0.1364,  0.1052,
        -0.0999,  0.1542, -0.0317,  0.0013, -0.1312,  0.1827, -0.0625, -0.1272],
       device='cuda:0')
recurrent_blocks.3.weight_ih_l0 tensor([[-0.0866, -0.1819,  0.1310,  ...,  0.0831,  0.0382, -0.0040],
        [ 0.1655, -0.0831, -0.1273,  ...,  0.1210, -0.1183, -0.1521],
        [-0.0944, -0.0276, -0.1736,  ..., -0.0106, -0.0797, -0.1367],
        ...,
        [-0.0591, -0.1169, -0.0263,  ...,  0.0785,  0.0491, -0.0310],
        [-0.0455, -0.0704,  0.0422,  ..., -0.0923, -0.0252, -0.0224],
        [-0.0344,  0.1634, -0.0111,  ..., -0.0484, -0.0854, -0.0196]],
       device='cuda:0')
recurrent_blocks.3.weight_hh_l0 tensor([[ 0.0250, -0.0139, -0.1707,  ...,  0.0417,  0.0939,  0.0109],
        [-0.0917, -0.0253, -0.0703,  ..., -0.1271, -0.1414,  0.0299],
        [-0.1095, -0.0922, -0.1339,  ..., -0.0262,  0.1224, -0.0149],
        ...,
        [ 0.0013,  0.0218,  0.0497,  ...,  0.1111, -0.0309, -0.1389],
        [-0.1267,  0.0903, -0.1173,  ..., -0.0810, -0.0462,  0.0205],
        [ 0.0183,  0.0998,  0.0752,  ..., -0.0519,  0.1131,  0.1501]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0 tensor([ 0.0085, -0.1488,  0.0429,  0.1660,  0.1306,  0.0537, -0.0995,  0.1028,
        -0.0227,  0.0671, -0.0163, -0.0388, -0.0236, -0.0383,  0.1247,  0.0275,
         0.0624, -0.0316, -0.1492,  0.0496, -0.0730, -0.0098,  0.0023,  0.0130,
        -0.0874, -0.1372,  0.0310,  0.0881,  0.0360, -0.1456,  0.1364,  0.0272,
        -0.1523, -0.1550,  0.0617, -0.1246, -0.0074,  0.1024,  0.1329, -0.1656,
         0.1135, -0.0256, -0.0955, -0.1666,  0.1193,  0.0172,  0.1276,  0.0409,
        -0.0798,  0.0043,  0.1124, -0.1002,  0.1755, -0.1515,  0.0775,  0.0353,
        -0.1710,  0.0317, -0.1551,  0.1027, -0.0458, -0.1127,  0.1140,  0.1258,
        -0.1377, -0.0447, -0.1534,  0.0663, -0.1404, -0.0599, -0.0900,  0.1015,
        -0.0419,  0.0946, -0.1322,  0.0064, -0.0556, -0.0088, -0.0857, -0.1839,
        -0.0039,  0.1414,  0.1019,  0.0956, -0.0369, -0.1384,  0.0808,  0.1022,
        -0.1756, -0.0373, -0.1206, -0.1864, -0.1251, -0.1561, -0.0625, -0.1254,
         0.1325, -0.0541, -0.1302, -0.1248, -0.0170,  0.1285,  0.1278, -0.1013,
        -0.0613, -0.0115, -0.0670,  0.0115, -0.1116, -0.1275, -0.0296, -0.1291,
         0.1261,  0.1507, -0.1408,  0.1346,  0.0032, -0.1532,  0.0417, -0.0381,
         0.1335,  0.1653, -0.0034,  0.1165,  0.1711,  0.0524, -0.0697, -0.0801],
       device='cuda:0')
recurrent_blocks.3.bias_hh_l0 tensor([ 1.5511e-01,  1.2422e-01, -9.0791e-02,  1.9322e-02, -7.0905e-02,
         4.5641e-02, -1.3157e-01,  6.4283e-02,  3.3289e-02,  1.5567e-01,
         1.6034e-01,  9.9858e-02,  1.6400e-01, -5.4184e-02, -1.6390e-01,
         6.8359e-03, -1.4258e-01, -9.2435e-03, -1.3849e-02, -1.5405e-01,
         2.7544e-02, -1.5348e-01,  5.9931e-02, -1.0698e-01,  1.5637e-01,
         1.9019e-02, -5.6290e-02, -6.3906e-02, -8.2878e-02,  2.9698e-02,
         1.2175e-01, -3.3451e-02,  1.5894e-01, -6.1411e-02, -1.3016e-01,
        -9.2651e-02,  1.2599e-01,  5.3707e-02, -1.1224e-01,  6.9546e-03,
         1.5039e-01,  2.0459e-02, -1.4984e-01, -6.7477e-02,  1.3001e-01,
         1.1272e-01,  8.0440e-02, -4.0735e-02,  1.3664e-01,  1.2207e-01,
        -1.0821e-01, -6.3929e-02,  7.0294e-02, -9.4698e-02, -1.5069e-01,
         2.2653e-03,  1.1885e-01, -8.7554e-03,  1.8322e-01, -1.0714e-01,
         3.2220e-02,  3.5984e-02, -6.6735e-02, -8.3547e-02,  1.3830e-01,
        -1.1332e-01,  7.0846e-03,  5.7587e-02, -1.1419e-01,  3.7707e-02,
        -4.0887e-02,  1.4997e-01, -5.0205e-02, -1.3549e-01,  4.6717e-02,
        -2.6041e-02,  9.2026e-02,  1.8532e-02, -2.2130e-02,  1.3328e-01,
         8.9017e-02, -1.2896e-01, -1.0371e-01,  4.9531e-03,  1.7967e-01,
        -1.1304e-01,  6.1820e-02,  1.0420e-01,  1.0535e-01,  8.7317e-02,
        -1.6869e-01,  1.1165e-01,  1.1741e-01,  3.2945e-02, -1.9259e-02,
        -5.0805e-02,  2.9564e-02,  8.0741e-03, -1.0656e-01, -2.9379e-05,
         1.5477e-01,  1.6012e-01,  1.5863e-01,  1.2480e-01,  5.7159e-05,
        -1.7364e-01, -9.8432e-02, -1.4162e-01,  4.5741e-02, -6.8615e-02,
        -1.7953e-01, -4.0044e-02, -1.1997e-01, -1.6744e-01, -1.2606e-01,
         9.3398e-02, -7.2280e-02,  9.1894e-02,  1.4368e-01, -6.3151e-02,
         6.4187e-02,  1.1547e-01,  7.5915e-02, -7.9207e-02, -1.2668e-01,
         1.2190e-01,  1.4236e-01, -1.7651e-01], device='cuda:0')
recurrent_blocks.3.weight_ih_l0_reverse tensor([[ 0.0147, -0.0241, -0.1215,  ...,  0.1384, -0.0138, -0.1766],
        [-0.1192,  0.0405, -0.0388,  ...,  0.0690,  0.0217,  0.0461],
        [-0.1192,  0.0258, -0.0868,  ..., -0.0644, -0.0905,  0.1438],
        ...,
        [-0.1603,  0.0362, -0.0822,  ...,  0.1604, -0.0736,  0.1480],
        [ 0.0562,  0.1157, -0.1004,  ...,  0.1348, -0.0902, -0.0190],
        [ 0.0098,  0.1272, -0.1475,  ...,  0.0274, -0.1616,  0.0598]],
       device='cuda:0')
recurrent_blocks.3.weight_hh_l0_reverse tensor([[ 0.1437, -0.0255,  0.1574,  ...,  0.1441, -0.0219,  0.0667],
        [ 0.0906, -0.0331,  0.0295,  ..., -0.0931,  0.1431, -0.1705],
        [ 0.1246,  0.1686, -0.1071,  ...,  0.0080,  0.0210,  0.0704],
        ...,
        [ 0.0225,  0.0810,  0.0047,  ..., -0.1229, -0.0295, -0.1483],
        [-0.0550,  0.1405, -0.1245,  ..., -0.0552,  0.0371,  0.0731],
        [ 0.0839, -0.0051,  0.1250,  ..., -0.0165,  0.0187,  0.0997]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0_reverse tensor([-0.0630, -0.1497,  0.0618, -0.0825, -0.0842, -0.1548,  0.1018,  0.0654,
        -0.1756,  0.1207, -0.1510,  0.0453, -0.0824, -0.1416,  0.0616,  0.0424,
         0.1038,  0.1737, -0.0288,  0.1343,  0.0330, -0.0700,  0.0145, -0.0673,
        -0.0480, -0.1048, -0.0421, -0.0139, -0.0747,  0.0855, -0.1199, -0.1265,
         0.0494, -0.1129,  0.0621, -0.0553, -0.0157,  0.1152,  0.1007,  0.1089,
        -0.1606, -0.1397,  0.1216, -0.0346, -0.0170, -0.0817,  0.1193,  0.0510,
         0.0805,  0.1160,  0.0813, -0.1636, -0.1283,  0.0182, -0.0023, -0.0424,
         0.0433,  0.1452,  0.1261,  0.0953,  0.1078, -0.0823,  0.1204,  0.1383,
         0.1282, -0.0622, -0.0965, -0.0639, -0.1097,  0.0485, -0.1372, -0.0713,
         0.0129, -0.0115,  0.1590,  0.0320,  0.0323,  0.1762,  0.0092, -0.0947,
         0.0683,  0.0786,  0.0310,  0.1509,  0.0402, -0.0334,  0.1644, -0.0978,
        -0.0121,  0.1274, -0.0232, -0.0302, -0.0488,  0.0575, -0.1717, -0.1823,
         0.1552,  0.0363,  0.0682,  0.0795, -0.1397,  0.1425,  0.0719,  0.0169,
        -0.0358,  0.1121,  0.1668,  0.1212,  0.1319, -0.1626, -0.1559,  0.1373,
        -0.1104,  0.0780,  0.0003, -0.1354, -0.1205,  0.0768,  0.0298, -0.0263,
         0.1457, -0.0773, -0.1458,  0.1075, -0.0220,  0.1625, -0.1322, -0.1186],
       device='cuda:0')
recurrent_blocks.3.bias_hh_l0_reverse tensor([ 1.3169e-01,  5.4175e-03,  1.3070e-01,  9.6104e-02, -8.3678e-02,
         3.3603e-02,  4.0229e-03,  1.4308e-01,  6.9658e-02, -4.1420e-03,
         8.6148e-02,  8.6370e-02,  7.0984e-02, -1.0636e-01, -9.4452e-02,
         6.5827e-02, -1.5699e-02,  1.6733e-01, -1.1999e-01,  9.8470e-02,
        -9.0504e-02,  1.6828e-02,  3.1020e-02,  5.8539e-02, -4.7070e-02,
        -1.6086e-01,  1.2727e-01,  9.2875e-02,  1.3395e-01,  3.2764e-03,
        -2.2151e-02,  5.4042e-02, -9.0484e-02,  6.0128e-02, -4.1545e-02,
        -8.0961e-02, -1.7539e-01, -4.7213e-02, -5.9856e-02,  1.5515e-01,
         1.0929e-01,  1.2055e-01, -1.1033e-01, -1.5266e-01, -8.8764e-02,
         1.6628e-01,  7.5178e-05,  4.2212e-02, -1.8314e-01, -1.1712e-01,
        -5.0382e-02,  1.6357e-01, -1.2647e-01, -4.9887e-02,  1.1666e-01,
        -1.1068e-01,  1.0567e-02,  1.4299e-01, -1.5602e-01, -1.3699e-01,
         8.8381e-03,  1.4180e-01,  9.7867e-02, -5.0834e-02,  1.2336e-01,
        -8.3956e-02, -3.0335e-02,  1.2742e-01, -1.1999e-01, -1.4082e-01,
        -8.6604e-02, -6.9288e-02, -1.4248e-01, -4.2655e-02, -1.8012e-01,
         1.1927e-01, -3.2056e-02,  1.3859e-01, -1.1114e-02,  1.8249e-01,
         4.2584e-02, -1.8227e-02, -8.7619e-02,  1.2008e-01,  7.3964e-02,
         1.5637e-01,  1.0376e-01, -6.5539e-02,  6.9874e-02, -1.1613e-01,
         1.4658e-01, -3.9091e-02, -1.0384e-01, -2.7052e-02,  5.2273e-02,
        -1.2237e-01,  1.7898e-02, -5.6162e-02, -1.1536e-01,  1.1789e-01,
         2.6559e-02, -1.8051e-01, -7.1354e-02,  1.4338e-01, -4.5236e-02,
        -7.3586e-02,  1.7359e-01,  2.6469e-03,  8.7506e-02, -8.2543e-02,
         3.5782e-02, -8.6529e-02, -7.9077e-02, -9.8767e-03, -1.1291e-01,
         1.0610e-01,  1.7380e-01,  6.4736e-02,  1.7530e-02,  1.5720e-01,
         1.0411e-01, -4.3600e-03, -1.6809e-02,  1.4421e-01,  1.1025e-01,
        -1.7666e-01, -9.5534e-02,  1.8085e-01], device='cuda:0')
fc_blocks.0.0.weight tensor([[ 2.3965e-02, -5.9718e-02,  1.9750e-02,  ..., -3.8397e-02,
         -1.1031e-01,  7.6513e-02],
        [-4.4184e-02, -4.2945e-04,  1.0869e-01,  ...,  3.3379e-02,
          1.9990e-02, -8.4298e-02],
        [ 1.0310e-01,  4.5032e-02, -1.1955e-01,  ...,  1.0007e-01,
         -1.0125e-02, -1.9930e-02],
        ...,
        [-3.6989e-02, -8.4411e-05,  2.5628e-03,  ..., -1.5182e-02,
          3.5828e-02,  3.6234e-02],
        [ 7.5813e-02, -4.9180e-02,  8.4793e-03,  ..., -1.0779e-01,
          2.5379e-02, -3.0637e-02],
        [-1.2168e-01,  5.5618e-02, -8.8614e-02,  ...,  6.6657e-02,
          1.3923e-02,  3.9388e-02]], device='cuda:0')
fc_blocks.0.0.bias tensor([ 0.0503, -0.0508, -0.0505,  0.0164, -0.1120,  0.0377,  0.0613,  0.0220,
        -0.1028,  0.0822, -0.0053,  0.1341, -0.0178,  0.0413, -0.1098,  0.0590,
        -0.0738, -0.0046,  0.0922, -0.0735,  0.0977, -0.0263, -0.0029,  0.0511,
        -0.0749,  0.1215, -0.0115,  0.0223,  0.1013,  0.0771, -0.0864, -0.0574],
       device='cuda:0')
fc_blocks.1.0.weight tensor([[-0.1844,  0.1004,  0.0573, -0.0362,  0.1039, -0.1775,  0.1516, -0.0203,
         -0.0550, -0.1109,  0.0421, -0.0246,  0.0587,  0.0361,  0.1474,  0.0888,
          0.1334, -0.1379, -0.0951, -0.0399, -0.1428,  0.1399, -0.0917, -0.0731,
         -0.0216,  0.0176,  0.1071, -0.0129, -0.1843,  0.1042, -0.0578, -0.0820],
        [ 0.1366,  0.0096, -0.0340, -0.0894,  0.0799,  0.1094, -0.0690, -0.1072,
          0.0551, -0.1169,  0.1378,  0.1586,  0.0237, -0.0573, -0.0704,  0.1055,
          0.1312, -0.0152, -0.0545,  0.1484, -0.1585,  0.0228,  0.1790,  0.0018,
         -0.0005,  0.0453,  0.0311, -0.0690,  0.1749, -0.0715,  0.0496,  0.0826],
        [-0.1584, -0.0546,  0.0128,  0.1432,  0.0842,  0.0499, -0.1353,  0.1208,
         -0.0952, -0.0315,  0.0058, -0.1094,  0.0005, -0.0827, -0.1151, -0.1054,
          0.0588, -0.0120, -0.0941,  0.0782, -0.1630,  0.1760, -0.0302,  0.0937,
         -0.1254,  0.1310,  0.0651, -0.1638, -0.0275, -0.0386, -0.1018,  0.0052],
        [ 0.0076,  0.0745,  0.0961, -0.0982,  0.0886, -0.0755,  0.1286,  0.0526,
         -0.0720, -0.1470, -0.1408, -0.1747, -0.1499,  0.0703, -0.0035, -0.1259,
         -0.0844, -0.0632, -0.1720,  0.0039, -0.1179, -0.1860, -0.1354,  0.0485,
         -0.1056,  0.0459,  0.0335,  0.1377,  0.0096, -0.0519,  0.1264, -0.1847],
        [-0.1344, -0.1432, -0.0689, -0.0703, -0.1433,  0.0493,  0.0432, -0.0291,
         -0.0449,  0.0410,  0.1469,  0.1736,  0.1348,  0.0259,  0.0900,  0.1326,
         -0.0764, -0.0886,  0.1833,  0.1649,  0.0145,  0.1061,  0.0379, -0.0412,
         -0.1187,  0.0256, -0.1105,  0.1701,  0.1629,  0.1318,  0.0755, -0.0784],
        [ 0.0794, -0.1305,  0.0093,  0.0998,  0.1828, -0.0767,  0.1638, -0.0678,
          0.0239, -0.0211, -0.1455, -0.1627, -0.1413,  0.1092, -0.0538, -0.0308,
          0.1741,  0.0158,  0.1144, -0.0080,  0.1193,  0.0328, -0.0631,  0.0527,
          0.1243,  0.1366, -0.0308,  0.0784, -0.1163,  0.1840, -0.0630,  0.0005],
        [ 0.1789, -0.1033,  0.1134, -0.0718,  0.0124,  0.0354, -0.1408, -0.1438,
          0.1121,  0.1272,  0.0782,  0.0033,  0.0830, -0.0188, -0.1451, -0.0394,
          0.0716, -0.1290, -0.1338, -0.1139,  0.0404, -0.1552,  0.0098, -0.1074,
          0.1663, -0.0196,  0.0573,  0.1808,  0.1265, -0.0360,  0.0210,  0.1074],
        [ 0.0540, -0.1164,  0.0597, -0.0175,  0.1606, -0.1629, -0.1357,  0.0448,
         -0.1409,  0.0505, -0.1520, -0.0228,  0.0571, -0.0476, -0.0185,  0.0002,
         -0.0943,  0.0824,  0.0343, -0.1455,  0.0044, -0.0747, -0.0380, -0.1561,
         -0.1698,  0.0276,  0.1523, -0.0831,  0.1579,  0.1453,  0.0581,  0.1076],
        [-0.0430, -0.1862,  0.1576, -0.1445,  0.1578,  0.1311,  0.1038, -0.0520,
          0.1083, -0.0678, -0.1155,  0.0333,  0.0768, -0.0575, -0.0510,  0.1582,
         -0.0098, -0.0164, -0.1298,  0.0533,  0.1026,  0.1644,  0.0883,  0.0062,
          0.1277, -0.0460, -0.0142, -0.1757,  0.1038,  0.0898,  0.0850, -0.1852],
        [-0.1400, -0.0093,  0.0850,  0.0363, -0.0946, -0.0720,  0.0800, -0.0505,
         -0.0447, -0.1219,  0.0681,  0.0520,  0.1692,  0.0444, -0.0832,  0.1527,
         -0.1043, -0.0045, -0.0155,  0.0270,  0.1071, -0.1106,  0.0473, -0.0984,
         -0.1243,  0.1118,  0.1648, -0.1350,  0.1398,  0.1032,  0.1301,  0.1678],
        [-0.1330, -0.1226, -0.0548, -0.1716,  0.1085,  0.0608, -0.0823, -0.1629,
         -0.1400, -0.0100, -0.0138, -0.0964, -0.1325, -0.1566, -0.1810, -0.0814,
         -0.0856,  0.0856, -0.0767, -0.1362,  0.0279,  0.0138,  0.1581,  0.0864,
          0.1566, -0.1401, -0.0971, -0.1591,  0.0936,  0.1640, -0.0293, -0.1309],
        [-0.1133, -0.1820,  0.0733,  0.0295,  0.0424,  0.0497, -0.0923,  0.1263,
          0.1591, -0.1536, -0.1517,  0.1375, -0.0189,  0.1239,  0.0030,  0.0435,
         -0.0666, -0.0783,  0.0023, -0.0085, -0.0717, -0.1343, -0.1012,  0.1644,
         -0.0695,  0.0892, -0.0410, -0.0039, -0.0969,  0.0242,  0.0409,  0.0194],
        [-0.1243, -0.1032, -0.1153,  0.0365, -0.1197,  0.0746,  0.1382,  0.0019,
         -0.1442, -0.0966, -0.1651, -0.0988, -0.0411,  0.1576,  0.1617, -0.0866,
          0.0453, -0.0440, -0.0085,  0.1609, -0.1446, -0.1486, -0.1324, -0.0474,
          0.1044,  0.1457, -0.0493,  0.1305,  0.0577,  0.0233,  0.1451,  0.1028],
        [ 0.1282, -0.1263, -0.0843,  0.1078, -0.0981,  0.0404, -0.1626, -0.1443,
         -0.0022,  0.0284,  0.1341,  0.0897, -0.1836, -0.0796,  0.0528,  0.1043,
          0.0079,  0.0786, -0.0299,  0.0466,  0.0860,  0.0960,  0.0133,  0.1122,
         -0.1851, -0.1446, -0.1829,  0.1070, -0.0595,  0.1249, -0.0268, -0.1067],
        [-0.1094, -0.1137,  0.1474,  0.0760,  0.0233, -0.1560, -0.1207,  0.0086,
         -0.1061, -0.1455, -0.1397,  0.1642,  0.1546,  0.0225, -0.1405, -0.1447,
          0.0220, -0.1526, -0.0179, -0.0141,  0.0888,  0.0829, -0.0494,  0.1327,
          0.1223,  0.1579,  0.1139, -0.0983, -0.0619,  0.0698, -0.0953, -0.0381],
        [-0.1676,  0.0806, -0.0226, -0.1032, -0.0008, -0.0409, -0.1842, -0.0309,
          0.0754, -0.1328,  0.0030, -0.1681,  0.1654,  0.1239, -0.1216, -0.0485,
          0.0163,  0.0157,  0.1427, -0.0047, -0.0965, -0.0486,  0.0575, -0.0517,
         -0.0654, -0.0877, -0.0328,  0.0176, -0.0617,  0.0943,  0.0372,  0.0325]],
       device='cuda:0')
fc_blocks.1.0.bias tensor([ 0.1435, -0.0359,  0.1768, -0.1388,  0.0546, -0.0313, -0.0020, -0.1674,
        -0.1052,  0.0729,  0.1144,  0.1056,  0.0353, -0.0478, -0.1411,  0.0953],
       device='cuda:0')
fc_blocks.2.0.weight tensor([[ 0.1155,  0.0137, -0.0757, -0.1468,  0.0518,  0.1398,  0.1615, -0.0184,
         -0.1246,  0.0283, -0.0163,  0.0112, -0.0770, -0.0306,  0.0554, -0.0942],
        [-0.0954, -0.1954, -0.1101,  0.1287, -0.0515, -0.1453,  0.0937,  0.1428,
         -0.0634, -0.1797, -0.0761, -0.0655, -0.1037, -0.1085,  0.0037,  0.1952],
        [ 0.0266, -0.0105, -0.0275,  0.2493, -0.1511,  0.0526, -0.1984, -0.0127,
         -0.1000, -0.0821,  0.1351,  0.1052, -0.0775,  0.1686, -0.1845,  0.1450],
        [ 0.0651, -0.1552,  0.1574,  0.1362, -0.2023, -0.0231, -0.2217,  0.0764,
          0.1647, -0.1207, -0.0021,  0.1939, -0.0495, -0.0417, -0.0463,  0.0097],
        [ 0.1130, -0.1928, -0.1049, -0.0672, -0.0484, -0.1934,  0.1234, -0.1798,
          0.0307,  0.2377,  0.2083, -0.1531,  0.2226, -0.0654,  0.0446,  0.1853],
        [ 0.2482, -0.0817, -0.1784,  0.0149, -0.0561, -0.0210, -0.1963,  0.0999,
          0.0804,  0.2425, -0.1584, -0.0979, -0.0255, -0.0534, -0.0634, -0.1117],
        [ 0.0874,  0.0597,  0.1441, -0.0310,  0.1266,  0.0506,  0.0262,  0.0911,
         -0.1528,  0.1842,  0.1828,  0.1316,  0.0685,  0.0350,  0.0320,  0.1201],
        [-0.1894, -0.0881,  0.0812,  0.0445,  0.1953,  0.0362, -0.1530, -0.2325,
         -0.0192, -0.0551,  0.0067, -0.1508,  0.1589, -0.0270, -0.0610, -0.0947]],
       device='cuda:0')
fc_blocks.2.0.bias tensor([ 0.1689,  0.1523,  0.0734,  0.2115, -0.1622, -0.0946,  0.0702,  0.2451],
       device='cuda:0')
fc_blocks.3.0.weight tensor([[-0.0495, -0.2401, -0.1371,  0.3218, -0.1973, -0.0757, -0.1311, -0.2340],
        [ 0.2782, -0.2165, -0.1156, -0.0139, -0.3315,  0.2206,  0.0532,  0.1904],
        [-0.1193,  0.1261, -0.1795, -0.2348, -0.2493,  0.2425,  0.2061, -0.0415],
        [-0.3556, -0.1651,  0.2649, -0.2756,  0.1079,  0.3260,  0.3101,  0.0390]],
       device='cuda:0')
fc_blocks.3.0.bias tensor([-0.2252,  0.1808,  0.1897, -0.0977], device='cuda:0')
fc_blocks.4.0.weight tensor([[ 0.2922,  0.5055,  0.4244, -0.0917]], device='cuda:0')
fc_blocks.4.0.bias tensor([-0.4608], device='cuda:0')
h tensor([[[[-0.4105, -0.3212,  0.2426,  ..., -0.2637, -1.2820,  0.9583],
          [-0.1572,  0.7794, -2.0506,  ...,  0.2900, -0.5052,  0.4007],
          [-1.4172, -0.3226, -0.1117,  ..., -0.4801,  0.2309, -0.0616],
          ...,
          [-0.9770, -2.1370,  1.0342,  ..., -0.2516,  1.0206, -1.0164],
          [ 0.7607,  0.3877,  0.6452,  ...,  0.9598,  0.1028, -0.5710],
          [ 0.9922, -0.1384,  0.1594,  ...,  1.1170, -0.9953,  0.1338]],

         [[-1.0948,  1.2885,  0.7520,  ...,  1.1237, -0.5521,  1.0661],
          [-0.4019, -0.8585, -0.0565,  ...,  2.2284, -1.8075,  0.6028],
          [-0.3330,  0.0747, -0.1507,  ..., -1.0983,  0.0644, -1.5887],
          ...,
          [ 0.1817,  0.5210,  1.7311,  ..., -0.0395,  1.6739, -0.7055],
          [ 0.6483,  0.9372,  0.3629,  ..., -0.5079,  0.8541, -0.3804],
          [ 1.6210,  0.2593,  0.0976,  ...,  1.3651,  0.3843, -1.3827]]],


        [[[-0.7389,  0.4747,  1.0579,  ...,  0.0422,  0.1268, -0.3137],
          [ 0.5756,  0.8527,  1.6051,  ..., -0.3542, -0.9514, -0.7929],
          [-0.0402,  0.2349, -0.4651,  ...,  0.3572, -0.0303, -0.0261],
          ...,
          [ 0.1151, -0.4933,  1.0468,  ...,  1.1788,  1.0548,  0.8484],
          [-1.2783,  0.1831,  1.7929,  ...,  1.5321, -0.8014,  1.4890],
          [ 0.3985,  0.1121,  0.4858,  ...,  3.0796,  0.7259,  2.7547]],

         [[ 0.5623,  0.7341,  0.1098,  ...,  0.0488,  0.1772, -1.3370],
          [-0.4319, -0.7044,  0.4790,  ..., -0.2146, -0.2576,  0.5155],
          [ 0.3784, -0.8175,  0.3390,  ..., -1.2638,  0.4313,  1.3830],
          ...,
          [ 0.2851,  1.7253, -1.0738,  ..., -0.1485,  0.2946, -0.4403],
          [ 0.7770,  0.2700, -0.0729,  ...,  1.7209,  0.7582, -0.9777],
          [-0.5701, -0.9110,  0.2457,  ..., -1.0225, -0.6077,  0.7782]]],


        [[[-1.5865, -0.3995, -0.1078,  ..., -0.5776,  1.1631,  0.5632],
          [-0.8231,  1.2048,  0.3077,  ..., -0.3141,  0.9651,  0.0326],
          [-1.7970,  1.2596, -0.0138,  ...,  0.3843,  1.0609, -0.0657],
          ...,
          [-0.4551,  1.4736,  1.9492,  ..., -0.4447, -0.4053, -1.9730],
          [-2.4029,  0.0939,  1.4663,  ..., -0.8387,  1.5272,  0.7780],
          [-1.1118,  1.0646,  1.2087,  ..., -0.0935, -0.5385, -2.5768]],

         [[-0.4162,  0.1434, -0.9858,  ...,  0.8768,  0.6204, -0.4784],
          [ 1.7820, -0.8839, -1.5233,  ...,  1.7398,  0.2960,  0.4896],
          [ 0.0821, -1.0512,  0.7977,  ...,  0.2103, -1.0076,  0.8051],
          ...,
          [ 0.5340, -0.4566,  2.0662,  ...,  1.6068, -0.4478,  0.0692],
          [ 1.2775,  2.0009, -0.9507,  ..., -1.3783,  0.4101, -0.0773],
          [-0.7055, -0.4930, -0.2966,  ..., -1.1068,  0.8103,  1.0150]]],


        [[[ 0.2264, -0.7115, -0.6264,  ..., -0.1624, -0.6812,  0.6308],
          [ 0.8157,  2.5959, -0.1590,  ..., -2.0627, -0.4217,  0.9772],
          [ 0.7006, -0.8024,  0.8780,  ...,  2.4475, -0.1002,  1.0515],
          ...,
          [-0.8044, -1.1815, -0.9417,  ...,  0.1064, -0.9485, -2.4098],
          [-0.4933,  0.5059, -1.1925,  ...,  0.3598, -0.9092,  0.6681],
          [ 1.8255,  0.1300,  1.5998,  ...,  0.2778, -1.4514,  0.4818]],

         [[ 0.3863,  0.9675,  2.1831,  ..., -2.0317,  1.4027, -0.8574],
          [-0.9875,  1.3630, -0.6933,  ..., -1.5945, -0.3377, -0.7518],
          [ 0.1255, -0.0919,  0.9944,  ..., -1.2014,  0.0156, -0.0207],
          ...,
          [ 0.8257,  0.5481, -0.0144,  ..., -0.5065,  0.6457, -0.0449],
          [-1.6573,  1.2090,  1.0375,  ..., -1.1299,  1.1020, -0.0712],
          [ 1.2161,  0.9260,  0.8418,  ...,  0.1792,  0.4081, -0.5008]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[-7.4698e-01, -9.8992e-01,  1.3231e+00,  ...,  1.8613e-01,
           -1.8432e-01, -7.5087e-01],
          [-3.2214e-01, -8.0260e-01,  1.3704e-01,  ...,  4.5361e-02,
            3.7943e-02, -6.4697e-02],
          [-1.0336e+00,  2.8178e-01, -1.3996e+00,  ..., -1.0559e+00,
            8.9769e-01,  5.8842e-01],
          ...,
          [-3.3062e-01,  5.9967e-01,  1.2644e+00,  ...,  1.4054e+00,
           -5.3988e-01, -9.8760e-01],
          [-4.6931e-01, -1.7069e+00, -5.3422e-02,  ...,  6.0312e-02,
           -1.1897e+00,  8.1473e-01],
          [-1.0058e+00, -5.3574e-01, -8.4506e-01,  ...,  2.1271e-01,
           -7.4024e-01, -6.6466e-01]],

         [[ 1.5168e-01, -1.6344e+00, -5.3028e-01,  ..., -8.2662e-01,
            1.4254e+00,  5.6502e-01],
          [ 3.9734e-01,  1.5644e+00, -7.4482e-02,  ..., -4.3684e-01,
            4.3559e-01, -3.0428e-01],
          [ 1.0873e+00,  5.1856e-02,  9.8040e-01,  ...,  1.0286e+00,
           -3.8298e-01, -5.2861e-01],
          ...,
          [ 1.2863e-01,  1.2671e+00, -1.7452e+00,  ...,  1.8394e-02,
            3.2138e-01,  7.4062e-01],
          [-5.4934e-01,  4.7381e-01, -1.2282e+00,  ...,  1.9786e-01,
            3.8699e-01,  8.4970e-01],
          [ 6.9157e-01,  2.8030e-01, -2.9048e-01,  ...,  9.7463e-01,
            1.0050e-01, -6.7905e-01]]],


        [[[ 2.9517e-01, -2.5013e+00,  2.9259e-01,  ..., -6.1339e-01,
            4.5963e-01, -1.7142e-01],
          [-9.7076e-02,  1.5005e+00, -9.9175e-02,  ..., -9.0869e-02,
           -3.5637e-01,  9.7534e-01],
          [-1.8676e+00,  1.2009e+00,  5.1921e-01,  ..., -4.6100e-01,
            3.9692e-01,  5.9203e-01],
          ...,
          [-1.6591e+00,  2.2065e+00, -1.2156e-01,  ..., -7.2129e-01,
            4.9850e-01, -1.8428e-01],
          [ 8.9585e-01, -4.6077e-01,  1.0602e+00,  ...,  2.3740e-01,
            1.8530e-01, -1.7665e+00],
          [ 1.1873e-01,  7.8633e-01, -6.2420e-01,  ..., -1.3481e+00,
           -9.3979e-01, -2.0492e-02]],

         [[-1.2870e-01, -1.1278e-01,  9.0401e-01,  ...,  1.5457e+00,
            6.3886e-01, -2.2997e-01],
          [-1.5323e+00,  8.2158e-01,  1.8946e+00,  ...,  7.7747e-01,
            7.9945e-01, -3.6657e-01],
          [-1.6750e+00,  1.1750e+00,  5.6283e-01,  ...,  7.1727e-01,
            4.9598e-01, -3.2637e-01],
          ...,
          [ 2.6334e+00, -7.8137e-01,  8.4230e-01,  ...,  4.5478e-01,
            1.1589e+00,  3.4525e-01],
          [-3.6332e-01, -8.2929e-01, -3.7642e-01,  ...,  4.3390e-01,
           -1.9433e-01,  2.4760e+00],
          [ 8.4533e-01,  1.4349e-01, -2.6649e+00,  ..., -5.4728e-01,
            1.1502e-01,  9.1500e-01]]],


        [[[ 5.2952e-01,  7.1928e-01, -2.5147e-01,  ..., -3.3048e-01,
           -1.5339e+00, -3.8011e-01],
          [-1.4317e-01,  1.6183e+00,  3.9757e-01,  ..., -5.7796e-01,
           -3.9592e-01,  7.8713e-01],
          [ 1.3660e-01,  1.5023e+00, -9.7070e-02,  ...,  1.4205e+00,
           -4.8411e-02, -6.3566e-01],
          ...,
          [-1.5230e+00, -1.8604e+00, -7.6541e-01,  ...,  1.1024e+00,
           -1.2404e+00, -1.0137e+00],
          [-1.4054e+00, -1.2722e-01,  2.1025e+00,  ...,  1.7804e-01,
           -3.0655e-01,  7.4691e-01],
          [-1.9974e-01, -7.7796e-01,  1.0282e-01,  ...,  1.2963e+00,
            5.3032e-01,  8.3514e-01]],

         [[ 6.8346e-01,  2.1341e-01,  1.8942e-02,  ...,  1.8503e+00,
           -1.0131e+00, -2.3220e-01],
          [ 8.5056e-01, -1.1969e+00,  9.5046e-01,  ...,  1.2740e+00,
           -6.7534e-01,  5.4094e-01],
          [ 6.8087e-01, -6.8236e-01,  2.8197e+00,  ..., -9.5778e-01,
            1.3075e+00,  5.1911e-03],
          ...,
          [-8.2715e-01,  1.2114e+00,  5.4374e-02,  ...,  1.5942e-01,
            4.4654e-01,  6.1934e-01],
          [-9.3464e-01, -2.7443e-01, -2.2883e+00,  ...,  1.7691e-01,
           -3.9468e-01, -2.6239e-01],
          [-1.3495e-03, -2.1253e+00, -2.7190e-01,  ...,  7.6402e-01,
           -1.2281e+00, -7.4450e-01]]],


        [[[ 3.3066e-01, -1.2007e+00, -2.6743e-01,  ..., -2.6218e-01,
           -2.4224e+00, -1.0156e+00],
          [ 1.3417e-01, -1.2479e-01,  1.5534e-01,  ...,  1.0769e-01,
            3.0213e-01, -1.0316e+00],
          [-1.4274e-02, -8.6049e-01, -7.8972e-02,  ...,  2.2553e+00,
           -3.4213e-01,  1.3994e-01],
          ...,
          [ 5.7037e-01,  1.0578e+00,  4.7315e-03,  ...,  1.5483e+00,
           -2.0102e+00,  2.3132e-02],
          [-4.5627e-01, -1.4880e+00, -5.5706e-01,  ..., -5.2590e-02,
           -2.8158e+00,  2.1238e-01],
          [-9.3767e-02, -1.9081e-01, -1.4140e+00,  ...,  1.7676e+00,
            1.0962e+00, -2.9732e-02]],

         [[-4.5991e-01,  5.7592e-01,  2.0099e+00,  ...,  5.8020e-01,
           -3.4865e-02,  2.1800e-01],
          [ 2.2394e-01, -1.9239e+00, -3.7334e-01,  ...,  1.2927e+00,
            4.1825e-01,  1.0470e+00],
          [ 6.6973e-01, -1.1995e+00, -1.0598e+00,  ..., -1.4234e+00,
           -1.6544e-01, -4.8390e-01],
          ...,
          [-1.2523e+00,  4.5504e-01, -1.1076e+00,  ...,  1.7822e+00,
            9.5136e-01, -1.6930e+00],
          [-1.4272e-01,  5.8646e-01,  9.7518e-02,  ...,  1.8036e-01,
            9.1213e-01, -1.4175e+00],
          [ 1.7725e+00,  2.6693e-01,  1.7668e-01,  ..., -1.2201e+00,
            1.5599e+00, -8.9364e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
recurrent_blocks.0.weight_ih_l0 tensor([[ 0.0133, -0.0174,  0.0182],
        [-0.0684,  0.0110,  0.1151],
        [ 0.0720,  0.0744,  0.1542],
        [ 0.0682, -0.0319, -0.1341],
        [-0.0462,  0.1732,  0.0407],
        [ 0.0550,  0.1124, -0.1648],
        [ 0.0935, -0.0913, -0.1424],
        [-0.1142, -0.1598, -0.0682],
        [-0.0040, -0.1478,  0.0858],
        [-0.1132, -0.0181, -0.1254],
        [-0.0983,  0.1529, -0.0636],
        [-0.1097,  0.0454,  0.1600],
        [ 0.0456, -0.0125, -0.0297],
        [ 0.0135,  0.1743,  0.1256],
        [-0.0708,  0.1219,  0.1410],
        [ 0.1315, -0.0165,  0.1716],
        [ 0.0394, -0.1384,  0.0123],
        [ 0.1162, -0.0024, -0.1363],
        [-0.1308, -0.0100, -0.0702],
        [ 0.0471, -0.1334,  0.1454],
        [-0.1088, -0.0195,  0.0172],
        [ 0.0942, -0.0830,  0.0336],
        [-0.0514, -0.1516, -0.0489],
        [ 0.1212, -0.1553, -0.1588],
        [ 0.1581, -0.1124, -0.0871],
        [ 0.0424, -0.0895,  0.0159],
        [-0.1401, -0.1849, -0.0269],
        [ 0.0348, -0.1101, -0.1697],
        [-0.0329,  0.1071,  0.1071],
        [-0.1844, -0.0900,  0.0391],
        [ 0.1641, -0.1161,  0.1055],
        [ 0.0294, -0.1664, -0.0509],
        [-0.0880, -0.1658, -0.0622],
        [-0.1401,  0.0835, -0.0861],
        [-0.0241, -0.0933, -0.0311],
        [-0.1613,  0.1551, -0.0950],
        [-0.0794, -0.0495, -0.1099],
        [-0.0151,  0.1570,  0.0789],
        [-0.0446, -0.0693,  0.0166],
        [-0.1408, -0.0012,  0.0607],
        [ 0.1284, -0.0663, -0.1836],
        [-0.0153,  0.0023,  0.1361],
        [ 0.0926, -0.1825, -0.1226],
        [ 0.0112,  0.0772, -0.0053],
        [-0.0741, -0.1608, -0.1109],
        [-0.0098,  0.1765, -0.0939],
        [-0.0663,  0.1200, -0.0151],
        [ 0.0018,  0.1776, -0.0409],
        [-0.0924, -0.0536, -0.0026],
        [-0.0621, -0.1115, -0.0926],
        [ 0.0437,  0.0354,  0.0097],
        [-0.0485, -0.1565,  0.1642],
        [-0.0651,  0.1441, -0.0969],
        [ 0.0915,  0.0152,  0.1348],
        [-0.1217,  0.1432,  0.1454],
        [ 0.1506,  0.0498,  0.1610],
        [-0.1130,  0.0790, -0.1236],
        [-0.1720, -0.1667, -0.0368],
        [-0.0831, -0.1117, -0.0630],
        [ 0.1233, -0.1091, -0.0942],
        [ 0.0048,  0.0898,  0.0362],
        [-0.0179, -0.1382,  0.1512],
        [ 0.0273, -0.0143, -0.1057],
        [-0.0657, -0.1211,  0.0016],
        [-0.0736,  0.0115, -0.0065],
        [ 0.0807, -0.1666, -0.0655],
        [-0.0226, -0.1567, -0.0406],
        [-0.0694,  0.0105, -0.0153],
        [ 0.0203, -0.1578,  0.0640],
        [ 0.0974,  0.0397, -0.1311],
        [ 0.1701, -0.0197, -0.0863],
        [ 0.0004, -0.1481,  0.1404],
        [ 0.1348,  0.0502,  0.0854],
        [ 0.0926, -0.1537, -0.0096],
        [ 0.1840, -0.1609,  0.1204],
        [-0.0946, -0.0037,  0.0163],
        [-0.0045, -0.0717,  0.1620],
        [-0.1225, -0.1353, -0.1257],
        [ 0.0057, -0.0386,  0.0743],
        [ 0.1764, -0.1389,  0.0440],
        [ 0.1568, -0.1487, -0.1429],
        [ 0.0009, -0.1232,  0.0535],
        [-0.0180,  0.0761, -0.0829],
        [-0.0352, -0.0819,  0.0865],
        [ 0.1284, -0.0414, -0.0632],
        [-0.1367,  0.0393,  0.1584],
        [-0.1654, -0.1030, -0.1209],
        [ 0.0185,  0.1225,  0.0079],
        [ 0.0630, -0.0783,  0.0067],
        [-0.1152,  0.0333, -0.0601],
        [-0.1109, -0.1834, -0.0111],
        [-0.0167,  0.0322, -0.1800],
        [-0.0828,  0.0486, -0.0808],
        [-0.1343, -0.0317,  0.1115],
        [-0.1419,  0.1184, -0.0309],
        [ 0.0399,  0.0635,  0.0837],
        [-0.0549, -0.0493,  0.0228],
        [-0.0360,  0.0690,  0.0598],
        [-0.0708, -0.0627,  0.0915],
        [ 0.0899,  0.1007,  0.1517],
        [-0.0853, -0.0317,  0.0426],
        [-0.0654,  0.1453, -0.0100],
        [ 0.0079,  0.0038, -0.1613],
        [-0.0093, -0.0940,  0.1208],
        [ 0.0392, -0.1341, -0.1753],
        [ 0.0870, -0.0296, -0.1134],
        [ 0.0468,  0.1664,  0.0406],
        [-0.1372, -0.0201, -0.1000],
        [ 0.0148, -0.0383, -0.0533],
        [ 0.0800, -0.1013,  0.0939],
        [ 0.1867, -0.0466,  0.1629],
        [ 0.0464,  0.1264,  0.1483],
        [-0.0446, -0.1492,  0.1331],
        [-0.0685, -0.0192, -0.0685],
        [-0.0202,  0.1215,  0.1130],
        [-0.1473,  0.0108,  0.0769],
        [ 0.1132,  0.0865, -0.0160],
        [-0.1238, -0.1255,  0.0419],
        [ 0.0429, -0.0975, -0.0889],
        [ 0.1575, -0.0877,  0.0283],
        [ 0.1015,  0.1487,  0.0949],
        [ 0.0359,  0.1286, -0.0926],
        [ 0.0614,  0.0039,  0.1443],
        [-0.1017, -0.1196,  0.0703],
        [ 0.1692, -0.1040, -0.1428],
        [-0.1049, -0.1108, -0.1406],
        [-0.0342,  0.1338,  0.1015],
        [ 0.1768, -0.1106,  0.0134]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.1002,  0.0689,  0.0937,  ...,  0.1151, -0.0815, -0.1221],
        [-0.0898, -0.1519,  0.1032,  ...,  0.0285, -0.1529, -0.1372],
        [ 0.1029, -0.1366, -0.0907,  ...,  0.0783, -0.0806,  0.0782],
        ...,
        [ 0.1162,  0.1544,  0.1366,  ...,  0.0665, -0.1239,  0.0595],
        [ 0.1184,  0.0439,  0.1322,  ..., -0.0652, -0.0334, -0.1325],
        [ 0.1588, -0.0090,  0.0374,  ...,  0.1464,  0.1659, -0.1632]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0 tensor([-0.0115, -0.0723,  0.0155,  0.1373, -0.0870, -0.0687,  0.0347, -0.1323,
        -0.0348,  0.0569, -0.0705, -0.1523, -0.1158,  0.1730, -0.0279,  0.1672,
        -0.1269, -0.0799, -0.1594, -0.0967,  0.1360,  0.0138, -0.0410,  0.0546,
        -0.1585, -0.0809,  0.0456,  0.1278,  0.0497, -0.0967, -0.1431,  0.0914,
         0.0113, -0.1427, -0.1083,  0.1773, -0.0162,  0.0451, -0.1265, -0.1329,
        -0.1436, -0.0381,  0.0388,  0.1472, -0.1111, -0.0643,  0.0807,  0.1369,
        -0.0915, -0.0874, -0.0863, -0.0601, -0.1066, -0.0117,  0.0797,  0.0153,
         0.1570, -0.0896, -0.0697, -0.1078, -0.1257, -0.1300, -0.0829,  0.0036,
         0.1658, -0.0156, -0.1800,  0.0633, -0.0599,  0.1003, -0.1328,  0.0066,
        -0.0684,  0.0427,  0.1282, -0.1515,  0.1267, -0.0451, -0.1517,  0.1474,
        -0.1009, -0.0171,  0.0620,  0.1839,  0.0858, -0.0082,  0.0974, -0.0598,
         0.0483,  0.1199, -0.1628,  0.0493,  0.1732, -0.1632,  0.0628, -0.1596,
        -0.1679,  0.1388, -0.1135,  0.0064, -0.1350, -0.1684,  0.0287, -0.1637,
         0.0301, -0.1128,  0.0991,  0.0518,  0.0648,  0.0370, -0.0860,  0.0832,
         0.1581,  0.1606, -0.0263,  0.1358,  0.1239, -0.1434,  0.1380,  0.0493,
        -0.1677, -0.0493,  0.0240,  0.0741, -0.0814,  0.0673,  0.0213, -0.0502],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0 tensor([-0.0283,  0.1244,  0.1379, -0.0260, -0.1763, -0.0022,  0.0016, -0.0156,
        -0.0336, -0.0081, -0.0309, -0.1515,  0.1641,  0.1233,  0.1195,  0.0223,
        -0.0171, -0.0607,  0.0358, -0.0387, -0.0874,  0.1513,  0.0285, -0.1523,
        -0.0392, -0.1780,  0.1417,  0.0810,  0.1000,  0.1399, -0.0550, -0.0973,
         0.0717,  0.0006,  0.0732,  0.1711, -0.1130,  0.1390, -0.1076,  0.1298,
         0.0515, -0.0389,  0.1089,  0.1618, -0.1632, -0.1180,  0.0605,  0.1724,
        -0.1702, -0.1022,  0.0781,  0.1385,  0.1295, -0.1197,  0.0545, -0.1482,
        -0.0752, -0.0954,  0.0328,  0.0209,  0.1175,  0.0776,  0.1500,  0.1229,
         0.0283,  0.0571, -0.0080,  0.0062,  0.0728,  0.0035,  0.1120,  0.1092,
         0.0724, -0.1058, -0.0547,  0.0954, -0.0418,  0.0496,  0.0889,  0.0792,
         0.0755,  0.1634, -0.0022, -0.1648,  0.1593, -0.0654,  0.1397, -0.1098,
        -0.0516, -0.0347,  0.0168,  0.1337,  0.1801,  0.0434, -0.0954, -0.0568,
         0.1482, -0.1601,  0.1828, -0.1494, -0.1481, -0.0233,  0.1209,  0.0632,
         0.0516,  0.1346, -0.0916,  0.0955,  0.1263,  0.1120, -0.0683,  0.0597,
         0.0670, -0.0983,  0.1408,  0.1297, -0.1157,  0.0804,  0.1208,  0.1063,
         0.1392,  0.0706, -0.1240, -0.1158,  0.0046,  0.0786, -0.0059,  0.1016],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.weight_ih_l0_reverse tensor([[-7.5062e-02, -8.6092e-02, -1.2903e-02],
        [-1.5862e-01,  1.4647e-01, -1.5169e-01],
        [ 8.8482e-02, -6.1611e-02, -1.7196e-01],
        [-1.0605e-01, -1.5618e-01, -8.8093e-02],
        [ 1.3441e-02, -1.7991e-03, -4.6477e-03],
        [ 1.6168e-01,  2.0465e-02, -1.0595e-01],
        [ 1.3385e-01,  1.3627e-01, -6.3427e-02],
        [-5.7321e-02,  1.4751e-01,  2.3498e-02],
        [ 7.1518e-02, -6.0024e-02,  7.1512e-02],
        [ 8.8000e-02, -1.1606e-04,  2.7060e-02],
        [ 5.4494e-02,  9.5707e-03,  1.6663e-01],
        [ 2.7362e-02, -5.3390e-02,  1.7505e-01],
        [ 1.0469e-01, -4.9848e-02,  1.3180e-01],
        [-5.9203e-02,  5.6981e-02, -9.7154e-02],
        [-7.7625e-02, -1.1001e-01, -1.4534e-01],
        [-1.0224e-01, -5.1749e-02,  1.4211e-01],
        [-9.7497e-02, -1.1146e-01, -3.1793e-02],
        [-4.3258e-02, -1.2750e-01, -7.8065e-02],
        [ 8.3103e-02, -2.4443e-02,  1.6037e-01],
        [ 1.0440e-01,  5.7755e-02, -7.6048e-02],
        [ 6.9046e-02, -4.1233e-03,  1.2370e-01],
        [-7.5294e-03, -6.8129e-02, -1.0158e-01],
        [ 1.4917e-01,  5.6133e-02,  1.6550e-01],
        [ 3.2849e-02,  1.4629e-01, -4.0931e-02],
        [ 6.7672e-02, -1.4110e-01,  1.2531e-01],
        [ 1.7074e-01, -3.4879e-02,  7.8916e-02],
        [ 9.1487e-02,  1.9372e-02,  3.6873e-03],
        [-1.3907e-01,  1.3858e-01,  1.6851e-01],
        [-1.3883e-01, -1.5292e-01, -1.6470e-01],
        [-8.5971e-02, -1.2678e-01,  1.7886e-01],
        [ 2.7575e-02, -1.2634e-01, -2.3884e-03],
        [-1.1147e-01, -2.1779e-02,  1.4635e-02],
        [ 1.0041e-01, -1.6756e-01,  9.1954e-02],
        [-4.2363e-02,  1.3865e-01,  1.1241e-01],
        [ 5.9784e-02, -1.6728e-01, -8.6302e-03],
        [ 9.9721e-02, -1.5873e-02, -6.3370e-02],
        [ 1.0020e-01,  8.8374e-05, -1.3423e-01],
        [-1.8542e-01,  1.2278e-01,  1.3938e-01],
        [ 5.3825e-02,  1.3290e-01, -6.6907e-02],
        [ 1.1887e-01,  1.5815e-01,  1.2749e-01],
        [-1.1530e-01, -1.1991e-01,  9.2181e-02],
        [-4.7409e-02,  5.9245e-02, -1.0960e-01],
        [-1.1746e-01, -1.1491e-01,  9.8923e-02],
        [-8.0338e-02, -5.1609e-02, -1.0532e-01],
        [ 1.2611e-01, -2.8258e-02, -6.0997e-02],
        [ 1.0327e-01,  7.2968e-02, -1.2939e-01],
        [ 1.8748e-03, -1.1293e-01, -8.2595e-02],
        [ 9.2228e-02, -6.8347e-02, -5.8914e-02],
        [ 4.7950e-02,  6.9930e-02,  7.1764e-03],
        [-1.8096e-01,  9.4601e-02,  6.6268e-02],
        [ 1.2452e-01,  1.3252e-01, -8.7574e-02],
        [ 3.4501e-02, -1.3289e-01,  2.8889e-02],
        [ 4.1018e-03, -1.2395e-01,  6.1171e-03],
        [-1.4827e-01, -1.0101e-01, -8.2012e-02],
        [-6.2546e-02, -7.8783e-02,  4.9383e-02],
        [ 6.7775e-02, -3.9970e-02, -1.7142e-01],
        [-1.6298e-01, -6.0904e-02, -6.6712e-03],
        [-2.5227e-02,  5.5945e-02,  1.0416e-02],
        [ 1.3354e-01, -3.2945e-02, -1.4586e-01],
        [ 1.2155e-01, -1.2065e-01,  1.7117e-01],
        [ 7.1837e-03, -1.3249e-01, -1.8209e-01],
        [-6.6209e-02, -4.9027e-02,  1.7228e-01],
        [ 1.1762e-01, -2.7912e-02, -1.2905e-01],
        [-8.9386e-02,  1.4478e-02, -2.6057e-02],
        [-1.4771e-01,  1.6241e-01, -1.0465e-01],
        [ 1.3670e-01,  3.1009e-02, -2.6230e-02],
        [-7.9734e-02, -9.7652e-02, -3.9158e-02],
        [-6.0032e-02, -2.9037e-03,  4.0995e-03],
        [-1.1665e-01,  1.0402e-01,  6.6086e-02],
        [ 5.4470e-02,  1.1693e-01, -7.8802e-02],
        [-1.0352e-01,  4.8040e-03,  5.3724e-02],
        [-6.4258e-02, -5.6761e-02,  7.5954e-02],
        [-6.5433e-03,  1.8080e-01,  1.4656e-01],
        [-1.1438e-01,  7.7678e-02,  1.1736e-01],
        [ 7.9648e-02,  1.2949e-01,  6.6831e-02],
        [ 1.3504e-01,  1.2301e-02, -1.5367e-01],
        [-1.0353e-01, -9.6399e-02,  1.5169e-01],
        [-1.3921e-01,  6.8749e-03, -8.4652e-02],
        [ 9.8587e-02, -8.3519e-02,  5.4338e-02],
        [-1.5309e-01, -5.4711e-02, -2.0393e-02],
        [-1.2770e-01,  1.5557e-01,  9.3289e-02],
        [ 7.0519e-02,  1.3817e-01, -1.5887e-02],
        [ 1.5003e-01, -1.6760e-01,  1.8445e-01],
        [-1.3811e-01,  9.5865e-02,  5.0536e-02],
        [ 8.0135e-03,  1.0776e-01,  1.3379e-01],
        [ 2.0670e-02, -6.5967e-03, -1.7894e-01],
        [-9.6407e-02,  6.1630e-02,  7.2149e-02],
        [ 2.8146e-02,  1.4918e-02,  1.5054e-01],
        [-7.6319e-02, -1.6247e-01,  1.5964e-01],
        [ 2.2437e-02, -8.1059e-02, -9.0853e-02],
        [-1.7157e-01, -1.2697e-01, -9.9084e-02],
        [ 1.3731e-01,  1.0661e-01, -4.9321e-03],
        [ 4.8325e-02, -1.1147e-01, -1.0689e-01],
        [-7.4540e-02, -2.7435e-02, -1.8190e-01],
        [-8.7393e-02, -1.1666e-01,  1.0090e-01],
        [ 2.9127e-02, -7.3932e-02,  5.1586e-02],
        [ 5.5106e-02,  6.9009e-02, -1.3055e-01],
        [ 7.1404e-02,  1.1523e-01, -1.0534e-01],
        [ 3.0065e-02, -5.6772e-02,  6.4729e-02],
        [-1.2511e-01,  1.3025e-01, -1.4885e-01],
        [-2.1048e-02,  6.0678e-02, -7.2063e-02],
        [ 9.4919e-02, -3.2232e-02, -1.3750e-01],
        [ 1.7984e-01, -8.0454e-02,  1.6882e-03],
        [ 3.8201e-02,  1.1071e-02,  1.2537e-01],
        [ 7.7465e-02, -3.3679e-02, -1.4893e-01],
        [ 1.1499e-01, -9.7496e-02,  1.1475e-01],
        [-1.1802e-01,  1.3146e-01, -1.1907e-01],
        [-2.6769e-02, -1.2523e-01, -4.5949e-02],
        [-1.1651e-01, -1.2531e-01,  3.7719e-02],
        [ 1.0413e-01,  1.2701e-01,  3.5085e-04],
        [ 4.1935e-02, -6.5727e-02, -1.7557e-02],
        [ 1.1558e-02,  7.4386e-02,  7.7364e-02],
        [ 7.3695e-02, -1.3218e-01,  1.8565e-01],
        [-1.4064e-01, -4.4577e-02,  1.3918e-01],
        [ 1.3440e-01, -1.5991e-01,  9.4938e-02],
        [-1.5971e-01,  9.5112e-02,  2.6887e-02],
        [-6.3747e-02, -1.5358e-01,  7.7887e-02],
        [ 1.2274e-01,  1.0440e-01, -1.0886e-01],
        [-1.5349e-01, -1.7552e-01, -4.4909e-02],
        [-9.3173e-02,  1.4678e-01,  5.2960e-02],
        [-1.8728e-03,  1.5220e-01, -9.2232e-02],
        [-1.3201e-01, -1.6279e-01,  9.8969e-02],
        [-5.2370e-02, -3.5897e-02, -1.1269e-01],
        [-9.7847e-02,  7.9306e-02,  5.9033e-03],
        [ 6.0671e-02,  1.1377e-01,  1.5330e-01],
        [ 1.2340e-01, -7.3031e-02, -9.8415e-02],
        [-9.8144e-03,  1.5162e-01,  2.3547e-02],
        [ 2.0966e-02,  9.5361e-03,  1.3716e-01]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0_reverse tensor([[ 0.1575,  0.0191,  0.0966,  ..., -0.0509,  0.0049, -0.1305],
        [-0.0806,  0.1144, -0.1138,  ...,  0.0777,  0.0535,  0.0431],
        [ 0.0643,  0.0401,  0.1487,  ..., -0.0228, -0.1134,  0.1261],
        ...,
        [-0.1824,  0.0226,  0.1327,  ..., -0.0558, -0.0202,  0.1556],
        [ 0.0020,  0.0835,  0.0295,  ..., -0.0300, -0.0698, -0.0023],
        [-0.0596,  0.0836,  0.0697,  ..., -0.0003, -0.1656, -0.0497]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 0.0467,  0.1195, -0.1768, -0.1349, -0.1460,  0.0842,  0.0662,  0.0977,
         0.1839, -0.0532,  0.1586,  0.1330,  0.1109, -0.1264,  0.0084,  0.0824,
         0.0006,  0.0915, -0.0096,  0.0336,  0.1616,  0.1031,  0.1165, -0.0694,
        -0.0544, -0.0621,  0.1189, -0.1570, -0.0157,  0.1474,  0.1031, -0.0299,
        -0.1617, -0.0621, -0.0503, -0.0803,  0.0229, -0.1427,  0.1081, -0.0446,
         0.0198,  0.1349, -0.0486, -0.1246, -0.0195, -0.0480, -0.0548,  0.1558,
        -0.0445,  0.0914,  0.1648,  0.1215, -0.0637, -0.0408,  0.0888,  0.0048,
         0.1807, -0.1165,  0.0942,  0.1690,  0.0726, -0.1151,  0.0231,  0.1618,
         0.0777, -0.0397, -0.0667, -0.0601,  0.1047, -0.1810, -0.1163, -0.0712,
        -0.1072, -0.1434, -0.1435,  0.1405, -0.1396, -0.1271,  0.0538, -0.1101,
         0.1537, -0.0691, -0.1234, -0.0024,  0.1096,  0.1000,  0.1258, -0.0283,
         0.0003,  0.0731,  0.0922,  0.1442, -0.1200, -0.0883, -0.0234, -0.1074,
        -0.0830, -0.0877,  0.1329, -0.1233, -0.1574, -0.0647,  0.1199,  0.0118,
         0.1612, -0.0545,  0.0778,  0.0115, -0.0347, -0.0002, -0.1491,  0.0211,
         0.0988,  0.0503, -0.0821,  0.1620, -0.1661,  0.0917, -0.1313,  0.1324,
         0.0523, -0.1238,  0.0262, -0.0439,  0.1517, -0.0656,  0.0213,  0.0696],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0_reverse tensor([ 0.0603,  0.0974, -0.1263, -0.1026, -0.1170,  0.1659,  0.0790, -0.0569,
        -0.1026, -0.1303, -0.0674, -0.1376, -0.1547,  0.0421, -0.0876,  0.0381,
        -0.0157, -0.0019, -0.1572,  0.1609,  0.1313,  0.0963,  0.1422, -0.0487,
         0.0801,  0.0150, -0.1455, -0.0837,  0.1047,  0.0437, -0.1102,  0.0422,
         0.0920,  0.0428,  0.0134, -0.0513,  0.0132,  0.0364,  0.0542, -0.0316,
        -0.0944,  0.0417,  0.0399,  0.1201,  0.0454, -0.0229, -0.1543,  0.0622,
         0.1544,  0.0872, -0.0286,  0.0134, -0.1848,  0.0006,  0.1743, -0.0181,
        -0.0598, -0.1301, -0.0863, -0.0886,  0.1554, -0.1542,  0.1715, -0.0840,
        -0.0974,  0.0938, -0.0572, -0.1663, -0.0641,  0.1059, -0.1661, -0.1428,
        -0.1116, -0.1834,  0.1551, -0.1517,  0.0421, -0.0246, -0.1593,  0.1227,
         0.0876,  0.1715, -0.0594, -0.0345,  0.1039,  0.0260, -0.0490,  0.1201,
        -0.1111, -0.1649,  0.0171, -0.0103,  0.1411,  0.0475,  0.1139, -0.1303,
         0.1684,  0.0181,  0.0948, -0.1241,  0.0151,  0.1700, -0.0639,  0.1370,
        -0.1204,  0.0076,  0.0206, -0.1402, -0.0939, -0.1601, -0.0353, -0.0889,
         0.0227,  0.0614, -0.0315,  0.1173,  0.1361, -0.1108,  0.1674, -0.0478,
         0.0084, -0.1021,  0.1600,  0.1682, -0.1147, -0.1409, -0.0447,  0.0048],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0 tensor([[ 0.0507,  0.1299, -0.0991,  ...,  0.1825, -0.1336, -0.0387],
        [-0.0377, -0.1279, -0.0271,  ...,  0.0940,  0.1375, -0.0500],
        [-0.1430, -0.0227, -0.0263,  ...,  0.0576, -0.1529, -0.1398],
        ...,
        [ 0.0787,  0.0023,  0.0319,  ..., -0.1075,  0.1767,  0.1256],
        [-0.1556, -0.1528,  0.0307,  ..., -0.1193, -0.0147, -0.1308],
        [ 0.0921, -0.0221,  0.1560,  ..., -0.0997,  0.0582,  0.0143]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0 tensor([[ 0.1101,  0.0603, -0.1005,  ..., -0.0529, -0.0704,  0.1210],
        [-0.0058,  0.1328, -0.1472,  ...,  0.1325,  0.1434,  0.0121],
        [-0.0766, -0.0721,  0.0307,  ..., -0.0222,  0.1336,  0.0742],
        ...,
        [ 0.0720,  0.0233,  0.0061,  ...,  0.1480, -0.0373,  0.0562],
        [ 0.0145,  0.1479, -0.0975,  ...,  0.0824,  0.1488,  0.1503],
        [-0.0905,  0.1086, -0.0243,  ..., -0.0590, -0.1433, -0.1114]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0 tensor([-0.1189, -0.0659, -0.0002, -0.1064, -0.1591,  0.0124, -0.1389,  0.1284,
        -0.0604,  0.0767,  0.1011,  0.1458,  0.0482,  0.1309, -0.0525,  0.0060,
        -0.0919, -0.0843,  0.1499, -0.0540, -0.0103,  0.1473,  0.1380,  0.0306,
         0.0431,  0.1334, -0.1143,  0.1249,  0.0386,  0.1182, -0.0116, -0.0797,
        -0.0289,  0.1568,  0.0778, -0.0389,  0.0734,  0.1074, -0.1179, -0.0138,
        -0.0221, -0.0518,  0.1357,  0.1073,  0.0427, -0.0267, -0.1134, -0.1867,
         0.1312,  0.0946, -0.0102,  0.1018, -0.0018,  0.1566,  0.0852, -0.0104,
         0.0814,  0.0702,  0.0658, -0.0354, -0.1550, -0.1634, -0.1321, -0.0539,
         0.0653,  0.0185, -0.0852,  0.1727, -0.1032,  0.0092,  0.0500,  0.0622,
         0.0357,  0.0119, -0.1202,  0.0961, -0.0047, -0.0187,  0.0075,  0.1715,
         0.0212, -0.0063,  0.1488, -0.0848,  0.1674, -0.1657,  0.0706, -0.1777,
         0.0772,  0.1625, -0.0327, -0.0524,  0.1587,  0.0611, -0.0495, -0.0221,
         0.1005, -0.0689, -0.0404,  0.0763,  0.1472, -0.0245, -0.0232, -0.1488,
         0.0835,  0.1094,  0.1047, -0.0726,  0.1306, -0.0095, -0.1176, -0.1554,
         0.1442,  0.0019, -0.0470,  0.0147, -0.0180, -0.0978, -0.1383, -0.0605,
         0.0269, -0.1383, -0.1024, -0.0045,  0.0342,  0.0287,  0.0226,  0.0466],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0 tensor([-9.8578e-02,  1.4239e-01,  1.6923e-01,  8.6850e-02,  1.5009e-01,
         1.2769e-01,  4.2843e-02, -1.0388e-01,  9.9973e-02, -1.3089e-02,
        -1.4017e-01, -9.5698e-02, -9.2370e-03,  9.9272e-02,  3.1268e-02,
         1.5022e-01, -1.8299e-01, -1.3539e-01,  1.5119e-01, -4.4987e-02,
        -1.6302e-01, -3.9903e-02,  1.7505e-01, -1.7742e-02, -7.2173e-02,
        -1.4403e-01,  8.1755e-02,  8.7221e-02,  1.3575e-01, -2.2781e-02,
        -1.0998e-01, -2.1902e-02,  1.4614e-01,  5.1667e-02,  1.0625e-01,
        -1.6603e-01, -1.0096e-01, -1.3888e-01,  1.8611e-01, -3.7609e-02,
         1.1593e-01, -2.6111e-03, -3.3379e-02,  3.2904e-02, -1.0115e-01,
         2.7501e-02,  1.0583e-01, -4.0687e-02,  7.8495e-02,  8.7947e-02,
        -1.4475e-01, -9.1658e-02,  1.1507e-01,  1.5413e-01,  1.5241e-01,
         9.9518e-02, -1.3562e-01,  5.2226e-03, -1.3655e-01,  6.3967e-02,
        -1.7122e-01, -1.1209e-01, -3.2287e-02, -8.5195e-03, -1.1346e-01,
         1.0304e-01,  2.5954e-02,  1.6250e-02, -1.0870e-01,  1.3124e-01,
         1.6642e-01,  1.0901e-01,  9.4240e-02, -9.8738e-02,  2.5564e-02,
        -1.4295e-01,  8.4486e-02,  1.8735e-02, -1.1687e-01, -1.1793e-01,
         2.0721e-03, -2.6421e-02, -7.1438e-02, -1.6879e-02, -1.3379e-01,
        -4.3740e-02, -1.0684e-01, -1.0581e-01,  1.2454e-01, -4.8650e-02,
        -9.0854e-02, -1.2681e-01, -1.3326e-01, -3.4097e-02,  1.3886e-01,
        -8.5406e-02,  1.0783e-02, -5.9796e-02, -1.2566e-01,  2.8841e-05,
         3.6434e-02,  1.2427e-01,  1.6246e-02,  1.5996e-01,  1.1859e-01,
        -8.9720e-02,  2.0048e-02,  1.5905e-01,  1.5182e-01,  3.6162e-02,
        -1.0909e-02, -1.2898e-01,  1.5557e-01, -2.0331e-02, -4.3957e-02,
         1.1982e-01,  1.2986e-01,  2.5173e-02, -8.9628e-02, -1.3873e-01,
         1.5449e-01, -1.5743e-01,  1.2356e-01, -1.3291e-02,  1.1506e-01,
        -8.4354e-02, -1.2683e-02,  1.1965e-02], device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 0.0625,  0.1540,  0.0058,  ...,  0.1658, -0.0488, -0.0845],
        [-0.0887,  0.1664,  0.1322,  ..., -0.1276,  0.0371, -0.0215],
        [-0.0414,  0.0225, -0.1353,  ..., -0.0522,  0.1501, -0.0065],
        ...,
        [-0.1063, -0.1352, -0.0494,  ..., -0.0901,  0.1650, -0.0388],
        [-0.1367, -0.0914, -0.1659,  ..., -0.0169,  0.0553,  0.1740],
        [-0.0091,  0.0449,  0.0688,  ..., -0.0331, -0.0379,  0.0831]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0_reverse tensor([[-0.1280, -0.0482,  0.0785,  ...,  0.1230,  0.1542, -0.1641],
        [-0.0149,  0.1138,  0.0279,  ..., -0.0444, -0.0070, -0.0248],
        [-0.1176, -0.1405, -0.0269,  ...,  0.0970, -0.1230,  0.1650],
        ...,
        [-0.0467, -0.0271, -0.0438,  ..., -0.1379,  0.0722, -0.1317],
        [ 0.1291, -0.1105,  0.0369,  ...,  0.0067, -0.1402, -0.0459],
        [ 0.0429,  0.0921,  0.0919,  ..., -0.0116,  0.0055, -0.0331]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0_reverse tensor([ 0.0595, -0.1559, -0.0829, -0.1210, -0.1610,  0.0496, -0.0931, -0.1261,
         0.0407, -0.1698, -0.0284,  0.1090, -0.0928, -0.1438,  0.0672, -0.1214,
        -0.0181,  0.0771, -0.0271, -0.1589, -0.1127,  0.1806,  0.0980,  0.0172,
         0.0120,  0.0034,  0.0568, -0.0117, -0.0343,  0.0870, -0.1780, -0.0568,
        -0.0177,  0.1005, -0.1253,  0.0339,  0.1192, -0.0352, -0.1339,  0.0415,
        -0.1737,  0.1478,  0.1658,  0.0024,  0.0966,  0.1471,  0.0497,  0.1482,
         0.0160, -0.0114, -0.1821,  0.0045,  0.0467,  0.0141, -0.0515, -0.1644,
        -0.0059, -0.1580, -0.1525, -0.1443, -0.0143,  0.0034, -0.0298, -0.0297,
         0.0355, -0.0151, -0.1035, -0.0067,  0.1361, -0.0092,  0.1530, -0.0206,
         0.0262,  0.1189,  0.1682,  0.1629,  0.0580,  0.0306, -0.0975,  0.1340,
        -0.1648,  0.0728,  0.1051,  0.0828, -0.1642,  0.0937, -0.0603,  0.0835,
         0.1603,  0.0583,  0.1562,  0.0012, -0.1184, -0.1290, -0.0668, -0.0624,
         0.1427,  0.0746, -0.0424, -0.1476, -0.0410, -0.0986, -0.0233,  0.1641,
        -0.1472, -0.1699, -0.0054,  0.0808, -0.0413, -0.1094, -0.1530,  0.1754,
        -0.0989, -0.0402,  0.1490, -0.0565,  0.1338,  0.0402, -0.1306,  0.1081,
        -0.1680, -0.0806, -0.1280, -0.1507,  0.1508, -0.0801,  0.0453,  0.0465],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.1496,  0.1832, -0.0600,  0.0509, -0.1198,  0.1541,  0.0634, -0.1357,
        -0.1312,  0.1645,  0.0317, -0.0555,  0.1435,  0.1314,  0.0287, -0.0731,
         0.0865,  0.0270,  0.0315, -0.1411,  0.0634,  0.0083, -0.1227,  0.0250,
         0.1668,  0.0620,  0.0627, -0.1510,  0.1108, -0.0781, -0.0014,  0.0713,
         0.0478, -0.1331,  0.1203, -0.0837, -0.0098, -0.1412, -0.1047,  0.0034,
        -0.1724, -0.0594,  0.0700, -0.1112,  0.1330, -0.1438,  0.0781,  0.0573,
         0.0472,  0.1544,  0.0524, -0.1459,  0.0746,  0.1058,  0.0546,  0.0415,
        -0.1499,  0.1069,  0.0457, -0.1023,  0.1393, -0.1554,  0.1506,  0.0318,
        -0.1684,  0.1655,  0.0478,  0.0420,  0.0915,  0.0748, -0.0916,  0.1276,
        -0.0200, -0.0754, -0.0888,  0.0523, -0.1335,  0.0921, -0.0121,  0.1624,
        -0.0700,  0.0168, -0.1418, -0.0047, -0.0302, -0.1377,  0.0805,  0.0118,
         0.0311, -0.0906,  0.1081, -0.0031,  0.1229,  0.1383, -0.0416,  0.0987,
         0.0157,  0.1690,  0.0324,  0.0538,  0.1250,  0.0931,  0.1679, -0.1132,
         0.1272, -0.0607,  0.0461, -0.0255,  0.0532, -0.0725,  0.0046,  0.0410,
        -0.0704, -0.0797,  0.0272, -0.0258, -0.0976,  0.0817, -0.0538, -0.0501,
        -0.1081, -0.0116, -0.0245, -0.0895,  0.0916, -0.0864, -0.0590,  0.1635],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.0721, -0.0539,  0.0108,  ..., -0.0753, -0.0255, -0.1604],
        [ 0.0052, -0.0072, -0.1644,  ..., -0.1180, -0.0642, -0.0012],
        [-0.0855,  0.1475,  0.0351,  ...,  0.0810,  0.0845, -0.0451],
        ...,
        [ 0.0871,  0.1115,  0.0155,  ..., -0.1245, -0.1670, -0.1215],
        [ 0.0325, -0.0398,  0.0632,  ...,  0.1549, -0.0617, -0.0641],
        [-0.1571, -0.1857, -0.1052,  ...,  0.1418, -0.0631,  0.0596]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0 tensor([[-0.1328,  0.1039, -0.1306,  ...,  0.0578,  0.0196, -0.0289],
        [ 0.0162,  0.0400,  0.0639,  ..., -0.1394, -0.1182,  0.1862],
        [ 0.0125, -0.0625,  0.0311,  ..., -0.0305, -0.1436,  0.0909],
        ...,
        [-0.0991, -0.0811,  0.0785,  ...,  0.1765,  0.1828,  0.0892],
        [-0.1048, -0.1297,  0.1566,  ...,  0.0425,  0.0301, -0.1614],
        [-0.1354,  0.0420,  0.1503,  ..., -0.1714, -0.0487, -0.0679]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0 tensor([ 0.1570, -0.0858, -0.1381, -0.0746,  0.0960,  0.0715,  0.1531,  0.0999,
        -0.1593, -0.0527,  0.0853,  0.1564, -0.0018,  0.1056,  0.1589, -0.0217,
        -0.0344, -0.0331, -0.0176, -0.0304,  0.0859, -0.0609, -0.0253,  0.1102,
         0.0843,  0.0797,  0.0495,  0.0364,  0.0841,  0.0708, -0.1247, -0.0293,
        -0.0231, -0.0032,  0.0103, -0.0741, -0.0389,  0.0087, -0.0031,  0.1364,
        -0.0936,  0.0650,  0.0974, -0.1229, -0.1607,  0.0746,  0.1790,  0.1587,
        -0.0919, -0.0753, -0.0986,  0.0712,  0.0225,  0.0105,  0.0648,  0.1084,
         0.0549,  0.1509, -0.1027,  0.0714,  0.1746,  0.0841,  0.0116, -0.0860,
         0.0408,  0.1730,  0.0108, -0.1642,  0.0238,  0.0548,  0.0438,  0.1747,
         0.0773, -0.0496,  0.1856,  0.1551, -0.0314,  0.0153, -0.1839, -0.1071,
         0.0974, -0.1339, -0.1731,  0.0844,  0.1643, -0.0764, -0.0279,  0.1384,
         0.1564, -0.0359, -0.1643,  0.0552, -0.0006, -0.0743,  0.0558, -0.1130,
         0.1435,  0.0775,  0.1242,  0.0007,  0.1551, -0.1402,  0.0206,  0.1774,
        -0.1297,  0.1154, -0.0481,  0.1260, -0.1002, -0.0966,  0.0249, -0.0288,
         0.0838, -0.1620,  0.0218,  0.0559, -0.0707,  0.0977, -0.0764, -0.0812,
         0.1521,  0.1642,  0.0881, -0.1106,  0.0466,  0.0994, -0.1195, -0.0187],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0 tensor([ 0.1418, -0.1413,  0.1440, -0.0467,  0.0533, -0.0632,  0.1251, -0.0596,
         0.0105,  0.0986,  0.1196,  0.0445, -0.0097, -0.1031,  0.1771,  0.0622,
         0.1205,  0.1004,  0.0390, -0.0922,  0.0576, -0.1046,  0.0044, -0.0935,
        -0.0851, -0.0323,  0.1715,  0.0916,  0.1095,  0.0968, -0.0622, -0.1012,
        -0.0396, -0.0566,  0.0839, -0.0515, -0.0018,  0.0483, -0.1573,  0.0171,
        -0.0734, -0.0774,  0.1449,  0.0140, -0.0344, -0.0354,  0.0540, -0.1116,
         0.1401, -0.0088, -0.1479,  0.0978, -0.0643, -0.1370,  0.0207, -0.0308,
         0.0275,  0.0473,  0.0732, -0.0220, -0.1441, -0.0717,  0.0178,  0.1341,
        -0.0383,  0.0235, -0.1616,  0.1743,  0.1212,  0.0697, -0.1611, -0.0279,
         0.0603, -0.1658,  0.1711,  0.1513,  0.1622,  0.1504, -0.1437, -0.1352,
         0.0761, -0.1092,  0.0578, -0.1865, -0.1538,  0.1458,  0.1151, -0.0967,
         0.1112, -0.1317,  0.1639,  0.0306,  0.0711,  0.1438,  0.1359, -0.1030,
         0.1594,  0.0474,  0.1862,  0.0314, -0.0389, -0.0678, -0.0464, -0.0367,
        -0.0667, -0.0472, -0.0138, -0.1534,  0.1483, -0.1264, -0.0159, -0.0193,
         0.0976,  0.0535, -0.0357, -0.0651, -0.0729, -0.0072,  0.0310, -0.1236,
        -0.0149, -0.0405, -0.1550, -0.0975, -0.1486,  0.1737,  0.1571,  0.0085],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.1104,  0.1330, -0.1358,  ..., -0.0247,  0.1190, -0.1279],
        [-0.1612, -0.0023, -0.1412,  ...,  0.1259, -0.0214, -0.1601],
        [-0.0256, -0.0726,  0.1579,  ...,  0.1029, -0.1620, -0.1638],
        ...,
        [-0.0904, -0.1214,  0.0384,  ...,  0.0690, -0.1722, -0.1091],
        [ 0.1496, -0.0842,  0.1107,  ...,  0.1570,  0.1559, -0.1584],
        [ 0.0150, -0.1434, -0.0918,  ..., -0.0831, -0.0726,  0.1269]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.1586, -0.1194,  0.0112,  ...,  0.1107, -0.1340,  0.0118],
        [-0.0230,  0.0192, -0.0427,  ..., -0.0274,  0.1013,  0.0876],
        [ 0.1575, -0.1593,  0.0574,  ..., -0.1126,  0.0188, -0.0541],
        ...,
        [-0.0485, -0.1133,  0.0491,  ..., -0.0478,  0.0893, -0.0879],
        [-0.1235, -0.1065, -0.0605,  ...,  0.0533,  0.1725,  0.0338],
        [-0.1531,  0.0780, -0.0946,  ..., -0.0190, -0.0463,  0.0235]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0_reverse tensor([-1.2986e-01,  1.5718e-01,  2.4687e-02,  8.0420e-02, -8.5367e-02,
         3.5618e-02, -4.6948e-02,  1.0561e-02, -1.2854e-01, -3.8796e-02,
         3.2767e-02,  1.3248e-01, -9.9511e-02, -6.3247e-02,  1.3714e-01,
        -1.7608e-01,  2.8379e-05, -1.1070e-01,  1.5955e-01,  6.4594e-02,
         1.0166e-01, -1.0591e-01,  1.6106e-01, -1.2383e-02,  3.4962e-02,
        -1.6397e-01,  3.7155e-02,  1.3676e-01, -1.4755e-01,  5.9442e-02,
         4.6243e-02, -8.7686e-02,  5.3077e-02,  8.0880e-02,  1.4372e-01,
        -1.9286e-02, -4.6985e-02,  5.0662e-02,  1.5866e-01,  7.9220e-03,
         1.2457e-01, -1.0834e-01,  7.0400e-02,  1.8280e-02,  4.7368e-02,
        -3.1879e-02,  1.1848e-01, -4.0020e-03,  1.8232e-01, -6.8958e-02,
         8.1165e-04, -1.1963e-01, -8.2634e-02,  1.6508e-01,  1.5235e-01,
         1.2928e-01, -1.7973e-01, -8.5289e-02,  6.2477e-02, -5.5579e-02,
        -1.4326e-01, -1.1843e-01, -1.2869e-01, -7.9865e-02, -1.7433e-01,
        -1.3785e-01,  1.8562e-01, -5.1871e-02, -1.5697e-01,  1.6163e-01,
         6.4038e-02,  1.0126e-01,  1.6828e-02, -7.0260e-02,  1.6291e-01,
        -1.0590e-01,  1.3845e-01, -1.0637e-01, -8.6752e-02, -2.7403e-02,
        -1.4320e-01,  5.8020e-02,  5.1005e-02, -8.9800e-02, -1.7468e-01,
        -6.4693e-02,  1.4255e-01,  3.6174e-03, -2.6197e-02, -4.0942e-02,
        -4.4146e-02, -1.3399e-02, -8.9651e-02,  1.5189e-01,  1.3986e-01,
         4.8928e-02,  1.2005e-01,  1.2636e-01,  1.6978e-01,  4.8964e-02,
         1.6222e-01, -3.0865e-02,  5.0286e-02,  1.5555e-02,  2.2553e-02,
        -8.8065e-02, -1.3069e-01, -1.5744e-02,  1.3219e-01, -8.0921e-02,
        -1.6218e-01,  8.9474e-03,  8.8063e-02, -5.8055e-02,  3.2248e-02,
        -1.5073e-01,  1.1136e-01, -8.6542e-02,  7.0265e-03, -2.3361e-02,
        -1.3554e-01,  7.1660e-02,  1.3843e-02,  6.2607e-02,  6.7741e-02,
         1.6253e-01,  6.0310e-02,  1.6954e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.0302, -0.1062,  0.0525, -0.1182, -0.0344,  0.0774,  0.1081,  0.1474,
         0.0756, -0.1446, -0.1851,  0.1392, -0.0622,  0.0909,  0.0440,  0.0685,
        -0.1507,  0.0984,  0.1625,  0.0288,  0.0119,  0.1153, -0.0507, -0.0357,
        -0.0769, -0.1122, -0.1078, -0.0896,  0.0823, -0.0275,  0.0306,  0.0698,
         0.1419,  0.0610,  0.1779,  0.1237,  0.1015, -0.0473,  0.1374,  0.0185,
         0.1210, -0.0461, -0.1819,  0.0122, -0.0887, -0.0959,  0.1500, -0.0485,
        -0.1315, -0.1585,  0.0549, -0.0559, -0.1505,  0.0998,  0.1403,  0.1475,
        -0.0325,  0.0313, -0.0593,  0.1184,  0.1266,  0.0260, -0.0269, -0.0100,
        -0.1456, -0.1338, -0.0527,  0.0629, -0.1548, -0.0619,  0.1244, -0.0232,
         0.0132, -0.0580, -0.1159,  0.0885,  0.0629,  0.0623, -0.0554, -0.0782,
        -0.0060, -0.1296, -0.1258, -0.1834, -0.0237, -0.0925, -0.1611, -0.1863,
         0.0880,  0.1453,  0.0478, -0.1228,  0.1215, -0.1493, -0.0404,  0.0107,
        -0.0483, -0.1069, -0.1281,  0.0740,  0.1106, -0.0029,  0.1538,  0.1066,
        -0.0388,  0.1828,  0.0721,  0.0570,  0.1800, -0.1373,  0.0808, -0.1287,
         0.1465, -0.1500, -0.0480,  0.1786, -0.0498, -0.0576, -0.0834,  0.1051,
        -0.0795,  0.0986,  0.1444,  0.0773, -0.0197, -0.1535,  0.1841,  0.0730],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0 tensor([[ 0.1660,  0.1448,  0.0264,  ..., -0.0647, -0.0786,  0.0003],
        [-0.1440,  0.0206, -0.1280,  ...,  0.0602, -0.0438,  0.0722],
        [-0.0085,  0.1457, -0.1600,  ...,  0.0686,  0.1261, -0.1572],
        ...,
        [-0.0003, -0.1145,  0.1266,  ...,  0.1015, -0.0020,  0.0377],
        [ 0.1236, -0.0688,  0.0451,  ...,  0.1846, -0.0793,  0.0945],
        [-0.1005,  0.0294, -0.1554,  ...,  0.1136, -0.0589, -0.1017]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0 tensor([[-0.1099,  0.0651, -0.0119,  ...,  0.0431, -0.0700,  0.0402],
        [-0.0701, -0.0492, -0.0901,  ..., -0.0429, -0.0344, -0.1459],
        [ 0.1112,  0.0797,  0.0527,  ..., -0.0253,  0.0044,  0.0501],
        ...,
        [ 0.1408, -0.1045,  0.0345,  ..., -0.1136, -0.0971, -0.0583],
        [-0.1022,  0.1557,  0.0558,  ..., -0.0783, -0.0126, -0.1550],
        [-0.1370,  0.0414,  0.1115,  ..., -0.0877,  0.1475,  0.0656]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0 tensor([-0.1410, -0.1536,  0.1140, -0.0421, -0.1244,  0.1781,  0.1587, -0.0441,
         0.0980,  0.1512,  0.1282, -0.1003, -0.1434,  0.0049,  0.0914,  0.1734,
         0.1089,  0.1624,  0.0168, -0.0120, -0.0685,  0.1120,  0.1809, -0.1014,
         0.0158, -0.0485, -0.0607, -0.1096,  0.1491, -0.0430,  0.0832,  0.1239,
        -0.1225,  0.1082,  0.0635, -0.1574, -0.0644, -0.0466, -0.0923, -0.0727,
         0.0414, -0.1152,  0.0330, -0.1707,  0.1213,  0.0167,  0.0106,  0.0699,
         0.0143,  0.0577,  0.1536,  0.1079,  0.0956, -0.0695, -0.0361,  0.1069,
         0.0671, -0.1129,  0.0129, -0.0767, -0.0013,  0.1006,  0.1300, -0.0496,
        -0.1011,  0.0531,  0.0905, -0.0547,  0.1141,  0.0316, -0.0563,  0.1338,
         0.1400,  0.0663,  0.0464, -0.0761,  0.1655,  0.0199, -0.1026,  0.1324,
        -0.1576, -0.0765,  0.0083, -0.1219, -0.0447, -0.0900,  0.0666, -0.0683,
         0.1191,  0.0369,  0.0893,  0.1578,  0.1361, -0.0096, -0.1329, -0.1397,
        -0.0363,  0.0041, -0.0476, -0.1280,  0.1450, -0.0070,  0.1820,  0.0549,
         0.0963, -0.1268, -0.1134, -0.0868, -0.1499,  0.1804, -0.0924,  0.0903,
        -0.1203, -0.0226,  0.0444, -0.1408, -0.0589, -0.0798,  0.0925, -0.1608,
        -0.0361, -0.1622,  0.1684, -0.0976,  0.1805,  0.1823, -0.0407,  0.1554],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0 tensor([ 0.0909, -0.0262,  0.1043, -0.0289,  0.1658,  0.1146, -0.0843, -0.0447,
        -0.1114,  0.0289,  0.1614,  0.1408, -0.1714,  0.1443,  0.1492,  0.1813,
         0.0096,  0.1644,  0.0101,  0.0350, -0.0679,  0.1708,  0.0308, -0.1556,
        -0.0019, -0.1573, -0.1192,  0.0553,  0.1060,  0.0936, -0.0787, -0.0213,
         0.0249, -0.1153,  0.0849, -0.0643,  0.0277, -0.1291,  0.1339, -0.0039,
        -0.1750, -0.0102, -0.0611, -0.0023, -0.0213,  0.0976,  0.0856, -0.0161,
        -0.1151, -0.1334,  0.1649,  0.0217,  0.1430,  0.0530, -0.0705, -0.1363,
         0.0396,  0.1411, -0.0930,  0.1253,  0.1357, -0.1515, -0.1086, -0.0466,
         0.1483,  0.1163,  0.0684,  0.0435,  0.0951, -0.0233,  0.0276, -0.1570,
         0.0987, -0.1212, -0.1323, -0.0244, -0.1137, -0.0932,  0.0868, -0.0768,
         0.0253,  0.1100, -0.0718, -0.0258,  0.1479, -0.0616,  0.0941,  0.0649,
        -0.1530,  0.1161,  0.1278,  0.1464, -0.0758,  0.1582, -0.1170, -0.1069,
        -0.1038, -0.0670,  0.0226, -0.0645, -0.1333,  0.1841,  0.0240, -0.0878,
        -0.0257, -0.0654,  0.0049, -0.0794,  0.1543,  0.1723,  0.1244,  0.0260,
         0.1352, -0.0793,  0.1167, -0.0541,  0.1380, -0.0123,  0.1313, -0.1523,
        -0.1577, -0.0819, -0.0477, -0.1611, -0.0780,  0.1346, -0.1855, -0.0740],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0_reverse tensor([[ 0.0258,  0.0684, -0.0677,  ...,  0.1228, -0.1113,  0.1451],
        [ 0.0696,  0.1136,  0.0609,  ..., -0.0287,  0.1553, -0.0424],
        [-0.1071,  0.0472, -0.0593,  ..., -0.1213,  0.1140, -0.1506],
        ...,
        [ 0.0516,  0.0886,  0.1040,  ...,  0.1545,  0.0133,  0.0636],
        [ 0.1014,  0.0521, -0.1166,  ...,  0.1610,  0.1691,  0.0945],
        [ 0.1187,  0.0212, -0.0666,  ...,  0.0196,  0.0449,  0.0867]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.1139, -0.1755,  0.0294,  ..., -0.1260, -0.0512, -0.1487],
        [ 0.1492, -0.1421,  0.1351,  ...,  0.1604,  0.0854,  0.0878],
        [ 0.0341, -0.0652,  0.1475,  ...,  0.1378, -0.1451, -0.1509],
        ...,
        [-0.0738, -0.1076, -0.0627,  ...,  0.1201,  0.1429, -0.1539],
        [-0.1251,  0.1236, -0.0577,  ...,  0.1460, -0.1367,  0.0521],
        [-0.1349, -0.1274, -0.0381,  ..., -0.0431,  0.0702, -0.1286]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0_reverse tensor([ 1.2167e-01, -2.7830e-02,  8.9674e-03,  6.8726e-02, -7.6197e-03,
         7.6003e-02, -2.0534e-02,  2.1196e-02,  1.1532e-01, -1.0457e-01,
         1.0734e-01,  5.4175e-04, -1.5294e-01, -3.1832e-02,  4.3898e-02,
        -9.4697e-02, -1.4729e-01,  1.4764e-01, -4.2266e-02,  7.3820e-07,
         1.5183e-01,  7.1050e-02, -3.0814e-02, -8.4530e-02, -4.5551e-02,
        -1.4133e-02, -3.0266e-02, -1.3456e-02, -1.0989e-02, -4.9827e-03,
        -8.2259e-02, -1.6442e-01, -3.9882e-02, -1.3531e-01,  2.2366e-02,
        -6.1545e-03,  1.1254e-02,  1.1234e-01,  1.0282e-01,  1.1796e-01,
        -9.0723e-02,  1.2508e-01, -1.5283e-01, -1.4535e-01,  9.4367e-02,
        -2.0539e-02, -1.1106e-02,  1.0997e-02, -9.2399e-02, -5.3680e-02,
         4.8036e-02, -1.5880e-01,  1.6157e-01,  7.8256e-02, -2.2678e-02,
        -7.0471e-02,  2.7647e-02,  7.3313e-02, -1.2889e-01,  7.3021e-02,
        -9.4975e-02, -8.9756e-03, -1.1756e-01,  1.1976e-01,  3.5947e-02,
        -3.7464e-02, -5.3998e-02,  8.5367e-02,  9.1984e-02,  7.5544e-02,
        -1.5265e-01, -6.1003e-02,  1.7297e-01, -1.7685e-01,  1.5621e-01,
        -1.2327e-01, -6.7423e-02, -1.0616e-01, -9.4755e-04,  7.6158e-02,
        -8.0773e-02, -7.8050e-02,  1.3677e-01,  4.7520e-02, -9.1914e-02,
        -1.0684e-01, -2.8150e-02,  8.5913e-02,  1.6455e-01,  1.8201e-02,
         5.6939e-02,  1.8305e-01, -5.2494e-02,  1.8164e-02, -7.7989e-02,
        -1.2311e-01,  9.2953e-02, -9.0694e-02,  1.4972e-01, -7.6349e-02,
         1.2078e-02, -1.7970e-01,  9.3846e-02,  6.3305e-02, -6.1548e-02,
        -1.5501e-01, -3.8493e-02,  3.1676e-02, -1.4042e-01,  1.2479e-01,
        -1.2932e-01, -1.0983e-01,  1.2074e-01, -1.5192e-01, -8.0198e-02,
         1.2501e-02, -1.5119e-01, -8.7819e-02,  1.5576e-01,  5.4811e-03,
        -1.0520e-01,  1.6219e-01,  7.6069e-02,  1.2170e-01, -2.3720e-02,
         1.0663e-01,  1.1773e-02, -1.6565e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0_reverse tensor([ 0.0327, -0.0618,  0.1058,  0.0948,  0.0010,  0.0399,  0.1222, -0.1075,
        -0.0580,  0.0880, -0.0235,  0.0870, -0.1488, -0.0170,  0.0104, -0.1179,
         0.0285, -0.1152, -0.1365, -0.1322,  0.1176, -0.1094,  0.0730, -0.1338,
         0.1008, -0.1570,  0.1858, -0.0101, -0.0403,  0.0180, -0.0695,  0.0078,
         0.1620, -0.0254, -0.0006, -0.0781, -0.1231,  0.0424, -0.1622, -0.1221,
         0.1130,  0.1034, -0.1085, -0.1400,  0.0577,  0.1285, -0.0870, -0.0107,
        -0.0622, -0.0716, -0.0220, -0.1797,  0.0400,  0.0619,  0.0922, -0.1481,
        -0.0065,  0.0781,  0.0144, -0.0826,  0.0735,  0.1775, -0.0157, -0.0684,
        -0.1037, -0.0079, -0.0131, -0.1599,  0.1252,  0.1156,  0.1406,  0.0760,
        -0.0764,  0.0959,  0.1519, -0.1062,  0.1572, -0.0579,  0.0546, -0.1622,
        -0.1130, -0.0457,  0.0938,  0.0098, -0.1241, -0.1166, -0.1004, -0.0875,
        -0.0506, -0.1170, -0.1666,  0.0892,  0.1540, -0.0697,  0.1015,  0.1119,
         0.0243,  0.0619, -0.1578,  0.1094,  0.0348, -0.1120, -0.1648, -0.1095,
         0.1026,  0.0600,  0.0248, -0.0959,  0.1777,  0.1100,  0.1489,  0.0940,
        -0.0829, -0.0123, -0.0207,  0.1026, -0.0134,  0.0618, -0.0383, -0.0619,
        -0.0592,  0.0121,  0.0272,  0.0297, -0.0465, -0.0877, -0.0464,  0.1819],
       device='cuda:0') torch.Size([128])
fc_blocks.0.0.weight tensor([[ 0.0501, -0.0335,  0.1300,  ...,  0.0594, -0.0058, -0.1212],
        [-0.0314,  0.0474, -0.0608,  ...,  0.0407, -0.1199, -0.1029],
        [-0.0763, -0.0974, -0.1037,  ...,  0.0097,  0.1118, -0.0907],
        ...,
        [-0.0484, -0.0741, -0.1020,  ...,  0.0828, -0.0687, -0.0823],
        [-0.0530,  0.0947, -0.0694,  ..., -0.0850,  0.0257,  0.0591],
        [-0.0086, -0.0815, -0.0667,  ...,  0.0851,  0.0800,  0.0194]],
       device='cuda:0') torch.Size([32, 64])
fc_blocks.0.0.bias tensor([ 0.1170,  0.0769, -0.0694, -0.1022, -0.0509, -0.0640,  0.1109, -0.0015,
        -0.1318,  0.0625, -0.0606,  0.0575, -0.0206, -0.0222,  0.0313,  0.0832,
        -0.0509,  0.0223, -0.0125,  0.0344, -0.1066, -0.0864, -0.0955,  0.0867,
        -0.0575,  0.0235,  0.0763,  0.0073, -0.0826, -0.0473,  0.0853, -0.0747],
       device='cuda:0') torch.Size([32])
fc_blocks.1.0.weight tensor([[-6.5628e-02, -6.3891e-02,  7.6074e-02,  1.3764e-01,  1.5424e-01,
          3.1898e-02, -1.6981e-01, -1.2601e-01,  1.3751e-01,  1.4954e-01,
         -1.2995e-01,  1.2202e-01, -1.1552e-01, -1.1216e-01, -1.3478e-01,
         -1.4788e-01, -8.0584e-02,  2.2730e-02, -1.7901e-01,  3.3203e-02,
         -1.0393e-01, -1.3468e-01,  6.4255e-02, -1.5367e-01,  5.0796e-02,
         -1.7249e-01, -1.1419e-01, -1.0224e-01, -4.9265e-02, -2.4201e-02,
         -6.3007e-02, -1.1242e-01],
        [ 1.0218e-01, -1.1053e-01, -8.4909e-02,  1.5431e-01,  1.3887e-01,
          7.1842e-02, -1.4878e-01,  8.7761e-02, -1.3396e-01,  1.3170e-01,
          1.0249e-01, -7.8848e-02,  1.8495e-02,  6.6955e-02, -1.5963e-01,
         -1.6251e-01, -1.1580e-01,  6.4088e-02, -6.5138e-02,  2.7520e-02,
         -6.8231e-02,  1.0229e-01,  1.1081e-01, -9.5071e-02,  7.0430e-02,
          1.2724e-01, -1.2304e-01,  7.6869e-02, -6.1575e-02,  4.0559e-02,
         -1.2496e-01, -1.6501e-01],
        [-6.7617e-03, -9.7916e-03,  1.2391e-01, -7.4855e-02, -1.2912e-01,
         -5.4790e-02,  1.6192e-01,  1.5549e-01,  1.2963e-01, -1.7931e-01,
         -3.5391e-02, -6.5793e-02, -1.4795e-02, -1.7069e-01,  8.9984e-02,
          1.4984e-01, -2.7343e-02, -1.5931e-01,  6.2848e-02,  1.5591e-02,
         -1.2171e-01, -1.3966e-01,  1.5486e-02, -1.2941e-01, -9.5320e-02,
         -1.4350e-01,  1.0221e-01, -8.7617e-02, -6.6542e-02, -1.0250e-01,
         -4.1605e-02, -6.2357e-02],
        [-1.6064e-01,  4.1197e-02, -6.0667e-02, -1.5681e-01,  9.5032e-02,
         -1.3196e-01, -2.3509e-02, -4.2415e-02,  5.7487e-02, -5.7821e-02,
          1.6628e-02,  3.8488e-02,  1.0447e-01,  4.0978e-02, -1.7099e-01,
          1.1662e-01,  6.2883e-02,  1.4370e-01,  6.0719e-02,  1.4551e-01,
         -1.5094e-01, -5.6085e-02,  1.8498e-01, -1.0079e-01, -1.6648e-01,
         -9.3878e-02,  3.8214e-02,  8.1474e-02,  1.5213e-01,  1.6299e-01,
          1.6282e-01,  1.8607e-01],
        [ 1.4414e-01,  5.3137e-02, -1.4458e-02, -4.1897e-03,  1.2071e-01,
         -1.3769e-01,  1.0635e-01, -1.5539e-01,  6.8975e-02, -7.5140e-02,
         -1.4723e-01,  5.7198e-02, -5.8136e-02, -1.2453e-01,  1.5965e-01,
         -1.5914e-01,  4.6784e-03,  1.6822e-01, -6.8657e-02,  8.2412e-03,
         -8.9266e-02, -1.1484e-01, -6.7919e-02, -5.4685e-02,  1.0626e-01,
          5.3083e-02,  1.5827e-01, -1.4480e-01, -1.0961e-01, -6.9501e-02,
          1.5936e-01,  1.7207e-01],
        [-9.3073e-02, -3.3095e-02, -2.2662e-02, -1.0293e-01, -1.8043e-01,
          3.2961e-02,  8.8287e-02,  6.2344e-02, -1.7955e-01,  7.6152e-02,
          1.6149e-01, -1.3445e-01,  7.3669e-02, -5.9439e-03, -9.4550e-02,
          2.2002e-02,  5.0103e-02, -2.0275e-02, -8.8186e-02,  1.5670e-01,
          8.0193e-02,  1.5055e-01, -7.2245e-02,  1.6758e-01,  1.1077e-01,
         -2.1802e-02,  1.6853e-02,  8.4940e-02,  1.6335e-01, -1.3054e-01,
          4.5982e-02,  1.0772e-01],
        [-6.4967e-02, -3.0705e-02,  2.1272e-02, -5.8768e-02,  1.4712e-01,
         -5.4059e-02,  7.9785e-02,  1.0562e-01,  1.6144e-01,  1.5098e-01,
          1.4832e-01, -9.8011e-02, -7.2258e-02, -2.3464e-02, -4.2081e-02,
         -1.3482e-01, -1.6606e-01, -1.7483e-02, -2.3981e-02, -5.7704e-02,
         -7.0238e-02,  4.1252e-03,  7.4005e-03,  5.2682e-02, -1.5886e-01,
          7.1356e-02,  1.1202e-01, -3.5386e-02, -4.0241e-02,  8.3398e-02,
         -1.8362e-01, -1.2820e-01],
        [ 3.8657e-02,  3.5873e-02,  1.0341e-01, -1.1193e-01, -1.4427e-01,
         -5.9238e-03,  1.4000e-01, -4.6811e-02, -1.0512e-01,  2.7219e-02,
         -8.0327e-02,  1.6054e-01,  4.3468e-03, -4.0240e-02,  1.2283e-01,
         -2.3879e-02,  2.4586e-02, -1.1037e-01, -1.5297e-01,  1.1439e-01,
          3.0117e-02,  8.5683e-02,  1.5156e-01,  1.0533e-01,  6.5234e-02,
         -1.7301e-01,  5.8973e-02,  3.4334e-02, -8.7005e-02,  1.3069e-01,
         -1.8166e-01,  9.8992e-02],
        [-1.1403e-01, -3.6570e-02, -1.6388e-01,  1.5577e-01,  1.0114e-01,
         -4.2293e-02,  5.7427e-02, -1.0777e-01,  5.7682e-02,  1.0872e-01,
          6.0724e-02,  1.1819e-01,  1.7357e-01, -1.5071e-01,  7.9418e-02,
          1.5826e-01,  4.0155e-02,  3.8846e-02, -1.4143e-03,  2.8023e-02,
         -1.7113e-01,  1.6472e-01,  7.9409e-02, -5.1342e-02, -2.0251e-02,
          7.8667e-02, -1.0145e-01,  1.3655e-01, -1.5509e-01, -1.0449e-01,
          9.9627e-02, -1.2050e-01],
        [ 1.6224e-01,  1.3581e-01, -5.7950e-02,  1.9908e-02, -1.3544e-01,
         -7.5895e-02, -1.0060e-01, -1.5603e-01,  3.4518e-02,  1.0229e-01,
          2.9313e-02, -1.1819e-03, -5.2497e-02,  4.3885e-02,  1.7749e-02,
          1.4167e-01, -6.3190e-02, -1.0893e-01, -2.0981e-02,  5.2227e-02,
         -5.7213e-02,  1.2313e-01, -5.6663e-02, -5.4754e-02, -2.9642e-02,
          2.0943e-02,  8.5203e-02,  8.5532e-02, -4.5121e-02, -1.2041e-01,
         -2.8336e-02, -1.3948e-01],
        [-9.1980e-03,  5.1661e-02, -4.8129e-02, -9.6085e-02,  2.3827e-02,
          3.8341e-02, -2.0863e-02,  2.6340e-02,  7.7543e-02,  5.3172e-02,
         -3.7606e-02,  1.1717e-01,  1.0091e-01, -6.6581e-02, -5.4387e-02,
         -1.2896e-01,  1.1056e-01,  1.4720e-01,  1.4690e-01, -1.6249e-01,
         -7.1899e-02,  1.3852e-01, -1.4866e-01, -5.5863e-02,  1.3210e-01,
         -1.2597e-01, -5.8136e-02,  9.7204e-03,  8.1862e-02, -4.8814e-02,
         -1.8483e-01, -7.1872e-02],
        [ 1.1656e-01,  1.3579e-01, -2.9552e-02, -8.7307e-02,  1.5510e-01,
         -8.9633e-03, -1.7055e-02, -5.4558e-02, -1.8979e-02, -1.5864e-01,
          7.4910e-02, -1.4049e-01, -6.9252e-02,  1.7720e-01, -9.6531e-02,
         -5.1876e-02, -2.7003e-02,  8.0646e-02, -4.3895e-03,  1.2939e-02,
          4.1279e-02,  1.0039e-01, -7.4198e-02, -5.8901e-02, -1.0943e-01,
          4.4671e-02,  1.1628e-01, -4.9913e-02,  4.8480e-03, -1.3305e-01,
          1.3235e-01,  1.1805e-01],
        [ 3.4679e-02, -8.3844e-02,  1.1672e-01,  8.0406e-02, -1.3524e-01,
         -1.6520e-01, -2.7788e-02, -8.7116e-02, -1.2836e-01,  1.1976e-02,
          1.2033e-01,  2.4538e-03,  1.4598e-01,  3.0341e-02,  1.8085e-01,
          4.2452e-02, -1.1499e-01,  8.1021e-02,  8.6363e-02,  1.4782e-01,
         -1.6080e-02,  2.5581e-02,  1.2762e-01,  4.8340e-02, -2.3216e-02,
          3.1542e-02, -1.4429e-01,  2.8239e-02,  8.6487e-02, -1.0055e-01,
          2.5841e-02, -1.5072e-01],
        [-5.7478e-02,  4.9873e-02, -6.7739e-02,  5.9402e-02,  2.9100e-02,
         -1.4222e-01,  1.6214e-02,  1.1224e-01,  4.3111e-02,  1.3143e-01,
          4.4085e-02,  7.8173e-02,  6.3075e-02,  9.1214e-03, -1.6148e-01,
         -1.7391e-05, -3.2769e-02,  1.0519e-01, -3.0318e-03,  1.5301e-01,
          1.3324e-01,  1.3743e-01, -1.4764e-01,  8.6766e-02, -1.5911e-01,
          3.0547e-02,  5.3527e-02, -1.1377e-01, -1.8305e-01,  8.9228e-02,
          1.1497e-02,  6.0891e-02],
        [-1.8163e-01, -1.0322e-02,  7.8166e-02, -1.6106e-01,  1.9988e-03,
         -9.1364e-03, -1.1013e-01,  1.3337e-01,  1.4090e-01,  9.4094e-02,
          1.8378e-03, -7.6502e-02, -1.4639e-02,  1.3983e-01, -1.1069e-01,
         -1.2673e-01,  2.3342e-02, -1.6817e-01,  6.4272e-02, -7.6931e-02,
          1.0347e-01, -1.4259e-01, -5.9428e-02,  9.3081e-02, -7.7029e-02,
          1.1944e-02,  3.2026e-02,  1.8239e-01, -7.7630e-02,  1.5010e-01,
          1.4626e-01,  4.3115e-02],
        [-2.3594e-02, -8.2311e-02,  7.4589e-02, -1.4755e-01,  1.3444e-01,
          8.5648e-02, -1.5447e-01, -5.8755e-02, -5.7135e-02,  4.3323e-02,
         -1.7068e-01,  4.9294e-02,  5.3497e-02, -1.4412e-02,  1.1488e-01,
          1.5682e-01, -1.1578e-02,  1.3285e-01,  1.4971e-01,  1.4618e-01,
         -9.6407e-02, -1.4662e-01, -5.5763e-02, -1.4222e-01,  1.5033e-01,
          1.3745e-02, -8.7854e-02,  5.4323e-02, -2.6732e-02, -7.8556e-02,
          3.9591e-02,  1.4587e-01]], device='cuda:0') torch.Size([16, 32])
fc_blocks.1.0.bias tensor([-0.1760,  0.0038, -0.1647,  0.0469,  0.0321,  0.0926, -0.1046, -0.1125,
         0.1354, -0.1392, -0.1080,  0.0440,  0.1640, -0.0899,  0.1222,  0.1345],
       device='cuda:0') torch.Size([16])
fc_blocks.2.0.weight tensor([[-0.0830, -0.2144, -0.0287, -0.1440,  0.0333,  0.0854, -0.2507, -0.2426,
          0.2564, -0.0223, -0.2320,  0.1303,  0.2211, -0.1277, -0.1602,  0.2395],
        [ 0.0595, -0.2195,  0.1689, -0.2124, -0.1522,  0.2039,  0.2084,  0.2060,
          0.0166,  0.0570,  0.0528,  0.2192, -0.0541,  0.1121,  0.2379,  0.1694],
        [ 0.0799, -0.2204,  0.0154,  0.2246, -0.1648,  0.2372, -0.2081, -0.0514,
          0.1350, -0.0167,  0.0211,  0.0338, -0.0334, -0.0234, -0.1351,  0.2226],
        [-0.2394, -0.1520,  0.1120, -0.0939, -0.2039,  0.0937, -0.0275, -0.0757,
         -0.1800, -0.0183,  0.0373,  0.2507,  0.0807, -0.2191, -0.2067,  0.0328],
        [ 0.2163,  0.1160,  0.1560,  0.1844,  0.1838, -0.2282,  0.0671, -0.1821,
          0.2040,  0.0232,  0.1676, -0.1532, -0.1427,  0.0411, -0.1077,  0.0524],
        [ 0.1588, -0.1703, -0.0117, -0.1569, -0.2464, -0.0991,  0.1394, -0.1108,
         -0.2305,  0.0722,  0.2043,  0.0415,  0.0646, -0.1783,  0.2003, -0.0375],
        [-0.0801,  0.0384,  0.0160,  0.2364,  0.2214, -0.2019, -0.1142, -0.1912,
         -0.0891, -0.0593, -0.0892,  0.0463, -0.0763, -0.0832, -0.1042, -0.2428],
        [ 0.1913, -0.1678, -0.0004,  0.1450,  0.0929, -0.1470,  0.2067,  0.0048,
         -0.0986,  0.2531,  0.1219, -0.0546, -0.0157, -0.1648, -0.1009, -0.1597]],
       device='cuda:0') torch.Size([8, 16])
fc_blocks.2.0.bias tensor([ 0.0607, -0.1072, -0.1170, -0.1149,  0.1047,  0.2141, -0.2570, -0.0427],
       device='cuda:0') torch.Size([8])
fc_blocks.3.0.weight tensor([[-0.1705,  0.2018, -0.0037, -0.0021,  0.2494, -0.0058,  0.0353,  0.2061],
        [ 0.2956, -0.2765, -0.2239,  0.2530,  0.0173, -0.1786, -0.1857, -0.3417],
        [-0.3126,  0.0305, -0.0851, -0.1878,  0.1146,  0.0556,  0.0737, -0.3498],
        [ 0.3466, -0.0918, -0.3393,  0.3319, -0.3080,  0.0349,  0.2520, -0.3139]],
       device='cuda:0') torch.Size([4, 8])
fc_blocks.3.0.bias tensor([ 0.0112,  0.3346, -0.3154,  0.2099], device='cuda:0') torch.Size([4])
fc_blocks.4.0.weight tensor([[ 0.0092,  0.2687,  0.4531, -0.0329],
        [ 0.1696,  0.5042,  0.0813,  0.2307]], device='cuda:0') torch.Size([2, 4])
fc_blocks.4.0.bias tensor([-0.3777,  0.0008], device='cuda:0') torch.Size([2])
