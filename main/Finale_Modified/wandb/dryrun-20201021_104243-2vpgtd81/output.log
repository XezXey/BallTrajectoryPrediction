==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 47.85it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.16it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1563, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1563, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1563, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1564, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
torch.Size([4, 2, 1, 32])
torch.Size([4, 2, 1, 32])
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[[ 1.2541, -0.7263,  0.9464, -0.5058, -0.3690, -0.4158, -1.4483,
          -1.1857,  0.2949,  0.2506,  0.8023,  0.0696,  0.6669, -0.0101,
          -0.4944,  0.7672,  0.3790, -0.0882,  0.1719, -0.7460, -0.1705,
           0.6756,  0.4142, -1.0285, -0.5397, -0.3140,  0.9180,  0.3973,
           1.4235, -0.6101,  2.2373,  1.7630]],

        [[-0.0609,  0.8627, -0.9200,  0.1204, -0.0714,  1.3703,  2.2717,
           0.8996, -0.3601, -1.8244,  0.9151,  0.1419, -0.8327,  1.1082,
           0.4857,  0.3397,  0.6929,  1.0420,  0.9425, -0.4237,  0.6710,
           0.4170,  1.2528, -1.2770,  1.4064, -0.3693, -0.7787,  1.2675,
           0.5811, -0.2210,  0.9133, -0.6959]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9641, -0.3016,  0.0196,  0.3687, -0.2125, -1.0459, -2.0810,
           0.7351,  0.4745, -1.1725,  0.7994, -0.2834, -0.5655,  0.3950,
           0.5594,  0.9407,  0.8809,  0.1815,  2.0967,  0.9163, -0.1404,
           0.5789,  1.1525, -2.3270, -0.0383,  1.0151,  0.3610, -0.0254,
          -0.6385, -1.6722,  0.3142, -1.1309]],

        [[-0.2187,  0.9679,  0.1184,  0.8585, -0.5688,  1.3395, -0.8631,
           0.2667, -0.5699, -0.8464, -1.4745,  0.1194, -0.2975, -0.1708,
          -1.2451, -0.5283,  0.6906,  0.0972, -1.8188, -0.4216,  0.3411,
           0.8532,  0.5446, -0.3708, -1.8796, -0.4392,  0.5862, -0.1250,
           0.2415,  0.4290, -1.3466,  1.7124]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[ 1.2441, -0.7363,  0.9365, -0.4958, -0.3591, -0.4058, -1.4383,
          -1.1757,  0.3044,  0.2409,  0.8123,  0.0796,  0.6570, -0.0201,
          -0.4844,  0.7573,  0.3691, -0.0981,  0.1619, -0.7559, -0.1805,
           0.6855,  0.4241, -1.0384, -0.5297, -0.3040,  0.9280,  0.3873,
           1.4135, -0.6010,  2.2273,  1.7730]],

        [[-0.0510,  0.8727, -0.9300,  0.1104, -0.0614,  1.3803,  2.2817,
           0.8897, -0.3501, -1.8146,  0.9051,  0.1519, -0.8426,  1.1182,
           0.4757,  0.3297,  0.6829,  1.0321,  0.9325, -0.4337,  0.6810,
           0.4070,  1.2627, -1.2670,  1.4164, -0.3793, -0.7886,  1.2775,
           0.5711, -0.2110,  0.9033, -0.7058]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9541, -0.2916,  0.0296,  0.3588, -0.2025, -1.0558, -2.0711,
           0.7451,  0.4645, -1.1825,  0.7894, -0.2734, -0.5754,  0.4050,
           0.5694,  0.9507,  0.8909,  0.1915,  2.0867,  0.9263, -0.1304,
           0.5888,  1.1425, -2.3369, -0.0483,  1.0251,  0.3709, -0.0154,
          -0.6485, -1.6623,  0.3242, -1.1210]],

        [[-0.2286,  0.9779,  0.1284,  0.8685, -0.5788,  1.3295, -0.8731,
           0.2766, -0.5799, -0.8563, -1.4645,  0.1293, -0.2875, -0.1608,
          -1.2351, -0.5383,  0.6806,  0.0873, -1.8288, -0.4316,  0.3311,
           0.8632,  0.5347, -0.3608, -1.8896, -0.4292,  0.5962, -0.1151,
           0.2515,  0.4190, -1.3565,  1.7024]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 2897.244, Val Loss : 2339.453
======> Trajectory Loss : 2759.755, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.375, BelowGroundPenalize Loss : 0.000
===> [Minibatch 2/5].........BEFORE UPDATE
h tensor([[[ 1.2441, -0.7363,  0.9365, -0.4958, -0.3591, -0.4058, -1.4383,
          -1.1757,  0.3044,  0.2409,  0.8123,  0.0796,  0.6570, -0.0201,
          -0.4844,  0.7573,  0.3691, -0.0981,  0.1619, -0.7559, -0.1805,
           0.6855,  0.4241, -1.0384, -0.5297, -0.3040,  0.9280,  0.3873,
           1.4135, -0.6010,  2.2273,  1.7730]],

        [[-0.0510,  0.8727, -0.9300,  0.1104, -0.0614,  1.3803,  2.2817,
           0.8897, -0.3501, -1.8146,  0.9051,  0.1519, -0.8426,  1.1182,
           0.4757,  0.3297,  0.6829,  1.0321,  0.9325, -0.4337,  0.6810,
           0.4070,  1.2627, -1.2670,  1.4164, -0.3793, -0.7886,  1.2775,
           0.5711, -0.2110,  0.9033, -0.7058]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9541, -0.2916,  0.0296,  0.3588, -0.2025, -1.0558, -2.0711,
           0.7451,  0.4645, -1.1825,  0.7894, -0.2734, -0.5754,  0.4050,
           0.5694,  0.9507,  0.8909,  0.1915,  2.0867,  0.9263, -0.1304,
           0.5888,  1.1425, -2.3369, -0.0483,  1.0251,  0.3709, -0.0154,
          -0.6485, -1.6623,  0.3242, -1.1210]],

        [[-0.2286,  0.9779,  0.1284,  0.8685, -0.5788,  1.3295, -0.8731,
           0.2766, -0.5799, -0.8563, -1.4645,  0.1293, -0.2875, -0.1608,
          -1.2351, -0.5383,  0.6806,  0.0873, -1.8288, -0.4316,  0.3311,
           0.8632,  0.5347, -0.3608, -1.8896, -0.4292,  0.5962, -0.1151,
           0.2515,  0.4190, -1.3565,  1.7024]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[ 1.2347, -0.7416,  0.9265, -0.4871, -0.3514, -0.3959, -1.4418,
          -1.1657,  0.3121,  0.2331,  0.8222,  0.0892,  0.6623, -0.0215,
          -0.4753,  0.7489,  0.3595, -0.1075,  0.1531, -0.7555, -0.1865,
           0.6795,  0.4261, -1.0333, -0.5198, -0.2953,  0.9371,  0.3847,
           1.4038, -0.5929,  2.2197,  1.7697]],

        [[-0.0551,  0.8668, -0.9383,  0.1118, -0.0521,  1.3842,  2.2910,
           0.8948, -0.3408, -1.8068,  0.9105,  0.1566, -0.8522,  1.1281,
           0.4670,  0.3221,  0.6731,  1.0236,  0.9225, -0.4283,  0.6896,
           0.3980,  1.2646, -1.2586,  1.4258, -0.3889, -0.7825,  1.2859,
           0.5716, -0.2041,  0.8954, -0.7144]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9459, -0.2944,  0.0259,  0.3490, -0.1930, -1.0634, -2.0613,
           0.7551,  0.4586, -1.1900,  0.7803, -0.2634, -0.5825,  0.4084,
           0.5767,  0.9549,  0.9004,  0.1962,  2.0773,  0.9354, -0.1204,
           0.5977,  1.1325, -2.3342, -0.0576,  1.0351,  0.3670, -0.0063,
          -0.6583, -1.6544,  0.3338, -1.1275]],

        [[-0.2380,  0.9878,  0.1380,  0.8768, -0.5884,  1.3234, -0.8829,
           0.2856, -0.5760, -0.8658, -1.4547,  0.1385, -0.2784, -0.1515,
          -1.2253, -0.5469,  0.6788,  0.0777, -1.8388, -0.4399,  0.3235,
           0.8642,  0.5417, -0.3528, -1.8856, -0.4302,  0.6062, -0.1065,
           0.2497,  0.4090, -1.3660,  1.6931]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 1959.409, Val Loss : 1504.770
======> Trajectory Loss : 1822.814, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.366, BelowGroundPenalize Loss : 0.000
===> [Minibatch 3/5].........BEFORE UPDATE
h tensor([[[ 1.2347, -0.7416,  0.9265, -0.4871, -0.3514, -0.3959, -1.4418,
          -1.1657,  0.3121,  0.2331,  0.8222,  0.0892,  0.6623, -0.0215,
          -0.4753,  0.7489,  0.3595, -0.1075,  0.1531, -0.7555, -0.1865,
           0.6795,  0.4261, -1.0333, -0.5198, -0.2953,  0.9371,  0.3847,
           1.4038, -0.5929,  2.2197,  1.7697]],

        [[-0.0551,  0.8668, -0.9383,  0.1118, -0.0521,  1.3842,  2.2910,
           0.8948, -0.3408, -1.8068,  0.9105,  0.1566, -0.8522,  1.1281,
           0.4670,  0.3221,  0.6731,  1.0236,  0.9225, -0.4283,  0.6896,
           0.3980,  1.2646, -1.2586,  1.4258, -0.3889, -0.7825,  1.2859,
           0.5716, -0.2041,  0.8954, -0.7144]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9459, -0.2944,  0.0259,  0.3490, -0.1930, -1.0634, -2.0613,
           0.7551,  0.4586, -1.1900,  0.7803, -0.2634, -0.5825,  0.4084,
           0.5767,  0.9549,  0.9004,  0.1962,  2.0773,  0.9354, -0.1204,
           0.5977,  1.1325, -2.3342, -0.0576,  1.0351,  0.3670, -0.0063,
          -0.6583, -1.6544,  0.3338, -1.1275]],

        [[-0.2380,  0.9878,  0.1380,  0.8768, -0.5884,  1.3234, -0.8829,
           0.2856, -0.5760, -0.8658, -1.4547,  0.1385, -0.2784, -0.1515,
          -1.2253, -0.5469,  0.6788,  0.0777, -1.8388, -0.4399,  0.3235,
           0.8642,  0.5417, -0.3528, -1.8856, -0.4302,  0.6062, -0.1065,
           0.2497,  0.4090, -1.3660,  1.6931]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[ 1.2278, -0.7393,  0.9171, -0.4779, -0.3426, -0.3861, -1.4440,
          -1.1570,  0.3144,  0.2321,  0.8303,  0.0890,  0.6699, -0.0278,
          -0.4657,  0.7401,  0.3505, -0.1168,  0.1445, -0.7492, -0.1911,
           0.6788,  0.4324, -1.0261, -0.5105, -0.2875,  0.9463,  0.3795,
           1.3947, -0.5858,  2.2201,  1.7629]],

        [[-0.0622,  0.8593, -0.9472,  0.1144, -0.0426,  1.3898,  2.3006,
           0.9023, -0.3311, -1.7985,  0.9158,  0.1619, -0.8511,  1.1378,
           0.4577,  0.3143,  0.6643,  1.0145,  0.9127, -0.4245,  0.6988,
           0.3910,  1.2704, -1.2495,  1.4354, -0.3986, -0.7751,  1.2947,
           0.5741, -0.2091,  0.8898, -0.7235]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9413, -0.2977,  0.0190,  0.3398, -0.1832, -1.0718, -2.0526,
           0.7649,  0.4509, -1.1971,  0.7712, -0.2593, -0.5899,  0.4036,
           0.5848,  0.9566,  0.8985,  0.2034,  2.0676,  0.9448, -0.1104,
           0.6067,  1.1226, -2.3276, -0.0615,  1.0449,  0.3672,  0.0031,
          -0.6668, -1.6460,  0.3412, -1.1356]],

        [[-0.2457,  0.9961,  0.1473,  0.8859, -0.5980,  1.3212, -0.8924,
           0.2950, -0.5706, -0.8754, -1.4597,  0.1470, -0.2692, -0.1435,
          -1.2178, -0.5559,  0.6740,  0.0718, -1.8489, -0.4468,  0.3172,
           0.8601,  0.5498, -0.3438, -1.8792, -0.4345,  0.6162, -0.0975,
           0.2461,  0.3990, -1.3756,  1.6836]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 1270.848, Val Loss : 985.804
======> Trajectory Loss : 1135.629, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.352, BelowGroundPenalize Loss : 0.000
===> [Minibatch 4/5].........BEFORE UPDATE
h tensor([[[ 1.2278, -0.7393,  0.9171, -0.4779, -0.3426, -0.3861, -1.4440,
          -1.1570,  0.3144,  0.2321,  0.8303,  0.0890,  0.6699, -0.0278,
          -0.4657,  0.7401,  0.3505, -0.1168,  0.1445, -0.7492, -0.1911,
           0.6788,  0.4324, -1.0261, -0.5105, -0.2875,  0.9463,  0.3795,
           1.3947, -0.5858,  2.2201,  1.7629]],

        [[-0.0622,  0.8593, -0.9472,  0.1144, -0.0426,  1.3898,  2.3006,
           0.9023, -0.3311, -1.7985,  0.9158,  0.1619, -0.8511,  1.1378,
           0.4577,  0.3143,  0.6643,  1.0145,  0.9127, -0.4245,  0.6988,
           0.3910,  1.2704, -1.2495,  1.4354, -0.3986, -0.7751,  1.2947,
           0.5741, -0.2091,  0.8898, -0.7235]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9413, -0.2977,  0.0190,  0.3398, -0.1832, -1.0718, -2.0526,
           0.7649,  0.4509, -1.1971,  0.7712, -0.2593, -0.5899,  0.4036,
           0.5848,  0.9566,  0.8985,  0.2034,  2.0676,  0.9448, -0.1104,
           0.6067,  1.1226, -2.3276, -0.0615,  1.0449,  0.3672,  0.0031,
          -0.6668, -1.6460,  0.3412, -1.1356]],

        [[-0.2457,  0.9961,  0.1473,  0.8859, -0.5980,  1.3212, -0.8924,
           0.2950, -0.5706, -0.8754, -1.4597,  0.1470, -0.2692, -0.1435,
          -1.2178, -0.5559,  0.6740,  0.0718, -1.8489, -0.4468,  0.3172,
           0.8601,  0.5498, -0.3438, -1.8792, -0.4345,  0.6162, -0.0975,
           0.2461,  0.3990, -1.3756,  1.6836]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[ 1.2214, -0.7434,  0.9088, -0.4687, -0.3334, -0.3769, -1.4500,
          -1.1480,  0.3205,  0.2263,  0.8388,  0.0938,  0.6781, -0.0252,
          -0.4561,  0.7309,  0.3419, -0.1194,  0.1480, -0.7420, -0.1980,
           0.6736,  0.4342, -1.0235, -0.5011, -0.2857,  0.9483,  0.3730,
           1.3890, -0.5780,  2.2170,  1.7549]],

        [[-0.0704,  0.8509, -0.9508,  0.1118, -0.0329,  1.3969,  2.3103,
           0.9107, -0.3213, -1.7908,  0.9230,  0.1591, -0.8479,  1.1463,
           0.4504,  0.3089,  0.6566,  1.0054,  0.9049, -0.4195,  0.7066,
           0.3869,  1.2776, -1.2442,  1.4437, -0.4073, -0.7675,  1.3037,
           0.5799, -0.2126,  0.8852, -0.7306]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9350, -0.3039,  0.0108,  0.3305, -0.1734, -1.0803, -2.0477,
           0.7740,  0.4427, -1.2026,  0.7638, -0.2535, -0.5976,  0.4055,
           0.5901,  0.9603,  0.8982,  0.2038,  2.0581,  0.9542, -0.1005,
           0.6156,  1.1126, -2.3265, -0.0628,  1.0549,  0.3620,  0.0127,
          -0.6728, -1.6380,  0.3472, -1.1443]],

        [[-0.2529,  1.0050,  0.1560,  0.8927, -0.6070,  1.3179, -0.9010,
           0.3044, -0.5664, -0.8834, -1.4660,  0.1517, -0.2601, -0.1419,
          -1.2128, -0.5652,  0.6674,  0.0652, -1.8580, -0.4527,  0.3113,
           0.8564,  0.5586, -0.3372, -1.8719, -0.4412,  0.6197, -0.0885,
           0.2396,  0.3895, -1.3853,  1.6753]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 789.202, Val Loss : 652.036
======> Trajectory Loss : 655.474, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.337, BelowGroundPenalize Loss : 0.000
===> [Minibatch 5/5].........BEFORE UPDATE
h tensor([[[ 1.2214, -0.7434,  0.9088, -0.4687, -0.3334, -0.3769, -1.4500,
          -1.1480,  0.3205,  0.2263,  0.8388,  0.0938,  0.6781, -0.0252,
          -0.4561,  0.7309,  0.3419, -0.1194,  0.1480, -0.7420, -0.1980,
           0.6736,  0.4342, -1.0235, -0.5011, -0.2857,  0.9483,  0.3730,
           1.3890, -0.5780,  2.2170,  1.7549]],

        [[-0.0704,  0.8509, -0.9508,  0.1118, -0.0329,  1.3969,  2.3103,
           0.9107, -0.3213, -1.7908,  0.9230,  0.1591, -0.8479,  1.1463,
           0.4504,  0.3089,  0.6566,  1.0054,  0.9049, -0.4195,  0.7066,
           0.3869,  1.2776, -1.2442,  1.4437, -0.4073, -0.7675,  1.3037,
           0.5799, -0.2126,  0.8852, -0.7306]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9350, -0.3039,  0.0108,  0.3305, -0.1734, -1.0803, -2.0477,
           0.7740,  0.4427, -1.2026,  0.7638, -0.2535, -0.5976,  0.4055,
           0.5901,  0.9603,  0.8982,  0.2038,  2.0581,  0.9542, -0.1005,
           0.6156,  1.1126, -2.3265, -0.0628,  1.0549,  0.3620,  0.0127,
          -0.6728, -1.6380,  0.3472, -1.1443]],

        [[-0.2529,  1.0050,  0.1560,  0.8927, -0.6070,  1.3179, -0.9010,
           0.3044, -0.5664, -0.8834, -1.4660,  0.1517, -0.2601, -0.1419,
          -1.2128, -0.5652,  0.6674,  0.0652, -1.8580, -0.4527,  0.3113,
           0.8564,  0.5586, -0.3372, -1.8719, -0.4412,  0.6197, -0.0885,
           0.2396,  0.3895, -1.3853,  1.6753]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[ 1.2151, -0.7470,  0.9019, -0.4607, -0.3256, -0.3694, -1.4551,
          -1.1398,  0.3261,  0.2215,  0.8460,  0.0989,  0.6856, -0.0221,
          -0.4471,  0.7230,  0.3342, -0.1197,  0.1508, -0.7358, -0.2037,
           0.6687,  0.4333, -1.0222, -0.4932, -0.2855,  0.9496,  0.3668,
           1.3843, -0.5709,  2.2138,  1.7482]],

        [[-0.0774,  0.8437, -0.9538,  0.1096, -0.0247,  1.4030,  2.3186,
           0.9179, -0.3130, -1.7842,  0.9292,  0.1567, -0.8452,  1.1534,
           0.4442,  0.3044,  0.6501,  0.9976,  0.8984, -0.4152,  0.7132,
           0.3834,  1.2838, -1.2398,  1.4507, -0.4147, -0.7612,  1.3114,
           0.5850, -0.2156,  0.8813, -0.7365]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 0.9295, -0.3093,  0.0040,  0.3229, -0.1651, -1.0875, -2.0441,
           0.7818,  0.4363, -1.2065,  0.7578, -0.2484, -0.6040,  0.4072,
           0.5942,  0.9639,  0.8987,  0.2022,  2.0499,  0.9623, -0.0918,
           0.6244,  1.1046, -2.3258, -0.0638,  1.0635,  0.3568,  0.0199,
          -0.6770, -1.6307,  0.3515, -1.1518]],

        [[-0.2587,  1.0126,  0.1633,  0.8984, -0.6146,  1.3150, -0.9083,
           0.3125, -0.5629, -0.8901, -1.4713,  0.1556, -0.2525, -0.1407,
          -1.2085, -0.5731,  0.6618,  0.0595, -1.8658, -0.4576,  0.3063,
           0.8533,  0.5660, -0.3317, -1.8656, -0.4469,  0.6227, -0.0809,
           0.2340,  0.3813, -1.3935,  1.6682]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 541.434, Val Loss : 471.531
======> Trajectory Loss : 410.288, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.311, BelowGroundPenalize Loss : 0.000
[#]Finish Epoch : 1/100000.........Train loss : 1491.627, Val loss : 1190.719
[+++]Saving the best model checkpoint : Prev loss 20000000000.000 > Curr loss 1190.719
[+++]Saving the best model checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_best.pth
[#]Saving the lastest checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_lastest.pth
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 2/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
