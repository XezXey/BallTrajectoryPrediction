==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 49.46it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.96it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
LEARNABLE
LEARNABLE
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[[[-1.2860e+00, -1.6546e+00,  1.3275e+00,  ..., -5.0093e-01,
            7.2126e-01, -1.3610e+00],
          [-1.8511e+00, -1.0543e+00,  5.7694e-01,  ..., -3.5600e-01,
           -8.1063e-01,  2.0908e-01],
          [ 1.4374e+00, -1.2772e+00,  1.7931e-01,  ..., -5.8173e-01,
           -1.5759e+00, -4.0117e-01],
          ...,
          [ 2.3841e-01, -8.3588e-01, -2.1067e-01,  ..., -1.2802e+00,
            1.7375e+00,  2.3917e-01],
          [-5.0680e-01,  1.7106e-01, -2.3081e-01,  ..., -1.5199e+00,
            4.0044e-01,  8.2284e-01],
          [ 1.6148e+00, -9.9292e-01, -4.0052e-01,  ..., -1.4443e-01,
           -1.4926e-01, -4.5071e-01]],

         [[-1.3660e+00,  4.9436e-01, -2.1107e+00,  ..., -1.3668e+00,
           -9.8881e-01, -4.4050e-01],
          [ 1.0705e+00, -7.0894e-01, -3.6773e-01,  ...,  7.6674e-01,
           -7.1119e-01, -2.7181e-01],
          [ 1.4286e-01,  2.6270e-01, -1.3792e+00,  ..., -1.9085e-01,
           -5.0559e-02, -2.1200e-01],
          ...,
          [ 3.8301e-01,  1.9972e+00, -1.2435e+00,  ..., -4.3260e-01,
           -5.1187e-02,  3.3588e-01],
          [-7.1686e-01, -4.6502e-01,  7.7594e-01,  ...,  4.2769e-01,
           -3.9059e-01,  2.4674e+00],
          [-3.3893e-02,  2.6243e-01,  1.2162e+00,  ...,  1.2475e+00,
           -1.4287e+00, -8.2192e-01]]],


        [[[ 2.5089e-01,  9.4896e-01,  5.7040e-01,  ...,  2.0510e-01,
           -3.4094e-01, -6.8637e-02],
          [ 1.1332e-01, -3.2561e-01,  5.9622e-01,  ...,  1.1048e+00,
            6.3133e-01, -6.9411e-01],
          [ 4.4920e-01, -3.5278e-01,  1.7478e+00,  ...,  2.6803e+00,
            7.3186e-01,  1.1667e+00],
          ...,
          [ 6.7381e-01,  1.3519e+00, -9.0929e-01,  ...,  8.8230e-01,
            9.6279e-02, -5.7461e-01],
          [-5.5655e-01,  1.3708e-01,  2.8713e-01,  ...,  1.3858e+00,
           -4.0270e-01,  2.7191e-01],
          [-1.1353e+00, -1.5765e+00, -7.0252e-01,  ..., -6.4884e-01,
            4.0299e-01, -1.2696e+00]],

         [[-1.8981e-03, -2.9035e-01,  6.2732e-01,  ...,  4.5332e-01,
            5.8003e-01, -1.2866e+00],
          [ 1.5334e-01, -6.7457e-01,  4.5444e-01,  ...,  1.1172e+00,
            2.1342e-02,  3.8244e-02],
          [-8.8212e-01,  9.1506e-01,  7.8513e-01,  ..., -2.3093e+00,
            1.0666e+00,  5.1461e-01],
          ...,
          [-1.2972e-01,  2.0147e+00, -1.1837e+00,  ..., -6.1998e-01,
           -3.5772e-01, -5.1847e-01],
          [ 9.3518e-01, -2.6796e-01,  1.2650e+00,  ...,  5.3718e-03,
            2.3016e-01,  1.0752e+00],
          [ 1.5106e+00,  1.4656e+00,  2.4679e-01,  ...,  1.7062e-01,
           -4.5918e-01, -8.1990e-01]]],


        [[[ 1.5562e-01, -8.0135e-01, -1.1336e+00,  ...,  4.4363e-01,
           -2.9372e-01, -6.8775e-01],
          [-9.3706e-01, -6.2963e-01, -1.5560e-01,  ..., -2.0673e-02,
           -1.8731e-01, -4.1762e-01],
          [-4.9023e-01,  1.4176e+00,  2.1512e-01,  ...,  1.9316e-01,
            5.8612e-01,  1.0653e+00],
          ...,
          [-1.4975e+00, -1.6114e+00, -3.1384e-01,  ...,  1.0009e+00,
           -4.6523e-01,  4.5646e-01],
          [ 1.7499e+00,  1.8608e+00, -1.5460e+00,  ..., -6.3674e-01,
            4.3156e-01, -1.0069e+00],
          [ 9.7533e-02, -2.1832e-01, -1.1678e+00,  ..., -5.1447e-01,
           -8.9531e-01, -2.8806e-01]],

         [[ 3.2794e-01,  1.3408e+00,  9.7765e-01,  ..., -6.4806e-01,
           -7.1190e-01,  2.1526e+00],
          [ 4.4310e-01, -1.2960e-01,  1.8328e+00,  ...,  1.6224e+00,
           -7.5487e-01, -5.3125e-01],
          [-8.9441e-01, -3.5454e-01,  5.0130e-01,  ...,  1.1916e+00,
           -1.6590e+00, -1.0496e+00],
          ...,
          [ 8.8210e-01, -1.1472e+00,  7.9976e-01,  ..., -1.4580e-01,
           -5.3984e-01,  5.2601e-01],
          [-8.8944e-01, -5.1995e-01, -1.1920e-01,  ...,  3.7418e-01,
            3.5839e-01, -1.0342e+00],
          [-2.7705e-01,  7.2184e-01, -3.4303e-01,  ..., -4.7739e-02,
            5.2172e-01, -1.0209e+00]]],


        [[[ 8.8688e-02, -1.1131e+00,  1.5920e+00,  ..., -2.4985e-01,
           -3.2863e-01,  1.0450e+00],
          [-9.5021e-02, -1.8662e+00,  1.7128e-01,  ..., -1.3099e+00,
           -4.8536e-01,  7.8257e-01],
          [-1.5664e+00,  1.3926e+00,  8.9217e-01,  ..., -2.7850e-01,
           -9.2920e-01,  6.7859e-01],
          ...,
          [-1.5141e+00, -1.1002e+00, -1.2618e+00,  ..., -2.0046e-01,
           -3.7448e-01,  9.9706e-01],
          [-7.9800e-01,  1.6687e+00,  4.1337e-01,  ..., -1.4197e+00,
           -6.3516e-01,  3.7743e-01],
          [ 4.7539e-01,  2.3401e+00,  2.7906e-01,  ...,  6.1090e-02,
           -2.1880e+00,  1.2293e-01]],

         [[ 6.6231e-01,  1.4037e+00,  9.7507e-01,  ...,  7.2050e-02,
            2.3391e+00,  1.7513e+00],
          [-4.0048e-01,  1.4807e+00, -6.9779e-01,  ...,  5.0848e-01,
           -2.9907e-01,  1.1152e+00],
          [-2.0729e-01,  8.4189e-01,  2.0191e-01,  ..., -9.0808e-03,
           -1.1864e+00,  1.0364e+00],
          ...,
          [-1.4738e+00, -8.0037e-01,  2.9171e-01,  ...,  4.2448e-01,
            1.1955e-01,  1.5549e-01],
          [ 1.1111e+00, -4.5120e-01,  2.0403e-01,  ..., -4.0210e-01,
           -5.6684e-01,  5.7229e-01],
          [ 5.6477e-01,  4.1783e-01, -2.9972e-01,  ..., -1.4904e+00,
           -6.2762e-01, -1.4283e+00]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 0.1425, -1.0007, -1.3654,  ...,  0.8958,  1.3652,  0.0992],
          [ 2.2131, -0.6157,  0.5391,  ...,  1.0109, -0.9495, -1.7340],
          [-0.9769, -0.5518, -0.0241,  ...,  0.7940,  0.5592,  0.6766],
          ...,
          [ 1.1303, -1.3692,  1.2677,  ..., -0.2744, -0.3665,  0.8355],
          [ 0.2682,  0.2309, -0.0473,  ...,  0.8164,  0.2987, -2.4538],
          [-3.0196,  1.3791,  0.0205,  ...,  0.7728,  0.5921,  0.4120]],

         [[-1.6081, -0.5119, -1.4367,  ..., -0.0795, -0.7378, -0.6678],
          [-0.4621, -0.8321, -0.3978,  ...,  0.0520, -0.7508, -0.0548],
          [-0.2567, -1.4868,  1.6950,  ...,  1.1763, -0.1574,  0.2603],
          ...,
          [-1.5104, -0.1485, -0.7101,  ...,  0.4122,  1.9391, -0.2483],
          [ 0.7214, -0.6654,  0.1426,  ...,  0.3222,  0.8351,  0.4447],
          [ 0.1412,  0.5373,  0.0504,  ...,  0.6141,  2.0718,  0.5267]]],


        [[[-1.7647, -0.4553, -0.6697,  ...,  0.2072,  1.0568,  0.8864],
          [ 0.3177,  0.0700,  0.9874,  ...,  0.1623,  0.0818,  1.8417],
          [ 0.7571,  0.5144, -2.7506,  ...,  1.7775, -0.0688, -0.7808],
          ...,
          [-2.1832,  0.6990,  0.0031,  ..., -0.1311,  0.3687, -1.4704],
          [ 1.4558,  1.7112, -0.5184,  ...,  0.2555,  1.0175,  0.9698],
          [ 0.0722,  0.2240,  0.5172,  ..., -0.6491,  0.1557,  1.1553]],

         [[-0.0476,  0.5512, -0.1232,  ..., -1.9409,  0.5796,  0.9428],
          [ 0.9150, -0.5888, -0.6075,  ...,  0.1901, -0.9893, -2.4709],
          [-1.0743, -0.2697, -0.9084,  ..., -0.9770, -1.1389, -0.6779],
          ...,
          [ 0.2157, -0.3268, -1.0435,  ...,  1.5634,  1.5342, -0.4746],
          [-0.0370,  0.0555, -1.2397,  ..., -0.3721, -0.5793, -0.6867],
          [ 0.2703, -0.0126, -1.1807,  ...,  0.8922, -0.3284, -0.2245]]],


        [[[-0.2844,  0.5082, -0.6223,  ..., -0.9184, -0.7517, -0.2406],
          [ 0.1274,  1.2882,  0.2140,  ...,  1.0163,  0.8346,  0.0260],
          [ 1.1976,  1.1541, -0.5897,  ...,  1.4179, -0.3568, -0.3837],
          ...,
          [-0.4728, -0.2299, -0.5687,  ..., -1.5940, -2.1037,  0.6631],
          [-1.6762, -0.5897, -1.9746,  ...,  0.8467, -0.2302,  0.6313],
          [ 2.0151, -0.2468,  0.1665,  ..., -1.6411,  1.0017, -0.3614]],

         [[ 0.0758,  0.7146,  0.3839,  ...,  0.7676,  0.9436, -0.0440],
          [ 0.7605, -1.5463, -0.9150,  ...,  0.2089, -1.2210,  0.0527],
          [ 0.5459,  1.0543,  0.1035,  ...,  0.7512, -0.3577, -0.7407],
          ...,
          [-0.4842, -0.5304, -0.7356,  ..., -0.6422, -0.0534, -0.7847],
          [ 0.4890, -0.2100, -0.8240,  ...,  0.6003, -0.3682,  0.4390],
          [ 0.7332,  1.1408, -0.3568,  ..., -1.2042, -1.0824, -0.7723]]],


        [[[ 2.1884,  0.5226,  0.5603,  ...,  0.4538,  1.8138,  1.7983],
          [ 1.4732, -1.3978, -0.7026,  ...,  0.0835, -0.2407, -2.0219],
          [ 0.2581,  0.8672,  2.2490,  ..., -1.7269, -1.2237, -0.9521],
          ...,
          [ 0.0243,  0.3179, -0.4354,  ..., -0.2064, -0.6995, -1.0261],
          [ 0.2813,  0.5651,  0.5976,  ...,  0.7857,  0.4414,  1.4869],
          [-0.3088, -0.2308,  0.3562,  ..., -1.3034, -0.5230,  0.5250]],

         [[ 0.5303,  0.7899, -0.1576,  ...,  0.6651,  0.5803, -0.5549],
          [ 0.6703, -0.3595,  0.5939,  ..., -0.2999,  0.2084, -2.4274],
          [-0.3624,  0.7168, -0.2476,  ..., -1.1860,  0.7849,  0.4327],
          ...,
          [ 0.6774,  1.5037, -1.3999,  ..., -0.0380, -0.8796, -1.5474],
          [ 0.6761,  0.3477, -0.1604,  ..., -0.2014, -0.2991, -0.3870],
          [ 0.7115,  0.9949, -1.8735,  ..., -1.7668, -0.5007, -1.0172]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
