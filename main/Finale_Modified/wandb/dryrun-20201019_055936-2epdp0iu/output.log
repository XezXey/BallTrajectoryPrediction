==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.56it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 13.01it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.92it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 833, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 767, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 767, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 767, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 856, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 787, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 787, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 813, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 813, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 813, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 750, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 750, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 751, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 720, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 720, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 720, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 708, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 798, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 798, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 799, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 751, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 751, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 751, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 785, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 785, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 797, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 797, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 725, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 725, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 725, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 726, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 642, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 642, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 642, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 643, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 727, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 727, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 797, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 797, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 764, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 764, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 727, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 727, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [32, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [32, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
GRUResidual(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True)
    (1): GRU(32, 32, batch_first=True)
    (2): GRU(32, 32, batch_first=True)
    (3): GRU(32, 32, batch_first=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=32, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
GRUResidual(
  (recurrent_blocks): ModuleList(
    (0): GRU(3, 32, batch_first=True)
    (1): GRU(32, 32, batch_first=True)
    (2): GRU(32, 32, batch_first=True)
    (3): GRU(32, 32, batch_first=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=32, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........Train Loss : 339.180, Val Loss : 223.340
======> Trajectory Loss : 167.669, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.413, BelowGroundPenalize Loss : 30.253
Opening in existing browser session.
[1019/125943.522000:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/125943.832887:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/125944.098088:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/129].........Train Loss : 159.589, Val Loss : 788.758
======> Trajectory Loss : 17.334, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.399, BelowGroundPenalize Loss : 2.306
===> [Minibatch 3/129].........Train Loss : 241.885, Val Loss : 455.614
======> Trajectory Loss : 102.924, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.390, BelowGroundPenalize Loss : 0.000
===> [Minibatch 4/129].........Train Loss : 202.866, Val Loss : 201.600
======> Trajectory Loss : 65.926, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.369, BelowGroundPenalize Loss : 0.002
===> [Minibatch 5/129].........Train Loss : 152.818, Val Loss : 153.641
======> Trajectory Loss : 19.154, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.336, BelowGroundPenalize Loss : 0.113
===> [Minibatch 6/129].........Train Loss : 142.091, Val Loss : 150.070
======> Trajectory Loss : 11.168, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.298, BelowGroundPenalize Loss : 1.106
===> [Minibatch 7/129].........Train Loss : 135.434, Val Loss : 133.914
======> Trajectory Loss : 13.186, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.208, BelowGroundPenalize Loss : 1.425
===> [Minibatch 8/129].........Train Loss : 124.316, Val Loss : 166.530
======> Trajectory Loss : 11.187, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.124, BelowGroundPenalize Loss : 0.703
===> [Minibatch 9/129].........Train Loss : 115.359, Val Loss : 177.490
======> Trajectory Loss : 13.632, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.016, BelowGroundPenalize Loss : 0.127
===> [Minibatch 10/129].........Train Loss : 126.917, Val Loss : 150.089
======> Trajectory Loss : 27.416, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.994, BelowGroundPenalize Loss : 0.063
===> [Minibatch 11/129].........Train Loss : 118.365, Val Loss : 129.836
======> Trajectory Loss : 12.403, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.058, BelowGroundPenalize Loss : 0.203
===> [Minibatch 12/129].........Train Loss : 120.338, Val Loss : 128.273
======> Trajectory Loss : 11.294, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.083, BelowGroundPenalize Loss : 0.744
===> [Minibatch 13/129].........Train Loss : 115.159, Val Loss : 114.812
======> Trajectory Loss : 10.559, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.037, BelowGroundPenalize Loss : 0.942
===> [Minibatch 14/129].........Train Loss : 100.409, Val Loss : 109.673
======> Trajectory Loss : 12.409, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.874, BelowGroundPenalize Loss : 0.631
===> [Minibatch 15/129].........Train Loss : 89.352, Val Loss : 109.517
======> Trajectory Loss : 9.416, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.791, BelowGroundPenalize Loss : 0.843
===> [Minibatch 16/129].........Train Loss : 87.732, Val Loss : 127.349
======> Trajectory Loss : 12.304, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.751, BelowGroundPenalize Loss : 0.294
===> [Minibatch 17/129].........Train Loss : 101.599, Val Loss : 120.755
======> Trajectory Loss : 9.136, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.923, BelowGroundPenalize Loss : 0.162
===> [Minibatch 18/129].........Train Loss : 107.797, Val Loss : 99.176
======> Trajectory Loss : 8.252, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.991, BelowGroundPenalize Loss : 0.454
===> [Minibatch 19/129].........Train Loss : 90.048, Val Loss : 106.802
======> Trajectory Loss : 11.268, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.783, BelowGroundPenalize Loss : 0.453
===> [Minibatch 20/129].........Train Loss : 87.175, Val Loss : 122.620
======> Trajectory Loss : 14.220, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.717, BelowGroundPenalize Loss : 1.231
===> [Minibatch 21/129].........Train Loss : 90.890, Val Loss : 106.666
======> Trajectory Loss : 13.826, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.759, BelowGroundPenalize Loss : 1.115
===> [Minibatch 22/129].........Train Loss : 87.557, Val Loss : 79.938
======> Trajectory Loss : 12.069, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.746, BelowGroundPenalize Loss : 0.907
===> [Minibatch 23/129].........Train Loss : 70.191, Val Loss : 100.740
======> Trajectory Loss : 7.132, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.627, BelowGroundPenalize Loss : 0.365
===> [Minibatch 24/129].........Train Loss : 82.242, Val Loss : 120.137
======> Trajectory Loss : 8.372, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.739, BelowGroundPenalize Loss : 0.015
===> [Minibatch 25/129].........Train Loss : 83.189, Val Loss : 108.909
======> Trajectory Loss : 10.165, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.730, BelowGroundPenalize Loss : 0.023
===> [Minibatch 26/129].........Train Loss : 72.390, Val Loss : 82.532
======> Trajectory Loss : 7.278, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.651, BelowGroundPenalize Loss : 0.009
===> [Minibatch 27/129].........Train Loss : 61.867, Val Loss : 63.368
======> Trajectory Loss : 5.426, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.564, BelowGroundPenalize Loss : 0.006
===> [Minibatch 28/129].........Train Loss : 58.476, Val Loss : 64.432
======> Trajectory Loss : 5.742, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.526, BelowGroundPenalize Loss : 0.107
===> [Minibatch 29/129].........Train Loss : 60.180, Val Loss : 59.763
======> Trajectory Loss : 4.340, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.558, BelowGroundPenalize Loss : 0.078
===> [Minibatch 30/129].........Train Loss : 52.710, Val Loss : 64.173
======> Trajectory Loss : 3.102, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.496, BelowGroundPenalize Loss : 0.010
===> [Minibatch 31/129].........Train Loss : 52.880, Val Loss : 63.649
======> Trajectory Loss : 4.221, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.487, BelowGroundPenalize Loss : 0.001
===> [Minibatch 32/129].........Train Loss : 48.458, Val Loss : 63.364
======> Trajectory Loss : 5.514, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.429, BelowGroundPenalize Loss : 0.005
===> [Minibatch 33/129].........Train Loss : 58.199, Val Loss : 57.122
======> Trajectory Loss : 4.772, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.534, BelowGroundPenalize Loss : 0.034
===> [Minibatch 34/129].........Train Loss : 53.828, Val Loss : 53.396
======> Trajectory Loss : 4.684, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.491, BelowGroundPenalize Loss : 0.086
===> [Minibatch 35/129].........Train Loss : 47.423, Val Loss : 57.665
======> Trajectory Loss : 4.005, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.434, BelowGroundPenalize Loss : 0.015
===> [Minibatch 36/129].........Train Loss : 46.866, Val Loss : 72.000
======> Trajectory Loss : 4.340, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.425, BelowGroundPenalize Loss : 0.001
===> [Minibatch 37/129].........Train Loss : 67.747, Val Loss : 70.677
======> Trajectory Loss : 4.728, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.630, BelowGroundPenalize Loss : 0.000
===> [Minibatch 38/129].........Train Loss : 82.444, Val Loss : 46.948
======> Trajectory Loss : 5.573, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.769, BelowGroundPenalize Loss : 0.009
===> [Minibatch 39/129].........Train Loss : 44.815, Val Loss : 51.645
======> Trajectory Loss : 3.486, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.413, BelowGroundPenalize Loss : 0.011
===> [Minibatch 40/129].........Train Loss : 46.510, Val Loss : 61.232
======> Trajectory Loss : 3.004, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.435, BelowGroundPenalize Loss : 0.044
===> [Minibatch 41/129].........Train Loss : 48.356, Val Loss : 63.715
======> Trajectory Loss : 4.723, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.436, BelowGroundPenalize Loss : 0.006
===> [Minibatch 42/129].........Train Loss : 44.417, Val Loss : 54.201
======> Trajectory Loss : 4.511, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.399, BelowGroundPenalize Loss : 0.008
===> [Minibatch 43/129].........Train Loss : 40.785, Val Loss : 46.695
======> Trajectory Loss : 6.169, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.346, BelowGroundPenalize Loss : 0.017
===> [Minibatch 44/129].........Train Loss : 50.603, Val Loss : 60.272
======> Trajectory Loss : 5.101, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.455, BelowGroundPenalize Loss : 0.033
===> [Minibatch 45/129].........Train Loss : 67.935, Val Loss : 59.152
======> Trajectory Loss : 4.096, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.638, BelowGroundPenalize Loss : 0.069
===> [Minibatch 46/129].........Train Loss : 70.096, Val Loss : 41.985
======> Trajectory Loss : 4.619, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.653, BelowGroundPenalize Loss : 0.133
===> [Minibatch 47/129].........Train Loss : 47.380, Val Loss : 40.262
======> Trajectory Loss : 3.697, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.436, BelowGroundPenalize Loss : 0.119
===> [Minibatch 48/129].........Train Loss : 39.458, Val Loss : 52.928
======> Trajectory Loss : 3.076, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.364, BelowGroundPenalize Loss : 0.024
===> [Minibatch 49/129].........Train Loss : 38.200, Val Loss : 58.342
======> Trajectory Loss : 4.762, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.334, BelowGroundPenalize Loss : 0.002
===> [Minibatch 50/129].........Train Loss : 36.626, Val Loss : 60.830
======> Trajectory Loss : 4.664, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.320, BelowGroundPenalize Loss : 0.001
===> [Minibatch 51/129].........Train Loss : 39.723, Val Loss : 39.974
======> Trajectory Loss : 4.332, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.354, BelowGroundPenalize Loss : 0.001
===> [Minibatch 52/129].........Train Loss : 36.632, Val Loss : 32.801
======> Trajectory Loss : 3.615, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.330, BelowGroundPenalize Loss : 0.007
===> [Minibatch 53/129].........Train Loss : 32.968, Val Loss : 44.276
======> Trajectory Loss : 5.155, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.277, BelowGroundPenalize Loss : 0.106
===> [Minibatch 54/129].........Train Loss : 36.576, Val Loss : 43.402
======> Trajectory Loss : 6.977, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.292, BelowGroundPenalize Loss : 0.368
===> [Minibatch 55/129].........Train Loss : 39.513, Val Loss : 37.847
======> Trajectory Loss : 7.682, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.313, BelowGroundPenalize Loss : 0.572
===> [Minibatch 56/129].........Train Loss : 41.361, Val Loss : 42.756
======> Trajectory Loss : 8.285, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.326, BelowGroundPenalize Loss : 0.499
===> [Minibatch 57/129].........Train Loss : 51.336, Val Loss : 39.678
======> Trajectory Loss : 4.194, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.469, BelowGroundPenalize Loss : 0.210
===> [Minibatch 58/129].........Train Loss : 37.129, Val Loss : 47.597
======> Trajectory Loss : 3.129, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.340, BelowGroundPenalize Loss : 0.022
===> [Minibatch 59/129].........Train Loss : 29.886, Val Loss : 59.828
======> Trajectory Loss : 3.673, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.262, BelowGroundPenalize Loss : 0.001
===> [Minibatch 60/129].........Train Loss : 32.437, Val Loss : 56.451
======> Trajectory Loss : 5.704, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.267, BelowGroundPenalize Loss : 0.000
===> [Minibatch 61/129].........Train Loss : 33.384, Val Loss : 38.614
======> Trajectory Loss : 4.906, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.285, BelowGroundPenalize Loss : 0.001
===> [Minibatch 62/129].........Train Loss : 26.450, Val Loss : 31.543
======> Trajectory Loss : 3.501, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.229, BelowGroundPenalize Loss : 0.001
===> [Minibatch 63/129].........Train Loss : 29.317, Val Loss : 32.049
======> Trajectory Loss : 3.574, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.257, BelowGroundPenalize Loss : 0.053
===> [Minibatch 64/129].........Train Loss : 36.760, Val Loss : 31.365
======> Trajectory Loss : 6.562, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.300, BelowGroundPenalize Loss : 0.203
===> [Minibatch 65/129].........Train Loss : 32.187, Val Loss : 30.682
======> Trajectory Loss : 5.112, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.269, BelowGroundPenalize Loss : 0.199
===> [Minibatch 66/129].........Train Loss : 30.791, Val Loss : 32.891
======> Trajectory Loss : 3.885, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.268, BelowGroundPenalize Loss : 0.106
===> [Minibatch 67/129].........Train Loss : 28.630, Val Loss : 51.111
======> Trajectory Loss : 2.331, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.263, BelowGroundPenalize Loss : 0.014
===> [Minibatch 68/129].........Train Loss : 31.090, Val Loss : 66.765
======> Trajectory Loss : 4.470, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.266, BelowGroundPenalize Loss : 0.000
===> [Minibatch 69/129].........Train Loss : 29.660, Val Loss : 69.318
======> Trajectory Loss : 7.199, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.225, BelowGroundPenalize Loss : 0.000
===> [Minibatch 70/129].........Train Loss : 30.748, Val Loss : 57.063
======> Trajectory Loss : 7.216, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.235, BelowGroundPenalize Loss : 0.000
===> [Minibatch 71/129].........Train Loss : 29.465, Val Loss : 41.137
======> Trajectory Loss : 6.397, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.231, BelowGroundPenalize Loss : 0.000
===> [Minibatch 72/129].........Train Loss : 27.684, Val Loss : 30.766
======> Trajectory Loss : 4.354, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.233, BelowGroundPenalize Loss : 0.004
===> [Minibatch 73/129].........Train Loss : 28.284, Val Loss : 29.791
======> Trajectory Loss : 3.447, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.247, BelowGroundPenalize Loss : 0.117
===> [Minibatch 74/129].........Train Loss : 29.362, Val Loss : 29.125
======> Trajectory Loss : 4.970, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.242, BelowGroundPenalize Loss : 0.187
===> [Minibatch 75/129].........Train Loss : 27.965, Val Loss : 32.417
======> Trajectory Loss : 3.320, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.246, BelowGroundPenalize Loss : 0.065
===> [Minibatch 76/129].........Train Loss : 28.440, Val Loss : 42.571
======> Trajectory Loss : 2.913, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.255, BelowGroundPenalize Loss : 0.012
===> [Minibatch 77/129].........Train Loss : 28.479, Val Loss : 51.176
======> Trajectory Loss : 3.728, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.248, BelowGroundPenalize Loss : 0.000
===> [Minibatch 78/129].........Train Loss : 30.654, Val Loss : 46.994
======> Trajectory Loss : 5.583, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.251, BelowGroundPenalize Loss : 0.000
===> [Minibatch 79/129].........Train Loss : 24.601, Val Loss : 31.352
======> Trajectory Loss : 4.429, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.202, BelowGroundPenalize Loss : 0.001
===> [Minibatch 80/129].........Train Loss : 25.026, Val Loss : 24.550
======> Trajectory Loss : 2.709, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.223, BelowGroundPenalize Loss : 0.007
===> [Minibatch 81/129].........Train Loss : 23.654, Val Loss : 28.834
======> Trajectory Loss : 3.892, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.197, BelowGroundPenalize Loss : 0.050
===> [Minibatch 82/129].........Train Loss : 25.722, Val Loss : 29.321
======> Trajectory Loss : 5.328, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.202, BelowGroundPenalize Loss : 0.201
===> [Minibatch 83/129].........Train Loss : 26.762, Val Loss : 26.490
======> Trajectory Loss : 6.264, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.201, BelowGroundPenalize Loss : 0.362
===> [Minibatch 84/129].........Train Loss : 28.294, Val Loss : 29.268
======> Trajectory Loss : 5.794, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.221, BelowGroundPenalize Loss : 0.416
===> [Minibatch 85/129].........Train Loss : 25.034, Val Loss : 39.564
======> Trajectory Loss : 5.070, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.198, BelowGroundPenalize Loss : 0.212
===> [Minibatch 86/129].........Train Loss : 28.500, Val Loss : 53.168
======> Trajectory Loss : 6.409, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.220, BelowGroundPenalize Loss : 0.048
===> [Minibatch 87/129].........Train Loss : 27.381, Val Loss : 58.957
======> Trajectory Loss : 5.886, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.215, BelowGroundPenalize Loss : 0.011
===> [Minibatch 88/129].........Train Loss : 28.249, Val Loss : 55.145
======> Trajectory Loss : 8.106, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.201, BelowGroundPenalize Loss : 0.000
===> [Minibatch 89/129].........Train Loss : 30.734, Val Loss : 41.961
======> Trajectory Loss : 5.773, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.250, BelowGroundPenalize Loss : 0.000
===> [Minibatch 90/129].........Train Loss : 32.942, Val Loss : 25.893
======> Trajectory Loss : 5.249, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.277, BelowGroundPenalize Loss : 0.001
===> [Minibatch 91/129].........Train Loss : 23.872, Val Loss : 24.245
======> Trajectory Loss : 3.146, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.207, BelowGroundPenalize Loss : 0.009
===> [Minibatch 92/129].........Train Loss : 23.086, Val Loss : 39.506
======> Trajectory Loss : 5.032, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.179, BelowGroundPenalize Loss : 0.117
===> [Minibatch 93/129].........Train Loss : 33.266, Val Loss : 51.086
======> Trajectory Loss : 7.354, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.257, BelowGroundPenalize Loss : 0.259
===> [Minibatch 94/129].........Train Loss : 50.066, Val Loss : 39.300
======> Trajectory Loss : 8.315, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.413, BelowGroundPenalize Loss : 0.411
===> [Minibatch 95/129].........Train Loss : 33.037, Val Loss : 27.880
======> Trajectory Loss : 7.794, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.249, BelowGroundPenalize Loss : 0.314
===> [Minibatch 96/129].........Train Loss : 25.289, Val Loss : 32.038
======> Trajectory Loss : 6.337, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.188, BelowGroundPenalize Loss : 0.155
===> [Minibatch 97/129].........Train Loss : 27.737, Val Loss : 49.063
======> Trajectory Loss : 3.745, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.240, BelowGroundPenalize Loss : 0.040
===> [Minibatch 98/129].........Train Loss : 29.460, Val Loss : 60.070
======> Trajectory Loss : 7.435, Gravity Loss : 0.001, EndOfTrajectory Loss : 0.220, BelowGroundPenalize Loss : 0.000
===> [Minibatch 99/129].........Train Loss : 26.800, Val Loss : 62.416
======> Trajectory Loss : 6.472, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.203, BelowGroundPenalize Loss : 0.000
===> [Minibatch 100/129].........Train Loss : 31.927, Val Loss : 49.859
======> Trajectory Loss : 7.027, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.249, BelowGroundPenalize Loss : 0.000
===> [Minibatch 101/129].........Train Loss : 27.867, Val Loss : 34.140
======> Trajectory Loss : 7.510, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.204, BelowGroundPenalize Loss : 0.000
===> [Minibatch 102/129].........Train Loss : 22.648, Val Loss : 27.924
======> Trajectory Loss : 4.009, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.186, BelowGroundPenalize Loss : 0.024
===> [Minibatch 103/129].........Train Loss : 22.496, Val Loss : 27.064
======> Trajectory Loss : 3.605, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.188, BelowGroundPenalize Loss : 0.129
===> [Minibatch 104/129].........Train Loss : 24.360, Val Loss : 24.997
======> Trajectory Loss : 4.292, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.198, BelowGroundPenalize Loss : 0.252
===> [Minibatch 105/129].........Train Loss : 22.964, Val Loss : 25.279
======> Trajectory Loss : 4.398, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.184, BelowGroundPenalize Loss : 0.203
===> [Minibatch 106/129].........Train Loss : 23.705, Val Loss : 32.810
======> Trajectory Loss : 2.701, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.210, BelowGroundPenalize Loss : 0.044
