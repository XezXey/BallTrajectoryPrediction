==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 25.00it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 24.94it/s]
===============================Dataset shape===============================
Mixed : (7159,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 67.85it/s]
===============================Dataset shape===============================
Mixed : (1047,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 640, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 640, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 640, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 641, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 638, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 638, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 638, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 639, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 697, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 697, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 657, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 657, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 649, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 649, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 650, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 636, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 636, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 636, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 637, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 656, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 656, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 656, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 621, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 621, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 621, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 622, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 632, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 632, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 666, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 666, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 678, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 678, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 678, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 679, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 609, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 609, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 609, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 610, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 643, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 643, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 643, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 644, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 665, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 665, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 697, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 697, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 676, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 676, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 676, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 677, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 645, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 645, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 645, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 646, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 631, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 631, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 631, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 602, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 602, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 602, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 603, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 629, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 629, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 629, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 630, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 682, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 682, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 632, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 632, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 595, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 595, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 595, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 596, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 618, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 618, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 618, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 619, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 683, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 683, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 684, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 610, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 610, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 610, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 611, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 612, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 612, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 612, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 613, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 632, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 632, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 663, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 663, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 663, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 663, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 658, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 658, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 659, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 639, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 639, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 639, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 640, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 665, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 665, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 639, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 639, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 639, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 640, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 635, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 635, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 635, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 636, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 662, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 662, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 662, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 601, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 601, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 601, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 602, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 652, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 652, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 652, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 653, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 672, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 672, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 615, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 615, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 615, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 616, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 657, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 657, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/55].........Train Loss : 1478.923, Val Loss : 4459.080
======> Trajectory Loss : 1337.889, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.410, BelowGroundPenalize Loss : 0.011
Opening in existing browser session.
[1027/232214.636038:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1027/232214.934856:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1027/232215.230304:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/55].........Train Loss : 808.925, Val Loss : 1508.900
======> Trajectory Loss : 668.978, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.399, BelowGroundPenalize Loss : 0.017
===> [Minibatch 3/55].........Train Loss : 347.038, Val Loss : 287.421
======> Trajectory Loss : 208.048, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.390, BelowGroundPenalize Loss : 0.026
===> [Minibatch 4/55].........Train Loss : 162.404, Val Loss : 153.032
======> Trajectory Loss : 25.430, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.369, BelowGroundPenalize Loss : 0.092
===> [Minibatch 5/55].........Train Loss : 142.977, Val Loss : 224.174
======> Trajectory Loss : 8.511, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.342, BelowGroundPenalize Loss : 0.303
===> [Minibatch 6/55].........Train Loss : 161.834, Val Loss : 207.342
======> Trajectory Loss : 25.646, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.287, BelowGroundPenalize Loss : 7.474
===> [Minibatch 7/55].........Train Loss : 153.795, Val Loss : 222.693
======> Trajectory Loss : 24.559, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.222, BelowGroundPenalize Loss : 7.003
===> [Minibatch 8/55].........Train Loss : 150.929, Val Loss : 204.639
======> Trajectory Loss : 30.581, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.118, BelowGroundPenalize Loss : 8.544
===> [Minibatch 9/55].........Train Loss : 139.867, Val Loss : 165.871
======> Trajectory Loss : 29.597, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.013, BelowGroundPenalize Loss : 9.015
===> [Minibatch 10/55].........Train Loss : 123.132, Val Loss : 122.274
======> Trajectory Loss : 23.019, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.937, BelowGroundPenalize Loss : 6.410
===> [Minibatch 11/55].........Train Loss : 112.019, Val Loss : 93.143
======> Trajectory Loss : 16.968, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.905, BelowGroundPenalize Loss : 4.578
===> [Minibatch 12/55].........Train Loss : 97.541, Val Loss : 88.078
======> Trajectory Loss : 11.189, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.845, BelowGroundPenalize Loss : 1.821
===> [Minibatch 13/55].........Train Loss : 88.878, Val Loss : 114.403
======> Trajectory Loss : 8.452, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.799, BelowGroundPenalize Loss : 0.508
===> [Minibatch 14/55].........Train Loss : 84.345, Val Loss : 145.364
======> Trajectory Loss : 10.657, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.735, BelowGroundPenalize Loss : 0.174
===> [Minibatch 15/55].........Train Loss : 86.633, Val Loss : 167.797
======> Trajectory Loss : 15.836, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.706, BelowGroundPenalize Loss : 0.173
===> [Minibatch 16/55].........Train Loss : 88.193, Val Loss : 160.855
======> Trajectory Loss : 19.898, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.682, BelowGroundPenalize Loss : 0.107
===> [Minibatch 17/55].........Train Loss : 82.125, Val Loss : 142.080
======> Trajectory Loss : 20.099, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.619, BelowGroundPenalize Loss : 0.119
===> [Minibatch 18/55].........Train Loss : 70.824, Val Loss : 112.968
======> Trajectory Loss : 18.707, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.520, BelowGroundPenalize Loss : 0.130
===> [Minibatch 19/55].........Train Loss : 61.775, Val Loss : 83.681
======> Trajectory Loss : 12.965, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.487, BelowGroundPenalize Loss : 0.124
===> [Minibatch 20/55].........Train Loss : 55.055, Val Loss : 54.764
======> Trajectory Loss : 11.930, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.429, BelowGroundPenalize Loss : 0.208
===> [Minibatch 21/55].........Train Loss : 44.705, Val Loss : 48.331
======> Trajectory Loss : 7.347, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.369, BelowGroundPenalize Loss : 0.431
===> [Minibatch 22/55].........Train Loss : 48.308, Val Loss : 46.402
======> Trajectory Loss : 8.439, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.387, BelowGroundPenalize Loss : 1.161
===> [Minibatch 23/55].........Train Loss : 39.611, Val Loss : 48.691
======> Trajectory Loss : 10.707, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.268, BelowGroundPenalize Loss : 2.154
===> [Minibatch 24/55].........Train Loss : 42.335, Val Loss : 44.177
======> Trajectory Loss : 11.961, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.273, BelowGroundPenalize Loss : 3.055
===> [Minibatch 25/55].........Train Loss : 37.937, Val Loss : 35.155
======> Trajectory Loss : 15.025, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.190, BelowGroundPenalize Loss : 3.878
===> [Minibatch 26/55].........Train Loss : 26.577, Val Loss : 33.564
======> Trajectory Loss : 10.687, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.136, BelowGroundPenalize Loss : 2.309
===> [Minibatch 27/55].........Train Loss : 33.244, Val Loss : 19.541
======> Trajectory Loss : 8.452, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.233, BelowGroundPenalize Loss : 1.522
===> [Minibatch 28/55].........Train Loss : 33.730, Val Loss : 33.840
======> Trajectory Loss : 6.989, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.260, BelowGroundPenalize Loss : 0.712
===> [Minibatch 29/55].........Train Loss : 35.712, Val Loss : 69.679
======> Trajectory Loss : 7.831, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.275, BelowGroundPenalize Loss : 0.331
===> [Minibatch 30/55].........Train Loss : 67.866, Val Loss : 50.210
======> Trajectory Loss : 8.851, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.588, BelowGroundPenalize Loss : 0.248
===> [Minibatch 31/55].........Train Loss : 35.620, Val Loss : 33.906
======> Trajectory Loss : 9.706, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.256, BelowGroundPenalize Loss : 0.265
===> [Minibatch 32/55].........Train Loss : 25.513, Val Loss : 24.767
======> Trajectory Loss : 9.080, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.161, BelowGroundPenalize Loss : 0.322
===> [Minibatch 33/55].........Train Loss : 14.212, Val Loss : 15.780
======> Trajectory Loss : 7.338, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.066, BelowGroundPenalize Loss : 0.284
===> [Minibatch 34/55].........Train Loss : 22.997, Val Loss : 20.757
======> Trajectory Loss : 8.630, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.138, BelowGroundPenalize Loss : 0.544
===> [Minibatch 35/55].........Train Loss : 29.406, Val Loss : 15.853
======> Trajectory Loss : 6.965, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.218, BelowGroundPenalize Loss : 0.684
===> [Minibatch 36/55].........Train Loss : 24.697, Val Loss : 18.007
======> Trajectory Loss : 7.419, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.165, BelowGroundPenalize Loss : 0.784
===> [Minibatch 37/55].........Train Loss : 19.131, Val Loss : 24.071
======> Trajectory Loss : 7.804, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.107, BelowGroundPenalize Loss : 0.589
===> [Minibatch 38/55].........Train Loss : 27.168, Val Loss : 15.933
======> Trajectory Loss : 7.391, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.193, BelowGroundPenalize Loss : 0.457
===> [Minibatch 39/55].........Train Loss : 22.238, Val Loss : 16.239
======> Trajectory Loss : 9.144, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.125, BelowGroundPenalize Loss : 0.632
===> [Minibatch 40/55].........Train Loss : 20.095, Val Loss : 19.555
======> Trajectory Loss : 8.526, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.109, BelowGroundPenalize Loss : 0.678
===> [Minibatch 41/55].........Train Loss : 21.252, Val Loss : 17.593
======> Trajectory Loss : 7.969, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.128, BelowGroundPenalize Loss : 0.439
===> [Minibatch 42/55].........Train Loss : 13.800, Val Loss : 13.749
======> Trajectory Loss : 7.785, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.056, BelowGroundPenalize Loss : 0.401
===> [Minibatch 43/55].........Train Loss : 12.841, Val Loss : 16.491
======> Trajectory Loss : 7.894, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.044, BelowGroundPenalize Loss : 0.551
===> [Minibatch 44/55].........Train Loss : 12.961, Val Loss : 22.355
======> Trajectory Loss : 7.930, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.045, BelowGroundPenalize Loss : 0.506
===> [Minibatch 45/55].........Train Loss : 19.084, Val Loss : 17.742
======> Trajectory Loss : 8.076, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.106, BelowGroundPenalize Loss : 0.420
===> [Minibatch 46/55].........Train Loss : 18.453, Val Loss : 12.388
======> Trajectory Loss : 8.050, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.099, BelowGroundPenalize Loss : 0.477
===> [Minibatch 47/55].........Train Loss : 11.895, Val Loss : 11.904
======> Trajectory Loss : 7.526, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.038, BelowGroundPenalize Loss : 0.524
===> [Minibatch 48/55].........Train Loss : 12.405, Val Loss : 46.192
======> Trajectory Loss : 6.853, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.051, BelowGroundPenalize Loss : 0.450
===> [Minibatch 49/55].........Train Loss : 15.492, Val Loss : 25.388
======> Trajectory Loss : 10.868, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.044, BelowGroundPenalize Loss : 0.177
===> [Minibatch 50/55].........Train Loss : 12.567, Val Loss : 10.093
======> Trajectory Loss : 8.772, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.035, BelowGroundPenalize Loss : 0.325
===> [Minibatch 51/55].........Train Loss : 20.679, Val Loss : 15.863
======> Trajectory Loss : 10.370, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.084, BelowGroundPenalize Loss : 1.866
===> [Minibatch 52/55].........Train Loss : 17.574, Val Loss : 23.026
======> Trajectory Loss : 10.902, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.045, BelowGroundPenalize Loss : 2.199
===> [Minibatch 53/55].........Train Loss : 25.244, Val Loss : 17.212
======> Trajectory Loss : 11.434, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.112, BelowGroundPenalize Loss : 2.631
===> [Minibatch 54/55].........Train Loss : 24.558, Val Loss : 7.064
======> Trajectory Loss : 11.036, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.115, BelowGroundPenalize Loss : 1.978
===> [Minibatch 55/55].........Train Loss : 11.104, Val Loss : 30.583
======> Trajectory Loss : 6.907, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.033, BelowGroundPenalize Loss : 0.914
[#]Finish Epoch : 1/100000.........Train loss : 98.149, Val loss : 175.285
[+++]Saving the best model checkpoint : Prev loss 20000000000.000 > Curr loss 175.285
[+++]Saving the best model checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_best.pth
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 2/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/55].........Train Loss : 12.146, Val Loss : 29.773
======> Trajectory Loss : 7.527, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.043, BelowGroundPenalize Loss : 0.330
Opening in existing browser session.
[1027/232339.159935:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1027/232339.377720:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1027/232339.695230:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/55].........Train Loss : 15.600, Val Loss : 12.762
======> Trajectory Loss : 8.257, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.070, BelowGroundPenalize Loss : 0.307
===> [Minibatch 3/55].........Train Loss : 14.447, Val Loss : 5.466
======> Trajectory Loss : 7.526, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.065, BelowGroundPenalize Loss : 0.382
===> [Minibatch 4/55].........Train Loss : 19.023, Val Loss : 7.575
======> Trajectory Loss : 6.791, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.115, BelowGroundPenalize Loss : 0.748
===> [Minibatch 5/55].........Train Loss : 32.616, Val Loss : 6.833
======> Trajectory Loss : 7.521, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.244, BelowGroundPenalize Loss : 0.711
===> [Minibatch 6/55].........Train Loss : 17.766, Val Loss : 13.009
======> Trajectory Loss : 8.751, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.083, BelowGroundPenalize Loss : 0.704
===> [Minibatch 7/55].........Train Loss : 8.983, Val Loss : 16.825
======> Trajectory Loss : 7.354, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.012, BelowGroundPenalize Loss : 0.399
===> [Minibatch 8/55].........Train Loss : 10.232, Val Loss : 14.304
======> Trajectory Loss : 7.691, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.023, BelowGroundPenalize Loss : 0.287
===> [Minibatch 9/55].........Train Loss : 15.917, Val Loss : 8.135
======> Trajectory Loss : 7.510, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.080, BelowGroundPenalize Loss : 0.384
===> [Minibatch 10/55].........Train Loss : 8.655, Val Loss : 4.579
======> Trajectory Loss : 6.373, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.018, BelowGroundPenalize Loss : 0.468
===> [Minibatch 11/55].........Train Loss : 13.485, Val Loss : 4.439
======> Trajectory Loss : 8.183, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.044, BelowGroundPenalize Loss : 0.915
===> [Minibatch 12/55].........Train Loss : 11.756, Val Loss : 3.067
======> Trajectory Loss : 7.618, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.031, BelowGroundPenalize Loss : 0.999
===> [Minibatch 13/55].........Train Loss : 13.472, Val Loss : 8.619
======> Trajectory Loss : 8.668, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.036, BelowGroundPenalize Loss : 1.239
===> [Minibatch 14/55].........Train Loss : 8.341, Val Loss : 29.867
======> Trajectory Loss : 7.140, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.008, BelowGroundPenalize Loss : 0.410
===> [Minibatch 15/55].........Train Loss : 12.527, Val Loss : 36.807
======> Trajectory Loss : 8.839, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.035, BelowGroundPenalize Loss : 0.165
===> [Minibatch 16/55].........Train Loss : 11.710, Val Loss : 40.405
======> Trajectory Loss : 10.098, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.015, BelowGroundPenalize Loss : 0.159
===> [Minibatch 17/55].........Train Loss : 12.164, Val Loss : 35.558
======> Trajectory Loss : 10.784, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.012, BelowGroundPenalize Loss : 0.181
===> [Minibatch 18/55].........Train Loss : 16.859, Val Loss : 23.911
======> Trajectory Loss : 11.251, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.054, BelowGroundPenalize Loss : 0.201
===> [Minibatch 19/55].........Train Loss : 11.511, Val Loss : 10.873
======> Trajectory Loss : 9.475, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.018, BelowGroundPenalize Loss : 0.240
===> [Minibatch 20/55].........Train Loss : 12.055, Val Loss : 5.128
======> Trajectory Loss : 6.583, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.051, BelowGroundPenalize Loss : 0.340
===> [Minibatch 21/55].........Train Loss : 15.061, Val Loss : 6.173
======> Trajectory Loss : 7.457, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.069, BelowGroundPenalize Loss : 0.716
===> [Minibatch 22/55].........Train Loss : 11.224, Val Loss : 12.373
======> Trajectory Loss : 8.382, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.016, BelowGroundPenalize Loss : 1.210
===> [Minibatch 23/55].........Train Loss : 17.856, Val Loss : 12.324
======> Trajectory Loss : 10.653, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.056, BelowGroundPenalize Loss : 1.636
