==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.63it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 13.14it/s]
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.14it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 765, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 765, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 766, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 832, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 832, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 725, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 725, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 725, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 726, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 759, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 759, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 755, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 755, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 756, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 786, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 786, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 737, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 737, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 737, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 738, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 813, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 813, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 813, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 833, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 745, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 745, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 746, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 710, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 710, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 710, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 805, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 805, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 806, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 736, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 736, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 737, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........tensor([[[ 6.9919e-01, -9.0605e-02, -3.2780e-01,  ..., -6.8060e-01,
          -1.0286e+00,  4.3440e-01],
         [-1.5842e-01, -1.5690e+00, -1.1213e+00,  ..., -5.0847e-01,
           4.1644e-01,  1.1006e+00],
         [-3.2279e-01, -4.9885e-02,  3.3734e-01,  ...,  1.4058e-02,
          -6.4499e-01, -6.1983e-01],
         ...,
         [-8.9202e-04, -8.9884e-01, -3.1578e-01,  ...,  1.0188e+00,
           5.7303e-01, -2.1217e+00],
         [-2.1929e+00,  1.2096e+00, -3.6621e-01,  ..., -2.3936e-01,
          -5.0421e-01, -5.9042e-01],
         [ 9.9055e-01, -1.0664e+00, -2.6046e-01,  ..., -8.7857e-01,
          -1.6386e-01,  1.7815e-02]],

        [[-1.7943e+00, -1.0478e+00, -1.1516e+00,  ..., -4.5683e-01,
          -7.4726e-01,  1.5636e+00],
         [-1.0564e+00,  1.0492e+00, -1.1450e+00,  ..., -2.3176e+00,
          -1.1956e+00, -1.3368e+00],
         [ 1.4202e+00, -8.4413e-01,  1.5238e-01,  ..., -7.4499e-01,
           4.3036e-01,  2.2425e+00],
         ...,
         [-4.7618e-01, -1.0111e+00, -9.9860e-01,  ..., -5.0436e-01,
          -8.8326e-01, -1.5811e+00],
         [ 1.1187e+00, -6.8416e-02,  2.2543e+00,  ..., -1.6351e-01,
           2.5296e-01,  6.4965e-01],
         [ 7.7762e-02,  4.2359e-01, -5.3261e-02,  ..., -8.0830e-01,
          -1.8372e+00,  1.1058e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 0.1068, -0.3582,  0.8606,  ...,  0.5025, -0.8593,  0.2627],
         [-0.2478, -0.7648, -0.1978,  ...,  0.0847, -1.4908,  0.9323],
         [-0.9694, -0.3388,  0.7365,  ...,  0.4127,  0.2731,  1.5363],
         ...,
         [ 1.0761,  1.1509, -1.6488,  ...,  1.1251, -0.8395,  1.3723],
         [-1.5156,  0.5682,  0.5910,  ..., -0.4444,  1.1059, -1.6942],
         [-0.3832,  1.0812,  1.5778,  ...,  0.2770, -0.8362, -0.1559]],

        [[-0.7851, -1.8708,  0.7314,  ...,  0.4677, -1.2372, -1.0366],
         [-0.2437,  0.2659,  0.5375,  ..., -0.2112,  1.7484,  0.5218],
         [-1.1066, -1.9391,  0.3906,  ..., -0.5925,  0.3761, -0.0745],
         ...,
         [-1.6441, -1.4575,  1.0063,  ..., -1.5120,  0.8163, -0.4369],
         [ 1.0248, -0.8182,  1.1668,  ...,  0.7531, -0.2509, -1.4106],
         [-1.4174,  1.6888,  0.1711,  ..., -0.2699, -0.0207, -0.1216]]],
       device='cuda:0', grad_fn=<SelectBackward>)
recurrent_blocks.0.weight_ih_l0 tensor([[-0.0022, -0.0096, -0.1384],
        [ 0.1076, -0.0553,  0.0333],
        [-0.0380, -0.1312,  0.0087],
        [ 0.0956, -0.1456, -0.0564],
        [ 0.0880, -0.0526, -0.0819],
        [ 0.0493, -0.1856, -0.1036],
        [ 0.1267,  0.0103,  0.0560],
        [-0.1075, -0.0094, -0.1407],
        [-0.0161, -0.1266, -0.0050],
        [-0.1211, -0.0966,  0.1843],
        [ 0.1728, -0.0580,  0.0495],
        [ 0.0095,  0.0503, -0.0037],
        [-0.0745, -0.0922, -0.0941],
        [ 0.0454, -0.0989,  0.1673],
        [ 0.0153, -0.0230,  0.0505],
        [-0.0565,  0.0032, -0.1101],
        [-0.1829, -0.1375, -0.0647],
        [-0.0038,  0.1782, -0.0662],
        [-0.1437, -0.0776,  0.1543],
        [-0.1243, -0.0660,  0.0265],
        [ 0.0791,  0.0464,  0.0880],
        [ 0.0638, -0.0359,  0.0047],
        [-0.1658, -0.1245,  0.0380],
        [-0.0442, -0.1481, -0.0421],
        [ 0.0045, -0.0288, -0.1357],
        [ 0.0093,  0.0791, -0.1237],
        [-0.1141,  0.0008,  0.0660],
        [ 0.0093, -0.1089, -0.0085],
        [-0.1577, -0.0310,  0.1270],
        [-0.0972,  0.1581,  0.1235],
        [-0.0919,  0.0793,  0.0855],
        [-0.1392, -0.1351,  0.0095],
        [-0.0515, -0.0388,  0.0439],
        [-0.1321, -0.1051, -0.1659],
        [-0.1131, -0.0623, -0.0192],
        [-0.0615,  0.1271,  0.0358],
        [ 0.1303, -0.1850, -0.0518],
        [-0.0483,  0.0219,  0.0645],
        [-0.0711, -0.0511, -0.0387],
        [-0.1303, -0.1516, -0.0229],
        [ 0.0322,  0.1381, -0.0007],
        [ 0.0819,  0.1212, -0.1219],
        [ 0.1351,  0.0577,  0.0150],
        [ 0.1803, -0.0609, -0.0505],
        [-0.1002, -0.1303, -0.1043],
        [ 0.1131, -0.0164,  0.1106],
        [ 0.0678,  0.1070, -0.1250],
        [-0.0139, -0.0743,  0.1116],
        [-0.0754,  0.1401, -0.0047],
        [ 0.0313, -0.1312,  0.0432],
        [ 0.1442,  0.1356, -0.1160],
        [ 0.0855, -0.0064,  0.0766],
        [ 0.0521,  0.0430, -0.0098],
        [ 0.0126,  0.0679, -0.0392],
        [-0.1246,  0.1143, -0.1386],
        [-0.0803,  0.1585, -0.1447],
        [ 0.1582, -0.0366,  0.0940],
        [ 0.1689, -0.1174,  0.0528],
        [-0.1233,  0.0348, -0.1216],
        [-0.0530,  0.1057,  0.0153],
        [-0.1768,  0.0291, -0.0761],
        [ 0.0575,  0.0715,  0.1513],
        [ 0.1370,  0.0722,  0.0361],
        [ 0.0989,  0.0987,  0.1645],
        [-0.1394,  0.0431,  0.1061],
        [-0.1269, -0.0586,  0.1028],
        [ 0.0858,  0.0836, -0.1255],
        [-0.1536, -0.1445, -0.0916],
        [ 0.0824, -0.0494,  0.0129],
        [ 0.0899,  0.0425, -0.0239],
        [-0.0354,  0.0454, -0.0914],
        [ 0.0070, -0.1808, -0.0598],
        [ 0.1069, -0.0995,  0.0025],
        [ 0.1458,  0.0828,  0.1017],
        [-0.1092, -0.0060,  0.1845],
        [ 0.0767, -0.0786,  0.0977],
        [-0.0336, -0.0081, -0.1508],
        [-0.0410, -0.1543, -0.0744],
        [ 0.0961,  0.0426, -0.1796],
        [-0.0098, -0.1100, -0.1165],
        [ 0.0092,  0.0019, -0.1592],
        [-0.1612, -0.0348, -0.0617],
        [-0.1048, -0.0617,  0.0922],
        [-0.1399, -0.0692, -0.1678],
        [-0.1287,  0.0743,  0.1550],
        [-0.1301, -0.1416, -0.0360],
        [ 0.0749, -0.0263, -0.1784],
        [-0.1824, -0.0546, -0.1306],
        [-0.1315,  0.1584, -0.0289],
        [ 0.1533, -0.0068, -0.0236],
        [ 0.1055,  0.0403, -0.0129],
        [-0.0604, -0.1449, -0.0806],
        [ 0.0857,  0.1707, -0.1033],
        [ 0.1433,  0.1581, -0.0433],
        [ 0.0857,  0.1215,  0.1023],
        [-0.0185,  0.1630,  0.1444],
        [ 0.0382, -0.0495, -0.1259],
        [-0.1489, -0.0222,  0.0963],
        [ 0.0599, -0.1504,  0.1027],
        [-0.1411, -0.0035,  0.1662],
        [ 0.0844, -0.0383,  0.1593],
        [ 0.0154,  0.0500, -0.1527],
        [-0.0784, -0.0697,  0.0887],
        [ 0.1580,  0.1045, -0.1297],
        [ 0.0326,  0.0258, -0.0421],
        [ 0.1713, -0.1333,  0.1218],
        [-0.1162,  0.1744,  0.1728],
        [-0.1619,  0.0679, -0.0023],
        [ 0.1525,  0.0477, -0.0948],
        [ 0.1629, -0.0321, -0.0325],
        [-0.1055,  0.1046,  0.1106],
        [-0.1487, -0.0960, -0.1832],
        [ 0.1078,  0.1598, -0.1108],
        [-0.0242, -0.1377,  0.0425],
        [ 0.0984, -0.1370, -0.1325],
        [ 0.0382,  0.1368, -0.0566],
        [-0.0935,  0.1586,  0.1175],
        [ 0.0619,  0.1729, -0.0788],
        [-0.0212,  0.1347,  0.0558],
        [-0.0930,  0.1259,  0.0934],
        [ 0.0373,  0.0570, -0.0791],
        [-0.1031,  0.0866,  0.1508],
        [-0.0084,  0.0244,  0.0761],
        [ 0.1215, -0.0676, -0.1357],
        [-0.0094,  0.0774, -0.1388],
        [-0.0158,  0.0343, -0.1841],
        [-0.1092,  0.0948, -0.1314],
        [-0.1360, -0.0604,  0.1211]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.1650, -0.0577,  0.0584,  ...,  0.0119, -0.0163, -0.0703],
        [-0.1190,  0.0748, -0.0555,  ...,  0.0705, -0.1479, -0.0084],
        [ 0.0157,  0.1598,  0.1099,  ..., -0.0184, -0.0107,  0.1504],
        ...,
        [-0.0134, -0.1495, -0.1595,  ...,  0.0661,  0.1297,  0.0436],
        [ 0.1140,  0.0117,  0.0243,  ..., -0.1393,  0.1614,  0.0120],
        [-0.0026,  0.0492, -0.1438,  ...,  0.1222,  0.1211,  0.1243]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0 tensor([ 0.0237,  0.0592, -0.0603,  0.0691,  0.1121, -0.1759, -0.0105,  0.0983,
         0.0121, -0.1597,  0.1556, -0.1107,  0.0808,  0.0608, -0.0839,  0.1018,
        -0.1590, -0.0530, -0.1289,  0.1464, -0.1502, -0.0548, -0.0841,  0.0898,
         0.1463,  0.1569,  0.0701,  0.1347,  0.0730, -0.1708,  0.0445, -0.0930,
        -0.1733, -0.0455, -0.1634,  0.0278,  0.1543,  0.0235,  0.1265, -0.1238,
         0.0466, -0.0905,  0.1646, -0.0573, -0.1432, -0.0396, -0.1472, -0.0979,
         0.1378, -0.0421,  0.1459, -0.0377, -0.1355, -0.1650,  0.0178, -0.0168,
        -0.0319,  0.0623,  0.0307, -0.0455,  0.0300,  0.0716, -0.0527,  0.1846,
        -0.0967, -0.1209,  0.1365, -0.1607, -0.1211,  0.0690,  0.0585,  0.0618,
         0.1340,  0.0744, -0.1605, -0.0423,  0.1280, -0.0226, -0.0733,  0.0654,
        -0.1484,  0.0259,  0.0811,  0.0997, -0.0772, -0.1739,  0.1545,  0.0774,
         0.0651, -0.0093, -0.1818, -0.0494,  0.1594,  0.0793,  0.0722,  0.1821,
        -0.0111, -0.0871,  0.1000,  0.1271,  0.1141, -0.0648,  0.0254,  0.0779,
        -0.0101,  0.1735, -0.1490,  0.1078,  0.1484,  0.0625,  0.1324, -0.0976,
         0.1500, -0.1084, -0.1214, -0.0245, -0.1242,  0.1066, -0.1476,  0.0644,
         0.1285,  0.1170, -0.0880,  0.0009,  0.1288, -0.1523, -0.1339,  0.0151],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0 tensor([ 0.1545, -0.1827, -0.0470, -0.0554, -0.0164, -0.1727, -0.0197, -0.0167,
        -0.0521,  0.1504, -0.1422, -0.0874,  0.0299,  0.1497, -0.0046,  0.1138,
        -0.0218,  0.0050, -0.1619,  0.0521,  0.1622,  0.1635,  0.1542,  0.1369,
        -0.0993, -0.1120, -0.0412,  0.0039,  0.1434,  0.0026, -0.0637,  0.0617,
        -0.0261,  0.0935,  0.0638,  0.1635, -0.1566,  0.0759,  0.0550, -0.0237,
        -0.0177,  0.0638, -0.1085, -0.0694, -0.0603, -0.0782,  0.1103, -0.0739,
        -0.0205, -0.1519,  0.0049, -0.1399,  0.0250,  0.1104, -0.1494,  0.0722,
         0.0231,  0.0990, -0.0677,  0.1759,  0.0988, -0.0543,  0.0992, -0.0278,
        -0.0737,  0.0148,  0.1069,  0.0670,  0.1622, -0.0520, -0.0407,  0.1593,
         0.0737,  0.1001,  0.0472, -0.0808,  0.1351, -0.0419, -0.1234,  0.1340,
         0.0026, -0.1649,  0.0106, -0.0486, -0.0077, -0.1594, -0.0811, -0.0170,
         0.0812, -0.1471, -0.1108, -0.0357, -0.1439, -0.0542,  0.1032, -0.0218,
         0.0137, -0.1277, -0.1682,  0.1247,  0.0843,  0.0599, -0.0876,  0.0378,
         0.1146,  0.1607, -0.0806, -0.0296, -0.1313, -0.1235,  0.1726, -0.0435,
        -0.0465, -0.0447, -0.0086, -0.1075,  0.0049,  0.1828, -0.1203, -0.1556,
         0.1055, -0.1256, -0.0734, -0.0960,  0.1113, -0.0950,  0.1271, -0.0338],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.weight_ih_l0_reverse tensor([[ 0.0899,  0.0367, -0.0040],
        [ 0.0138,  0.0963,  0.0576],
        [-0.0272,  0.0972,  0.0171],
        [-0.1669,  0.1501, -0.0437],
        [-0.0606,  0.1218, -0.0552],
        [-0.0978,  0.0684,  0.0102],
        [ 0.0607,  0.0385, -0.0452],
        [-0.1465,  0.0506,  0.0499],
        [ 0.1540, -0.0625, -0.1139],
        [-0.1600, -0.0014,  0.0681],
        [ 0.0888, -0.1642, -0.0171],
        [ 0.0121,  0.1603, -0.0024],
        [ 0.0806, -0.0978,  0.0363],
        [ 0.0924,  0.1663, -0.0858],
        [-0.0085, -0.0447,  0.1448],
        [ 0.1085, -0.0847,  0.1656],
        [ 0.1292,  0.1507, -0.1525],
        [-0.0860, -0.0919,  0.1568],
        [-0.0918, -0.1858,  0.1487],
        [-0.0649,  0.0311,  0.1392],
        [ 0.1500, -0.1422,  0.0661],
        [-0.1329,  0.0479,  0.0441],
        [ 0.1409,  0.0334,  0.1091],
        [-0.1422, -0.1005, -0.0848],
        [ 0.1333,  0.0044, -0.0149],
        [ 0.0689,  0.1867, -0.0617],
        [-0.0203,  0.1274,  0.1866],
        [ 0.1299,  0.1175, -0.1519],
        [-0.1583,  0.1715, -0.1084],
        [ 0.0012, -0.0513, -0.0931],
        [ 0.0422, -0.1750,  0.0623],
        [-0.1070,  0.0063, -0.0203],
        [-0.0253, -0.1564,  0.1132],
        [-0.0109,  0.0741, -0.1163],
        [-0.0852,  0.0739, -0.1775],
        [ 0.0555,  0.0844, -0.1455],
        [-0.0347,  0.0887, -0.0675],
        [-0.0931,  0.0132,  0.1677],
        [-0.0385, -0.1580,  0.1793],
        [ 0.0242,  0.0005, -0.1343],
        [-0.0488,  0.1165,  0.1318],
        [ 0.1424,  0.0982, -0.1281],
        [-0.0118,  0.0405,  0.0595],
        [ 0.1316, -0.0312, -0.0030],
        [-0.0224, -0.1301, -0.0396],
        [ 0.0167,  0.0714,  0.0056],
        [-0.0569, -0.1567, -0.0342],
        [ 0.0165,  0.1611, -0.0351],
        [ 0.1664,  0.0039,  0.0320],
        [-0.1649,  0.0690,  0.0938],
        [-0.1557,  0.0919, -0.1737],
        [-0.1754, -0.0229, -0.1819],
        [-0.0047, -0.1268, -0.0378],
        [ 0.0833, -0.1632, -0.1509],
        [ 0.1279,  0.0400, -0.1723],
        [ 0.1684, -0.1032,  0.1157],
        [-0.0237, -0.0883, -0.0287],
        [ 0.0908,  0.0958, -0.1286],
        [-0.0158, -0.1788, -0.1209],
        [ 0.0589, -0.0239, -0.1440],
        [ 0.0406,  0.0849,  0.1792],
        [-0.0601,  0.0258, -0.1522],
        [-0.1121,  0.1351, -0.0572],
        [ 0.0363, -0.1603, -0.0115],
        [ 0.1509,  0.0059,  0.0956],
        [ 0.1387, -0.1797,  0.0294],
        [-0.0772,  0.1808, -0.0398],
        [ 0.1043,  0.1233, -0.0859],
        [ 0.1373, -0.1652, -0.1790],
        [ 0.0971, -0.0076, -0.0121],
        [-0.1335,  0.1111,  0.1525],
        [-0.0611,  0.0325, -0.1648],
        [-0.0876, -0.1629,  0.0685],
        [-0.0184,  0.1736,  0.1657],
        [-0.0004, -0.1015,  0.0030],
        [-0.0100,  0.1561, -0.0689],
        [-0.1027,  0.1054, -0.0625],
        [ 0.1267, -0.0172, -0.1425],
        [-0.0004, -0.0107, -0.0238],
        [-0.0130, -0.0940, -0.1611],
        [-0.1387, -0.0742,  0.1316],
        [ 0.1862,  0.0637,  0.0414],
        [ 0.1529,  0.0058,  0.0080],
        [-0.0135,  0.1220,  0.0447],
        [ 0.1662, -0.1260, -0.1539],
        [ 0.0204, -0.0421, -0.0932],
        [-0.1424,  0.1539, -0.0402],
        [ 0.0965,  0.1629, -0.0505],
        [ 0.0520, -0.1567,  0.0477],
        [-0.1264, -0.0293,  0.1112],
        [ 0.0358,  0.0468,  0.0621],
        [-0.0205,  0.1345,  0.1655],
        [ 0.1672, -0.0616,  0.1021],
        [ 0.0090, -0.1224,  0.0605],
        [-0.1650,  0.1177,  0.0516],
        [-0.0155,  0.0870, -0.1785],
        [ 0.0322, -0.1335, -0.1089],
        [-0.0595, -0.1747, -0.1444],
        [ 0.1249,  0.0310, -0.0983],
        [ 0.0195,  0.0645, -0.0670],
        [-0.0234, -0.0275, -0.1550],
        [ 0.0703,  0.0142, -0.0192],
        [-0.1259, -0.1196, -0.0640],
        [-0.0129,  0.1668, -0.1665],
        [ 0.0023,  0.0794,  0.1174],
        [-0.0100, -0.0881,  0.1196],
        [-0.0483, -0.1199, -0.0032],
        [-0.0818, -0.1491,  0.1441],
        [ 0.0335, -0.0137, -0.1074],
        [ 0.0779,  0.0541, -0.0565],
        [-0.0256,  0.1716,  0.1505],
        [ 0.1487,  0.1671,  0.0867],
        [-0.1068,  0.1478,  0.0149],
        [-0.1475, -0.1308,  0.1292],
        [ 0.1063, -0.1702,  0.1598],
        [ 0.0124,  0.1584,  0.0700],
        [-0.0693,  0.1168, -0.0517],
        [-0.0453,  0.0260,  0.1587],
        [-0.0609,  0.0652,  0.0137],
        [-0.0464,  0.0408, -0.0970],
        [-0.1665, -0.0228,  0.1275],
        [ 0.0787, -0.1380, -0.0567],
        [ 0.1046, -0.0732,  0.0521],
        [-0.0094, -0.0648,  0.0556],
        [-0.0554,  0.1016, -0.0629],
        [-0.1371, -0.0668, -0.1338],
        [ 0.0655,  0.0845,  0.0192],
        [ 0.1553,  0.0715,  0.0840]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.0711, -0.0390,  0.0985,  ..., -0.1496, -0.1557,  0.0490],
        [ 0.1394, -0.0346,  0.0055,  ...,  0.1171,  0.0187, -0.0998],
        [-0.1501, -0.1478, -0.1133,  ...,  0.0885,  0.1098,  0.1079],
        ...,
        [ 0.0483, -0.0896,  0.0118,  ...,  0.0277, -0.0114, -0.0447],
        [ 0.1618, -0.1514,  0.1216,  ..., -0.0504, -0.0468, -0.0714],
        [ 0.0603,  0.1620, -0.1581,  ..., -0.1623,  0.0897, -0.1756]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 1.4901e-01, -1.1470e-01, -1.2267e-01, -4.4872e-02, -1.1242e-01,
         1.5396e-01,  1.7465e-01, -1.9585e-02, -1.6321e-01,  5.9226e-02,
        -7.0659e-02,  7.5422e-03, -1.2986e-01,  1.1217e-01, -1.2584e-01,
        -1.6867e-02,  3.8092e-02,  5.9944e-02, -1.0159e-01, -1.5169e-02,
        -1.2950e-02, -1.5503e-01, -8.3547e-02,  1.1975e-01,  1.6780e-01,
         1.0732e-01,  7.5029e-02, -5.1359e-02, -1.5691e-01, -3.7589e-03,
         1.0679e-01,  5.8862e-02,  9.6377e-02,  8.0887e-02, -8.3487e-02,
        -1.6376e-01,  1.8165e-02, -8.9205e-03, -8.9849e-02, -1.1827e-01,
        -1.0920e-01, -1.0866e-02,  9.2298e-02, -1.8536e-01,  6.3003e-02,
         1.2874e-01,  1.6265e-01,  1.8093e-01, -9.4843e-02,  8.9049e-02,
        -1.8239e-01,  5.6841e-05, -1.1424e-02,  9.1565e-02,  1.2926e-01,
         3.6788e-02,  5.8877e-02, -6.3669e-02, -1.5079e-01,  1.2581e-01,
         2.2116e-02,  1.0368e-01, -1.0543e-01,  9.2866e-02, -1.2305e-01,
        -1.2643e-01, -1.5300e-01, -1.2293e-01, -1.7239e-01,  1.2639e-01,
         1.7734e-01,  2.2633e-02,  3.2154e-02,  5.2937e-02,  6.5483e-02,
         8.3376e-02, -1.2080e-01,  1.5024e-01, -3.0489e-02, -6.2257e-02,
         3.4501e-02, -1.5594e-01, -1.0294e-01,  3.1001e-02, -1.4436e-01,
         7.2380e-02,  5.6219e-02,  1.0320e-01, -1.3152e-01, -5.1429e-02,
        -4.1841e-02,  1.0036e-01, -1.5176e-01, -7.7121e-02,  3.5257e-02,
         1.4335e-01, -1.3500e-01, -6.5834e-02, -1.3839e-01, -1.2205e-01,
        -1.4576e-01, -1.0430e-01, -1.1000e-01, -1.8599e-01,  8.7750e-02,
        -1.4634e-01,  1.6478e-01, -8.6369e-02,  7.3765e-02,  4.5886e-02,
         3.9845e-02,  7.2846e-02,  1.3644e-01, -5.8030e-02, -6.5715e-02,
         1.1128e-01,  1.9114e-02,  1.2473e-01, -3.1149e-02,  8.4491e-02,
        -1.0491e-01, -3.8224e-02, -1.2332e-01,  1.2899e-02, -3.7756e-02,
        -7.8488e-02,  1.0120e-01,  8.5540e-02], device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0_reverse tensor([ 0.1077,  0.0482,  0.0255,  0.0123, -0.0634, -0.0249, -0.1453,  0.1368,
         0.0591,  0.0482,  0.1022, -0.1532, -0.1384,  0.0745,  0.0516,  0.0276,
         0.0516,  0.1021, -0.1192,  0.0320,  0.1225,  0.0762, -0.0881,  0.0108,
         0.1070, -0.1283, -0.0976,  0.0782, -0.0871, -0.1273, -0.0025,  0.0603,
         0.1847, -0.0664, -0.0844, -0.0919,  0.0985, -0.0618,  0.1229, -0.0396,
         0.0332,  0.0909, -0.0572,  0.0081, -0.1088, -0.0201, -0.0105, -0.1578,
         0.0131, -0.0927, -0.0495, -0.1353,  0.1434,  0.1071, -0.0209,  0.0028,
        -0.0070, -0.1569, -0.0654, -0.1078,  0.0386, -0.0641,  0.0092,  0.1146,
        -0.1475,  0.1474, -0.0311,  0.0406,  0.1115, -0.0536,  0.1837, -0.1144,
        -0.1008, -0.1854, -0.1148,  0.0240,  0.0226,  0.0137,  0.0384, -0.0399,
         0.0968, -0.0252, -0.0431, -0.0719, -0.0207,  0.1867,  0.1222,  0.0919,
        -0.0845, -0.0485, -0.1523,  0.1454,  0.0088, -0.1236, -0.1272,  0.0769,
         0.1136,  0.1049,  0.0298,  0.1703,  0.1148,  0.1245, -0.1412, -0.1251,
        -0.1554,  0.0073,  0.0617, -0.1315,  0.1700, -0.0162,  0.0782, -0.0939,
         0.0955,  0.0512,  0.0700,  0.1366,  0.0852,  0.0923,  0.1265, -0.1131,
        -0.0368, -0.0188, -0.1015,  0.0866, -0.1137,  0.0370, -0.1184, -0.0024],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0 tensor([[-0.0979, -0.0172, -0.1610,  ...,  0.0410, -0.1436, -0.0361],
        [ 0.1821, -0.0156,  0.0870,  ..., -0.0270,  0.1074, -0.1384],
        [-0.0920, -0.0823, -0.0732,  ...,  0.0604, -0.1634,  0.0497],
        ...,
        [-0.0159, -0.1657,  0.0128,  ..., -0.1550,  0.0484,  0.1304],
        [-0.0126, -0.1172,  0.0416,  ..., -0.0823,  0.1411, -0.0621],
        [ 0.0496, -0.0231, -0.1155,  ..., -0.1193,  0.1385, -0.1329]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0 tensor([[ 0.1624, -0.0836,  0.0224,  ...,  0.0556,  0.0370,  0.0477],
        [ 0.0963,  0.1057, -0.1158,  ..., -0.0613,  0.0837, -0.1762],
        [ 0.1488,  0.0864, -0.0340,  ...,  0.0966, -0.0959,  0.1652],
        ...,
        [-0.1120, -0.1358, -0.0601,  ...,  0.0316,  0.0676,  0.1392],
        [ 0.0806,  0.1355,  0.1539,  ..., -0.0333,  0.1549, -0.0479],
        [ 0.0399, -0.1114,  0.1005,  ...,  0.0234,  0.0910,  0.1832]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0 tensor([-1.6385e-01, -2.4185e-02,  1.4771e-04, -1.7560e-01, -1.3768e-01,
         1.4854e-01,  1.7370e-01,  1.7727e-01,  1.3356e-01,  1.5993e-01,
         1.5547e-01,  1.4930e-01, -1.0250e-01,  1.6116e-02, -1.4506e-01,
        -1.6240e-01,  6.7562e-02,  3.0065e-02, -7.8386e-02, -1.5364e-01,
        -1.6741e-01,  1.2553e-01, -6.2625e-02,  9.2926e-03, -1.1921e-01,
         1.2093e-01,  4.6050e-02, -1.6103e-02, -3.1427e-02, -1.7423e-01,
         3.3216e-02,  1.2004e-01, -1.3852e-01, -9.3783e-02,  5.5089e-02,
         1.0033e-01, -7.5596e-03, -7.1777e-02,  4.4077e-02,  1.5740e-01,
        -1.0950e-01,  3.7713e-02, -1.2648e-01, -9.0855e-02, -1.2256e-02,
        -1.1976e-01,  7.7365e-02,  1.4776e-01,  1.6081e-01,  1.7182e-01,
         1.3462e-01,  9.9473e-02, -1.4733e-03,  1.5168e-01,  7.6524e-02,
         1.0986e-01, -1.6640e-01,  4.2645e-03,  9.0954e-02,  7.2147e-02,
        -1.5617e-01, -6.4804e-02,  1.4085e-01,  1.0066e-01,  1.3035e-02,
         7.5623e-02, -7.3771e-02, -1.5967e-01, -1.3299e-01,  1.4269e-02,
        -3.0993e-02, -1.5244e-01, -5.5861e-02, -8.3468e-02,  7.6652e-02,
         1.7759e-01,  3.1263e-02, -4.3068e-02, -1.4158e-01,  1.6569e-01,
        -4.6140e-02, -1.1667e-01,  1.5152e-01, -7.1255e-02,  1.5988e-01,
        -6.2457e-02,  5.7260e-02, -4.9118e-02, -5.4111e-02, -1.4993e-01,
         6.8645e-02,  7.5339e-03, -1.7637e-01, -1.3975e-01, -1.8393e-02,
         9.4091e-02, -1.3357e-01, -1.4590e-01, -9.7069e-02, -7.0492e-02,
        -1.1244e-01, -1.0573e-01, -6.8013e-02, -9.0101e-02, -1.5899e-01,
        -1.6540e-01, -6.7796e-02,  1.8159e-01, -8.8542e-02,  7.6480e-02,
        -1.1561e-01,  5.2319e-02,  9.3176e-03, -1.3912e-01, -1.1315e-01,
         1.4599e-01, -1.5317e-01,  1.4658e-02, -3.3676e-02,  9.6086e-02,
         1.6101e-02,  6.9511e-02,  5.9000e-02,  1.5032e-01,  8.3733e-02,
        -9.9703e-02,  3.0625e-02,  1.0439e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0 tensor([ 0.0214, -0.0931,  0.0317,  0.1663, -0.0940,  0.0782,  0.0242,  0.1651,
        -0.1605,  0.0894,  0.0181, -0.0052,  0.0345, -0.0430,  0.0630, -0.1333,
        -0.0639, -0.0914,  0.1124,  0.0836,  0.1186,  0.0654, -0.0626, -0.0709,
         0.1143, -0.0117, -0.1578,  0.0713,  0.0566,  0.1571,  0.1253,  0.0044,
         0.0142, -0.0072, -0.1294, -0.1028,  0.0776, -0.0289, -0.0208,  0.0372,
         0.0475,  0.1168, -0.0785, -0.0431,  0.1615,  0.0324,  0.0798, -0.0915,
         0.0456,  0.0302, -0.1138,  0.0035,  0.0506, -0.1019,  0.0405,  0.0395,
         0.0214,  0.0702, -0.0895,  0.0058,  0.1452,  0.1197, -0.0519,  0.1515,
        -0.1718,  0.0006,  0.1332,  0.0775,  0.0592,  0.0942, -0.0082, -0.0818,
        -0.0376, -0.1237, -0.0710, -0.1613, -0.0611,  0.0320,  0.0499,  0.1560,
         0.1348,  0.0149,  0.1640, -0.0989,  0.0160,  0.0808,  0.0578,  0.1106,
        -0.1114,  0.1603, -0.1379,  0.1523,  0.0997, -0.1162, -0.1708, -0.0054,
        -0.1541,  0.0769, -0.0744, -0.1099,  0.0763,  0.0192, -0.0730, -0.1577,
        -0.0624,  0.0145, -0.1605,  0.1661, -0.0371, -0.1221,  0.1012,  0.0085,
         0.0726,  0.0127, -0.0583, -0.1559, -0.1359,  0.0615, -0.1083, -0.1687,
        -0.0813,  0.1552,  0.0055, -0.1183, -0.1325,  0.0023, -0.0707, -0.0324],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 0.0820, -0.0134, -0.0425,  ..., -0.0571, -0.0111, -0.0296],
        [ 0.1404, -0.1401,  0.1177,  ..., -0.0853,  0.1224,  0.1310],
        [-0.0093, -0.0992,  0.1675,  ..., -0.0051,  0.1614, -0.1293],
        ...,
        [-0.1240, -0.1389,  0.0684,  ..., -0.1721, -0.1731, -0.0204],
        [ 0.1062, -0.1303, -0.0352,  ..., -0.0823,  0.0090,  0.0154],
        [ 0.1629,  0.1514,  0.0207,  ..., -0.0910,  0.1116,  0.1727]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0_reverse tensor([[-0.1484, -0.0912,  0.0108,  ..., -0.1844, -0.1095, -0.0910],
        [ 0.0080, -0.0830,  0.0585,  ...,  0.1768, -0.1071, -0.0612],
        [-0.0926, -0.0501,  0.1153,  ..., -0.1134,  0.0716, -0.0968],
        ...,
        [-0.0524, -0.0162, -0.0473,  ..., -0.1364,  0.0727,  0.1005],
        [ 0.1770,  0.0763, -0.0367,  ..., -0.1862,  0.0379, -0.1036],
        [-0.0628,  0.1052, -0.1160,  ..., -0.0240,  0.0409, -0.0434]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0_reverse tensor([-0.0198,  0.1000,  0.0182, -0.0945,  0.0924, -0.1038,  0.1760, -0.1155,
         0.1623,  0.1316,  0.0181, -0.1044,  0.1426, -0.0739,  0.0971,  0.0282,
        -0.0389,  0.0047, -0.0145,  0.0440, -0.0021, -0.0794, -0.0931,  0.1113,
         0.1300, -0.1530,  0.1000,  0.1761, -0.0523, -0.0880,  0.0215, -0.1275,
        -0.1637, -0.0446, -0.0623, -0.0540, -0.0496, -0.1457,  0.1103,  0.1142,
        -0.1279, -0.0941,  0.0396, -0.0420,  0.0712,  0.0964,  0.1131, -0.1452,
         0.1518,  0.1446, -0.1240, -0.0176, -0.0418, -0.0759, -0.1797,  0.0480,
         0.0302,  0.1795,  0.1073,  0.0604,  0.0385,  0.1501,  0.1034, -0.0746,
        -0.0508, -0.1400,  0.0931,  0.0988,  0.0536, -0.1652,  0.1255,  0.1539,
        -0.1402, -0.0741,  0.1809, -0.1691, -0.0684, -0.0350,  0.1640, -0.1083,
         0.1565,  0.1377, -0.1571, -0.0738,  0.1098, -0.0871,  0.0789,  0.0756,
        -0.0654,  0.1054, -0.1474,  0.1006, -0.1151,  0.0930,  0.0943,  0.1492,
        -0.0999,  0.0150,  0.0823,  0.0117,  0.0361,  0.1450, -0.0344,  0.0582,
        -0.1550, -0.0351, -0.0313,  0.0524, -0.1785, -0.1533,  0.1025,  0.1344,
         0.0526,  0.0092, -0.1184, -0.1361, -0.0706,  0.0469, -0.0718,  0.0176,
        -0.1659, -0.0894,  0.0735,  0.0926,  0.1674,  0.0438,  0.1158,  0.1651],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.0352, -0.1044, -0.1261,  0.1365,  0.0224, -0.0176,  0.1265, -0.0700,
        -0.0694,  0.0998,  0.0158,  0.0941, -0.0342,  0.1193, -0.1087,  0.1257,
         0.0707,  0.0967,  0.1061,  0.0999, -0.1144,  0.1292,  0.0942, -0.0869,
        -0.0756,  0.0116, -0.1147, -0.0628,  0.1290, -0.1079,  0.1452,  0.1219,
        -0.0461,  0.0964,  0.0025,  0.0211, -0.0176,  0.0921,  0.0792, -0.0361,
        -0.0352, -0.1644, -0.1239,  0.1347,  0.0301,  0.0645, -0.0010, -0.0852,
         0.1092,  0.1154, -0.1256,  0.0902,  0.1017,  0.0139,  0.0557,  0.1301,
         0.0692,  0.0343, -0.1616,  0.1134,  0.1531, -0.1418,  0.1674, -0.0888,
         0.1544,  0.1774,  0.0675, -0.0793,  0.0418, -0.1800,  0.0014,  0.1585,
        -0.1354, -0.1434,  0.1341,  0.1221,  0.1430, -0.0914,  0.1179, -0.0424,
         0.1543,  0.0922, -0.0210, -0.0705,  0.1806,  0.1505, -0.0103,  0.0497,
        -0.1177, -0.1455, -0.1423, -0.0229, -0.1028, -0.0146, -0.0966,  0.1052,
         0.0317, -0.1172,  0.0506, -0.0612,  0.1216,  0.0320,  0.0894,  0.1730,
        -0.1611, -0.0373,  0.0077,  0.0279,  0.0824,  0.0342,  0.1583, -0.1472,
        -0.0074,  0.1773,  0.0908, -0.0786,  0.0906, -0.1103, -0.1051, -0.1290,
         0.1083, -0.1162,  0.0789, -0.0512, -0.0323,  0.1158, -0.1162,  0.1515],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.1445,  0.1303, -0.1075,  ..., -0.0318,  0.0507,  0.0699],
        [-0.1171, -0.0837, -0.0507,  ..., -0.0978, -0.0247, -0.1248],
        [-0.0423,  0.0169,  0.0920,  ...,  0.0312, -0.0756,  0.0078],
        ...,
        [-0.0366,  0.0356, -0.1317,  ..., -0.0205, -0.0551, -0.0518],
        [-0.1771,  0.1157,  0.0786,  ...,  0.1417,  0.0938, -0.0452],
        [-0.1659, -0.0011, -0.0025,  ..., -0.1528, -0.0497, -0.0072]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.1305,  0.1026,  0.1366,  ...,  0.1370,  0.1181,  0.0327],
        [-0.0982, -0.1073,  0.1313,  ..., -0.1485,  0.0077, -0.1373],
        [-0.1493, -0.1666,  0.0083,  ..., -0.1053, -0.0692, -0.1572],
        ...,
        [ 0.1224, -0.0630,  0.0278,  ...,  0.0252,  0.0809, -0.1494],
        [-0.0470, -0.0079, -0.0461,  ...,  0.0086, -0.0699, -0.1187],
        [-0.1006, -0.0863, -0.0221,  ..., -0.0093,  0.1386, -0.0021]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0 tensor([ 0.1743, -0.0208,  0.1679, -0.0821, -0.1080,  0.1620, -0.0278,  0.1153,
         0.0241, -0.1094,  0.0761,  0.0705,  0.0823, -0.1648,  0.1615,  0.1181,
         0.0124, -0.0083,  0.0263, -0.1169, -0.0097,  0.0039,  0.1392,  0.0791,
         0.0821,  0.1518,  0.1175, -0.1208, -0.0708, -0.1467,  0.0456,  0.0759,
        -0.0507, -0.0544, -0.0597, -0.1739,  0.1765,  0.0905,  0.1263,  0.0132,
         0.0727,  0.0364,  0.1227,  0.1533, -0.0269, -0.0877,  0.0719, -0.1152,
         0.1067,  0.0236, -0.1267, -0.0053, -0.0489, -0.0845, -0.0724,  0.1361,
        -0.0150,  0.1288, -0.0691,  0.1444, -0.0480, -0.1775, -0.1316,  0.1083,
        -0.0656,  0.1694,  0.1520, -0.0192,  0.1118,  0.1123,  0.0518, -0.0942,
        -0.0724,  0.1114,  0.0291, -0.1334,  0.1089,  0.0918, -0.0431, -0.0353,
         0.0243, -0.0140, -0.0011, -0.0407,  0.0525,  0.0726,  0.0491, -0.0343,
         0.1670, -0.0792,  0.1479, -0.1209, -0.1616,  0.0605, -0.1404,  0.1669,
        -0.1356,  0.1191, -0.0936, -0.0619, -0.0810,  0.0539,  0.0420,  0.1148,
        -0.0747, -0.1413, -0.1642, -0.1006,  0.0453,  0.0764, -0.0176, -0.0556,
        -0.0943,  0.1307, -0.1701, -0.0597,  0.1206,  0.0374, -0.1213, -0.1375,
         0.0710, -0.1837, -0.1636, -0.0120,  0.0482,  0.1518,  0.1115,  0.1099],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0 tensor([ 0.0156,  0.0098,  0.0038, -0.0092, -0.1659, -0.0590, -0.1172, -0.1117,
        -0.1237, -0.0834,  0.0385, -0.0090,  0.0533,  0.0259,  0.0741, -0.0668,
        -0.1252,  0.1646, -0.0834, -0.1636,  0.0180, -0.0668, -0.1631, -0.0748,
         0.1262,  0.1139, -0.1376,  0.1065, -0.0380,  0.1265, -0.0043, -0.0467,
         0.0691,  0.0651,  0.1225, -0.0791,  0.1757, -0.0856, -0.0614, -0.0183,
         0.1614, -0.1036,  0.0447, -0.1140, -0.1663, -0.0257, -0.1391, -0.1140,
        -0.1754,  0.1200, -0.0933, -0.0891, -0.1395, -0.0570,  0.0725, -0.1608,
         0.1198,  0.0633, -0.0012, -0.1299,  0.1431, -0.0817, -0.1339, -0.0683,
         0.1201, -0.1461,  0.0712,  0.1303,  0.1200,  0.0788, -0.0298, -0.0401,
        -0.0846, -0.0171, -0.1209, -0.0247, -0.0561,  0.0837,  0.1642,  0.1096,
        -0.0831, -0.0965,  0.0365, -0.0473,  0.0837, -0.0710, -0.1607, -0.0452,
        -0.0479, -0.0301, -0.1513, -0.1280,  0.0119, -0.1321, -0.0052,  0.1720,
         0.0845, -0.0388, -0.1434,  0.1006, -0.0172,  0.1025,  0.0047, -0.0673,
         0.1115,  0.0632,  0.0703, -0.1775,  0.0542,  0.0644,  0.1176, -0.1864,
        -0.1052, -0.0244, -0.1306, -0.0005, -0.0171, -0.1237,  0.1536, -0.0932,
         0.0946,  0.0133, -0.0517, -0.0645,  0.1197, -0.0173, -0.0859,  0.0259],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.0460,  0.0184, -0.0115,  ..., -0.1162,  0.0548,  0.0113],
        [ 0.0304,  0.1540, -0.1469,  ..., -0.0390, -0.0738, -0.0641],
        [-0.1382, -0.0204, -0.1414,  ...,  0.0466, -0.1067,  0.1133],
        ...,
        [ 0.1403, -0.0346,  0.0737,  ..., -0.1062,  0.1648,  0.1808],
        [-0.1057, -0.1008, -0.1766,  ...,  0.1516,  0.0271, -0.1677],
        [-0.0348,  0.0507, -0.1353,  ...,  0.0134, -0.0290,  0.0610]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.0274,  0.0883,  0.1176,  ..., -0.0955,  0.1072,  0.0812],
        [ 0.0678,  0.1785, -0.0319,  ..., -0.1095,  0.0220, -0.0789],
        [-0.1074, -0.1299,  0.1025,  ..., -0.1183,  0.1005, -0.1534],
        ...,
        [-0.0925, -0.1673,  0.0006,  ...,  0.0762, -0.0493, -0.1175],
        [-0.0344,  0.1236,  0.0444,  ...,  0.0306, -0.0333, -0.1496],
        [-0.0833, -0.0353, -0.0546,  ..., -0.1847, -0.0042, -0.0431]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0_reverse tensor([-8.9465e-02,  7.6511e-02,  1.7215e-01, -1.4478e-01,  1.0235e-01,
        -2.3889e-02, -1.0318e-01,  6.1803e-02,  8.0835e-02, -1.4664e-01,
        -1.0628e-01, -1.4532e-01,  1.7481e-01,  5.2059e-02, -6.2331e-02,
         5.6543e-03,  1.1751e-01,  2.3347e-02,  1.5946e-01,  9.4814e-02,
        -1.6344e-02,  1.0390e-01, -1.5552e-01, -3.6906e-02, -1.4843e-01,
        -2.4019e-02, -1.5209e-01, -2.7985e-02, -1.6300e-01,  3.3210e-05,
         1.4559e-01,  6.2261e-02,  9.0618e-02, -1.6841e-01,  4.3570e-02,
         8.9012e-02,  7.6580e-03,  3.3124e-02, -1.7026e-01, -7.1857e-02,
        -1.1547e-02, -1.5025e-01, -1.0828e-01, -5.8330e-02,  5.0393e-02,
         3.6193e-03,  1.0792e-01,  8.3668e-02, -1.4135e-01, -2.0302e-02,
         1.4519e-01, -1.7416e-02,  9.4767e-02,  3.5450e-02, -4.7004e-02,
        -3.2842e-02,  2.9630e-02,  2.5463e-02,  8.8272e-02,  9.2188e-02,
        -3.1403e-02, -5.4539e-02,  7.6994e-02, -4.1814e-02,  2.3646e-03,
         9.5193e-02, -7.4344e-03, -1.2098e-01, -7.9407e-02,  1.0450e-01,
        -1.9758e-02,  1.6945e-01,  1.6151e-01,  1.6060e-01,  2.4694e-02,
         5.8615e-02,  1.5162e-01, -5.0260e-03,  1.4928e-01,  1.0864e-01,
        -1.6107e-01, -1.2561e-01,  1.4185e-01, -8.2574e-02,  6.7391e-02,
         5.6229e-03,  1.5776e-01, -6.4768e-02, -8.7699e-02, -7.1659e-03,
        -2.6370e-02, -1.3655e-01,  1.5443e-01, -1.0023e-01,  1.3406e-01,
        -1.6661e-01,  8.3096e-02, -8.9945e-02,  1.7454e-01,  1.0841e-01,
         1.4236e-01,  9.4599e-02, -6.9560e-03,  4.1667e-02,  9.1898e-02,
         2.6737e-02, -7.8723e-02,  1.8580e-01, -4.4382e-02, -6.9397e-02,
        -8.3399e-02,  9.4487e-03,  1.1078e-01,  1.5756e-01, -8.3786e-02,
        -9.0108e-02, -7.0484e-02, -1.6601e-01,  1.1269e-01, -1.3675e-01,
        -1.3085e-01, -4.3010e-02,  1.0873e-01, -8.4176e-02, -1.8562e-01,
         3.4420e-02,  1.4705e-01, -1.5198e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.0644,  0.0788, -0.1180, -0.0901,  0.1216, -0.0823, -0.1036,  0.1850,
         0.0013, -0.0754, -0.1629,  0.0324,  0.0748,  0.1695, -0.0708, -0.1531,
        -0.0996, -0.1002, -0.0155, -0.0949,  0.0241, -0.1308,  0.1035,  0.1087,
         0.1248, -0.1847,  0.0951,  0.0036, -0.0796,  0.0218,  0.0548, -0.0409,
         0.1640,  0.1242,  0.1503,  0.0901,  0.0386, -0.1399, -0.1166, -0.0866,
        -0.1659,  0.1030,  0.0852, -0.0614, -0.0792,  0.1811,  0.0998, -0.0561,
         0.1512, -0.1076,  0.1703,  0.0486,  0.0053,  0.1730,  0.1098,  0.0871,
        -0.0445, -0.0540, -0.1193,  0.1315, -0.0129, -0.0332, -0.1637, -0.1222,
        -0.0460, -0.1548,  0.0213, -0.0209,  0.1606, -0.1165,  0.0443, -0.0246,
        -0.1496,  0.0241, -0.0014, -0.1558, -0.1866,  0.1637, -0.1199,  0.1656,
         0.0409,  0.1801, -0.1049,  0.1521, -0.0960,  0.0554,  0.0802,  0.0560,
         0.1298, -0.0056,  0.0740,  0.0879, -0.0855,  0.0959, -0.0889,  0.0553,
        -0.1798,  0.1414, -0.1008,  0.1055,  0.0868,  0.1642, -0.0917, -0.0938,
         0.0418, -0.0418, -0.0232, -0.1546,  0.0938,  0.0744,  0.0273, -0.0857,
        -0.0263,  0.1208, -0.0818, -0.0302, -0.1261, -0.0080,  0.0215, -0.1145,
         0.0826, -0.0691,  0.0935, -0.0760,  0.0717,  0.1815, -0.0597,  0.1066],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0 tensor([[ 0.0659, -0.0940,  0.0070,  ...,  0.1808, -0.1101, -0.1294],
        [-0.0036, -0.0177, -0.1478,  ...,  0.0166, -0.0651,  0.0338],
        [-0.0086,  0.0344,  0.1334,  ...,  0.1490,  0.1124,  0.0021],
        ...,
        [-0.1217, -0.0750, -0.1576,  ..., -0.1577, -0.1183,  0.0330],
        [ 0.0090,  0.1745, -0.1624,  ..., -0.1184, -0.1501, -0.0544],
        [ 0.0114,  0.0877, -0.0863,  ...,  0.1473, -0.1414, -0.1099]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0 tensor([[ 0.1188,  0.0230, -0.0836,  ...,  0.0511,  0.1604,  0.1754],
        [-0.1111,  0.0940,  0.0231,  ..., -0.1747,  0.0711,  0.0038],
        [-0.0685, -0.1426, -0.1398,  ..., -0.1342, -0.1447,  0.1072],
        ...,
        [-0.0580, -0.0125,  0.0833,  ...,  0.1368, -0.0108,  0.0534],
        [-0.1307, -0.1450,  0.1471,  ..., -0.0141, -0.1345, -0.0739],
        [ 0.0372,  0.1602, -0.1530,  ...,  0.0529,  0.0307, -0.1426]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0 tensor([ 0.0268, -0.1311, -0.1623, -0.0341,  0.1201,  0.1074,  0.0498,  0.1034,
         0.0827,  0.1015, -0.1200,  0.0833,  0.1235, -0.0985, -0.0411,  0.1598,
        -0.1195,  0.0941, -0.0008, -0.1062,  0.0525, -0.1051, -0.0248,  0.1364,
        -0.0944,  0.1595,  0.1594,  0.0882,  0.1115, -0.1462,  0.1489, -0.1114,
         0.1716,  0.0755, -0.0486,  0.0772,  0.1319, -0.1596, -0.1218,  0.0890,
        -0.0321,  0.0923, -0.1125, -0.0630,  0.0893, -0.0759,  0.1609,  0.0118,
        -0.1574, -0.0047,  0.0883,  0.0603, -0.0723, -0.1760,  0.0011, -0.1337,
         0.0127, -0.0143,  0.0841, -0.0923, -0.0875,  0.0874,  0.1282, -0.0913,
         0.0270,  0.1082, -0.0460,  0.0033, -0.1529,  0.1513,  0.1507,  0.0300,
        -0.0923,  0.0693, -0.1120, -0.1393,  0.0636,  0.0559,  0.1163,  0.0550,
        -0.0348,  0.1617,  0.0139, -0.0554, -0.1781,  0.0046,  0.1660, -0.0975,
         0.0871,  0.1571,  0.1371, -0.0838, -0.0445,  0.1397, -0.1328,  0.0962,
        -0.0904, -0.1249,  0.1770, -0.1217,  0.1347, -0.1437,  0.0567, -0.1640,
        -0.1651, -0.0949, -0.1006, -0.0448,  0.0676,  0.1322, -0.0084,  0.0797,
         0.0499,  0.0582, -0.0968, -0.1157, -0.1368, -0.1272,  0.0999,  0.1682,
         0.0585,  0.0122,  0.1220,  0.0993,  0.0325,  0.0543,  0.1379, -0.0337],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0 tensor([ 0.0386, -0.1216,  0.1596, -0.0329,  0.1412,  0.0071, -0.1749, -0.1713,
         0.0597,  0.0605, -0.1387, -0.0836,  0.0808, -0.0241, -0.1537, -0.0649,
        -0.0855, -0.0330, -0.1611,  0.0680,  0.1326,  0.0456,  0.0666, -0.1383,
         0.0700,  0.1177, -0.0525, -0.1212,  0.1133, -0.0898,  0.0545,  0.1128,
         0.0528, -0.0641,  0.0881, -0.0691,  0.1353,  0.1039, -0.0092,  0.1105,
        -0.0273, -0.1039, -0.0319, -0.1674,  0.1482,  0.1260, -0.0431, -0.0866,
         0.1485,  0.0811,  0.0580, -0.1429,  0.1296,  0.1429,  0.0152, -0.0053,
         0.1337,  0.1380,  0.0613, -0.1184,  0.0911,  0.0918,  0.0943, -0.0108,
         0.0367,  0.1738, -0.1519, -0.0170, -0.1219,  0.1143, -0.0023, -0.0852,
        -0.0514,  0.1684, -0.0790, -0.0914, -0.1605, -0.1186, -0.0372,  0.1265,
         0.0426, -0.0435, -0.0045, -0.1467, -0.0895,  0.0340,  0.0824, -0.1790,
         0.1410, -0.1851,  0.1308, -0.1022,  0.1295, -0.0431, -0.1570,  0.1109,
        -0.1152, -0.1195, -0.0157,  0.1350, -0.1327,  0.0932, -0.0875,  0.1368,
         0.0267,  0.0881, -0.0389,  0.0177, -0.0652,  0.0513, -0.1028,  0.1332,
         0.1507, -0.0181, -0.0136,  0.0838, -0.0489,  0.0470,  0.0254, -0.1208,
        -0.0927,  0.1060,  0.0528,  0.1306, -0.1545, -0.0848,  0.1192,  0.1113],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0_reverse tensor([[-0.1371, -0.1839,  0.0773,  ...,  0.0186, -0.0507, -0.1622],
        [-0.0450,  0.0178, -0.1444,  ...,  0.0295,  0.0575, -0.0366],
        [-0.1068, -0.1613, -0.0737,  ..., -0.0492, -0.1438,  0.0994],
        ...,
        [ 0.1111, -0.0354, -0.0214,  ..., -0.0211, -0.1075, -0.1031],
        [ 0.1637, -0.0384,  0.0339,  ...,  0.1431,  0.0295,  0.0723],
        [ 0.1096,  0.0305, -0.0583,  ...,  0.1657, -0.1440,  0.0838]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.1760, -0.0375, -0.0935,  ...,  0.0722, -0.1660, -0.0453],
        [-0.0581, -0.1349, -0.0590,  ..., -0.1416, -0.1813, -0.1256],
        [ 0.1075,  0.0378, -0.1249,  ..., -0.1333,  0.0414,  0.0331],
        ...,
        [ 0.0750, -0.0968, -0.0414,  ..., -0.0338, -0.1483, -0.0286],
        [ 0.0551, -0.0353, -0.1429,  ...,  0.0045,  0.1376,  0.0167],
        [-0.1077, -0.1566, -0.0814,  ...,  0.1147, -0.0753, -0.1214]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0_reverse tensor([ 5.2372e-02, -9.8385e-02,  1.6342e-01, -3.4571e-02, -3.0102e-02,
        -6.1630e-02, -5.7680e-02, -2.2131e-02, -1.7360e-02, -3.4951e-02,
        -2.4378e-05, -1.8224e-03,  1.6092e-01,  1.1516e-01, -7.6350e-02,
        -5.1939e-02,  1.6129e-01,  1.8001e-01, -1.8868e-02,  5.1541e-02,
         6.9588e-02,  5.8276e-02, -6.9844e-02,  4.2084e-03, -6.3312e-03,
        -6.7974e-02, -1.4772e-01,  1.4030e-01, -1.5205e-01, -1.9473e-02,
         2.1339e-02, -3.6562e-02, -3.8192e-02,  1.6158e-01, -1.1747e-01,
        -8.4990e-02, -7.1653e-02, -9.3567e-02,  1.5290e-01, -1.0631e-01,
        -1.2332e-02, -4.0992e-02, -5.1586e-02,  1.3745e-01,  1.5263e-01,
        -6.9168e-02, -1.6663e-01, -3.7269e-02,  7.1247e-02,  1.9821e-02,
         1.9406e-02, -5.9552e-02, -1.4862e-01, -1.1867e-01,  1.4646e-01,
        -5.2081e-02, -1.5735e-02,  2.1896e-02,  7.3333e-02,  1.1616e-02,
        -1.0213e-01,  1.6901e-01,  1.6706e-01,  5.5653e-02,  4.4456e-02,
         8.1998e-02,  7.8691e-02, -1.4394e-01, -9.8135e-02, -1.8662e-01,
        -1.6481e-01,  1.5840e-01, -1.6181e-02, -1.6061e-01,  4.8805e-02,
         1.7423e-02,  8.4690e-02, -1.2253e-01,  7.5868e-02,  1.1224e-01,
        -2.5731e-04,  6.5236e-02,  1.2481e-01,  1.1202e-01, -1.3545e-01,
        -1.0592e-01, -1.3054e-01, -6.9682e-05, -1.6248e-01, -2.2655e-02,
        -1.0915e-01, -1.5945e-01, -5.3758e-02,  1.2820e-01, -1.1679e-01,
         8.3526e-02,  1.6353e-01,  1.2472e-02,  4.5751e-02, -1.5251e-01,
         9.5296e-02, -8.7623e-02,  1.1110e-01, -1.1008e-01, -1.8174e-01,
        -1.0049e-01,  1.1347e-01,  7.8434e-02,  7.7472e-02,  5.6969e-02,
         1.1066e-03,  1.5333e-01,  5.4414e-02,  6.9141e-02, -5.6901e-02,
         7.9323e-03,  1.4708e-01, -3.8797e-02, -7.2078e-02,  1.0412e-01,
        -6.6250e-02,  8.4223e-02,  7.5399e-02, -1.0759e-01, -5.7108e-02,
        -4.4871e-02,  4.7192e-03, -1.0649e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0_reverse tensor([ 0.0870,  0.0487,  0.1669,  0.0719, -0.1155, -0.0618,  0.0774,  0.0254,
        -0.1146,  0.1589,  0.0244, -0.0881, -0.0241,  0.0540, -0.0244,  0.1539,
         0.0504, -0.1040,  0.1341,  0.1530, -0.1287, -0.1490,  0.0872,  0.0946,
         0.1834, -0.0714, -0.0592, -0.0911, -0.0903, -0.1106,  0.0433,  0.1374,
        -0.1483, -0.0512, -0.0779, -0.0203,  0.1030, -0.0649, -0.1459, -0.0477,
         0.1153, -0.0385,  0.1030,  0.0015,  0.1232,  0.0758, -0.1711,  0.0782,
        -0.1495,  0.1081, -0.0156,  0.1608, -0.0234, -0.1115, -0.0446,  0.0587,
        -0.0400,  0.0789, -0.0911, -0.1456, -0.1490,  0.1823, -0.1154,  0.0760,
         0.1378, -0.0928, -0.1783, -0.0107, -0.1312,  0.1093,  0.1750,  0.1405,
         0.0069,  0.1276,  0.1364,  0.0203, -0.0241,  0.0721, -0.0913,  0.1440,
         0.1224, -0.0284, -0.1399,  0.1516,  0.0076,  0.1808,  0.1632,  0.0951,
        -0.1138,  0.0296, -0.0168, -0.1340, -0.1146, -0.1798,  0.1038,  0.0322,
        -0.0500, -0.0954,  0.1500,  0.0695,  0.0153, -0.1542, -0.1378,  0.0621,
         0.0025, -0.0561,  0.1374,  0.1637,  0.0821, -0.1562,  0.1218,  0.0990,
        -0.1108, -0.1078, -0.0940, -0.1385,  0.0365,  0.0281, -0.0119,  0.0477,
        -0.0671,  0.0628, -0.0416,  0.0864, -0.1332,  0.1127, -0.1090, -0.0840],
       device='cuda:0') torch.Size([128])
fc_blocks.0.0.weight tensor([[-0.0819, -0.0816, -0.1022,  ..., -0.0208, -0.0912,  0.0639],
        [ 0.0660, -0.1153, -0.0236,  ...,  0.1336,  0.0342, -0.0357],
        [-0.0893, -0.0962,  0.0735,  ..., -0.0356,  0.0685, -0.0220],
        ...,
        [ 0.0715,  0.0229, -0.0975,  ..., -0.1084,  0.0642, -0.0847],
        [ 0.0210,  0.0959, -0.0737,  ...,  0.0373,  0.0066,  0.1298],
        [ 0.0628,  0.1132,  0.0878,  ...,  0.0309,  0.0065, -0.1024]],
       device='cuda:0') torch.Size([32, 64])
fc_blocks.0.0.bias tensor([ 0.1046,  0.0463, -0.0346,  0.0686,  0.0205, -0.1240,  0.0748,  0.0019,
        -0.0664,  0.0244, -0.0495, -0.0054, -0.0208,  0.0251, -0.0265, -0.0831,
        -0.0501, -0.0814,  0.0338, -0.0343, -0.0400,  0.0273, -0.1002,  0.0648,
        -0.0088,  0.0248, -0.1329,  0.0380,  0.0967, -0.1033, -0.0157, -0.0600],
       device='cuda:0') torch.Size([32])
fc_blocks.1.0.weight tensor([[-0.1422,  0.0594, -0.0634,  0.0630, -0.0475, -0.0700,  0.1480, -0.1460,
         -0.0949,  0.0810, -0.1803, -0.1579,  0.0334, -0.0789, -0.0004,  0.1812,
          0.0197, -0.0583, -0.0130,  0.0799, -0.1770, -0.1746, -0.1704, -0.1206,
          0.0470,  0.0388,  0.0621, -0.0972,  0.0546, -0.0223, -0.0172,  0.1653],
        [-0.0216,  0.0861, -0.0161,  0.1529, -0.1032, -0.1182, -0.0841, -0.0858,
         -0.1461,  0.0321,  0.0523, -0.1714,  0.1476,  0.0737, -0.0654, -0.1038,
          0.1311, -0.0217, -0.1770,  0.1353,  0.0981,  0.0269, -0.0067, -0.0106,
          0.1228, -0.1144,  0.0846,  0.0870,  0.0304, -0.0973,  0.1296, -0.0743],
        [ 0.1118,  0.1040, -0.0857,  0.0031, -0.0150, -0.0239,  0.0160,  0.1706,
         -0.0695, -0.0682,  0.1389,  0.1776,  0.1817, -0.0332, -0.1665,  0.0510,
         -0.0374, -0.0272,  0.0635, -0.1543, -0.0607, -0.0315,  0.0297,  0.0643,
          0.0488,  0.1008,  0.0525,  0.0891,  0.0094,  0.0252, -0.1515,  0.1432],
        [-0.0040, -0.1556, -0.1854,  0.1813,  0.1405, -0.1866,  0.1476, -0.0193,
         -0.1408,  0.1642,  0.1702, -0.0565,  0.0878, -0.0990,  0.0406, -0.0708,
          0.0870, -0.0641,  0.0359,  0.0605,  0.0970,  0.0922, -0.0960,  0.0866,
          0.0011,  0.1588,  0.1230, -0.0690, -0.1128,  0.0960, -0.0487,  0.1599],
        [-0.0884, -0.1615,  0.1506,  0.1661, -0.1840,  0.0303, -0.1407,  0.0758,
          0.0681,  0.0585, -0.0597,  0.0923, -0.1479, -0.1010, -0.0344,  0.0551,
         -0.1306, -0.0238, -0.0229, -0.1179, -0.1730, -0.0137,  0.0029, -0.1738,
         -0.0975,  0.1045, -0.0489, -0.1018, -0.1564,  0.0068, -0.0673, -0.1627],
        [-0.1123,  0.1047,  0.1278, -0.0118, -0.0304,  0.1310, -0.0159,  0.0728,
         -0.0375,  0.0372, -0.1708, -0.1320,  0.0673, -0.0523, -0.0625, -0.0782,
          0.0194, -0.0030,  0.1176, -0.1239,  0.0225, -0.0587,  0.0025,  0.1241,
          0.0626, -0.0399,  0.0840,  0.1632,  0.0472,  0.0937, -0.1848, -0.1333],
        [ 0.1079, -0.1346, -0.1134, -0.0033, -0.0412,  0.0929,  0.1075, -0.0177,
          0.0131, -0.0117,  0.1144, -0.1234,  0.0894,  0.1732, -0.0004, -0.0583,
          0.1663, -0.0777, -0.1097,  0.1329,  0.1714, -0.0523, -0.0173, -0.0012,
          0.1116,  0.0754, -0.0395,  0.0302, -0.1083,  0.0237,  0.0537,  0.0820],
        [ 0.0380, -0.1130, -0.0532, -0.0004,  0.0532,  0.0259,  0.1119, -0.0408,
          0.0549, -0.0343,  0.0188,  0.0258, -0.0695,  0.0094,  0.1346,  0.0281,
         -0.1332,  0.0013,  0.1434,  0.1477,  0.0759, -0.1554,  0.0488,  0.1017,
          0.0499,  0.1494, -0.1431,  0.1641,  0.1512, -0.0809, -0.1659, -0.1091],
        [ 0.1337,  0.1332,  0.0482, -0.1166,  0.0091,  0.1256,  0.0069, -0.1066,
          0.1637, -0.1627, -0.0963, -0.0740, -0.1363, -0.0252,  0.0365,  0.0924,
          0.1330, -0.1364,  0.0936,  0.1648, -0.1344, -0.1019,  0.0844, -0.0839,
         -0.0261, -0.0179,  0.0659,  0.1006, -0.0031, -0.0306,  0.1316,  0.0508],
        [-0.0043,  0.0237,  0.1633, -0.1445,  0.1010,  0.1710,  0.1149, -0.1355,
          0.1291, -0.1351, -0.1374, -0.0966, -0.0211, -0.0722,  0.1392, -0.1020,
          0.0531, -0.1291,  0.0391, -0.1117, -0.1216, -0.1774, -0.0689,  0.1404,
         -0.1502,  0.1600, -0.1111,  0.0908,  0.0436, -0.0525,  0.0549,  0.1446],
        [-0.0678, -0.0142, -0.1664, -0.1394, -0.1286, -0.0590, -0.0204,  0.1569,
         -0.1016, -0.0985,  0.1508,  0.0757,  0.1539,  0.0963, -0.0244,  0.1292,
          0.0394,  0.1590, -0.1380, -0.0638, -0.0353, -0.0776,  0.1135, -0.0285,
          0.1615,  0.1323, -0.0657, -0.0109,  0.0809, -0.0377, -0.1151,  0.0712],
        [ 0.0781, -0.1572,  0.0822,  0.0350, -0.0454, -0.1687, -0.0519, -0.1555,
         -0.0862,  0.0942, -0.0358,  0.1442,  0.0989, -0.1580,  0.1216,  0.0174,
         -0.1846, -0.0294, -0.1323,  0.1268,  0.0635,  0.0778,  0.1103,  0.1304,
          0.0712,  0.0261, -0.1128,  0.0655,  0.1287,  0.0082,  0.0923,  0.0312],
        [-0.0888, -0.1526, -0.0900, -0.0551, -0.0706,  0.1254,  0.1457, -0.0760,
          0.1780,  0.1163,  0.0243,  0.0969, -0.1078,  0.0199, -0.1828,  0.0093,
          0.0615,  0.0042, -0.0279,  0.1026,  0.0339, -0.0533, -0.1569, -0.0933,
         -0.0159, -0.1442, -0.1044, -0.1631,  0.0353,  0.1487, -0.0157, -0.1093],
        [ 0.1174, -0.0120, -0.0834,  0.0385,  0.0577,  0.0879,  0.0504,  0.0786,
         -0.0081,  0.0964, -0.0967,  0.0148, -0.0367,  0.0504,  0.1587,  0.0048,
          0.0778, -0.1822,  0.0860,  0.0610,  0.1314,  0.1281, -0.0747, -0.1290,
          0.1149, -0.1132, -0.1400, -0.0427,  0.1735, -0.0350, -0.1427,  0.1152],
        [-0.0511, -0.1388, -0.0400, -0.1467, -0.1603,  0.0455, -0.1102,  0.0451,
         -0.1779,  0.1383, -0.0064,  0.0450, -0.1468, -0.1187,  0.0257, -0.1330,
         -0.1156, -0.1277, -0.0732, -0.0960, -0.0225,  0.0454, -0.1162, -0.0923,
         -0.0123,  0.1181,  0.0767,  0.0216, -0.0763, -0.0504,  0.0849, -0.1580],
        [-0.0273, -0.1853, -0.0182, -0.0351,  0.0376, -0.1324,  0.0582, -0.0615,
         -0.1413, -0.0126,  0.1360, -0.0386, -0.0314, -0.1254, -0.0682,  0.1521,
          0.1451, -0.1125, -0.0227, -0.0791,  0.0921, -0.1395,  0.0942,  0.0040,
         -0.0346,  0.0653, -0.1119, -0.0787, -0.0123,  0.0814,  0.0837, -0.1460]],
       device='cuda:0') torch.Size([16, 32])
fc_blocks.1.0.bias tensor([ 0.1121, -0.1023,  0.0394, -0.0164, -0.0741, -0.1176,  0.0142, -0.0736,
        -0.0359, -0.1068,  0.1511,  0.0556,  0.0720,  0.0889, -0.0638, -0.0296],
       device='cuda:0') torch.Size([16])
fc_blocks.2.0.weight tensor([[-0.0215,  0.1381, -0.1712,  0.0610, -0.1969, -0.0186,  0.1395,  0.1144,
         -0.0699, -0.0011, -0.1475, -0.2307,  0.0063, -0.2393, -0.1679, -0.0037],
        [ 0.1121, -0.0411,  0.1867, -0.2310,  0.1607,  0.2350, -0.1774, -0.1628,
         -0.0663, -0.0307,  0.0975, -0.2215,  0.1829, -0.0271, -0.2259, -0.0223],
        [ 0.0025,  0.1779, -0.1351,  0.0343, -0.2519, -0.1906, -0.0842,  0.1843,
         -0.0158, -0.1818, -0.1652, -0.0893,  0.0791,  0.0551, -0.1879, -0.1400],
        [-0.0945,  0.1687, -0.2061,  0.2147, -0.2292,  0.2106,  0.2105,  0.0621,
          0.0412,  0.1869, -0.2141,  0.0734,  0.2006, -0.1722,  0.0051, -0.2101],
        [-0.0336, -0.2359, -0.1679,  0.1861, -0.0739, -0.0582,  0.2134, -0.1650,
         -0.1884, -0.1540,  0.0703, -0.0538,  0.2314, -0.1522,  0.0364, -0.2487],
        [-0.0069,  0.1040,  0.2300,  0.2393, -0.0431, -0.1526, -0.1525,  0.1446,
          0.0018, -0.0870, -0.0792,  0.1558, -0.1796,  0.0628,  0.1435, -0.1063],
        [-0.2393, -0.1000,  0.1792, -0.1871,  0.0721,  0.1754, -0.1332,  0.1610,
          0.0187, -0.2353,  0.0424, -0.1838, -0.0405, -0.1347, -0.1582,  0.0176],
        [ 0.0588,  0.2431, -0.1044, -0.1076, -0.1896, -0.2252, -0.1524,  0.0551,
          0.1621,  0.2347,  0.1934, -0.1710, -0.0446, -0.1603,  0.0735,  0.0384]],
       device='cuda:0') torch.Size([8, 16])
fc_blocks.2.0.bias tensor([0.1678, 0.0206, 0.1360, 0.0626, 0.1383, 0.1523, 0.0336, 0.1329],
       device='cuda:0') torch.Size([8])
fc_blocks.3.0.weight tensor([[ 0.2791,  0.2640, -0.2399, -0.2616, -0.1363, -0.2357,  0.0009,  0.2282],
        [-0.0234, -0.1698, -0.2203,  0.2810,  0.3032, -0.0117, -0.1568, -0.0222],
        [ 0.2808, -0.0427, -0.1188,  0.2348,  0.0080, -0.0022, -0.0692,  0.0087],
        [-0.1428, -0.1104,  0.2190, -0.2472, -0.3260,  0.1221, -0.2392, -0.3160]],
       device='cuda:0') torch.Size([4, 8])
fc_blocks.3.0.bias tensor([ 0.0614, -0.1604, -0.1054, -0.2837], device='cuda:0') torch.Size([4])
fc_blocks.4.0.weight tensor([[ 0.2486,  0.3482, -0.1239, -0.2300],
        [ 0.2768,  0.1183, -0.0767,  0.2681]], device='cuda:0') torch.Size([2, 4])
fc_blocks.4.0.bias tensor([-0.3395,  0.3858], device='cuda:0') torch.Size([2])
tensor([[[ 6.9919e-01, -9.0605e-02, -3.2780e-01,  ..., -6.8060e-01,
          -1.0286e+00,  4.3440e-01],
         [-1.5842e-01, -1.5690e+00, -1.1213e+00,  ..., -5.0847e-01,
           4.1644e-01,  1.1006e+00],
         [-3.2279e-01, -4.9885e-02,  3.3734e-01,  ...,  1.4058e-02,
          -6.4499e-01, -6.1983e-01],
         ...,
         [-8.9202e-04, -8.9884e-01, -3.1578e-01,  ...,  1.0188e+00,
           5.7303e-01, -2.1217e+00],
         [-2.1929e+00,  1.2096e+00, -3.6621e-01,  ..., -2.3936e-01,
          -5.0421e-01, -5.9042e-01],
         [ 9.9055e-01, -1.0664e+00, -2.6046e-01,  ..., -8.7857e-01,
          -1.6386e-01,  1.7815e-02]],

        [[-1.7943e+00, -1.0478e+00, -1.1516e+00,  ..., -4.5683e-01,
          -7.4726e-01,  1.5636e+00],
         [-1.0564e+00,  1.0492e+00, -1.1450e+00,  ..., -2.3176e+00,
          -1.1956e+00, -1.3368e+00],
         [ 1.4202e+00, -8.4413e-01,  1.5238e-01,  ..., -7.4499e-01,
           4.3036e-01,  2.2425e+00],
         ...,
         [-4.7618e-01, -1.0111e+00, -9.9860e-01,  ..., -5.0436e-01,
          -8.8326e-01, -1.5811e+00],
         [ 1.1187e+00, -6.8416e-02,  2.2543e+00,  ..., -1.6351e-01,
           2.5296e-01,  6.4965e-01],
         [ 7.7762e-02,  4.2359e-01, -5.3261e-02,  ..., -8.0830e-01,
          -1.8372e+00,  1.1058e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 0.1068, -0.3582,  0.8606,  ...,  0.5025, -0.8593,  0.2627],
         [-0.2478, -0.7648, -0.1978,  ...,  0.0847, -1.4908,  0.9323],
         [-0.9694, -0.3388,  0.7365,  ...,  0.4127,  0.2731,  1.5363],
         ...,
         [ 1.0761,  1.1509, -1.6488,  ...,  1.1251, -0.8395,  1.3723],
         [-1.5156,  0.5682,  0.5910,  ..., -0.4444,  1.1059, -1.6942],
         [-0.3832,  1.0812,  1.5778,  ...,  0.2770, -0.8362, -0.1559]],

        [[-0.7851, -1.8708,  0.7314,  ...,  0.4677, -1.2372, -1.0366],
         [-0.2437,  0.2659,  0.5375,  ..., -0.2112,  1.7484,  0.5218],
         [-1.1066, -1.9391,  0.3906,  ..., -0.5925,  0.3761, -0.0745],
         ...,
         [-1.6441, -1.4575,  1.0063,  ..., -1.5120,  0.8163, -0.4369],
         [ 1.0248, -0.8182,  1.1668,  ...,  0.7531, -0.2509, -1.4106],
         [-1.4174,  1.6888,  0.1711,  ..., -0.2699, -0.0207, -0.1216]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 254.244, Val Loss : 254.419
======> Trajectory Loss : 100.678, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.377, BelowGroundPenalize Loss : 15.837
Opening in existing browser session.
[1019/152325.037585:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/152325.321080:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/152325.618489:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/129].........tensor([[[ 6.9919e-01, -9.0605e-02, -3.2780e-01,  ..., -6.8060e-01,
          -1.0286e+00,  4.3440e-01],
         [-1.5842e-01, -1.5690e+00, -1.1213e+00,  ..., -5.0847e-01,
           4.1644e-01,  1.1006e+00],
         [-3.2279e-01, -4.9885e-02,  3.3734e-01,  ...,  1.4058e-02,
          -6.4499e-01, -6.1983e-01],
         ...,
         [-8.9202e-04, -8.9884e-01, -3.1578e-01,  ...,  1.0188e+00,
           5.7303e-01, -2.1217e+00],
         [-2.1929e+00,  1.2096e+00, -3.6621e-01,  ..., -2.3936e-01,
          -5.0421e-01, -5.9042e-01],
         [ 9.9055e-01, -1.0664e+00, -2.6046e-01,  ..., -8.7857e-01,
          -1.6386e-01,  1.7815e-02]],

        [[-1.7943e+00, -1.0478e+00, -1.1516e+00,  ..., -4.5683e-01,
          -7.4726e-01,  1.5636e+00],
         [-1.0564e+00,  1.0492e+00, -1.1450e+00,  ..., -2.3176e+00,
          -1.1956e+00, -1.3368e+00],
         [ 1.4202e+00, -8.4413e-01,  1.5238e-01,  ..., -7.4499e-01,
           4.3036e-01,  2.2425e+00],
         ...,
         [-4.7618e-01, -1.0111e+00, -9.9860e-01,  ..., -5.0436e-01,
          -8.8326e-01, -1.5811e+00],
         [ 1.1187e+00, -6.8416e-02,  2.2543e+00,  ..., -1.6351e-01,
           2.5296e-01,  6.4965e-01],
         [ 7.7762e-02,  4.2359e-01, -5.3261e-02,  ..., -8.0830e-01,
          -1.8372e+00,  1.1058e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 0.1068, -0.3582,  0.8606,  ...,  0.5025, -0.8593,  0.2627],
         [-0.2478, -0.7648, -0.1978,  ...,  0.0847, -1.4908,  0.9323],
         [-0.9694, -0.3388,  0.7365,  ...,  0.4127,  0.2731,  1.5363],
         ...,
         [ 1.0761,  1.1509, -1.6488,  ...,  1.1251, -0.8395,  1.3723],
         [-1.5156,  0.5682,  0.5910,  ..., -0.4444,  1.1059, -1.6942],
         [-0.3832,  1.0812,  1.5778,  ...,  0.2770, -0.8362, -0.1559]],

        [[-0.7851, -1.8708,  0.7314,  ...,  0.4677, -1.2372, -1.0366],
         [-0.2437,  0.2659,  0.5375,  ..., -0.2112,  1.7484,  0.5218],
         [-1.1066, -1.9391,  0.3906,  ..., -0.5925,  0.3761, -0.0745],
         ...,
         [-1.6441, -1.4575,  1.0063,  ..., -1.5120,  0.8163, -0.4369],
         [ 1.0248, -0.8182,  1.1668,  ...,  0.7531, -0.2509, -1.4106],
         [-1.4174,  1.6888,  0.1711,  ..., -0.2699, -0.0207, -0.1216]]],
       device='cuda:0', grad_fn=<SelectBackward>)
recurrent_blocks.0.weight_ih_l0 tensor([[ 4.3732e-03, -2.8192e-03, -1.4519e-01],
        [ 1.1433e-01, -6.2242e-02,  2.6790e-02],
        [-4.4624e-02, -1.2419e-01,  2.1388e-03],
        [ 9.0489e-02, -1.5200e-01, -6.2061e-02],
        [ 9.4822e-02, -5.9384e-02, -7.5206e-02],
        [ 5.6066e-02, -1.9248e-01, -1.1026e-01],
        [ 1.3364e-01,  3.3836e-03,  6.2919e-02],
        [-1.1456e-01, -2.6805e-03, -1.4738e-01],
        [-2.2218e-02, -1.1999e-01, -1.1626e-02],
        [-1.1445e-01, -9.0099e-02,  1.9070e-01],
        [ 1.7996e-01, -5.1219e-02,  5.6354e-02],
        [ 1.6183e-02,  4.4366e-02, -1.0355e-02],
        [-8.1054e-02, -9.9623e-02, -8.7368e-02],
        [ 5.1994e-02, -9.2164e-02,  1.7418e-01],
        [ 2.1811e-02, -2.9830e-02,  5.7950e-02],
        [-6.3361e-02,  1.0475e-02, -1.1704e-01],
        [-1.8967e-01, -1.4418e-01, -7.1306e-02],
        [ 3.0184e-03,  1.8498e-01, -5.9454e-02],
        [-1.5372e-01, -7.1249e-02,  1.4835e-01],
        [-1.1760e-01, -5.9222e-02,  3.3248e-02],
        [ 8.5672e-02,  3.9770e-02,  9.4709e-02],
        [ 7.0584e-02, -2.9001e-02,  1.1600e-02],
        [-1.7430e-01, -1.1743e-01,  4.4812e-02],
        [-3.7463e-02, -1.4132e-01, -4.8153e-02],
        [-2.2166e-03, -2.2028e-02, -1.2858e-01],
        [ 1.5914e-02,  7.2563e-02, -1.3036e-01],
        [-1.2089e-01,  6.9634e-03,  7.2745e-02],
        [ 1.6078e-02, -1.0221e-01, -1.8055e-03],
        [-1.6451e-01, -3.7822e-02,  1.3378e-01],
        [-9.0538e-02,  1.6477e-01,  1.1637e-01],
        [-9.8639e-02,  7.2509e-02,  7.8681e-02],
        [-1.4588e-01, -1.2830e-01,  1.6188e-02],
        [-4.4908e-02, -3.2036e-02,  3.7144e-02],
        [-1.2551e-01, -1.1193e-01, -1.7232e-01],
        [-1.1985e-01, -5.5427e-02, -2.5733e-02],
        [-6.6292e-02,  1.2076e-01,  3.0243e-02],
        [ 1.3710e-01, -1.9181e-01, -4.5090e-02],
        [-4.1547e-02,  1.4944e-02,  5.7858e-02],
        [-6.4126e-02, -5.8040e-02, -3.1735e-02],
        [-1.2363e-01, -1.4487e-01, -2.9658e-02],
        [ 2.6054e-02,  1.4466e-01, -7.3561e-03],
        [ 8.8513e-02,  1.2771e-01, -1.1555e-01],
        [ 1.4190e-01,  6.4404e-02,  2.1909e-02],
        [ 1.8693e-01, -6.7109e-02, -5.7162e-02],
        [-1.0688e-01, -1.3723e-01, -9.7585e-02],
        [ 1.1978e-01, -9.6912e-03,  1.1751e-01],
        [ 7.4309e-02,  1.0019e-01, -1.1754e-01],
        [-2.0711e-02, -6.7071e-02,  1.0470e-01],
        [-8.2131e-02,  1.3334e-01, -1.1355e-02],
        [ 3.8092e-02, -1.2442e-01,  4.9884e-02],
        [ 1.3433e-01,  1.4203e-01, -1.2213e-01],
        [ 9.2264e-02,  3.7582e-04,  8.2982e-02],
        [ 5.8734e-02,  3.6353e-02, -3.1665e-03],
        [ 1.9361e-02,  7.4789e-02, -3.2366e-02],
        [-1.1870e-01,  1.2138e-01, -1.3179e-01],
        [-7.3490e-02,  1.6524e-01, -1.5091e-01],
        [ 1.5143e-01, -2.9873e-02,  1.0217e-01],
        [ 1.7549e-01, -1.2392e-01,  4.6220e-02],
        [-1.3006e-01,  4.1209e-02, -1.1484e-01],
        [-4.6264e-02,  1.1240e-01,  2.2047e-02],
        [-1.8354e-01,  2.2257e-02, -6.9309e-02],
        [ 6.4213e-02,  7.8135e-02,  1.5713e-01],
        [ 1.3026e-01,  6.5426e-02,  2.9327e-02],
        [ 9.2175e-02,  1.0549e-01,  1.7122e-01],
        [-1.4610e-01,  3.6330e-02,  1.1288e-01],
        [-1.3368e-01, -6.5229e-02,  1.0943e-01],
        [ 7.9200e-02,  9.0196e-02, -1.3198e-01],
        [-1.6036e-01, -1.3687e-01, -8.5394e-02],
        [ 8.9091e-02, -4.2973e-02,  1.9608e-02],
        [ 8.3275e-02,  3.5775e-02, -1.7166e-02],
        [-4.2122e-02,  5.2897e-02, -9.8204e-02],
        [ 1.3699e-02, -1.8749e-01, -6.6503e-02],
        [ 1.1358e-01, -9.2760e-02, -4.0685e-03],
        [ 1.5247e-01,  7.6223e-02,  1.0792e-01],
        [-1.1597e-01, -1.2711e-02,  1.9119e-01],
        [ 8.3438e-02, -8.5257e-02,  1.0440e-01],
        [-2.6771e-02, -1.4941e-02, -1.4409e-01],
        [-4.7812e-02, -1.4773e-01, -8.1180e-02],
        [ 8.9458e-02,  4.9378e-02, -1.8668e-01],
        [-1.6493e-02, -1.1649e-01, -1.2345e-01],
        [ 1.5947e-02, -4.4883e-03, -1.5257e-01],
        [-1.6778e-01, -2.8020e-02, -6.8456e-02],
        [-1.1156e-01, -5.5836e-02,  8.5755e-02],
        [-1.4659e-01, -7.5723e-02, -1.7448e-01],
        [-1.3575e-01,  6.9822e-02,  1.4837e-01],
        [-1.3678e-01, -1.4807e-01, -4.2888e-02],
        [ 6.8359e-02, -3.3155e-02, -1.8512e-01],
        [-1.8924e-01, -4.7770e-02, -1.3729e-01],
        [-1.2502e-01,  1.6508e-01, -2.2186e-02],
        [ 1.5858e-01, -6.7592e-06, -1.7172e-02],
        [ 9.8739e-02,  3.3719e-02, -1.9698e-02],
        [-6.7165e-02, -1.3801e-01, -8.7319e-02],
        [ 9.2339e-02,  1.7746e-01, -1.1000e-01],
        [ 1.3659e-01,  1.6481e-01, -3.6633e-02],
        [ 7.8915e-02,  1.1477e-01,  9.5408e-02],
        [-2.5157e-02,  1.5611e-01,  1.5117e-01],
        [ 4.4842e-02, -4.2817e-02, -1.3262e-01],
        [-1.4220e-01, -2.9293e-02,  8.9916e-02],
        [ 5.3234e-02, -1.4338e-01,  9.6160e-02],
        [-1.4580e-01, -9.7766e-03,  1.6150e-01],
        [ 9.1185e-02, -4.5061e-02,  1.6606e-01],
        [ 2.2105e-02,  5.6422e-02, -1.5928e-01],
        [-7.1398e-02, -7.6669e-02,  9.5635e-02],
        [ 1.6468e-01,  1.1120e-01, -1.3643e-01],
        [ 2.6517e-02,  3.2405e-02, -4.8730e-02],
        [ 1.7789e-01, -1.2681e-01,  1.2816e-01],
        [-1.0935e-01,  1.8110e-01,  1.8023e-01],
        [-1.5528e-01,  6.1692e-02, -8.9790e-03],
        [ 1.4581e-01,  4.0793e-02, -8.8004e-02],
        [ 1.6943e-01, -2.5323e-02, -2.5626e-02],
        [-9.9043e-02,  9.7661e-02,  1.1788e-01],
        [-1.5554e-01, -8.8746e-02, -1.9015e-01],
        [ 1.0104e-01,  1.6460e-01, -1.1744e-01],
        [-1.7446e-02, -1.3093e-01,  4.9203e-02],
        [ 9.0653e-02, -1.3089e-01, -1.3830e-01],
        [ 4.4932e-02,  1.4372e-01, -6.3791e-02],
        [-8.6847e-02,  1.5191e-01,  1.2412e-01],
        [ 6.8672e-02,  1.7974e-01, -7.1985e-02],
        [-1.5504e-02,  1.4164e-01,  6.2693e-02],
        [-8.6243e-02,  1.3259e-01,  8.6973e-02],
        [ 3.0505e-02,  6.3770e-02, -7.1746e-02],
        [-9.6543e-02,  8.0041e-02,  1.4421e-01],
        [-1.5141e-02,  3.0175e-02,  8.2887e-02],
        [ 1.2825e-01, -6.0893e-02, -1.2895e-01],
        [-1.6224e-02,  7.0591e-02, -1.3202e-01],
        [-9.1474e-03,  4.0881e-02, -1.9395e-01],
        [-1.1593e-01,  8.8032e-02, -1.3816e-01],
        [-1.4265e-01, -5.3606e-02,  1.2778e-01]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.1718, -0.0509,  0.0516,  ...,  0.0185, -0.0236, -0.0760],
        [-0.1257,  0.0815, -0.0622,  ...,  0.0763, -0.1547, -0.0150],
        [ 0.0223,  0.1663,  0.1034,  ..., -0.0104, -0.0171,  0.1442],
        ...,
        [-0.0201, -0.1561, -0.1530,  ...,  0.0727,  0.1363,  0.0502],
        [ 0.1207,  0.0184,  0.0175,  ..., -0.1460,  0.1546,  0.0052],
        [ 0.0043,  0.0426, -0.1372,  ...,  0.1288,  0.1278,  0.1312]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0 tensor([ 0.0169,  0.0527, -0.0668,  0.0634,  0.1189, -0.1826, -0.0035,  0.0916,
         0.0055, -0.1533,  0.1625, -0.1173,  0.0875,  0.0677, -0.0765,  0.0948,
        -0.1656, -0.0463, -0.1349,  0.1531, -0.1435, -0.0479, -0.0772,  0.0838,
         0.1535,  0.1502,  0.0769,  0.1415,  0.0797, -0.1779,  0.0377, -0.0863,
        -0.1800, -0.0519, -0.1699,  0.0223,  0.1610,  0.0169,  0.1335, -0.1305,
         0.0400, -0.0842,  0.1716, -0.0639, -0.1364, -0.0327, -0.1397, -0.1048,
         0.1312, -0.0354,  0.1398, -0.0312, -0.1288, -0.1581,  0.0247, -0.0230,
        -0.0237,  0.0557,  0.0374, -0.0388,  0.0367,  0.0775, -0.0595,  0.1913,
        -0.0900, -0.1143,  0.1300, -0.1545, -0.1144,  0.0758,  0.0516,  0.0551,
         0.1274,  0.0807, -0.1538, -0.0357,  0.1348, -0.0294, -0.0803,  0.0584,
        -0.1418,  0.0192,  0.0747,  0.0930, -0.0838, -0.1808,  0.1477,  0.0707,
         0.0718, -0.0028, -0.1886, -0.0561,  0.1526,  0.0859,  0.0653,  0.1889,
        -0.0179, -0.0935,  0.0935,  0.1225,  0.1208, -0.0714,  0.0323,  0.0712,
        -0.0167,  0.1799, -0.1416,  0.1012,  0.1551,  0.0694,  0.1397, -0.1045,
         0.1434, -0.1017, -0.1272, -0.0317, -0.1175,  0.1134, -0.1408,  0.0580,
         0.1359,  0.1103, -0.0812,  0.0076,  0.1355, -0.1622, -0.1406,  0.0218],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0 tensor([ 0.1478, -0.1892, -0.0535, -0.0610, -0.0096, -0.1794, -0.0127, -0.0235,
        -0.0587,  0.1567, -0.1353, -0.0940,  0.0366,  0.1565,  0.0028,  0.1069,
        -0.0284,  0.0117, -0.1679,  0.0589,  0.1689,  0.1704,  0.1610,  0.1309,
        -0.0921, -0.1187, -0.0344,  0.0106,  0.1502, -0.0044, -0.0705,  0.0684,
        -0.0328,  0.0871,  0.0573,  0.1580, -0.1499,  0.0693,  0.0619, -0.0304,
        -0.0243,  0.0701, -0.1015, -0.0761, -0.0535, -0.0713,  0.1178, -0.0808,
        -0.0271, -0.1452, -0.0012, -0.1335,  0.0316,  0.1172, -0.1425,  0.0660,
         0.0314,  0.0924, -0.0609,  0.1826,  0.1056, -0.0484,  0.0924, -0.0211,
        -0.0669,  0.0214,  0.1004,  0.0732,  0.1689, -0.0452, -0.0475,  0.1526,
         0.0671,  0.1064,  0.0539, -0.0742,  0.1418, -0.0487, -0.1305,  0.1271,
         0.0092, -0.1716,  0.0042, -0.0553, -0.0143, -0.1662, -0.0878, -0.0237,
         0.0879, -0.1407, -0.1176, -0.0425, -0.1507, -0.0475,  0.0963, -0.0150,
         0.0069, -0.1341, -0.1747,  0.1200,  0.0910,  0.0533, -0.0807,  0.0311,
         0.1080,  0.1670, -0.0731, -0.0362, -0.1246, -0.1166,  0.1799, -0.0504,
        -0.0531, -0.0379, -0.0145, -0.1147,  0.0115,  0.1897, -0.1134, -0.1620,
         0.1129, -0.1322, -0.0666, -0.0893,  0.1181, -0.1049,  0.1203, -0.0271],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.weight_ih_l0_reverse tensor([[ 0.0832,  0.0297,  0.0029],
        [ 0.0206,  0.0895,  0.0650],
        [-0.0204,  0.1038,  0.0101],
        [-0.1740,  0.1432, -0.0369],
        [-0.0673,  0.1285, -0.0485],
        [-0.0916,  0.0744,  0.0165],
        [ 0.0540,  0.0452, -0.0384],
        [-0.1532,  0.0574,  0.0431],
        [ 0.1608, -0.0558, -0.1071],
        [-0.1531, -0.0081,  0.0617],
        [ 0.0820, -0.1711, -0.0239],
        [ 0.0186,  0.1536, -0.0090],
        [ 0.0876, -0.1060,  0.0434],
        [ 0.1012,  0.1592, -0.0790],
        [-0.0153, -0.0537,  0.1382],
        [ 0.1019, -0.0784,  0.1724],
        [ 0.1223,  0.1436, -0.1457],
        [-0.0923, -0.0983,  0.1498],
        [-0.0986, -0.1924,  0.1420],
        [-0.0718,  0.0378,  0.1327],
        [ 0.1567, -0.1489,  0.0594],
        [-0.1260,  0.0410,  0.0509],
        [ 0.1476,  0.0267,  0.1024],
        [-0.1353, -0.0934, -0.0780],
        [ 0.1399,  0.0103, -0.0080],
        [ 0.0757,  0.1934, -0.0548],
        [-0.0134,  0.1207,  0.1934],
        [ 0.1232,  0.1242, -0.1450],
        [-0.1649,  0.1782, -0.1017],
        [-0.0055, -0.0580, -0.0998],
        [ 0.0489, -0.1818,  0.0556],
        [-0.1003, -0.0003, -0.0270],
        [-0.0321, -0.1635,  0.1201],
        [-0.0042,  0.0673, -0.1227],
        [-0.0785,  0.0806, -0.1845],
        [ 0.0484,  0.0775, -0.1386],
        [-0.0414,  0.0953, -0.0609],
        [-0.0880,  0.0189,  0.1740],
        [-0.0452, -0.1513,  0.1861],
        [ 0.0174,  0.0072, -0.1410],
        [-0.0421,  0.1233,  0.1386],
        [ 0.1493,  0.0915, -0.1347],
        [-0.0186,  0.0336,  0.0527],
        [ 0.1248, -0.0380, -0.0097],
        [-0.0154, -0.1389, -0.0324],
        [ 0.0257,  0.0644,  0.0123],
        [-0.0637, -0.1559, -0.0408],
        [ 0.0099,  0.1668, -0.0283],
        [ 0.1596, -0.0031,  0.0389],
        [-0.1713,  0.0626,  0.0867],
        [-0.1629,  0.0853, -0.1803],
        [-0.1822, -0.0162, -0.1882],
        [ 0.0019, -0.1335, -0.0445],
        [ 0.0902, -0.1701, -0.1441],
        [ 0.1345,  0.0333, -0.1790],
        [ 0.1754, -0.0960,  0.1226],
        [-0.0171, -0.0824, -0.0218],
        [ 0.0976,  0.1026, -0.1217],
        [-0.0089, -0.1855, -0.1141],
        [ 0.0522, -0.0171, -0.1370],
        [ 0.0339,  0.0916,  0.1859],
        [-0.0669,  0.0191, -0.1589],
        [-0.1054,  0.1284, -0.0639],
        [ 0.0430, -0.1670, -0.0182],
        [ 0.1420,  0.0131,  0.0887],
        [ 0.1454, -0.1866,  0.0362],
        [-0.0839,  0.1875, -0.0328],
        [ 0.0976,  0.1303, -0.0927],
        [ 0.1441, -0.1719, -0.1856],
        [ 0.1038, -0.0007, -0.0058],
        [-0.1268,  0.1043,  0.1593],
        [-0.0679,  0.0391, -0.1580],
        [-0.0805, -0.1559,  0.0618],
        [-0.0251,  0.1804,  0.1589],
        [-0.0070, -0.1086,  0.0100],
        [-0.0162,  0.1630, -0.0756],
        [-0.1094,  0.0989, -0.0696],
        [ 0.1336, -0.0239, -0.1358],
        [ 0.0064, -0.0177, -0.0165],
        [-0.0064, -0.0872, -0.1678],
        [-0.1319, -0.0675,  0.1384],
        [ 0.1927,  0.0703,  0.0483],
        [ 0.1462, -0.0006,  0.0012],
        [-0.0202,  0.1288,  0.0514],
        [ 0.1730, -0.1327, -0.1472],
        [ 0.0272, -0.0489, -0.0864],
        [-0.1491,  0.1471, -0.0469],
        [ 0.1033,  0.1556, -0.0437],
        [ 0.0453, -0.1499,  0.0409],
        [-0.1332, -0.0220,  0.1044],
        [ 0.0291,  0.0535,  0.0553],
        [-0.0272,  0.1275,  0.1725],
        [ 0.1739, -0.0545,  0.0954],
        [ 0.0158, -0.1291,  0.0672],
        [-0.1582,  0.1245,  0.0448],
        [-0.0088,  0.0935, -0.1852],
        [ 0.0254, -0.1406, -0.1019],
        [-0.0528, -0.1815, -0.1509],
        [ 0.1316,  0.0376, -0.1053],
        [ 0.0118,  0.0576, -0.0601],
        [-0.0301, -0.0208, -0.1483],
        [ 0.0761,  0.0201, -0.0128],
        [-0.1327, -0.1129, -0.0572],
        [-0.0197,  0.1735, -0.1732],
        [ 0.0091,  0.0862,  0.1241],
        [-0.0032, -0.0949,  0.1131],
        [-0.0550, -0.1268, -0.0099],
        [-0.0885, -0.1559,  0.1374],
        [ 0.0404, -0.0219, -0.1003],
        [ 0.0872,  0.0472, -0.0498],
        [-0.0324,  0.1730,  0.1439],
        [ 0.1421,  0.1735,  0.0935],
        [-0.1137,  0.1407,  0.0218],
        [-0.1539, -0.1373,  0.1222],
        [ 0.0993, -0.1767,  0.1532],
        [ 0.0055,  0.1651,  0.0634],
        [-0.0626,  0.1100, -0.0584],
        [-0.0385,  0.0191,  0.1655],
        [-0.0543,  0.0585,  0.0070],
        [-0.0394,  0.0481, -0.0901],
        [-0.1598, -0.0164,  0.1343],
        [ 0.0855, -0.1312, -0.0498],
        [ 0.1115, -0.0800,  0.0589],
        [-0.0161, -0.0580,  0.0625],
        [-0.0621,  0.1083, -0.0562],
        [-0.1438, -0.0735, -0.1405],
        [ 0.0723,  0.0777,  0.0125],
        [ 0.1620,  0.0649,  0.0773]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.0780, -0.0454,  0.0916,  ..., -0.1565, -0.1493,  0.0558],
        [ 0.1461, -0.0278, -0.0014,  ...,  0.1238,  0.0119, -0.1065],
        [-0.1431, -0.1545, -0.1064,  ...,  0.0955,  0.1165,  0.1008],
        ...,
        [ 0.0550, -0.0968,  0.0185,  ...,  0.0344, -0.0046, -0.0514],
        [ 0.1685, -0.1447,  0.1147,  ..., -0.0437, -0.0535, -0.0781],
        [ 0.0670,  0.1686, -0.1513,  ..., -0.1556,  0.0830, -0.1823]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 0.1559, -0.1073, -0.1297, -0.0380, -0.1058,  0.1603,  0.1814, -0.0263,
        -0.1564,  0.0528, -0.0774,  0.0009, -0.1228,  0.1189, -0.1325, -0.0101,
         0.0449,  0.0530, -0.1082, -0.0217, -0.0197, -0.1482, -0.0902,  0.1266,
         0.1747,  0.1142,  0.0818, -0.0444, -0.1502, -0.0105,  0.1001,  0.0522,
         0.1033,  0.0745, -0.0905, -0.1569,  0.0248, -0.0026, -0.0831, -0.1250,
        -0.1024, -0.0174,  0.0855, -0.1920,  0.0702,  0.1355,  0.1561,  0.1877,
        -0.0880,  0.0820, -0.1890, -0.0062, -0.0181,  0.0984,  0.1226,  0.0437,
         0.0657, -0.0568, -0.1440,  0.1328,  0.0288,  0.0970, -0.1121,  0.0862,
        -0.1300, -0.1197, -0.1460, -0.1297, -0.1791,  0.1327,  0.1841,  0.0294,
         0.0254,  0.0462,  0.0725,  0.0767, -0.1279,  0.1570, -0.0232, -0.0690,
         0.0413, -0.1490, -0.1098,  0.0377, -0.1376,  0.0792,  0.0495,  0.1100,
        -0.1383, -0.0582, -0.0486,  0.1073, -0.1585, -0.0704,  0.0285,  0.1367,
        -0.1281, -0.0723, -0.1454, -0.1152, -0.1391, -0.0980, -0.1033, -0.1927,
         0.0945, -0.1529,  0.1580, -0.0931,  0.0809,  0.0527,  0.0333,  0.0796,
         0.1433, -0.0651, -0.0723,  0.1048,  0.0124,  0.1315, -0.0379,  0.0914,
        -0.0981, -0.0314, -0.1165,  0.0199, -0.0311, -0.0852,  0.0946,  0.0788],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0_reverse tensor([ 1.1463e-01,  5.5569e-02,  1.8530e-02,  1.9113e-02, -5.6764e-02,
        -1.8630e-02, -1.3860e-01,  1.3004e-01,  6.5907e-02,  4.1709e-02,
         9.5443e-02, -1.5982e-01, -1.3131e-01,  8.1263e-02,  4.5007e-02,
         3.4387e-02,  5.8454e-02,  9.5159e-02, -1.2580e-01,  2.5522e-02,
         1.1582e-01,  8.3000e-02, -9.4766e-02,  1.7654e-02,  1.1390e-01,
        -1.2138e-01, -9.0770e-02,  8.5204e-02, -8.0465e-02, -1.3402e-01,
        -9.1916e-03,  5.3619e-02,  1.9161e-01, -7.2803e-02, -9.1364e-02,
        -8.5078e-02,  1.0512e-01, -5.5509e-02,  1.2967e-01, -4.6310e-02,
         3.9954e-02,  8.4385e-02, -6.3918e-02,  1.4197e-03, -1.0161e-01,
        -1.3329e-02, -1.7065e-02, -1.5103e-01,  1.9899e-02, -9.9700e-02,
        -5.6151e-02, -1.4158e-01,  1.3667e-01,  1.1393e-01, -2.7574e-02,
         9.6222e-03, -8.1872e-05, -1.5004e-01, -5.8598e-02, -1.0077e-01,
         4.5281e-02, -7.0756e-02,  2.4997e-03,  1.0789e-01, -1.5443e-01,
         1.5412e-01, -2.4072e-02,  3.3873e-02,  1.0488e-01, -4.7246e-02,
         1.9043e-01, -1.0765e-01, -1.0760e-01, -1.9216e-01, -1.0778e-01,
         1.7287e-02,  1.5506e-02,  2.0384e-02,  4.5714e-02, -4.6698e-02,
         1.0362e-01, -1.8281e-02, -4.9911e-02, -6.5157e-02, -1.4001e-02,
         1.9343e-01,  1.1552e-01,  9.8720e-02, -9.1338e-02, -5.5343e-02,
        -1.5907e-01,  1.5235e-01,  2.1126e-03, -1.1694e-01, -1.3388e-01,
         7.0197e-02,  1.2051e-01,  9.8443e-02,  2.2745e-02,  1.7716e-01,
         1.2145e-01,  1.3083e-01, -1.3450e-01, -1.3189e-01, -1.4863e-01,
         7.8353e-04,  5.4903e-02, -1.3819e-01,  1.7714e-01, -9.4387e-03,
         7.1646e-02, -8.7094e-02,  1.0231e-01,  4.4117e-02,  6.3344e-02,
         1.3007e-01,  7.8517e-02,  9.9158e-02,  1.1985e-01, -1.0620e-01,
        -2.9962e-02, -1.1939e-02, -9.4713e-02,  9.3595e-02, -1.0698e-01,
         3.0288e-02, -1.2502e-01, -9.1267e-03], device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0 tensor([[-0.1046, -0.0239, -0.1542,  ...,  0.0343, -0.1368, -0.0294],
        [ 0.1890, -0.0221,  0.0937,  ..., -0.0337,  0.1143, -0.1317],
        [-0.0853, -0.0754, -0.0800,  ...,  0.0672, -0.1568,  0.0428],
        ...,
        [-0.0092, -0.1591,  0.0061,  ..., -0.1483,  0.0416,  0.1238],
        [-0.0196, -0.1242,  0.0487,  ..., -0.0893,  0.1478, -0.0552],
        [ 0.0563, -0.0164, -0.1222,  ..., -0.1126,  0.1318, -0.1396]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0 tensor([[ 0.1555, -0.0768,  0.0290,  ...,  0.0489,  0.0302,  0.0410],
        [ 0.0897,  0.1123, -0.1091,  ..., -0.0680,  0.0771, -0.1830],
        [ 0.1557,  0.0796, -0.0406,  ...,  0.1034, -0.0891,  0.1721],
        ...,
        [-0.1053, -0.1425, -0.0667,  ...,  0.0383,  0.0743,  0.1460],
        [ 0.0730,  0.1432,  0.1469,  ..., -0.0405,  0.1476, -0.0547],
        [ 0.0465, -0.1181,  0.0934,  ...,  0.0300,  0.0978,  0.1898]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0 tensor([-0.1571, -0.0175, -0.0067, -0.1841, -0.1444,  0.1554,  0.1805,  0.1840,
         0.1401,  0.1534,  0.1487,  0.1560, -0.1092,  0.0094, -0.1376, -0.1692,
         0.0742,  0.0367, -0.0803, -0.1469, -0.1741,  0.1190, -0.0693,  0.0026,
        -0.1259,  0.1147,  0.0395, -0.0228, -0.0246, -0.1809,  0.0405,  0.1134,
        -0.1317, -0.0871,  0.0483,  0.0918, -0.0143, -0.0649,  0.0509,  0.1642,
        -0.1029,  0.0312, -0.1333, -0.0841, -0.0190, -0.1264,  0.0848,  0.1410,
         0.1674,  0.1785,  0.1322,  0.1062, -0.0082,  0.1452,  0.0698,  0.1032,
        -0.1731, -0.0020,  0.0842,  0.0654, -0.1494, -0.0715,  0.1482,  0.0940,
         0.0063,  0.0823, -0.0804, -0.1539, -0.1263,  0.0211, -0.0378, -0.1592,
        -0.0625, -0.0770,  0.0833,  0.1843,  0.0380, -0.0498, -0.1488,  0.1589,
        -0.0395, -0.1234,  0.1471, -0.0780,  0.1532, -0.0693,  0.0506, -0.0558,
        -0.0474, -0.1569,  0.0619,  0.0008, -0.1831, -0.1331, -0.0264,  0.1008,
        -0.1268, -0.1392, -0.1039, -0.0791, -0.1191, -0.0989, -0.0612, -0.0834,
        -0.1524, -0.1720, -0.0746,  0.1883, -0.0953,  0.0698, -0.1081,  0.0455,
         0.0159, -0.1325, -0.1150,  0.1527, -0.1599,  0.0081, -0.0404,  0.0894,
         0.0094,  0.0633,  0.0524,  0.1436,  0.0905, -0.1064,  0.0380,  0.0977],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0 tensor([ 0.0282, -0.0864,  0.0249,  0.1579, -0.1008,  0.0850,  0.0310,  0.1719,
        -0.1540,  0.0829,  0.0113,  0.0015,  0.0278, -0.0497,  0.0705, -0.1401,
        -0.0573, -0.0848,  0.1104,  0.0903,  0.1120,  0.0589, -0.0693, -0.0776,
         0.1076, -0.0179, -0.1644,  0.0645,  0.0634,  0.1504,  0.1325, -0.0023,
         0.0210, -0.0005, -0.1362, -0.1114,  0.0709, -0.0220, -0.0140,  0.0439,
         0.0541,  0.1103, -0.0853, -0.0364,  0.1548,  0.0257,  0.0873, -0.0983,
         0.0523,  0.0368, -0.1162,  0.0102,  0.0439, -0.1084,  0.0338,  0.0328,
         0.0147,  0.0639, -0.0962, -0.0009,  0.1520,  0.1130, -0.0445,  0.1448,
        -0.1786,  0.0073,  0.1266,  0.0833,  0.0659,  0.1010, -0.0150, -0.0885,
        -0.0443, -0.1173, -0.0643, -0.1546, -0.0544,  0.0252,  0.0427,  0.1492,
         0.1415,  0.0082,  0.1596, -0.1056,  0.0093,  0.0739,  0.0512,  0.1039,
        -0.1046,  0.1533, -0.1446,  0.1456,  0.0930, -0.1095, -0.1788,  0.0013,
        -0.1474,  0.0835, -0.0812, -0.1185,  0.0695,  0.0260, -0.0662, -0.1510,
        -0.0558,  0.0079, -0.1673,  0.1728, -0.0438, -0.1288,  0.1087,  0.0017,
         0.0793,  0.0193, -0.0602, -0.1491, -0.1426,  0.0550, -0.1150, -0.1754,
        -0.0880,  0.1490, -0.0011, -0.1250, -0.1257, -0.0044, -0.0634, -0.0391],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 0.0887, -0.0067, -0.0492,  ..., -0.0504, -0.0043, -0.0363],
        [ 0.1336, -0.1469,  0.1246,  ..., -0.0922,  0.1155,  0.1378],
        [-0.0179, -0.1063,  0.1744,  ..., -0.0119,  0.1679, -0.1224],
        ...,
        [-0.1308, -0.1457,  0.0751,  ..., -0.1788, -0.1799, -0.0137],
        [ 0.1130, -0.1370, -0.0284,  ..., -0.0891,  0.0158,  0.0222],
        [ 0.1696,  0.1427,  0.0274,  ..., -0.0978,  0.1183,  0.1794]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0_reverse tensor([[-0.1551, -0.0980,  0.0040,  ..., -0.1913, -0.1027, -0.0976],
        [ 0.0147, -0.0758,  0.0657,  ...,  0.1843, -0.1079, -0.0550],
        [-0.0857, -0.0421,  0.1226,  ..., -0.1060,  0.0643, -0.1043],
        ...,
        [-0.0457, -0.0095, -0.0406,  ..., -0.1295,  0.0667,  0.1077],
        [ 0.1836,  0.0842, -0.0297,  ..., -0.1891,  0.0309, -0.1107],
        [-0.0695,  0.0986, -0.1091,  ..., -0.0306,  0.0341, -0.0502]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0_reverse tensor([-0.0265,  0.1069,  0.0252, -0.0845,  0.0857, -0.0967,  0.1829, -0.1086,
         0.1690,  0.1383,  0.0252, -0.1113,  0.1363, -0.0806,  0.1040,  0.0231,
        -0.0321,  0.0124, -0.0071,  0.0373,  0.0046, -0.0725, -0.0998,  0.1183,
         0.1370, -0.1461,  0.1068,  0.1829, -0.0455, -0.0813,  0.0284, -0.1207,
        -0.1704, -0.0376, -0.0552, -0.0441, -0.0563, -0.1385,  0.1172,  0.1211,
        -0.1212, -0.0874,  0.0468, -0.0489,  0.0649,  0.0897,  0.1199, -0.1502,
         0.1586,  0.1523, -0.1166, -0.0243, -0.0350, -0.0690, -0.1864,  0.0550,
         0.0372,  0.1864,  0.1141,  0.0672,  0.0454,  0.1568,  0.1102, -0.0678,
        -0.0576, -0.1332,  0.1000,  0.1059,  0.0469, -0.1723,  0.1322,  0.1607,
        -0.1469, -0.0809,  0.1879, -0.1757, -0.0752, -0.0283,  0.1708, -0.1151,
         0.1633,  0.1452, -0.1640, -0.0671,  0.1166, -0.0803,  0.0722,  0.0824,
        -0.0722,  0.0986, -0.1541,  0.1074, -0.1219,  0.0997,  0.0876,  0.1425,
        -0.1067,  0.0220,  0.0893,  0.0216,  0.0294,  0.1521, -0.0276,  0.0652,
        -0.1482, -0.0284, -0.0241,  0.0456, -0.1848, -0.1600,  0.1094,  0.1292,
         0.0595,  0.0171, -0.1110, -0.1428, -0.0638,  0.0537, -0.0785,  0.0247,
        -0.1589, -0.0825,  0.0803,  0.0994,  0.1742,  0.0505,  0.1226,  0.1719],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.0285, -0.0974, -0.1191,  0.1464,  0.0158, -0.0104,  0.1333, -0.0631,
        -0.0626,  0.1065,  0.0229,  0.0872, -0.0404,  0.1126, -0.1019,  0.1206,
         0.0775,  0.1044,  0.1134,  0.0932, -0.1076,  0.1361,  0.0875, -0.0799,
        -0.0686,  0.0185, -0.1079, -0.0560,  0.1358, -0.1012,  0.1521,  0.1287,
        -0.0528,  0.1034,  0.0095,  0.0310, -0.0243,  0.0993,  0.0860, -0.0291,
        -0.0284, -0.1577, -0.1167,  0.1279,  0.0238,  0.0578,  0.0059, -0.0902,
         0.1160,  0.1232, -0.1182,  0.0835,  0.1085,  0.0208,  0.0490,  0.1372,
         0.0762,  0.0412, -0.1548,  0.1202,  0.1600, -0.1350,  0.1742, -0.0820,
         0.1476,  0.1842,  0.0743, -0.0723,  0.0352, -0.1871,  0.0081,  0.1653,
        -0.1421, -0.1501,  0.1412,  0.1155,  0.1362, -0.0848,  0.1247, -0.0492,
         0.1611,  0.0997, -0.0279, -0.0638,  0.1874,  0.1573, -0.0170,  0.0566,
        -0.1246, -0.1522, -0.1490, -0.0161, -0.1095, -0.0079, -0.1034,  0.0985,
         0.0250, -0.1103,  0.0577, -0.0513,  0.1149,  0.0391,  0.0962,  0.1800,
        -0.1543, -0.0305,  0.0150,  0.0211,  0.0762,  0.0275,  0.1651, -0.1523,
        -0.0006,  0.1852,  0.0981, -0.0853,  0.0974, -0.1034, -0.1118, -0.1220,
         0.1153, -0.1093,  0.0857, -0.0444, -0.0254,  0.1225, -0.1094,  0.1583],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.1375,  0.1243, -0.1008,  ..., -0.0384,  0.0570,  0.0765],
        [-0.1237, -0.0904, -0.0448,  ..., -0.1048, -0.0178, -0.1181],
        [-0.0500,  0.0112,  0.0998,  ...,  0.0357, -0.0819,  0.0141],
        ...,
        [-0.0293,  0.0289, -0.1384,  ..., -0.0273, -0.0483, -0.0451],
        [-0.1841,  0.1105,  0.0854,  ...,  0.1353,  0.0851, -0.0387],
        [-0.1726,  0.0058,  0.0042,  ..., -0.1595, -0.0564, -0.0005]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.1236,  0.1096,  0.1440,  ...,  0.1438,  0.1112,  0.0397],
        [-0.1050, -0.1005,  0.1380,  ..., -0.1417,  0.0011, -0.1441],
        [-0.1592, -0.1587,  0.0167,  ..., -0.0973, -0.0784, -0.1499],
        ...,
        [ 0.1157, -0.0563,  0.0341,  ...,  0.0320,  0.0901, -0.1562],
        [-0.0545, -0.0006, -0.0387,  ...,  0.0159, -0.0772, -0.1113],
        [-0.1073, -0.0800, -0.0154,  ..., -0.0160,  0.1319,  0.0046]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0 tensor([ 0.1811, -0.0143,  0.1770, -0.0887, -0.1012,  0.1554, -0.0211,  0.1221,
         0.0172, -0.1027,  0.0695,  0.0638,  0.0756, -0.1582,  0.1547,  0.1123,
         0.0063, -0.0153,  0.0203, -0.1102, -0.0164, -0.0027,  0.1324,  0.0859,
         0.0890,  0.1461,  0.1242, -0.1141, -0.0636, -0.1535,  0.0526,  0.0826,
        -0.0439, -0.0485, -0.0503, -0.1806,  0.1833,  0.0839,  0.1330,  0.0200,
         0.0659,  0.0431,  0.1161,  0.1466, -0.0336, -0.0811,  0.0651, -0.1212,
         0.1006,  0.0166, -0.1326,  0.0013, -0.0556, -0.0910, -0.0791,  0.1428,
        -0.0080,  0.1231, -0.0624,  0.1512, -0.0404, -0.1843, -0.1246,  0.1150,
        -0.0723,  0.1761,  0.1592, -0.0262,  0.1186,  0.1191,  0.0451, -0.1010,
        -0.0654,  0.1181,  0.0357, -0.1267,  0.1156,  0.0984, -0.0499, -0.0421,
         0.0310, -0.0070, -0.0063, -0.0474,  0.0458,  0.0658,  0.0558, -0.0410,
         0.1737, -0.0860,  0.1412, -0.1276, -0.1683,  0.0672, -0.1473,  0.1736,
        -0.1287,  0.1256, -0.0843, -0.0685, -0.0742,  0.0474,  0.0487,  0.1216,
        -0.0815, -0.1346, -0.1708, -0.1073,  0.0387,  0.0830, -0.0244, -0.0616,
        -0.1004,  0.1237, -0.1761, -0.0530,  0.1138,  0.0309, -0.1281, -0.1307,
         0.0778, -0.1892, -0.1569, -0.0052,  0.0556,  0.1450,  0.1185,  0.1166],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0 tensor([ 0.0224,  0.0163,  0.0129, -0.0158, -0.1591, -0.0655, -0.1106, -0.1048,
        -0.1306, -0.0767,  0.0319, -0.0157,  0.0467,  0.0325,  0.0673, -0.0727,
        -0.1313,  0.1576, -0.0893, -0.1569,  0.0112, -0.0734, -0.1699, -0.0680,
         0.1331,  0.1082, -0.1309,  0.1132, -0.0308,  0.1196,  0.0027, -0.0400,
         0.0759,  0.0709,  0.1319, -0.0857,  0.1826, -0.0921, -0.0548, -0.0115,
         0.1545, -0.0969,  0.0381, -0.1207, -0.1730, -0.0191, -0.1459, -0.1200,
        -0.1815,  0.1130, -0.0992, -0.0825, -0.1462, -0.0635,  0.0658, -0.1540,
         0.1267,  0.0575,  0.0054, -0.1232,  0.1506, -0.0885, -0.1269, -0.0616,
         0.1134, -0.1394,  0.0784,  0.1232,  0.1268,  0.0856, -0.0365, -0.0468,
        -0.0776, -0.0104, -0.1143, -0.0180, -0.0494,  0.0904,  0.1574,  0.1027,
        -0.0764, -0.0895,  0.0314, -0.0540,  0.0770, -0.0778, -0.1540, -0.0520,
        -0.0412, -0.0368, -0.1580, -0.1347,  0.0051, -0.1255, -0.0120,  0.1787,
         0.0913, -0.0323, -0.1341,  0.0939, -0.0104,  0.0959,  0.0114, -0.0605,
         0.1046,  0.0699,  0.0638, -0.1842,  0.0475,  0.0710,  0.1108, -0.1923,
        -0.1114, -0.0314, -0.1366,  0.0062, -0.0238, -0.1302,  0.1468, -0.0864,
         0.1015,  0.0077, -0.0451, -0.0578,  0.1271, -0.0241, -0.0789,  0.0326],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-0.0392,  0.0116, -0.0182,  ..., -0.1096,  0.0616,  0.0046],
        [ 0.0371,  0.1473, -0.1536,  ..., -0.0323, -0.0671, -0.0708],
        [-0.1457, -0.0265, -0.1346,  ...,  0.0408, -0.1076,  0.1196],
        ...,
        [ 0.1338, -0.0294,  0.0804,  ..., -0.1133,  0.1589,  0.1877],
        [-0.1060, -0.0945, -0.1833,  ...,  0.1583,  0.0200, -0.1743],
        [-0.0281,  0.0442, -0.1420,  ...,  0.0067, -0.0223,  0.0673]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.0342,  0.0950,  0.1243,  ..., -0.1028,  0.1004,  0.0881],
        [ 0.0611,  0.1852, -0.0252,  ..., -0.1161,  0.0154, -0.0856],
        [-0.1007, -0.1362,  0.0965,  ..., -0.1101,  0.1073, -0.1483],
        ...,
        [-0.0858, -0.1741, -0.0062,  ...,  0.0819, -0.0428, -0.1107],
        [-0.0412,  0.1302,  0.0512,  ...,  0.0378, -0.0400, -0.1428],
        [-0.0766, -0.0286, -0.0613,  ..., -0.1914,  0.0025, -0.0498]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0_reverse tensor([-9.6203e-02,  6.9831e-02,  1.7948e-01, -1.3809e-01,  9.5657e-02,
        -3.0846e-02, -1.0984e-01,  6.8694e-02,  8.7664e-02, -1.5335e-01,
        -1.1269e-01, -1.3871e-01,  1.8155e-01,  5.8729e-02, -6.8974e-02,
        -9.8250e-04,  1.1079e-01,  1.6773e-02,  1.6677e-01,  8.8071e-02,
        -2.3037e-02,  1.1101e-01, -1.4896e-01, -4.3595e-02, -1.5507e-01,
        -3.0687e-02, -1.5879e-01, -3.4622e-02, -1.6966e-01,  6.6079e-03,
         1.3893e-01,  5.5746e-02,  8.3887e-02, -1.7509e-01,  5.1138e-02,
         9.5707e-02,  9.6623e-04,  2.6190e-02, -1.7693e-01, -6.4941e-02,
        -4.6877e-03, -1.5695e-01, -1.1471e-01, -5.1709e-02,  5.7139e-02,
         1.0298e-02,  1.0127e-01,  7.7041e-02, -1.4807e-01, -2.6881e-02,
         1.5250e-01, -2.4156e-02,  8.8074e-02,  4.2686e-02, -4.0492e-02,
        -3.9530e-02,  2.2989e-02,  1.8789e-02,  8.1572e-02,  8.5538e-02,
        -3.8063e-02, -4.7997e-02,  7.0338e-02, -4.8411e-02, -4.4033e-03,
         1.0195e-01,  1.5369e-04, -1.2769e-01, -8.6098e-02,  9.7633e-02,
        -1.3012e-02,  1.7629e-01,  1.5478e-01,  1.5391e-01,  1.8130e-02,
         5.1931e-02,  1.4490e-01,  1.6611e-03,  1.5603e-01,  1.0189e-01,
        -1.5430e-01, -1.1874e-01,  1.3487e-01, -7.5835e-02,  7.4103e-02,
         1.2394e-02,  1.6434e-01, -5.7991e-02, -8.0991e-02, -1.3898e-02,
        -3.3069e-02, -1.2981e-01,  1.4776e-01, -9.3607e-02,  1.2740e-01,
        -1.7332e-01,  7.6357e-02, -9.6624e-02,  1.8200e-01,  1.1510e-01,
         1.3567e-01,  8.7666e-02, -1.3620e-02,  4.8601e-02,  9.8729e-02,
         2.0029e-02, -8.5096e-02,  1.9242e-01, -3.7634e-02, -6.2719e-02,
        -9.0047e-02,  2.8227e-03,  1.0407e-01,  1.5098e-01, -7.6506e-02,
        -9.6855e-02, -7.7177e-02, -1.5887e-01,  1.1924e-01, -1.4344e-01,
        -1.3749e-01, -4.9683e-02,  1.0203e-01, -9.0824e-02, -1.9228e-01,
         4.0970e-02,  1.4039e-01, -1.5849e-01], device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.0711,  0.0721, -0.1107, -0.0834,  0.1150, -0.0893, -0.1103,  0.1919,
         0.0081, -0.0821, -0.1693,  0.0390,  0.0815,  0.1761, -0.0774, -0.1598,
        -0.1063, -0.1067, -0.0082, -0.1016,  0.0174, -0.1237,  0.1101,  0.1020,
         0.1182, -0.1914,  0.0884, -0.0030, -0.0863,  0.0284,  0.0482, -0.0475,
         0.1573,  0.1175,  0.1579,  0.0968,  0.0319, -0.1469, -0.1233, -0.0797,
        -0.1590,  0.0963,  0.0788, -0.0548, -0.0725,  0.1877,  0.0932, -0.0627,
         0.1444, -0.1142,  0.1776,  0.0419, -0.0014,  0.1803,  0.1163,  0.0804,
        -0.0511, -0.0607, -0.1260,  0.1249, -0.0196, -0.0267, -0.1703, -0.1288,
        -0.0528, -0.1480,  0.0288, -0.0276,  0.1539, -0.1234,  0.0511, -0.0177,
        -0.1563,  0.0174, -0.0080, -0.1624, -0.1933,  0.1704, -0.1132,  0.1588,
         0.0477,  0.1870, -0.1119,  0.1588, -0.0893,  0.0621,  0.0868,  0.0628,
         0.1366, -0.0124,  0.0673,  0.0947, -0.0921,  0.1025, -0.0955,  0.0486,
        -0.1865,  0.1347, -0.0934,  0.1122,  0.0801,  0.1573, -0.0983, -0.0868,
         0.0486, -0.0485, -0.0296, -0.1480,  0.1006,  0.0811,  0.0207, -0.0923,
        -0.0330,  0.1142, -0.0746, -0.0369, -0.1328, -0.0008,  0.0280, -0.1212,
         0.0759, -0.0758,  0.0868, -0.0827,  0.0650,  0.1881, -0.0664,  0.1001],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0 tensor([[ 0.0562, -0.0845,  0.0143,  ...,  0.1902, -0.1173, -0.1249],
        [-0.0103, -0.0109, -0.1411,  ...,  0.0099, -0.0584,  0.0405],
        [-0.0097,  0.0303,  0.1384,  ...,  0.1393,  0.1104,  0.0100],
        ...,
        [-0.1135, -0.0837, -0.1647,  ..., -0.1521, -0.1111,  0.0271],
        [ 0.0020,  0.1821, -0.1556,  ..., -0.1248, -0.1436, -0.0478],
        [ 0.0047,  0.0944, -0.0796,  ...,  0.1406, -0.1347, -0.1032]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0 tensor([[ 0.1104,  0.0305, -0.0918,  ...,  0.0456,  0.1528,  0.1828],
        [-0.1179,  0.1007,  0.0164,  ..., -0.1813,  0.0644,  0.0105],
        [-0.0645, -0.1383, -0.1427,  ..., -0.1438, -0.1486,  0.1116],
        ...,
        [-0.0501, -0.0197,  0.0906,  ...,  0.1428, -0.0036,  0.0462],
        [-0.1406, -0.1380,  0.1401,  ..., -0.0193, -0.1415, -0.0670],
        [ 0.0304,  0.1669, -0.1597,  ...,  0.0463,  0.0240, -0.1358]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0 tensor([ 0.0341, -0.1244, -0.1573, -0.0251,  0.1134,  0.1144,  0.0431,  0.0968,
         0.0760,  0.1082, -0.1266,  0.0767,  0.1306, -0.0908, -0.0478,  0.1531,
        -0.1125,  0.0870,  0.0063, -0.0994,  0.0592, -0.1118, -0.0180,  0.1432,
        -0.0877,  0.1536,  0.1528,  0.0950,  0.1048, -0.1532,  0.1558, -0.1047,
         0.1788,  0.0822, -0.0438,  0.0868,  0.1252, -0.1526, -0.1285,  0.0824,
        -0.0388,  0.0990, -0.1191, -0.0696,  0.0966, -0.0679,  0.1543,  0.0051,
        -0.1505, -0.0118,  0.0955,  0.0671, -0.0655, -0.1827,  0.0079, -0.1269,
         0.0194, -0.0203,  0.0774, -0.0854, -0.0942,  0.0805,  0.1350, -0.0846,
         0.0202,  0.1149, -0.0519, -0.0035, -0.1462,  0.1581,  0.1439,  0.0233,
        -0.0855,  0.0760, -0.1054, -0.1327,  0.0704,  0.0488,  0.1096,  0.0482,
        -0.0280,  0.1550,  0.0207, -0.0621, -0.1849, -0.0021,  0.1727, -0.1042,
         0.0939,  0.1503,  0.1303, -0.0905, -0.0512,  0.1463, -0.1396,  0.1030,
        -0.0831, -0.1182,  0.1818, -0.1120,  0.1280, -0.1367,  0.0500, -0.1707,
        -0.1718, -0.0882, -0.1072, -0.0514,  0.0748,  0.1396, -0.0151,  0.0729,
         0.0568,  0.0512, -0.0897, -0.1089, -0.1301, -0.1339,  0.1068,  0.1750,
         0.0653,  0.0062,  0.1153,  0.1062,  0.0258,  0.0473,  0.1448, -0.0270],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0 tensor([ 0.0459, -0.1149,  0.1646, -0.0239,  0.1345,  0.0141, -0.1815, -0.1780,
         0.0529,  0.0672, -0.1453, -0.0902,  0.0880, -0.0164, -0.1603, -0.0717,
        -0.0785, -0.0401, -0.1540,  0.0748,  0.1393,  0.0389,  0.0735, -0.1315,
         0.0767,  0.1118, -0.0591, -0.1144,  0.1066, -0.0968,  0.0614,  0.1195,
         0.0600, -0.0574,  0.0929, -0.0596,  0.1286,  0.1109, -0.0158,  0.1039,
        -0.0340, -0.0972, -0.0385, -0.1740,  0.1555,  0.1339, -0.0497, -0.0934,
         0.1554,  0.0740,  0.0652, -0.1361,  0.1364,  0.1362,  0.0221,  0.0015,
         0.1405,  0.1319,  0.0546, -0.1115,  0.0845,  0.0848,  0.1011, -0.0041,
         0.0300,  0.1805, -0.1578, -0.0238, -0.1152,  0.1211, -0.0091, -0.0919,
        -0.0446,  0.1751, -0.0724, -0.0848, -0.1538, -0.1257, -0.0439,  0.1197,
         0.0494, -0.0502,  0.0023, -0.1535, -0.0963,  0.0273,  0.0891, -0.1858,
         0.1477, -0.1919,  0.1241, -0.1089,  0.1228, -0.0364, -0.1637,  0.1176,
        -0.1079, -0.1127, -0.0109,  0.1447, -0.1394,  0.1001, -0.0942,  0.1301,
         0.0200,  0.0948, -0.0455,  0.0111, -0.0580,  0.0587, -0.1094,  0.1265,
         0.1577, -0.0252, -0.0064,  0.0907, -0.0422,  0.0403,  0.0323, -0.1140,
        -0.0859,  0.1000,  0.0462,  0.1374, -0.1612, -0.0918,  0.1261,  0.1180],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0_reverse tensor([[-0.1303, -0.1910,  0.0705,  ...,  0.0252, -0.0573, -0.1689],
        [-0.0522,  0.0262, -0.1374,  ...,  0.0229,  0.0641, -0.0304],
        [-0.1136, -0.1541, -0.0669,  ..., -0.0556, -0.1374,  0.1060],
        ...,
        [ 0.1036, -0.0255, -0.0144,  ..., -0.0277, -0.1009, -0.1094],
        [ 0.1702, -0.0426,  0.0273,  ...,  0.1363,  0.0229,  0.0654],
        [ 0.1164,  0.0238, -0.0517,  ...,  0.1587, -0.1507,  0.0770]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.1827, -0.0444, -0.0867,  ...,  0.0790, -0.1592, -0.0378],
        [-0.0513, -0.1279, -0.0662,  ..., -0.1487, -0.1883, -0.1339],
        [ 0.1142,  0.0448, -0.1317,  ..., -0.1409,  0.0345,  0.0387],
        ...,
        [ 0.0818, -0.0898, -0.0487,  ..., -0.0409, -0.1553, -0.0372],
        [ 0.0618, -0.0282, -0.1497,  ..., -0.0027,  0.1308,  0.0099],
        [-0.1011, -0.1499, -0.0880,  ...,  0.1079, -0.0820, -0.1281]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0_reverse tensor([ 4.5617e-02, -9.1481e-02,  1.7020e-01, -2.8317e-02, -2.3396e-02,
        -6.8459e-02, -6.4408e-02, -1.3767e-02, -2.4595e-02, -2.8072e-02,
        -6.7889e-03, -8.4330e-03,  1.5422e-01,  1.0679e-01, -8.3063e-02,
        -4.5357e-02,  1.5466e-01,  1.8683e-01, -1.1355e-02,  5.8336e-02,
         6.2895e-02,  6.5060e-02, -6.3891e-02,  1.2101e-02,  8.9885e-05,
        -7.4697e-02, -1.4099e-01,  1.4701e-01, -1.4530e-01, -1.2577e-02,
         2.8304e-02, -2.9916e-02, -4.4939e-02,  1.6851e-01, -1.1068e-01,
        -7.8846e-02, -6.4947e-02, -1.0047e-01,  1.4618e-01, -9.8001e-02,
        -1.9499e-02, -3.4097e-02, -5.8335e-02,  1.3083e-01,  1.4593e-01,
        -7.7331e-02, -1.7334e-01, -3.0652e-02,  6.4600e-02,  2.6649e-02,
         2.7007e-02, -5.2729e-02, -1.5531e-01, -1.1185e-01,  1.5230e-01,
        -4.5101e-02, -9.3351e-03,  1.5176e-02,  8.0073e-02,  1.8327e-02,
        -9.5365e-02,  1.7597e-01,  1.7408e-01,  6.2300e-02,  3.7674e-02,
         8.8771e-02,  7.1957e-02, -1.4921e-01, -1.0484e-01, -1.9423e-01,
        -1.5809e-01,  1.6741e-01, -7.2523e-03, -1.6736e-01,  4.2293e-02,
         1.0710e-02,  7.7977e-02, -1.1600e-01,  8.2635e-02,  1.0334e-01,
         6.4989e-03,  7.1974e-02,  1.1765e-01,  1.1878e-01, -1.2873e-01,
        -9.9196e-02, -1.2417e-01,  6.7739e-03, -1.6795e-01, -2.9395e-02,
        -1.1587e-01, -1.6615e-01, -6.0250e-02,  1.2139e-01, -1.1009e-01,
         7.6831e-02,  1.5677e-01,  1.9394e-02,  5.2526e-02, -1.4630e-01,
         1.0200e-01, -9.4529e-02,  1.0437e-01, -1.0187e-01, -1.8890e-01,
        -9.3591e-02,  1.0669e-01,  7.1824e-02,  7.0772e-02,  4.8506e-02,
        -5.6179e-03,  1.5992e-01,  4.7785e-02,  7.5987e-02, -4.9312e-02,
         1.4750e-02,  1.4039e-01, -3.1985e-02, -6.6138e-02,  1.1330e-01,
        -5.9876e-02,  7.7498e-02,  8.2133e-02, -1.0088e-01, -5.0358e-02,
        -3.7942e-02,  1.1626e-02, -9.9833e-02], device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0_reverse tensor([ 0.0803,  0.0556,  0.1736,  0.0781, -0.1088, -0.0687,  0.0706,  0.0338,
        -0.1218,  0.1657,  0.0177, -0.0947, -0.0308,  0.0456, -0.0311,  0.1604,
         0.0438, -0.0972,  0.1416,  0.1598, -0.1354, -0.1422,  0.0931,  0.1025,
         0.1898, -0.0781, -0.0524, -0.0844, -0.0835, -0.1038,  0.0503,  0.1440,
        -0.1550, -0.0442, -0.0711, -0.0141,  0.1097, -0.0718, -0.1526, -0.0394,
         0.1081, -0.0316,  0.0963, -0.0051,  0.1165,  0.0677, -0.1778,  0.0848,
        -0.1562,  0.1149, -0.0080,  0.1676, -0.0301, -0.1047, -0.0388,  0.0657,
        -0.0336,  0.0722, -0.0844, -0.1389, -0.1422,  0.1893, -0.1084,  0.0827,
         0.1310, -0.0861, -0.1851, -0.0159, -0.1379,  0.1016,  0.1817,  0.1495,
         0.0158,  0.1208,  0.1298,  0.0136, -0.0308,  0.0786, -0.0845,  0.1351,
         0.1292, -0.0217, -0.1470,  0.1584,  0.0144,  0.1875,  0.1695,  0.1019,
        -0.1192,  0.0229, -0.0235, -0.1407, -0.1211, -0.1866,  0.1105,  0.0255,
        -0.0568, -0.0884,  0.1568,  0.0757,  0.0220, -0.1611, -0.1445,  0.0703,
        -0.0047, -0.0492,  0.1306,  0.1571,  0.0754, -0.1647,  0.1151,  0.1056,
        -0.1175, -0.1010, -0.0864, -0.1317,  0.0298,  0.0349, -0.0059,  0.0569,
        -0.0607,  0.0560, -0.0348,  0.0931, -0.1265,  0.1196, -0.1021, -0.0773],
       device='cuda:0') torch.Size([128])
fc_blocks.0.0.weight tensor([[-0.0886, -0.0749, -0.0955,  ..., -0.0275, -0.0980,  0.0705],
        [ 0.0727, -0.1220, -0.0303,  ...,  0.1403,  0.0409, -0.0290],
        [-0.0952, -0.0904,  0.0812,  ..., -0.0421,  0.0754, -0.0148],
        ...,
        [ 0.0805,  0.0188, -0.1024,  ..., -0.1144,  0.0715, -0.0874],
        [ 0.0164,  0.1006, -0.0665,  ...,  0.0310,  0.0143,  0.1375],
        [ 0.0574,  0.1192,  0.0946,  ...,  0.0240,  0.0020, -0.0947]],
       device='cuda:0') torch.Size([32, 64])
fc_blocks.0.0.bias tensor([ 0.1113,  0.0396, -0.0283,  0.0755,  0.0273, -0.1308,  0.0681, -0.0048,
        -0.0733,  0.0312, -0.0562,  0.0013, -0.0277,  0.0184, -0.0196, -0.0899,
        -0.0568, -0.0882,  0.0271, -0.0273, -0.0330,  0.0340, -0.0936,  0.0716,
        -0.0019,  0.0181, -0.1396,  0.0448,  0.1035, -0.1000, -0.0098, -0.0535],
       device='cuda:0') torch.Size([32])
fc_blocks.1.0.weight tensor([[-1.4894e-01,  5.2709e-02, -5.6673e-02,  5.6328e-02, -5.4239e-02,
         -6.3287e-02,  1.4127e-01, -1.5271e-01, -8.8225e-02,  7.4257e-02,
         -1.8702e-01, -1.6463e-01,  2.6688e-02, -8.5567e-02, -7.0525e-03,
          1.8786e-01,  2.6414e-02, -5.1577e-02, -1.9678e-02,  8.6561e-02,
         -1.8373e-01, -1.8131e-01, -1.7713e-01, -1.2728e-01,  4.0258e-02,
          3.2122e-02,  6.8796e-02, -1.0393e-01,  4.7946e-02, -2.9036e-02,
         -2.3869e-02,  1.5858e-01],
        [-1.6225e-02,  7.9132e-02, -8.6124e-03,  1.5814e-01, -9.6452e-02,
         -1.2264e-01, -9.2525e-02, -9.3105e-02, -1.5484e-01,  3.6201e-02,
          4.3811e-02, -1.6495e-01,  1.4616e-01,  6.6698e-02, -5.9769e-02,
         -1.1278e-01,  1.2425e-01, -2.9410e-02, -1.8409e-01,  1.3178e-01,
          1.0486e-01,  3.2856e-02, -2.5018e-03, -7.7396e-03,  1.2855e-01,
         -1.2145e-01,  8.0589e-02,  9.2226e-02,  3.5915e-02, -8.8105e-02,
          1.3530e-01, -6.9366e-02],
        [ 1.1836e-01,  1.1073e-01, -8.4800e-02,  9.6951e-03, -8.8310e-03,
         -3.0566e-02,  2.2664e-02,  1.7776e-01, -7.6039e-02, -6.1553e-02,
          1.4571e-01,  1.8388e-01,  1.8837e-01, -2.6522e-02, -1.5968e-01,
          4.4215e-02, -4.3940e-02, -3.0883e-02,  7.0245e-02, -1.5998e-01,
         -5.8557e-02, -2.5053e-02,  3.6344e-02,  7.2184e-02,  5.5034e-02,
          1.0751e-01,  4.5891e-02,  9.5636e-02,  1.5865e-02,  2.2654e-02,
         -1.4501e-01,  1.4970e-01],
        [ 4.8027e-03, -1.4887e-01, -1.7803e-01,  1.9067e-01,  1.5055e-01,
         -1.9390e-01,  1.5426e-01, -1.2362e-02, -1.3422e-01,  1.7199e-01,
          1.7691e-01, -4.6500e-02,  9.4819e-02, -9.2329e-02,  4.7939e-02,
         -7.7489e-02,  7.8559e-02, -5.7590e-02,  4.2541e-02,  6.6982e-02,
          1.0691e-01,  1.0109e-01, -8.7780e-02,  9.3640e-02,  1.0144e-02,
          1.6548e-01,  1.1332e-01, -6.0107e-02, -1.0318e-01,  1.0314e-01,
         -3.8888e-02,  1.6821e-01],
        [-9.8441e-02, -1.6789e-01,  1.4255e-01,  1.5688e-01, -1.9379e-01,
          3.8970e-02, -1.4682e-01,  6.8991e-02,  6.6352e-02,  4.8479e-02,
         -6.6081e-02,  8.2481e-02, -1.5602e-01, -1.0756e-01, -4.3995e-02,
          6.0893e-02, -1.2148e-01, -1.6269e-02, -2.9325e-02, -1.1931e-01,
         -1.8157e-01, -2.3722e-02, -6.5897e-03, -1.8275e-01, -1.0736e-01,
          9.7844e-02, -3.9303e-02, -1.1175e-01, -1.6640e-01, -2.9682e-03,
         -7.7257e-02, -1.7255e-01],
        [-1.1943e-01,  9.8029e-02,  1.1798e-01, -1.9432e-02, -3.7672e-02,
          1.3801e-01, -2.2571e-02,  6.6109e-02, -4.3604e-02,  3.0159e-02,
         -1.7746e-01, -1.3928e-01,  6.0481e-02, -5.8959e-02, -7.0342e-02,
         -7.1321e-02,  2.6419e-02, -9.6034e-03,  1.1088e-01, -1.1786e-01,
          1.3982e-02, -6.5787e-02, -4.4181e-03,  1.1717e-01,  5.5681e-02,
         -4.6641e-02,  9.1287e-02,  1.5617e-01,  4.0057e-02,  8.4242e-02,
         -1.9199e-01, -1.4028e-01],
        [ 1.1016e-01, -1.2770e-01, -1.2058e-01, -6.1641e-03, -4.0669e-02,
          8.7680e-02,  1.1458e-01, -1.1172e-02,  2.1128e-02, -8.7264e-03,
          1.2119e-01, -1.2267e-01,  9.5216e-02,  1.7996e-01, -1.3236e-03,
         -4.8572e-02,  1.6170e-01, -7.3814e-02, -1.0294e-01,  1.2688e-01,
          1.6632e-01, -5.0331e-02, -1.2905e-02,  1.1806e-03,  1.1416e-01,
          8.2129e-02, -4.0533e-02,  3.3382e-02, -1.0665e-01,  2.0499e-02,
          5.4678e-02,  8.4997e-02],
        [ 4.6123e-02, -1.0914e-01, -4.5633e-02,  7.3381e-03,  6.1105e-02,
          1.9419e-02,  1.1626e-01, -3.4327e-02,  6.0287e-02, -2.6110e-02,
          2.3401e-02,  3.3734e-02, -5.9843e-02,  1.5111e-02,  1.4263e-01,
          2.5562e-02, -1.4152e-01, -5.7209e-03,  1.4919e-01,  1.5741e-01,
          8.3867e-02, -1.4733e-01,  5.7421e-02,  1.1090e-01,  5.8549e-02,
          1.5576e-01, -1.4882e-01,  1.7246e-01,  1.5930e-01, -7.2947e-02,
         -1.5774e-01, -1.0074e-01],
        [ 1.2704e-01,  1.2647e-01,  4.1489e-02, -1.2322e-01,  2.4120e-03,
          1.3232e-01,  1.8842e-04, -1.1329e-01,  1.5716e-01, -1.6933e-01,
         -1.0305e-01, -8.0731e-02, -1.4302e-01, -3.1925e-02,  3.0127e-02,
          8.5688e-02,  1.3969e-01, -1.2973e-01,  8.6856e-02,  1.7161e-01,
         -1.4109e-01, -1.0856e-01,  7.7715e-02, -9.0627e-02, -3.2826e-02,
         -2.4628e-02,  5.9059e-02,  9.3911e-02, -9.7869e-03, -2.3681e-02,
          1.2495e-01,  4.4113e-02],
        [-1.1142e-02,  1.7017e-02,  1.5396e-01, -1.5165e-01,  9.3992e-02,
          1.7781e-01,  1.0821e-01, -1.4220e-01,  1.3576e-01, -1.4192e-01,
         -1.4408e-01, -1.0356e-01, -2.7837e-02, -7.8924e-02,  1.3213e-01,
         -9.5387e-02,  6.0178e-02, -1.3512e-01,  3.2417e-02, -1.0563e-01,
         -1.2919e-01, -1.8433e-01, -7.5648e-02,  1.3360e-01, -1.5707e-01,
          1.5327e-01, -1.1668e-01,  8.3952e-02,  3.6719e-02, -6.0579e-02,
          4.8042e-02,  1.3779e-01],
        [-7.4708e-02, -2.0907e-02, -1.7164e-01, -1.4672e-01, -1.3561e-01,
         -5.2233e-02, -2.7136e-02,  1.5004e-01, -9.4886e-02, -1.0540e-01,
          1.4416e-01,  6.8703e-02,  1.4719e-01,  8.9621e-02, -3.1341e-02,
          1.3588e-01,  4.6164e-02,  1.6613e-01, -1.4472e-01, -5.7109e-02,
         -4.3501e-02, -8.4513e-02,  1.0669e-01, -3.5210e-02,  1.5460e-01,
          1.2558e-01, -5.8871e-02, -1.7814e-02,  7.3947e-02, -4.4484e-02,
         -1.2207e-01,  6.4305e-02],
        [ 8.4866e-02, -1.5054e-01,  7.8972e-02,  4.1846e-02, -3.8662e-02,
         -1.7538e-01, -4.5236e-02, -1.4869e-01, -9.2917e-02,  1.0095e-01,
         -2.9067e-02,  1.5100e-01,  1.0566e-01, -1.5133e-01,  1.2845e-01,
          1.0730e-02, -1.9131e-01, -3.5996e-02, -1.2556e-01,  1.2008e-01,
          7.0535e-02,  8.4534e-02,  1.1699e-01,  1.3711e-01,  7.7928e-02,
          3.2765e-02, -1.1948e-01,  7.2288e-02,  1.3548e-01,  1.5375e-02,
          9.9072e-02,  3.7913e-02],
        [-9.5488e-02, -1.5926e-01, -8.3359e-02, -6.1837e-02, -7.7295e-02,
          1.3209e-01,  1.3893e-01, -8.2812e-02,  1.8472e-01,  1.0955e-01,
          1.7595e-02,  9.0179e-02, -1.1453e-01,  1.3235e-02, -1.8954e-01,
          1.5959e-02,  6.8179e-02,  1.0869e-02, -3.4646e-02,  1.0926e-01,
          4.0941e-02, -6.0034e-02, -1.6361e-01, -9.9987e-02, -2.2573e-02,
         -1.5089e-01, -9.7712e-02, -1.6977e-01,  2.8569e-02,  1.4194e-01,
         -2.2428e-02, -1.1597e-01],
        [ 1.2423e-01, -5.2782e-03, -8.1618e-02,  4.5487e-02,  6.4608e-02,
          8.1186e-02,  5.7084e-02,  8.5453e-02, -1.4793e-02,  1.0319e-01,
         -8.9967e-02,  2.1635e-02, -2.9981e-02,  5.7101e-02,  1.6578e-01,
         -1.8963e-03,  7.1097e-02, -1.8908e-01,  9.2649e-02,  5.4407e-02,
          1.3869e-01,  1.3492e-01, -6.7892e-02, -1.2215e-01,  1.2166e-01,
         -1.0647e-01, -1.4678e-01, -3.5930e-02,  1.8033e-01, -2.5658e-02,
         -1.3590e-01,  1.2203e-01],
        [-4.4560e-02, -1.3210e-01, -4.9728e-02, -1.4047e-01, -1.5386e-01,
          3.8820e-02, -1.0346e-01,  5.1824e-02, -1.8455e-01,  1.4485e-01,
          2.6909e-04,  5.1432e-02, -1.4010e-01, -1.1197e-01,  3.1891e-02,
         -1.3954e-01, -1.2220e-01, -1.3364e-01, -6.6466e-02, -1.0276e-01,
         -1.6840e-02,  5.1972e-02, -1.0960e-01, -8.5723e-02, -5.6968e-03,
          1.2482e-01,  7.0113e-02,  2.8152e-02, -6.9740e-02, -4.6335e-02,
          9.1434e-02, -1.5147e-01],
        [-3.4333e-02, -1.9195e-01, -2.6472e-02, -4.2689e-02,  3.0468e-02,
         -1.2553e-01,  5.1505e-02, -6.8178e-02, -1.4803e-01, -1.9567e-02,
          1.2934e-01, -4.5796e-02, -3.8193e-02, -1.3212e-01, -7.5450e-02,
          1.4542e-01,  1.3856e-01, -1.1870e-01, -2.9346e-02, -7.2350e-02,
          8.5019e-02, -1.4658e-01,  8.7341e-02, -2.7966e-03, -4.1577e-02,
          5.8629e-02, -1.1816e-01, -8.5695e-02, -1.9377e-02,  7.4604e-02,
          7.6837e-02, -1.5297e-01]], device='cuda:0') torch.Size([16, 32])
fc_blocks.1.0.bias tensor([ 0.1054, -0.1026,  0.0461, -0.0093, -0.0822, -0.1244,  0.0200, -0.0638,
        -0.0426, -0.1135,  0.1443,  0.0623,  0.0653,  0.0957, -0.0571, -0.0364],
       device='cuda:0') torch.Size([16])
fc_blocks.2.0.weight tensor([[-2.8186e-02,  1.4479e-01, -1.7788e-01,  5.4218e-02, -1.9021e-01,
         -1.1944e-02,  1.3284e-01,  1.2097e-01, -7.6604e-02,  5.5597e-03,
         -1.5419e-01, -2.3736e-01, -4.1680e-04, -2.4601e-01, -1.6120e-01,
          2.9783e-03],
        [ 1.0540e-01, -3.4415e-02,  1.7997e-01, -2.3775e-01,  1.6739e-01,
          2.4171e-01, -1.8406e-01, -1.5609e-01, -7.3011e-02, -2.4012e-02,
          9.0847e-02, -2.2821e-01,  1.7624e-01, -3.3830e-02, -2.1917e-01,
         -1.5565e-02],
        [ 9.2163e-03,  1.7718e-01, -1.2804e-01,  4.3971e-02, -2.5889e-01,
         -1.9757e-01, -7.7359e-02,  1.8651e-01, -9.1240e-03, -1.8887e-01,
         -1.5849e-01, -8.2032e-02,  8.5779e-02,  6.2291e-02, -1.9480e-01,
         -1.4725e-01],
        [-8.7861e-02,  1.7836e-01, -1.9612e-01,  2.2401e-01, -2.3899e-01,
          2.0073e-01,  2.1852e-01,  6.9752e-02,  4.7598e-02,  1.7705e-01,
         -2.0738e-01,  8.3389e-02,  2.0707e-01, -1.6223e-01, -4.2775e-03,
         -2.1276e-01],
        [-2.6874e-02, -2.4523e-01, -1.6140e-01,  1.8522e-01, -8.0478e-02,
         -6.4770e-02,  2.2006e-01, -1.7465e-01, -1.8165e-01, -1.6051e-01,
          7.7015e-02, -4.7324e-02,  2.3808e-01, -1.4574e-01,  2.9783e-02,
         -2.5510e-01],
        [-1.9641e-04,  1.0122e-01,  2.3693e-01,  2.4929e-01, -4.9966e-02,
         -1.5947e-01, -1.4574e-01,  1.4475e-01,  8.4197e-03, -9.3953e-02,
         -7.2515e-02,  1.6289e-01, -1.7295e-01,  6.9819e-02,  1.3666e-01,
         -1.1344e-01],
        [-2.3265e-01, -9.0624e-02,  1.8771e-01, -1.7880e-01,  6.3909e-02,
          1.6660e-01, -1.2595e-01,  1.6816e-01,  2.5186e-02, -2.4387e-01,
          4.9094e-02, -1.7446e-01, -3.3954e-02, -1.2544e-01, -1.6596e-01,
          1.4596e-02],
        [ 5.2096e-02,  2.4979e-01, -1.1109e-01, -1.1439e-01, -1.8293e-01,
         -2.1854e-01, -1.5911e-01,  6.1712e-02,  1.5535e-01,  2.4144e-01,
          1.8673e-01, -1.7770e-01, -5.1343e-02, -1.6702e-01,  8.0234e-02,
          4.5061e-02]], device='cuda:0') torch.Size([8, 16])
fc_blocks.2.0.bias tensor([0.1611, 0.0139, 0.1429, 0.0712, 0.1450, 0.1591, 0.0412, 0.1262],
       device='cuda:0') torch.Size([8])
fc_blocks.3.0.weight tensor([[ 0.2724,  0.2573, -0.2467, -0.2604, -0.1431, -0.2425,  0.0081,  0.2215],
        [-0.0301, -0.1763, -0.2302,  0.2737,  0.2948, -0.0211, -0.1487, -0.0289],
        [ 0.2875, -0.0361, -0.1089,  0.2421,  0.0162,  0.0073, -0.0774,  0.0154],
        [-0.1493, -0.1169,  0.2098, -0.2397, -0.3343,  0.1137, -0.2315, -0.3226]],
       device='cuda:0') torch.Size([4, 8])
fc_blocks.3.0.bias tensor([ 0.0546, -0.1704, -0.0954, -0.2932], device='cuda:0') torch.Size([4])
fc_blocks.4.0.weight tensor([[ 0.2419,  0.3582, -0.1139, -0.2201],
        [ 0.2701,  0.1283, -0.0667,  0.2779]], device='cuda:0') torch.Size([2, 4])
fc_blocks.4.0.bias tensor([-0.3495,  0.3758], device='cuda:0') torch.Size([2])
tensor([[[ 6.9919e-01, -9.0605e-02, -3.2780e-01,  ..., -6.8060e-01,
          -1.0286e+00,  4.3440e-01],
         [-1.5842e-01, -1.5690e+00, -1.1213e+00,  ..., -5.0847e-01,
           4.1644e-01,  1.1006e+00],
         [-3.2279e-01, -4.9885e-02,  3.3734e-01,  ...,  1.4058e-02,
          -6.4499e-01, -6.1983e-01],
         ...,
         [-8.9202e-04, -8.9884e-01, -3.1578e-01,  ...,  1.0188e+00,
           5.7303e-01, -2.1217e+00],
         [-2.1929e+00,  1.2096e+00, -3.6621e-01,  ..., -2.3936e-01,
          -5.0421e-01, -5.9042e-01],
         [ 9.9055e-01, -1.0664e+00, -2.6046e-01,  ..., -8.7857e-01,
          -1.6386e-01,  1.7815e-02]],

        [[-1.7943e+00, -1.0478e+00, -1.1516e+00,  ..., -4.5683e-01,
          -7.4726e-01,  1.5636e+00],
         [-1.0564e+00,  1.0492e+00, -1.1450e+00,  ..., -2.3176e+00,
          -1.1956e+00, -1.3368e+00],
         [ 1.4202e+00, -8.4413e-01,  1.5238e-01,  ..., -7.4499e-01,
           4.3036e-01,  2.2425e+00],
         ...,
         [-4.7618e-01, -1.0111e+00, -9.9860e-01,  ..., -5.0436e-01,
          -8.8326e-01, -1.5811e+00],
         [ 1.1187e+00, -6.8416e-02,  2.2543e+00,  ..., -1.6351e-01,
           2.5296e-01,  6.4965e-01],
         [ 7.7762e-02,  4.2359e-01, -5.3261e-02,  ..., -8.0830e-01,
          -1.8372e+00,  1.1058e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 0.1068, -0.3582,  0.8606,  ...,  0.5025, -0.8593,  0.2627],
         [-0.2478, -0.7648, -0.1978,  ...,  0.0847, -1.4908,  0.9323],
         [-0.9694, -0.3388,  0.7365,  ...,  0.4127,  0.2731,  1.5363],
         ...,
         [ 1.0761,  1.1509, -1.6488,  ...,  1.1251, -0.8395,  1.3723],
         [-1.5156,  0.5682,  0.5910,  ..., -0.4444,  1.1059, -1.6942],
         [-0.3832,  1.0812,  1.5778,  ...,  0.2770, -0.8362, -0.1559]],

        [[-0.7851, -1.8708,  0.7314,  ...,  0.4677, -1.2372, -1.0366],
         [-0.2437,  0.2659,  0.5375,  ..., -0.2112,  1.7484,  0.5218],
         [-1.1066, -1.9391,  0.3906,  ..., -0.5925,  0.3761, -0.0745],
         ...,
         [-1.6441, -1.4575,  1.0063,  ..., -1.5120,  0.8163, -0.4369],
         [ 1.0248, -0.8182,  1.1668,  ...,  0.7531, -0.2509, -1.4106],
         [-1.4174,  1.6888,  0.1711,  ..., -0.2699, -0.0207, -0.1216]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 171.563, Val Loss : 191.329
======> Trajectory Loss : 29.557, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.376, BelowGroundPenalize Loss : 4.376
===> [Minibatch 3/129].........tensor([[[ 6.9919e-01, -9.0605e-02, -3.2780e-01,  ..., -6.8060e-01,
          -1.0286e+00,  4.3440e-01],
         [-1.5842e-01, -1.5690e+00, -1.1213e+00,  ..., -5.0847e-01,
           4.1644e-01,  1.1006e+00],
         [-3.2279e-01, -4.9885e-02,  3.3734e-01,  ...,  1.4058e-02,
          -6.4499e-01, -6.1983e-01],
         ...,
         [-8.9202e-04, -8.9884e-01, -3.1578e-01,  ...,  1.0188e+00,
           5.7303e-01, -2.1217e+00],
         [-2.1929e+00,  1.2096e+00, -3.6621e-01,  ..., -2.3936e-01,
          -5.0421e-01, -5.9042e-01],
         [ 9.9055e-01, -1.0664e+00, -2.6046e-01,  ..., -8.7857e-01,
          -1.6386e-01,  1.7815e-02]],

        [[-1.7943e+00, -1.0478e+00, -1.1516e+00,  ..., -4.5683e-01,
          -7.4726e-01,  1.5636e+00],
         [-1.0564e+00,  1.0492e+00, -1.1450e+00,  ..., -2.3176e+00,
          -1.1956e+00, -1.3368e+00],
         [ 1.4202e+00, -8.4413e-01,  1.5238e-01,  ..., -7.4499e-01,
           4.3036e-01,  2.2425e+00],
         ...,
         [-4.7618e-01, -1.0111e+00, -9.9860e-01,  ..., -5.0436e-01,
          -8.8326e-01, -1.5811e+00],
         [ 1.1187e+00, -6.8416e-02,  2.2543e+00,  ..., -1.6351e-01,
           2.5296e-01,  6.4965e-01],
         [ 7.7762e-02,  4.2359e-01, -5.3261e-02,  ..., -8.0830e-01,
          -1.8372e+00,  1.1058e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 0.1068, -0.3582,  0.8606,  ...,  0.5025, -0.8593,  0.2627],
         [-0.2478, -0.7648, -0.1978,  ...,  0.0847, -1.4908,  0.9323],
         [-0.9694, -0.3388,  0.7365,  ...,  0.4127,  0.2731,  1.5363],
         ...,
         [ 1.0761,  1.1509, -1.6488,  ...,  1.1251, -0.8395,  1.3723],
         [-1.5156,  0.5682,  0.5910,  ..., -0.4444,  1.1059, -1.6942],
         [-0.3832,  1.0812,  1.5778,  ...,  0.2770, -0.8362, -0.1559]],

        [[-0.7851, -1.8708,  0.7314,  ...,  0.4677, -1.2372, -1.0366],
         [-0.2437,  0.2659,  0.5375,  ..., -0.2112,  1.7484,  0.5218],
         [-1.1066, -1.9391,  0.3906,  ..., -0.5925,  0.3761, -0.0745],
         ...,
         [-1.6441, -1.4575,  1.0063,  ..., -1.5120,  0.8163, -0.4369],
         [ 1.0248, -0.8182,  1.1668,  ...,  0.7531, -0.2509, -1.4106],
         [-1.4174,  1.6888,  0.1711,  ..., -0.2699, -0.0207, -0.1216]]],
       device='cuda:0', grad_fn=<SelectBackward>)
