==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 47.05it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.97it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1740, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1740, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1740, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1741, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
torch.Size([4, 2, 1, 32])
torch.Size([4, 2, 1, 32])
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[ 0.0652, -1.0596,  0.6114, -1.7010, -0.4068,  1.5322, -0.9429,  0.5610,
         -1.9254, -1.4871,  0.7506, -0.9566, -0.5058, -0.0135,  0.3177, -1.5377,
          0.3934,  0.2009, -0.9212, -0.1507, -0.8615, -0.1566, -0.3096, -0.2275,
         -1.2354,  0.1686, -0.4285,  0.6590, -0.1096,  0.8073, -2.4681, -0.9885]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.9506, -0.1911, -0.3600,  0.5565,  0.7037, -0.2454, -0.5919, -1.4779,
         -1.4877, -0.9097,  0.8351, -0.6989, -0.1609, -0.4675,  0.8946,  0.9200,
          0.8223, -0.3155, -1.2725,  1.0665, -1.1007,  0.0742, -1.3023,  0.8137,
          0.3478,  0.5101,  0.2535,  2.3401, -0.9878, -0.7872,  1.1414, -0.0654]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[ 0.0560, -1.0696,  0.6015, -1.6910, -0.3969,  1.5224, -0.9329,  0.5510,
         -1.9154, -1.4771,  0.7407, -0.9466, -0.5158, -0.0234,  0.3082, -1.5476,
          0.3835,  0.1910, -0.9311, -0.1407, -0.8516, -0.1466, -0.3195, -0.2375,
         -1.2454,  0.1785, -0.4384,  0.6690, -0.1196,  0.7973, -2.4781, -0.9789]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.9407, -0.1815, -0.3696,  0.5664,  0.7137, -0.2354, -0.5820, -1.4879,
         -1.4778, -0.8997,  0.8251, -0.6889, -0.1709, -0.4775,  0.8846,  0.9299,
          0.8124, -0.3055, -1.2629,  1.0565, -1.0908,  0.0643, -1.3119,  0.8237,
          0.3380,  0.5201,  0.2435,  2.3501, -0.9978, -0.7972,  1.1314, -0.0554]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 12893.115, Val Loss : 9300.183
======> Trajectory Loss : 11005.518, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.378, BelowGroundPenalize Loss : 1749.826
===> [Minibatch 2/5].........BEFORE UPDATE
h tensor([[ 0.0560, -1.0696,  0.6015, -1.6910, -0.3969,  1.5224, -0.9329,  0.5510,
         -1.9154, -1.4771,  0.7407, -0.9466, -0.5158, -0.0234,  0.3082, -1.5476,
          0.3835,  0.1910, -0.9311, -0.1407, -0.8516, -0.1466, -0.3195, -0.2375,
         -1.2454,  0.1785, -0.4384,  0.6690, -0.1196,  0.7973, -2.4781, -0.9789]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.9407, -0.1815, -0.3696,  0.5664,  0.7137, -0.2354, -0.5820, -1.4879,
         -1.4778, -0.8997,  0.8251, -0.6889, -0.1709, -0.4775,  0.8846,  0.9299,
          0.8124, -0.3055, -1.2629,  1.0565, -1.0908,  0.0643, -1.3119,  0.8237,
          0.3380,  0.5201,  0.2435,  2.3501, -0.9978, -0.7972,  1.1314, -0.0554]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[ 0.0478, -1.0796,  0.5918, -1.6812, -0.3875,  1.5141, -0.9239,  0.5429,
         -1.9056, -1.4685,  0.7307, -0.9366, -0.5244, -0.0168,  0.3005, -1.5572,
          0.3746,  0.1974, -0.9410, -0.1307, -0.8424, -0.1368, -0.3290, -0.2473,
         -1.2554,  0.1875, -0.4475,  0.6735, -0.1283,  0.7886, -2.4770, -0.9699]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.9343, -0.1885, -0.3623,  0.5712,  0.7233, -0.2298, -0.5723, -1.4862,
         -1.4701, -0.8946,  0.8152, -0.6789, -0.1787, -0.4835,  0.8755,  0.9274,
          0.8023, -0.2971, -1.2691,  1.0471, -1.0826,  0.0544, -1.3198,  0.8286,
          0.3281,  0.5297,  0.2336,  2.3600, -1.0031, -0.8033,  1.1260, -0.0454]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 7331.253, Val Loss : 5242.422
======> Trajectory Loss : 6153.051, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.374, BelowGroundPenalize Loss : 1040.818
===> [Minibatch 3/5].........BEFORE UPDATE
h tensor([[ 0.0478, -1.0796,  0.5918, -1.6812, -0.3875,  1.5141, -0.9239,  0.5429,
         -1.9056, -1.4685,  0.7307, -0.9366, -0.5244, -0.0168,  0.3005, -1.5572,
          0.3746,  0.1974, -0.9410, -0.1307, -0.8424, -0.1368, -0.3290, -0.2473,
         -1.2554,  0.1875, -0.4475,  0.6735, -0.1283,  0.7886, -2.4770, -0.9699]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.9343, -0.1885, -0.3623,  0.5712,  0.7233, -0.2298, -0.5723, -1.4862,
         -1.4701, -0.8946,  0.8152, -0.6789, -0.1787, -0.4835,  0.8755,  0.9274,
          0.8023, -0.2971, -1.2691,  1.0471, -1.0826,  0.0544, -1.3198,  0.8286,
          0.3281,  0.5297,  0.2336,  2.3600, -1.0031, -0.8033,  1.1260, -0.0454]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[ 0.0405, -1.0895,  0.5826, -1.6714, -0.3781,  1.5059, -0.9216,  0.5424,
         -1.8963, -1.4602,  0.7214, -0.9267, -0.5267, -0.0092,  0.2926, -1.5656,
          0.3660,  0.2049, -0.9505, -0.1208, -0.8335, -0.1269, -0.3375, -0.2469,
         -1.2654,  0.1957, -0.4562,  0.6719, -0.1258,  0.7871, -2.4708, -0.9606]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.9347, -0.1961, -0.3587,  0.5676,  0.7318, -0.2336, -0.5635, -1.4798,
         -1.4623, -0.8874,  0.8054, -0.6692, -0.1831, -0.4793,  0.8672,  0.9208,
          0.7927, -0.2885, -1.2762,  1.0380, -1.0741,  0.0448, -1.3280,  0.8250,
          0.3184,  0.5387,  0.2242,  2.3699, -0.9989, -0.7986,  1.1309, -0.0361]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 4643.157, Val Loss : 2469.371
======> Trajectory Loss : 3828.170, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.373, BelowGroundPenalize Loss : 677.677
