==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.44it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.92it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.70it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 752, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 681, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 681, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 745, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 745, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 746, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 832, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 832, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 719, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 719, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 720, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 748, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 748, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 748, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 646, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 646, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 646, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 647, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 755, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 755, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 756, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 828, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 675, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 675, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 675, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 676, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 785, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 785, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 730, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 730, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 786, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 786, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 694, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 694, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 695, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........IDX = 0 :  tensor([[[ 0.3030,  0.1585, -0.0120,  ..., -2.1420,  0.9021,  0.8590],
         [-0.2003,  1.4708, -2.4484,  ..., -0.4139, -0.1861,  1.8580],
         [-0.0207, -0.6643,  1.6557,  ..., -1.0272,  0.1361,  0.8006],
         ...,
         [-0.0264, -2.2777,  0.1863,  ...,  1.7073,  1.0033, -0.7526],
         [-0.7238,  1.8177, -1.5156,  ..., -0.8842,  1.5971, -1.2660],
         [ 0.4490, -0.4958, -0.3627,  ...,  1.2606,  1.3675, -1.9592]],

        [[-0.0601, -0.3420,  0.8679,  ...,  1.4046, -0.6864, -0.2208],
         [-2.4386, -0.8966,  1.2978,  ...,  1.1682, -0.4860,  1.6354],
         [-0.1713,  0.0762, -0.6291,  ..., -1.1936,  1.3206,  0.1798],
         ...,
         [-2.8052, -0.2978, -0.6468,  ..., -0.1803, -1.2302, -0.4677],
         [ 0.7404, -1.0671,  0.3611,  ..., -0.7666, -1.0714,  1.5473],
         [ 0.2326,  0.5493, -0.0575,  ...,  0.7838,  0.6970,  1.7274]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.0674, -0.1543, -0.1678,  ..., -1.0484, -0.5673, -1.5573],
         [-0.1826,  2.0433, -1.1792,  ...,  0.8056,  0.2581,  1.2708],
         [ 1.4445,  0.5063, -0.8537,  ...,  0.9468,  1.3436, -0.7999],
         ...,
         [ 0.5423,  0.7892, -0.8509,  ...,  0.0548, -0.3073, -0.8494],
         [-0.7862, -0.1079, -1.4106,  ...,  1.3410, -2.1517, -0.7645],
         [ 1.2138, -0.1192, -1.6655,  ...,  1.2096, -0.0300,  0.8015]],

        [[-0.8533,  0.0811,  1.5694,  ...,  0.3458, -0.4096,  2.0554],
         [ 0.4314,  0.1271,  1.3199,  ..., -1.7671, -0.9511, -0.3034],
         [-1.7783,  0.7889, -0.8509,  ..., -1.4250,  0.5426,  0.6779],
         ...,
         [ 2.0878,  2.0281, -0.3911,  ...,  2.3082,  1.4888, -0.6538],
         [-2.0232, -1.7552, -1.2894,  ...,  0.4587, -1.2731,  0.6710],
         [ 0.0358,  1.0759, -0.0697,  ..., -0.2787,  0.6904, -1.1175]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[ 1.0590, -0.1465, -0.1609,  ..., -1.0575, -0.5757, -1.5656],
          [-0.1922,  2.0344, -1.1875,  ...,  0.8151,  0.2495,  1.2793],
          [ 1.4348,  0.5147, -0.8628,  ...,  0.9564,  1.3354, -0.7902],
          ...,
          [ 0.5331,  0.7979, -0.8601,  ...,  0.0471, -0.3120, -0.8588],
          [-0.7920, -0.1023, -1.4046,  ...,  1.3460, -2.1434, -0.7720],
          [ 1.2043, -0.1095, -1.6753,  ...,  1.2191, -0.0395,  0.7918]],

         [[-0.8623,  0.0722,  1.5619,  ...,  0.3409, -0.4027,  2.0469],
          [ 0.4223,  0.1178,  1.3110,  ..., -1.7757, -0.9420, -0.3114],
          [-1.7874,  0.7811, -0.8604,  ..., -1.4320,  0.5476,  0.6687],
          ...,
          [ 2.0786,  2.0187, -0.3988,  ...,  2.3020,  1.4979, -0.6583],
          [-2.0322, -1.7641, -1.2925,  ...,  0.4675, -1.2654,  0.6763],
          [ 0.0260,  1.0665, -0.0794,  ..., -0.2878,  0.6997, -1.1112]]],


        [[[-1.4179,  0.5180, -0.9925,  ...,  0.0918, -0.5255,  0.2369],
          [ 0.2128, -0.8790, -0.9206,  ..., -0.1756, -1.5406,  0.6735],
          [ 1.1129,  2.2393,  0.5525,  ..., -0.5748, -1.2186,  0.9625],
          ...,
          [ 0.2677, -0.5128, -0.1818,  ..., -1.2824,  0.4467,  0.2864],
          [ 0.8281,  1.5567, -1.4952,  ...,  0.9669, -0.2139,  2.1672],
          [ 1.3095, -0.4951, -1.5333,  ...,  0.2536, -0.0115, -0.1588]],

         [[ 1.7359,  1.2799,  0.2232,  ...,  3.1566,  2.6248, -1.8335],
          [-0.5712,  0.6321, -0.7367,  ...,  1.4458, -0.4550,  1.9115],
          [ 1.5742, -1.1499, -0.1357,  ..., -0.8324, -0.0564, -0.3325],
          ...,
          [ 0.3494,  0.5128, -0.6269,  ...,  1.3464,  0.3354,  0.3524],
          [-1.3128,  0.0243, -0.6482,  ...,  1.0136,  0.2496, -0.2067],
          [-2.0500,  0.0949, -1.8908,  ..., -0.3214, -0.7593, -2.3949]]],


        [[[-0.5040, -0.2272, -0.1537,  ..., -0.1711, -0.7540, -0.8904],
          [-0.4700,  1.2828, -1.7086,  ..., -2.0293,  1.2803,  1.3397],
          [-1.0321,  0.1710, -0.6746,  ...,  0.8741, -0.2465,  2.9132],
          ...,
          [ 0.7722, -0.8728,  0.3712,  ..., -0.3589, -0.1384,  0.1526],
          [ 0.5642,  0.4409, -1.4482,  ..., -0.9196,  0.9584,  0.0900],
          [-0.3472, -0.6020, -0.8950,  ...,  0.6183, -0.4203,  0.4595]],

         [[ 1.5145, -0.5130, -0.6435,  ...,  0.9477,  0.3535,  1.0758],
          [ 1.1981, -0.5959, -1.2831,  ..., -0.4325, -0.7818,  0.2421],
          [-0.4835, -1.4834, -0.2062,  ..., -1.1680, -0.1400,  0.3578],
          ...,
          [-0.8320, -0.4360, -0.3295,  ...,  0.3116,  1.0699,  0.2737],
          [ 0.9639, -1.3883, -0.7353,  ...,  0.8304,  1.6537,  0.5698],
          [-1.1289, -1.5151,  1.0898,  ...,  0.3530,  2.1182,  0.4602]]],


        [[[ 1.2979, -0.3359,  1.2811,  ...,  1.0336,  0.3371,  0.7997],
          [ 0.5778, -0.0798,  0.1197,  ..., -0.7633, -0.2949,  1.2812],
          [-0.4732, -1.3536,  0.5640,  ...,  0.5855,  1.8443, -0.6659],
          ...,
          [ 0.4117, -1.2166,  0.6801,  ..., -0.1063,  1.5124, -1.5534],
          [ 0.1251,  0.9265, -0.2362,  ...,  1.7571,  0.1030, -0.6214],
          [-0.5849,  0.2184, -0.1627,  ..., -0.0991, -0.2394,  0.2887]],

         [[-0.2589, -0.5183, -0.0991,  ...,  1.3592,  0.2558, -1.1363],
          [ 0.2166,  0.3261, -1.0385,  ...,  0.2218,  0.5876, -0.4817],
          [-0.6847,  1.7179, -1.2599,  ...,  0.3890, -0.7341,  0.6390],
          ...,
          [ 0.6996,  0.2887, -0.7175,  ..., -0.4904, -0.7414, -0.4729],
          [-0.3376, -0.4267,  0.0255,  ..., -1.0318,  0.8502,  0.0074],
          [-0.5016,  0.9245, -0.3648,  ..., -0.0547, -0.4397,  0.6201]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[-1.1135e-01, -5.3298e-01,  1.0311e+00,  ..., -5.5125e-01,
           -1.2629e-01, -1.6026e+00],
          [-5.3447e-01, -5.1143e-01,  9.9062e-01,  ..., -8.6508e-01,
            4.3740e-01, -3.5113e-01],
          [-3.1446e-01, -1.4222e+00, -1.7118e+00,  ...,  4.4924e-01,
           -5.8541e-02, -7.5632e-01],
          ...,
          [ 9.7508e-02,  7.9605e-02,  5.9700e-04,  ..., -5.1717e-01,
           -7.7812e-03,  3.6034e-01],
          [ 1.0434e+00,  8.3423e-02, -2.9565e+00,  ...,  9.2766e-01,
            9.9654e-01,  1.3916e+00],
          [-2.8714e-01, -4.3652e-02,  7.2795e-02,  ...,  6.5291e-01,
           -3.8184e-01,  9.2808e-01]],

         [[-3.4524e-01, -7.2635e-01, -1.6729e-01,  ...,  1.2476e+00,
           -1.3518e+00,  4.7137e-01],
          [-2.6757e+00,  3.5637e-01,  1.0320e+00,  ...,  4.7692e-01,
            9.2479e-01,  1.1837e-02],
          [ 1.7000e+00,  3.8834e-01, -4.2248e-01,  ...,  9.2290e-01,
            4.4843e-01, -5.1958e-01],
          ...,
          [-1.2165e+00, -1.4601e-01,  1.5981e+00,  ...,  6.5915e-02,
            7.2367e-01, -9.6453e-01],
          [-1.8014e-01,  1.7172e-01, -1.3062e+00,  ...,  2.0212e-01,
            2.3184e-01, -1.3185e+00],
          [ 6.0546e-01,  8.3068e-02, -1.6598e+00,  ..., -1.1809e+00,
            5.0701e-02, -1.3064e+00]]],


        [[[-7.4441e-01, -1.4335e+00,  6.3998e-01,  ..., -6.3725e-02,
            1.2146e+00,  3.7072e-01],
          [ 4.7816e-01,  7.7608e-01, -5.4427e-01,  ...,  8.9880e-01,
           -7.1473e-02,  1.6054e-01],
          [ 2.4504e+00, -3.9124e-01, -5.2918e-01,  ...,  1.3264e-01,
           -4.6788e-01, -5.5038e-02],
          ...,
          [-5.5072e-01, -1.6426e+00,  5.5795e-02,  ...,  7.3750e-01,
            1.4997e+00,  4.9587e-01],
          [-1.0377e+00,  8.3609e-01, -1.5743e+00,  ..., -9.5756e-01,
           -1.3891e+00,  5.2711e-01],
          [-8.2228e-01, -6.1997e-01,  3.3887e-01,  ..., -1.3431e+00,
            1.0633e+00,  6.4823e-01]],

         [[ 1.0888e+00, -2.0360e-01, -1.9054e+00,  ..., -9.4702e-01,
            3.0392e-01,  1.5606e-01],
          [ 8.1919e-01, -2.4605e-01, -7.3323e-02,  ...,  1.4488e+00,
            5.3771e-01,  7.6071e-01],
          [ 8.3127e-01, -3.6291e-01, -5.3106e-01,  ...,  5.9022e-01,
           -1.0205e+00, -3.7421e-01],
          ...,
          [-4.4662e-01, -2.9292e+00, -2.0243e-01,  ...,  2.6976e-01,
           -2.4957e-01, -1.1415e-01],
          [-2.8599e-01, -4.2700e-01,  1.1306e+00,  ..., -7.9682e-01,
            5.3124e-01, -1.0422e+00],
          [-1.4257e+00, -2.7035e-01,  2.7075e-01,  ..., -1.3654e-01,
           -8.1914e-02,  1.7486e-01]]],


        [[[ 5.2769e-01, -2.0280e-01,  7.7891e-01,  ..., -2.8385e-01,
            9.6454e-01, -5.9458e-01],
          [-2.7431e-01,  8.9544e-01, -3.2398e-01,  ...,  7.8862e-02,
           -3.4649e-01,  1.0394e+00],
          [-1.0731e+00, -7.6323e-01,  1.4741e+00,  ...,  1.5604e+00,
           -1.8215e+00,  1.2356e+00],
          ...,
          [ 1.6235e-01,  1.8998e-01, -7.8055e-01,  ...,  1.8772e+00,
           -1.2123e+00, -7.1380e-01],
          [-1.0245e+00, -9.2827e-01,  1.1070e+00,  ...,  6.5148e-02,
           -2.9595e-01, -1.1715e+00],
          [ 5.2881e-01, -4.7348e-01, -3.0958e-01,  ..., -5.0667e-01,
            1.4061e+00,  8.8397e-01]],

         [[-3.0123e-01,  1.3694e-01,  3.8718e-01,  ...,  1.6598e+00,
            7.8101e-01, -3.1497e-01],
          [ 7.2707e-05,  4.8096e-01,  8.4318e-01,  ...,  4.2379e-01,
            7.5113e-01,  4.6401e-01],
          [-2.2079e+00, -1.2433e+00,  1.6061e+00,  ..., -9.2507e-01,
           -1.5401e+00,  7.6936e-01],
          ...,
          [-1.4786e+00, -3.4401e-01, -9.0396e-01,  ..., -9.2162e-01,
            1.5806e+00, -8.0711e-01],
          [ 3.2696e-01, -1.0096e+00,  1.3249e-01,  ..., -1.8791e+00,
           -5.4170e-01,  2.6009e-01],
          [ 8.2758e-01,  2.0983e+00,  1.8939e+00,  ..., -7.3449e-01,
            2.6303e+00, -1.1366e+00]]],


        [[[ 1.4514e+00,  5.1454e-02, -1.0739e-01,  ...,  7.4347e-01,
            9.7120e-01, -1.1020e+00],
          [-1.1679e+00, -6.8754e-01,  1.7054e+00,  ..., -2.2562e+00,
            5.7741e-01, -1.5588e+00],
          [-3.1265e-01, -3.6168e-02,  4.1872e-01,  ...,  1.1832e-01,
           -6.2138e-01,  1.0725e+00],
          ...,
          [ 2.1653e+00,  1.5748e+00, -3.1104e-01,  ..., -1.0239e-01,
            1.1745e+00, -5.1878e-02],
          [-2.4899e-01,  1.2283e+00, -6.0816e-01,  ..., -2.8311e-01,
           -1.0127e+00,  1.9792e-01],
          [ 6.3224e-01, -8.6766e-01, -2.2503e-01,  ..., -3.9504e-01,
            2.0372e-01,  1.7253e+00]],

         [[-3.1326e+00, -4.6787e-01,  6.2193e-02,  ...,  1.8568e+00,
           -1.2159e+00,  1.1076e+00],
          [ 9.7636e-01,  1.6354e+00,  1.7330e+00,  ..., -1.9944e+00,
            9.5001e-01, -3.6205e-01],
          [ 1.6636e+00, -1.1621e+00, -9.7917e-01,  ...,  1.3786e+00,
            3.5900e-01,  1.5558e+00],
          ...,
          [-8.4236e-01, -3.5281e-01,  2.7304e+00,  ..., -1.0593e+00,
           -1.1934e+00, -2.0122e-01],
          [-3.8706e-01, -4.6017e-01, -5.4602e-01,  ...,  2.8219e-01,
           -3.8896e-01,  4.4719e-01],
          [-9.4279e-01, -1.0151e+00,  4.2655e-01,  ...,  1.3632e+00,
            6.9193e-02, -2.2088e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
recurrent_blocks.0.weight_ih_l0 tensor([[ 1.7255e-02,  1.0831e-01,  1.3349e-01],
        [-5.8637e-02, -8.1756e-02,  7.6228e-02],
        [-1.6635e-01,  6.8755e-02,  1.8512e-01],
        [-5.4493e-02,  1.3458e-01,  8.9239e-02],
        [-1.4089e-01, -6.9077e-02,  2.8047e-03],
        [ 8.6064e-02,  9.8748e-02,  1.5000e-01],
        [ 1.4429e-01, -1.8561e-01,  1.3122e-01],
        [ 1.0452e-01, -9.1743e-02,  1.1469e-01],
        [-6.5346e-02,  1.5949e-01, -2.6576e-02],
        [-1.3129e-01, -1.8378e-01,  2.1478e-03],
        [ 4.0327e-02,  9.5295e-02,  1.0929e-01],
        [ 4.9703e-02,  1.4495e-01,  3.8927e-02],
        [ 3.0770e-02, -1.2554e-01,  9.9592e-02],
        [ 5.2738e-02,  4.4715e-02,  1.0189e-01],
        [-1.3893e-01, -1.5556e-02, -1.2837e-01],
        [-1.8110e-02,  9.0434e-02, -6.6046e-02],
        [-1.5985e-01,  5.9797e-02,  1.0498e-01],
        [ 1.1060e-01, -1.4632e-03,  1.5893e-01],
        [ 1.8435e-01,  1.0878e-01, -1.2383e-01],
        [ 6.3641e-02,  1.2649e-01, -9.5554e-02],
        [-1.6306e-01, -1.2306e-01, -1.2130e-01],
        [-6.7500e-02, -5.1555e-02, -5.7822e-02],
        [ 8.5470e-02,  7.4439e-02, -7.9816e-02],
        [ 4.2145e-02,  5.5161e-03, -7.2766e-02],
        [ 7.5173e-02, -1.5117e-01, -5.8220e-02],
        [-7.8548e-02,  6.9412e-03, -3.0171e-02],
        [ 1.2606e-01,  5.7688e-03,  1.8234e-02],
        [ 6.4081e-02,  1.7093e-01,  6.9669e-02],
        [ 7.9452e-02,  1.8234e-01,  3.0815e-02],
        [ 2.5138e-02, -2.6063e-02,  1.5331e-01],
        [-6.6137e-02, -1.6668e-01, -4.3449e-02],
        [ 1.1405e-01,  9.9013e-03, -1.4479e-01],
        [ 8.8691e-02,  1.6312e-01,  2.6169e-02],
        [-1.7939e-01, -1.2270e-01,  8.1543e-02],
        [-1.2045e-01, -9.2939e-02,  7.8341e-03],
        [-3.1382e-02,  8.4250e-02, -1.5363e-01],
        [ 7.8753e-02, -2.5126e-02,  4.7367e-02],
        [ 1.1689e-01, -1.2173e-01,  1.1039e-01],
        [-1.8252e-02, -3.2262e-02, -1.0096e-01],
        [-1.0056e-01,  2.9571e-02,  6.7775e-02],
        [ 4.3691e-03,  7.5731e-02, -1.2480e-01],
        [-1.3583e-01,  1.2588e-01, -1.3551e-01],
        [ 1.1845e-01,  3.7225e-02, -3.6716e-02],
        [ 7.7801e-02, -9.7119e-02,  5.3334e-02],
        [ 8.0648e-02, -1.6855e-02,  1.6000e-01],
        [-3.6607e-02, -1.0683e-01, -7.2719e-02],
        [ 3.7784e-02,  6.9334e-02,  4.7237e-02],
        [ 7.4419e-02,  8.5243e-02,  1.0317e-02],
        [-1.1032e-03, -6.0292e-02, -1.6723e-01],
        [-6.0163e-02, -6.3669e-02, -1.5469e-01],
        [ 1.3836e-01, -8.0733e-02, -1.0940e-01],
        [ 1.3922e-01, -5.4508e-02, -2.6497e-02],
        [ 8.1151e-02, -1.6369e-01,  6.6788e-02],
        [-1.0405e-01,  1.3917e-01, -4.8888e-02],
        [ 5.3656e-02,  8.3112e-02,  6.6546e-02],
        [-1.0692e-01,  1.8079e-01, -7.3154e-02],
        [-1.1440e-01,  1.0661e-01, -2.3852e-02],
        [-6.5334e-02, -1.7434e-01,  3.7598e-02],
        [ 6.7320e-02,  3.6037e-02, -9.2665e-02],
        [ 1.7440e-01, -1.5651e-01, -1.8365e-02],
        [-3.8146e-03,  1.5654e-02, -1.5287e-01],
        [ 6.4820e-02,  1.2008e-01,  9.7834e-02],
        [-1.5590e-01, -1.0947e-01, -6.7371e-02],
        [ 1.5417e-01,  1.2572e-01, -1.1220e-01],
        [-1.3225e-01, -5.9492e-03, -9.6523e-02],
        [ 7.5054e-02,  1.4625e-01, -6.2040e-02],
        [-2.8108e-02,  7.4139e-02, -1.2338e-01],
        [ 1.8051e-01,  9.9952e-02,  8.7041e-02],
        [ 8.8664e-02, -5.3838e-02,  1.1072e-01],
        [-1.4219e-01,  1.3940e-01, -1.6372e-01],
        [-4.9149e-02, -5.1311e-03,  1.1729e-01],
        [ 6.1780e-02,  1.2486e-01,  1.6065e-01],
        [-1.2605e-01,  9.3214e-02, -7.2104e-02],
        [ 1.3321e-01,  1.5753e-01,  8.9914e-02],
        [ 1.1819e-01, -8.4072e-02, -1.5158e-01],
        [ 1.1555e-01, -1.2969e-02, -5.7435e-02],
        [-1.2397e-01,  1.1490e-02, -1.4397e-02],
        [-6.1197e-02, -1.4934e-01,  4.4395e-02],
        [-3.5114e-02, -4.1149e-03,  1.1100e-01],
        [-4.7057e-02, -1.5674e-01,  3.9843e-02],
        [-2.1333e-02, -1.3234e-01,  6.5721e-02],
        [-5.4934e-02, -1.2936e-01, -1.3560e-01],
        [ 5.4418e-02, -1.9982e-02,  1.6432e-01],
        [-4.8634e-02, -6.7061e-02, -1.2318e-01],
        [ 1.7012e-01, -1.5094e-01,  1.3858e-01],
        [-4.0661e-02, -8.9796e-02,  1.5996e-01],
        [ 1.0079e-02,  1.0760e-01, -4.3432e-02],
        [ 4.8377e-02, -7.2046e-02, -3.5012e-02],
        [-1.4110e-01,  1.5641e-01, -1.3645e-01],
        [ 1.3949e-01,  4.7936e-02,  1.3032e-01],
        [-4.8502e-02, -1.0771e-01, -5.2282e-02],
        [-1.3506e-01,  1.5504e-01,  1.5057e-01],
        [-9.4532e-02,  6.8521e-02,  2.6617e-02],
        [ 9.3592e-03,  9.1033e-02, -1.4835e-01],
        [ 3.3954e-02,  4.8783e-02,  8.9416e-02],
        [ 2.1334e-02,  1.3877e-01,  3.8443e-02],
        [ 9.8245e-02,  1.4522e-01,  1.1586e-01],
        [-3.8769e-02,  7.0940e-02, -9.5037e-02],
        [ 5.2915e-02,  4.8842e-02,  1.7102e-01],
        [-9.7141e-02,  8.6847e-02, -6.4538e-02],
        [ 1.4494e-01,  1.7510e-01, -1.3845e-01],
        [-5.4879e-02, -1.1954e-02, -1.6036e-01],
        [ 1.5763e-01,  5.6931e-02, -1.5252e-01],
        [ 2.7183e-02, -1.7214e-01, -1.7654e-01],
        [-1.0923e-01,  9.9075e-02, -1.3251e-01],
        [-1.6050e-01,  1.0974e-01, -3.2904e-02],
        [-5.3060e-02, -1.6287e-01,  9.3238e-02],
        [ 4.0301e-02,  1.2847e-01, -1.5913e-02],
        [-3.9902e-02, -1.4918e-01,  1.6548e-01],
        [-1.2325e-01,  1.0489e-01, -5.3180e-02],
        [ 7.3390e-02,  1.5115e-04,  5.3812e-02],
        [ 8.1193e-02,  1.6345e-01, -2.3653e-02],
        [-1.0589e-01, -1.7068e-01,  9.1059e-02],
        [ 1.0049e-01, -7.5946e-02, -1.2219e-01],
        [-4.7027e-02, -1.1375e-01, -2.5877e-02],
        [-1.7460e-01,  1.3970e-01, -6.1538e-02],
        [ 9.4503e-02, -6.2592e-02, -9.8818e-02],
        [ 3.6317e-02, -5.3696e-02,  8.7037e-02],
        [-7.8459e-02,  7.5113e-02,  9.0392e-02],
        [-1.0256e-01, -1.1642e-01, -1.2567e-01],
        [-1.5040e-01, -1.6112e-02,  3.6536e-02],
        [ 1.4342e-01,  6.5722e-02,  9.0703e-02],
        [ 2.1615e-02, -4.4448e-02, -9.3823e-03],
        [-8.2492e-02,  2.0277e-02,  1.5543e-01],
        [-1.1667e-01, -2.7725e-02,  1.0860e-01],
        [-1.6639e-01,  1.2762e-02, -1.2489e-01],
        [-1.8949e-02, -1.2183e-01,  5.9540e-02],
        [-1.4431e-01,  8.3106e-02,  1.5546e-01]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.0485,  0.1085, -0.1076,  ...,  0.0527,  0.0435, -0.0235],
        [-0.1339, -0.1525, -0.1667,  ..., -0.1016, -0.1560, -0.0569],
        [-0.0420,  0.0870,  0.0843,  ..., -0.0440,  0.1557,  0.1230],
        ...,
        [-0.1193,  0.0598,  0.1551,  ..., -0.1537,  0.1659,  0.0746],
        [ 0.1249,  0.1503,  0.0834,  ...,  0.0735,  0.1036, -0.0776],
        [ 0.0272,  0.1141, -0.0514,  ..., -0.1433, -0.0762, -0.0397]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0 tensor([-0.1081,  0.1149, -0.0076,  0.0856, -0.0003, -0.0619,  0.0791,  0.0770,
         0.0680,  0.1626, -0.1092,  0.0447,  0.1791,  0.0774,  0.0449,  0.0710,
         0.1435,  0.0295, -0.0436, -0.1844,  0.1337, -0.1541, -0.0552, -0.0174,
        -0.0607, -0.1445, -0.1773, -0.1640, -0.1432, -0.0043, -0.1442, -0.0053,
         0.1620,  0.0212,  0.0132,  0.1454, -0.0602, -0.0541,  0.1365,  0.0685,
         0.0367, -0.0108, -0.0272, -0.0172, -0.1208,  0.0674, -0.0010,  0.1027,
        -0.0589,  0.0932, -0.0364,  0.1559, -0.0383,  0.1439,  0.0434,  0.1058,
        -0.1123,  0.1606,  0.1221,  0.1518, -0.0206, -0.0832, -0.0236,  0.0992,
         0.0559,  0.0660, -0.0107, -0.0812, -0.0921,  0.0317, -0.0895, -0.0074,
        -0.0118, -0.0428,  0.0491,  0.0753, -0.1038, -0.0070, -0.0303, -0.0663,
        -0.0272,  0.1134,  0.1644, -0.1079,  0.0289, -0.1670, -0.0421, -0.1572,
        -0.1161,  0.1850,  0.0587,  0.1065, -0.0300, -0.1450, -0.0474,  0.1232,
        -0.0580,  0.1658, -0.0041, -0.1233,  0.1291, -0.0986, -0.0642, -0.0779,
         0.0504,  0.0179,  0.0088, -0.0638,  0.0627,  0.0551, -0.0157,  0.1810,
        -0.1297, -0.0531, -0.0120, -0.1301, -0.1797,  0.0136, -0.0935, -0.0419,
        -0.0939, -0.0783, -0.0652, -0.0410,  0.1245,  0.1855,  0.0843,  0.1046],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0 tensor([ 0.0552,  0.0290, -0.1247,  0.0563,  0.1476,  0.1829,  0.1551, -0.1481,
         0.1710,  0.1592,  0.0888,  0.0401, -0.1651,  0.0679,  0.0819, -0.0828,
         0.1289, -0.1592,  0.0849,  0.1315, -0.1768, -0.0153,  0.1300,  0.0610,
         0.0720, -0.0365,  0.1482, -0.0724,  0.1427, -0.0935, -0.1087, -0.0814,
         0.0049, -0.0041, -0.1608,  0.1493, -0.0082,  0.1301, -0.0859, -0.1453,
         0.1451,  0.1627, -0.0091,  0.0869, -0.1082, -0.1230,  0.1559,  0.1068,
         0.1252,  0.1855,  0.1607, -0.0440,  0.1495, -0.0696, -0.1013,  0.0480,
         0.0043,  0.1282,  0.0018, -0.0716, -0.1332, -0.0505,  0.1361, -0.0788,
         0.1204, -0.0402, -0.0406, -0.0436, -0.1776,  0.1509,  0.1550,  0.1363,
         0.0161,  0.0192, -0.1677, -0.1145,  0.1221, -0.1133, -0.0865, -0.0846,
         0.0426,  0.1488,  0.0624,  0.1048, -0.1001, -0.0103,  0.1439,  0.0255,
         0.1139, -0.0196, -0.0901,  0.0780,  0.0111, -0.0609, -0.0739, -0.0913,
        -0.0284,  0.0375, -0.0924, -0.1411,  0.0675, -0.0519,  0.1293,  0.0124,
        -0.1551,  0.1204,  0.0222, -0.0793, -0.1519,  0.0884, -0.1456,  0.0982,
        -0.1204,  0.0102,  0.0873, -0.1342,  0.1363, -0.0033, -0.0720, -0.0871,
         0.0685,  0.1451, -0.1010, -0.0446,  0.0761, -0.0179, -0.1113,  0.1369],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.weight_ih_l0_reverse tensor([[ 8.8138e-02, -2.5890e-02,  4.3976e-02],
        [ 1.1205e-01,  1.4311e-02,  1.7103e-01],
        [ 4.7275e-03,  8.9854e-02,  1.1575e-01],
        [ 1.7021e-03,  9.6845e-02,  9.9305e-02],
        [-1.1592e-01, -1.2466e-01, -1.8377e-01],
        [ 4.7187e-02,  1.8133e-01,  1.0431e-01],
        [ 1.4173e-02,  6.6833e-02,  2.2279e-02],
        [-3.4888e-03,  1.5637e-01,  1.1518e-01],
        [-1.7603e-01,  6.0506e-02, -4.9138e-02],
        [-4.3854e-02, -1.5172e-01, -5.2260e-02],
        [-5.4254e-02,  7.7321e-02,  6.3249e-02],
        [-8.1519e-02,  1.5685e-01,  8.8409e-02],
        [ 5.4343e-02,  3.1902e-02, -1.1085e-01],
        [ 1.0661e-01, -2.6831e-02,  1.0929e-01],
        [-1.4727e-01, -1.4933e-01,  1.2658e-01],
        [ 1.3161e-01,  1.1849e-01,  1.6202e-01],
        [-6.8325e-02, -8.3892e-02, -1.5691e-01],
        [ 1.3125e-01,  6.6418e-02,  6.4794e-02],
        [ 1.3293e-01,  1.8554e-01, -6.1836e-02],
        [ 1.2813e-01, -1.2186e-01,  1.6913e-02],
        [ 4.0527e-03, -5.9903e-02,  1.2066e-01],
        [-8.3131e-02,  5.2057e-02,  8.9352e-02],
        [-4.8967e-02, -1.3998e-01, -3.4681e-02],
        [-8.6062e-02, -2.2017e-03, -1.1359e-01],
        [-1.1827e-01, -1.1120e-01, -3.5171e-02],
        [-1.3356e-01, -7.1472e-03,  3.6304e-02],
        [ 1.1264e-01,  1.5495e-01,  1.2214e-01],
        [-1.5741e-01,  1.2928e-01,  7.6676e-02],
        [ 9.0591e-02, -1.7496e-02, -2.0688e-02],
        [ 1.1424e-01, -1.8619e-01, -2.7007e-02],
        [-5.2690e-02,  1.1306e-01,  7.2962e-02],
        [-1.5080e-01, -1.5810e-01, -9.8060e-02],
        [ 1.5338e-01, -1.3834e-01,  1.0012e-01],
        [-4.6506e-02, -1.5947e-01, -1.5493e-01],
        [-1.1879e-01,  6.1795e-02, -1.2536e-01],
        [ 1.1762e-01, -1.5935e-02, -9.1508e-02],
        [ 1.4284e-01,  1.0398e-02,  1.5755e-01],
        [-1.0538e-01,  2.6952e-02, -1.8131e-01],
        [-3.8550e-02,  1.3132e-01, -7.6987e-02],
        [ 5.6445e-02, -1.2451e-01, -7.5987e-03],
        [ 6.5739e-02,  1.4084e-01,  7.0583e-02],
        [ 1.8166e-01,  1.3809e-01, -1.5424e-01],
        [-1.5916e-01, -1.1829e-01,  4.4398e-02],
        [ 3.7403e-02, -1.4165e-01,  1.1341e-01],
        [ 4.0706e-02,  8.8001e-02,  1.4206e-01],
        [ 5.2566e-02, -1.7197e-01,  2.3785e-02],
        [-1.7671e-03,  1.2137e-01,  1.7639e-01],
        [-6.2114e-02, -1.1693e-01,  3.3339e-02],
        [-7.8999e-02,  1.1671e-01, -1.7445e-02],
        [-1.2229e-01,  1.5478e-01,  6.3801e-02],
        [ 2.2883e-02,  6.6301e-02, -8.6884e-02],
        [-5.7706e-02, -1.1772e-01, -1.6293e-01],
        [-1.8345e-01,  1.3473e-01, -2.3960e-02],
        [ 2.2178e-02, -7.0303e-02, -1.6935e-01],
        [-1.1890e-02, -1.2630e-01, -1.2945e-01],
        [ 7.8048e-02, -1.4576e-01, -8.6993e-02],
        [ 1.1096e-01,  7.3911e-02,  2.3089e-02],
        [ 5.8758e-02, -6.0965e-02, -1.1796e-01],
        [ 1.0662e-01, -1.2567e-01, -4.4867e-02],
        [-1.4314e-01, -1.5554e-01, -5.3996e-02],
        [ 8.7695e-02,  2.2060e-02,  3.4968e-02],
        [-6.1151e-02,  1.1920e-01,  5.0170e-02],
        [-1.9319e-02,  7.0426e-02, -1.8341e-01],
        [-1.3326e-01, -9.5564e-02, -1.4870e-01],
        [-1.5110e-01, -9.4719e-02, -8.3200e-02],
        [-2.6281e-02,  1.3370e-01,  1.6218e-01],
        [ 1.6359e-01, -1.2740e-01, -1.1301e-01],
        [ 1.1294e-01, -8.8398e-02, -1.6651e-01],
        [-7.8817e-03, -1.2019e-01, -1.5241e-01],
        [ 1.4433e-01, -2.6897e-02,  1.6449e-01],
        [ 1.7688e-01, -1.3930e-01, -7.8974e-02],
        [ 1.4057e-01,  1.2753e-01, -1.3550e-02],
        [-1.5754e-01,  9.4130e-02, -2.1786e-02],
        [ 4.2344e-02, -1.0945e-01,  1.7429e-01],
        [ 1.3993e-01,  1.6572e-01, -1.8611e-01],
        [ 9.3285e-05, -9.8254e-03, -2.9353e-02],
        [ 8.6503e-02,  4.5425e-02, -6.7562e-02],
        [-1.5320e-01,  3.3357e-02, -1.3491e-01],
        [ 5.7504e-02,  1.8179e-01, -6.1320e-03],
        [ 1.0434e-01, -9.3653e-02,  2.8554e-03],
        [-4.4300e-02, -6.8232e-02, -1.6806e-01],
        [ 1.6597e-01,  1.6485e-01, -1.4225e-01],
        [ 1.1182e-01,  1.5143e-01,  6.5385e-02],
        [ 9.8294e-02, -6.0176e-02, -1.4251e-01],
        [-1.2939e-01, -8.3842e-02,  3.1303e-02],
        [ 1.5988e-02, -9.6310e-02, -8.1658e-02],
        [-1.3087e-01, -1.5784e-01,  2.7252e-02],
        [-1.1184e-01,  3.3955e-02, -1.3403e-02],
        [ 1.3430e-01, -1.0228e-01,  9.3402e-02],
        [-1.6918e-02, -1.6674e-02,  3.5903e-03],
        [ 1.3426e-01,  5.5562e-02,  1.3396e-01],
        [-1.4740e-02, -9.4590e-02, -1.2249e-01],
        [ 1.2136e-01, -1.8187e-01, -7.0283e-02],
        [ 1.2098e-01, -8.7132e-02, -8.6210e-02],
        [ 4.9838e-02,  2.7585e-02, -1.5476e-01],
        [ 1.7452e-01, -1.8390e-01,  5.5809e-02],
        [ 1.3882e-01, -2.2290e-02,  1.7489e-01],
        [-9.6698e-02,  8.0460e-03, -1.6642e-01],
        [ 1.6651e-01, -3.8891e-02,  2.2420e-02],
        [-1.0746e-01,  2.5931e-03,  2.5313e-02],
        [ 6.1235e-04, -7.7112e-02, -1.0013e-01],
        [ 1.0039e-01,  1.6662e-01, -5.0245e-02],
        [ 1.3539e-03, -7.7856e-02,  4.5205e-02],
        [-1.4629e-01, -2.8451e-02,  7.1282e-02],
        [ 1.0063e-01,  1.7265e-02,  6.6548e-02],
        [ 4.9443e-02,  1.6313e-01,  6.1361e-03],
        [ 1.7722e-01,  3.1035e-02, -4.9130e-02],
        [-1.0861e-02, -8.0227e-02,  1.6730e-01],
        [ 1.3304e-01, -9.7401e-02, -1.6533e-01],
        [-1.3738e-01,  7.3320e-02, -3.9009e-02],
        [-1.0657e-01,  1.5634e-01, -1.2293e-01],
        [-3.5486e-02, -7.3380e-02,  1.1480e-01],
        [ 5.6330e-02, -8.0136e-02, -1.0563e-01],
        [ 7.6036e-02,  4.1138e-03, -9.5975e-02],
        [ 2.8464e-02,  1.9624e-02, -1.3993e-01],
        [-8.3085e-02, -1.4042e-01,  2.9941e-02],
        [ 7.3808e-02, -1.5358e-01, -2.9514e-02],
        [ 2.0862e-02,  1.1632e-01,  8.3819e-02],
        [-1.3846e-02, -3.9600e-02,  1.2577e-01],
        [-3.4830e-02,  4.2797e-02, -9.7718e-03],
        [-6.3888e-02, -1.4152e-01, -2.7270e-02],
        [-5.6021e-03,  4.1720e-02,  1.6455e-01],
        [ 1.5651e-01, -1.7677e-01, -9.7091e-02],
        [ 1.6678e-01, -2.2855e-02,  9.1387e-03],
        [ 7.2893e-02,  1.9138e-02,  1.6524e-01],
        [-1.3919e-01,  7.9064e-02, -5.4411e-02],
        [ 7.6824e-02,  3.2326e-02,  1.4266e-01],
        [-1.0743e-01, -1.6782e-01,  1.2248e-01]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.0131, -0.1680,  0.1172,  ..., -0.0975, -0.0926,  0.1423],
        [ 0.0606, -0.0241,  0.1321,  ...,  0.0407,  0.1496,  0.1602],
        [-0.1734,  0.0842, -0.0845,  ...,  0.0196, -0.0974, -0.1502],
        ...,
        [ 0.1007,  0.0738, -0.0864,  ...,  0.1668,  0.0509, -0.0692],
        [ 0.1430,  0.1588,  0.0317,  ..., -0.0347,  0.0442,  0.1306],
        [-0.0750, -0.0489,  0.1592,  ..., -0.0481, -0.0114, -0.1052]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 0.0283, -0.1206, -0.0416, -0.0421, -0.1088, -0.0860,  0.0578,  0.0867,
        -0.1090, -0.0924,  0.0918,  0.0603,  0.1293,  0.1317, -0.0038,  0.1004,
         0.0288, -0.1084,  0.0110,  0.1655, -0.1601,  0.1482,  0.1081, -0.0819,
        -0.1275, -0.1324, -0.0183,  0.1204,  0.0970,  0.1367, -0.0978, -0.0838,
        -0.0747,  0.0165, -0.1578,  0.1133,  0.0726, -0.0114, -0.0504, -0.0464,
        -0.0256,  0.0260,  0.1413, -0.0188,  0.0663,  0.0995, -0.0830, -0.0059,
        -0.0103,  0.1459, -0.1452, -0.1748,  0.0055, -0.0895,  0.0677, -0.0083,
        -0.1093, -0.0875,  0.0549,  0.1268, -0.1478,  0.1706, -0.0559, -0.1724,
        -0.1102,  0.0140, -0.0851, -0.0606,  0.0359, -0.0927, -0.1231,  0.0297,
         0.0102,  0.0538, -0.1711, -0.1590, -0.0119, -0.1442, -0.0533,  0.0177,
        -0.1449, -0.0793,  0.0438, -0.1503,  0.0485,  0.1544,  0.0074,  0.0929,
        -0.0330, -0.0459,  0.1723, -0.0527,  0.0236,  0.1783, -0.1214,  0.1005,
         0.1694,  0.0398, -0.0911, -0.0019,  0.1247,  0.1505,  0.0891, -0.0276,
         0.1833,  0.1121, -0.0960,  0.0740,  0.0026,  0.0679, -0.0201, -0.1399,
        -0.0501, -0.0373, -0.1732, -0.0234, -0.0385,  0.0900,  0.0818, -0.0887,
         0.0653,  0.0077, -0.1244,  0.0968,  0.0431, -0.1201,  0.0777, -0.0917],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0_reverse tensor([-0.1179, -0.1246, -0.1201, -0.0850, -0.1823,  0.0554, -0.1143,  0.0056,
        -0.0889, -0.0407,  0.1422,  0.1597, -0.0630, -0.1645, -0.1257,  0.0053,
        -0.0414, -0.1383, -0.1666,  0.0616, -0.0211, -0.0688,  0.0793,  0.1095,
        -0.1394, -0.0415,  0.0813, -0.0592, -0.0958, -0.0696,  0.0257,  0.0716,
         0.1244,  0.1012,  0.1132, -0.1526, -0.0655,  0.0416, -0.0391,  0.0718,
         0.1247,  0.1166,  0.1612,  0.0144,  0.0330,  0.0827,  0.0021, -0.1730,
        -0.1305, -0.1134,  0.1128,  0.0835,  0.0023, -0.0661, -0.0441, -0.0885,
        -0.0078,  0.0138, -0.1231, -0.0231, -0.0272,  0.0583,  0.1117, -0.1301,
         0.0892, -0.0180, -0.0123,  0.0200, -0.1062, -0.1512,  0.0806,  0.1491,
         0.0478, -0.0547,  0.0716, -0.1749, -0.0249, -0.1460,  0.0768,  0.1392,
        -0.0580,  0.0936, -0.1527, -0.0360,  0.1645, -0.1469, -0.1634, -0.1401,
         0.1481,  0.0723,  0.1069, -0.0899, -0.0877,  0.1783, -0.0972,  0.1477,
        -0.0288,  0.0864,  0.0489,  0.0790,  0.0558, -0.1129, -0.1294, -0.0015,
        -0.1513, -0.1628,  0.1660,  0.1543, -0.0711,  0.1147,  0.1200,  0.0902,
         0.0407,  0.1285, -0.1740,  0.0870,  0.0728,  0.1465,  0.0831, -0.0631,
        -0.1108, -0.0585, -0.0971,  0.0200,  0.1152, -0.0768,  0.1432, -0.0847],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0 tensor([[-0.0441,  0.1009, -0.0567,  ...,  0.0693,  0.0041, -0.0551],
        [-0.1300,  0.0353, -0.1406,  ...,  0.0999, -0.0244, -0.0221],
        [ 0.0936, -0.1545,  0.0800,  ..., -0.0244, -0.0778,  0.0249],
        ...,
        [ 0.0020,  0.1482, -0.0293,  ..., -0.0604, -0.0835, -0.0709],
        [ 0.0810,  0.0482, -0.1273,  ...,  0.1497,  0.0244,  0.1771],
        [ 0.0102, -0.0755,  0.1737,  ...,  0.1488, -0.0656, -0.0421]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0 tensor([[-0.1003, -0.1119,  0.0431,  ...,  0.0993,  0.1224,  0.1216],
        [-0.0345,  0.0227, -0.0706,  ..., -0.0860, -0.0951,  0.0725],
        [-0.0443, -0.1208, -0.1684,  ...,  0.0837, -0.1218, -0.0847],
        ...,
        [ 0.0746,  0.0294, -0.0882,  ...,  0.0076, -0.0213, -0.0171],
        [ 0.0315, -0.1540, -0.0347,  ...,  0.0387,  0.1680,  0.0777],
        [ 0.1612,  0.1291, -0.0799,  ...,  0.1577,  0.0421,  0.0862]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0 tensor([-0.1044, -0.0875,  0.0140,  0.0703,  0.0255, -0.1037,  0.0261,  0.0503,
         0.1556,  0.1174,  0.0430,  0.1382, -0.0543, -0.0564, -0.0061, -0.0967,
         0.1216,  0.1215,  0.1005,  0.1645,  0.1653, -0.1414,  0.0403, -0.1166,
        -0.1516, -0.0935, -0.0859, -0.0577, -0.0652,  0.0762,  0.1222, -0.0952,
         0.1082,  0.1440, -0.1222, -0.1199,  0.0413, -0.0043,  0.0312,  0.0459,
         0.1534,  0.0694,  0.1515,  0.0706,  0.0972,  0.0670,  0.1549, -0.0103,
         0.1285, -0.1087,  0.0110, -0.0193,  0.1564,  0.1386,  0.1056,  0.1456,
        -0.0494,  0.1572,  0.0313,  0.0982,  0.0722,  0.0280, -0.1128, -0.1289,
        -0.0256, -0.0007, -0.1133, -0.0356, -0.0958, -0.1653,  0.0430,  0.0326,
         0.1134,  0.1346, -0.1069,  0.0050,  0.1205,  0.1528,  0.0360, -0.1615,
        -0.0196,  0.1762, -0.1079, -0.0606, -0.0526, -0.0731, -0.1801, -0.1121,
         0.1024,  0.0471,  0.0123, -0.0606,  0.1423,  0.0391, -0.0595, -0.0423,
        -0.0998,  0.0281, -0.1011,  0.0897, -0.0086, -0.0032,  0.1375, -0.0386,
        -0.1173, -0.0865, -0.1308, -0.0939,  0.0146,  0.1341, -0.0507,  0.1443,
         0.0413, -0.0633,  0.1453, -0.0417,  0.1463, -0.1360,  0.0627,  0.0480,
        -0.0663,  0.0587,  0.1109,  0.0513, -0.1010,  0.0408,  0.0919,  0.0045],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0 tensor([-0.1323,  0.0108, -0.1593,  0.0758, -0.0225,  0.0462, -0.0018,  0.0138,
        -0.0279, -0.0524, -0.1130, -0.1139, -0.0289,  0.0438, -0.0307,  0.1120,
         0.1834,  0.1269, -0.0244,  0.0991,  0.1776,  0.0669, -0.0422, -0.1264,
        -0.0062, -0.0159, -0.0240, -0.0251, -0.1293,  0.0015, -0.1149, -0.1187,
        -0.0657,  0.1453, -0.0485,  0.0609, -0.0133, -0.0220, -0.1567, -0.0692,
         0.1604, -0.1312,  0.0854,  0.0997,  0.0249, -0.0562, -0.0467,  0.1811,
        -0.0766,  0.1475,  0.0753,  0.1605, -0.0251, -0.0534, -0.0902,  0.0584,
        -0.1694,  0.0700, -0.1563, -0.0967, -0.1741, -0.0272, -0.1067, -0.0268,
        -0.1733, -0.0481,  0.0052,  0.1161,  0.1467, -0.0348,  0.0070,  0.1313,
         0.0961,  0.0767, -0.1631,  0.1000,  0.0905,  0.0868, -0.0123,  0.1341,
         0.1561, -0.1189,  0.1820,  0.1274,  0.0578, -0.0445, -0.1777,  0.1651,
        -0.0076,  0.1269, -0.1118,  0.1768,  0.0601, -0.0785,  0.1772,  0.1199,
         0.1664, -0.1786, -0.0002,  0.0515,  0.0268, -0.1683, -0.0032,  0.0687,
         0.0773, -0.0380,  0.0704,  0.0120, -0.0298, -0.0505, -0.0256,  0.0909,
        -0.0263,  0.0591,  0.0992,  0.1005, -0.1439,  0.0652,  0.1864, -0.1295,
         0.1047,  0.1167, -0.1494,  0.0910, -0.0676,  0.0411, -0.1803, -0.1396],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0_reverse tensor([[-0.0903,  0.1055,  0.0436,  ...,  0.1148, -0.1745, -0.0609],
        [ 0.0261, -0.0073, -0.1065,  ...,  0.0573, -0.1662,  0.1794],
        [ 0.0376, -0.0420, -0.0098,  ...,  0.1637,  0.0834,  0.1328],
        ...,
        [ 0.0515, -0.1521,  0.1178,  ..., -0.1410,  0.1095, -0.0601],
        [ 0.1183,  0.1595,  0.0440,  ..., -0.0268,  0.1216, -0.1774],
        [-0.0850,  0.0225, -0.0231,  ..., -0.0065, -0.1267, -0.1212]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0_reverse tensor([[ 0.0064,  0.1509,  0.1108,  ..., -0.1224,  0.0061, -0.0282],
        [-0.1793,  0.0339, -0.0742,  ..., -0.0692,  0.0429,  0.1332],
        [-0.0493, -0.0509, -0.1386,  ..., -0.0750,  0.0295, -0.1305],
        ...,
        [-0.1404,  0.0187, -0.1235,  ...,  0.1634, -0.1494,  0.0362],
        [-0.1153, -0.1755,  0.0960,  ..., -0.0070, -0.0694,  0.0368],
        [ 0.1318,  0.1044, -0.1072,  ...,  0.0174, -0.0939, -0.0800]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0_reverse tensor([-0.0799,  0.0150, -0.0423,  0.0652,  0.0927, -0.0005, -0.1346,  0.0373,
        -0.0979, -0.1128, -0.0629,  0.0528, -0.0999,  0.1119, -0.1688, -0.1113,
        -0.1234, -0.1330, -0.0122, -0.1082,  0.1744, -0.0869,  0.1311,  0.1307,
        -0.0548,  0.1520, -0.1558,  0.1263, -0.1451, -0.1002,  0.0114,  0.1635,
        -0.0015, -0.1070,  0.0388,  0.1543, -0.1583, -0.1004,  0.1265,  0.0530,
         0.1466,  0.1040,  0.0840,  0.0500, -0.0105, -0.1412, -0.1039,  0.0549,
        -0.0313,  0.1039, -0.0039, -0.1589, -0.0147, -0.1482, -0.0335, -0.0687,
        -0.0629,  0.0244, -0.0123, -0.1127,  0.0716, -0.0296,  0.0322,  0.1341,
        -0.1633,  0.1560, -0.0797,  0.0870, -0.0011,  0.0699, -0.0886, -0.0243,
         0.0356, -0.1022,  0.0164, -0.0613, -0.0676, -0.0092, -0.0957, -0.0214,
         0.1061,  0.1088, -0.0969,  0.0443,  0.0888, -0.1299, -0.0470, -0.0018,
        -0.0630,  0.1325,  0.1554, -0.0702, -0.1509, -0.0388, -0.0832,  0.1566,
        -0.1452,  0.1174, -0.0629,  0.0232,  0.0417, -0.0084, -0.0767, -0.0430,
        -0.1426,  0.1428, -0.0757,  0.1588,  0.1627, -0.0803,  0.0187, -0.0451,
         0.1668,  0.0643, -0.0374, -0.0713,  0.1627, -0.0498, -0.1168,  0.0870,
         0.0881, -0.0828,  0.1127,  0.0212, -0.0363, -0.1662,  0.1550, -0.1246],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.0471, -0.1601, -0.0047,  0.0082, -0.1795,  0.1522, -0.1632,  0.1484,
        -0.0878, -0.0859, -0.0542,  0.0419, -0.1162, -0.0498,  0.0016, -0.0985,
        -0.0763, -0.0124, -0.1806, -0.0047,  0.1281, -0.0610,  0.0672, -0.1025,
         0.0796, -0.0237,  0.0625, -0.0254, -0.0432, -0.1153, -0.0595,  0.1071,
         0.0970,  0.1689, -0.0033,  0.0196, -0.0545, -0.0678,  0.0016,  0.0858,
        -0.0399,  0.1384, -0.0188,  0.0152, -0.0746,  0.0190, -0.1750,  0.0434,
        -0.0890, -0.0875,  0.0513, -0.0510,  0.0359, -0.1362, -0.1012, -0.0559,
        -0.0940,  0.0666,  0.1241, -0.1654,  0.1043, -0.0334, -0.1857, -0.0343,
        -0.0557, -0.0420, -0.0779,  0.1103,  0.1274, -0.0546,  0.0868, -0.1674,
        -0.1107,  0.0166, -0.1337, -0.1202, -0.1604, -0.1713, -0.0337,  0.0524,
        -0.0109,  0.1708,  0.0640,  0.1808,  0.1663, -0.1186, -0.0789, -0.0577,
         0.1746,  0.0734, -0.0531,  0.1687, -0.0944,  0.1078, -0.0724,  0.0641,
         0.1187,  0.0273, -0.0731, -0.1082, -0.0006, -0.1064,  0.1301, -0.0541,
         0.0076, -0.0016,  0.0618, -0.0039, -0.0855,  0.1129, -0.1042,  0.1461,
        -0.1793, -0.0188, -0.0535, -0.0782,  0.0582, -0.0115,  0.1639, -0.0457,
        -0.0090, -0.1204, -0.1810,  0.0778, -0.1422, -0.0643, -0.1053, -0.1409],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0 tensor([[-0.1058,  0.0611,  0.0556,  ..., -0.0944, -0.0612,  0.0512],
        [-0.1282,  0.0194,  0.1267,  ..., -0.0437,  0.0626, -0.1681],
        [-0.0177, -0.1197, -0.0778,  ...,  0.0199, -0.0631, -0.0073],
        ...,
        [ 0.0706, -0.1377,  0.1571,  ...,  0.0622,  0.0285,  0.1680],
        [-0.0388, -0.0498,  0.0456,  ...,  0.1363,  0.1454,  0.0162],
        [ 0.0628,  0.0889,  0.1133,  ...,  0.1459, -0.0752, -0.0060]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.1620, -0.1282,  0.0251,  ...,  0.0376,  0.0445, -0.0608],
        [ 0.0783,  0.0222,  0.0162,  ...,  0.0563, -0.1512, -0.1367],
        [ 0.0192,  0.1186,  0.0943,  ..., -0.1001,  0.0915,  0.1134],
        ...,
        [-0.0552,  0.1519, -0.0729,  ...,  0.0290,  0.1586, -0.0098],
        [-0.0196, -0.1513, -0.0046,  ...,  0.0495, -0.0073,  0.1065],
        [-0.1577, -0.0540, -0.0659,  ...,  0.1578, -0.0913,  0.1814]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0 tensor([-0.0065,  0.0760,  0.1514,  0.0874, -0.1217,  0.1440,  0.0455,  0.1477,
         0.1181,  0.0810,  0.1058, -0.0791, -0.1767,  0.0681, -0.0822, -0.0939,
        -0.0307, -0.0051, -0.1412,  0.0017,  0.0995, -0.0023, -0.1096, -0.1623,
         0.0134,  0.1272,  0.1099,  0.1532,  0.1317, -0.0784,  0.0721, -0.1365,
         0.0784,  0.0048,  0.0340, -0.1544, -0.1671,  0.0188, -0.1810,  0.0370,
        -0.0783,  0.1079, -0.0922, -0.0401, -0.0404, -0.0718, -0.1442, -0.1117,
         0.0990, -0.0625, -0.0423,  0.1665, -0.0101, -0.1427,  0.0761,  0.0746,
         0.1336,  0.0192,  0.0809,  0.1203,  0.1105,  0.0244, -0.1584, -0.0420,
        -0.0323,  0.0710, -0.1701,  0.0848,  0.0527,  0.1391, -0.0275,  0.1010,
         0.0546,  0.0831,  0.1003, -0.1076,  0.1401,  0.1651, -0.1496,  0.0589,
         0.0513, -0.0055,  0.1209,  0.1533,  0.0131, -0.0746, -0.0935, -0.0880,
        -0.0782, -0.0976, -0.0452, -0.1414,  0.1313,  0.1267,  0.1811, -0.0520,
         0.1295,  0.0717, -0.1302, -0.1441, -0.0866,  0.1615, -0.1532, -0.0011,
        -0.0859, -0.0464, -0.0829, -0.1489, -0.0974, -0.0488, -0.0703,  0.1349,
         0.1027,  0.1197,  0.1427,  0.0269,  0.0083, -0.0431,  0.0457,  0.0097,
        -0.0226, -0.0725,  0.0139, -0.1042, -0.1499, -0.1375, -0.1140,  0.0099],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0 tensor([-0.1121, -0.0209, -0.1271,  0.0162,  0.0136, -0.0144, -0.0317, -0.1189,
         0.1696, -0.0993, -0.1583,  0.1089,  0.1131, -0.0554, -0.1727, -0.1533,
         0.0127, -0.1302,  0.1838,  0.0670,  0.0484,  0.0573, -0.1443, -0.0300,
         0.0512, -0.0028,  0.0838,  0.0471, -0.0055,  0.1445,  0.1603, -0.1612,
         0.1390, -0.0937, -0.1079,  0.0496, -0.1437,  0.0875, -0.0516, -0.1514,
         0.0015, -0.0853,  0.0520, -0.1598, -0.0280, -0.1275, -0.1739,  0.1013,
         0.1031, -0.1115,  0.0508,  0.0233,  0.1476, -0.1623,  0.0262,  0.0874,
        -0.1149,  0.0229,  0.0794,  0.0264,  0.0918, -0.0552,  0.0009,  0.1651,
        -0.0136, -0.0329,  0.0284, -0.1105,  0.1546,  0.1041,  0.1622,  0.0484,
         0.1338, -0.1161, -0.0703,  0.1379,  0.1345,  0.0354,  0.1260,  0.1349,
         0.0060,  0.0410,  0.0999, -0.0698,  0.0707,  0.0120, -0.0347,  0.0455,
         0.0177,  0.0357,  0.0302, -0.0781, -0.1230,  0.0005,  0.0580, -0.1226,
         0.1624, -0.1621, -0.0913, -0.0708, -0.1801, -0.0681, -0.0059, -0.1206,
        -0.0930, -0.0143, -0.0790, -0.1361, -0.1436,  0.0816,  0.0179, -0.0754,
         0.0311, -0.0165, -0.0599,  0.0868,  0.1405,  0.1384,  0.1170,  0.0408,
        -0.0509, -0.0635, -0.1832, -0.0672, -0.0573,  0.1837,  0.1485,  0.1504],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0_reverse tensor([[ 0.0002,  0.1731,  0.1573,  ...,  0.1310, -0.0606, -0.0287],
        [ 0.1735,  0.0970,  0.1216,  ..., -0.1089, -0.1074, -0.1088],
        [ 0.0171, -0.0736,  0.0871,  ..., -0.1582, -0.0229, -0.1290],
        ...,
        [ 0.1289, -0.0499,  0.1845,  ..., -0.1700,  0.0618, -0.0291],
        [ 0.1599, -0.0402, -0.1118,  ...,  0.0286, -0.1590, -0.0664],
        [ 0.0931,  0.0202, -0.1250,  ...,  0.0077, -0.1092, -0.1049]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0_reverse tensor([[ 0.0775,  0.1244, -0.1667,  ...,  0.0145,  0.0786, -0.1447],
        [-0.1133, -0.0785,  0.1406,  ..., -0.0019, -0.1558, -0.1634],
        [ 0.0946, -0.1007, -0.0654,  ..., -0.0945,  0.0032, -0.0056],
        ...,
        [-0.0431, -0.1716, -0.0868,  ...,  0.1796,  0.0327, -0.0432],
        [ 0.1184, -0.0197,  0.0763,  ..., -0.1348, -0.0014, -0.0343],
        [-0.0384, -0.1516, -0.0443,  ..., -0.1665,  0.1197, -0.1422]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0_reverse tensor([-0.0946,  0.0064, -0.1350,  0.0014,  0.1066, -0.0456,  0.0713, -0.1780,
         0.1173,  0.1647,  0.1639, -0.1327,  0.0011,  0.0998,  0.1407, -0.0151,
        -0.1540,  0.1398, -0.0687,  0.1008,  0.0331,  0.0157, -0.0744, -0.0113,
         0.1383, -0.1252,  0.0424, -0.1635,  0.0350,  0.1094, -0.0648,  0.0329,
         0.0849,  0.0283,  0.0486, -0.0477, -0.1224, -0.1044,  0.0417, -0.1452,
        -0.0946, -0.0307,  0.1353, -0.0435, -0.1345, -0.1088,  0.1491, -0.1711,
         0.0127,  0.1846, -0.0506, -0.1289, -0.1807, -0.0617, -0.1523, -0.0348,
         0.1207,  0.0571,  0.0424, -0.0984, -0.0976, -0.0460,  0.0814,  0.0548,
         0.0298,  0.0346, -0.1029,  0.1300,  0.1127, -0.0263,  0.0029,  0.1411,
        -0.1131,  0.0084,  0.1344, -0.0438, -0.0058, -0.0468,  0.0399, -0.0316,
         0.1236,  0.1248, -0.0848, -0.1651,  0.0490, -0.1048,  0.0511,  0.0284,
         0.0131, -0.1352,  0.1578,  0.1694, -0.1440,  0.1155,  0.0676, -0.1218,
        -0.1579, -0.0172,  0.1179, -0.1175,  0.0724, -0.0418, -0.0312, -0.1126,
        -0.0372, -0.0985,  0.1386, -0.1684, -0.0273,  0.0093, -0.1538,  0.1381,
        -0.0299,  0.0795,  0.0740,  0.0257, -0.1500, -0.1007,  0.0149, -0.0880,
         0.1155,  0.1624, -0.0676,  0.0323,  0.0406, -0.1578, -0.0983, -0.1024],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.0567, -0.1739, -0.1269,  0.0930,  0.1678,  0.0718,  0.0865,  0.0697,
        -0.1436,  0.0788, -0.0172, -0.1196,  0.1519,  0.1597, -0.0263, -0.0121,
         0.1030,  0.0004,  0.0631,  0.1079, -0.1288,  0.0030, -0.1665,  0.1649,
         0.0008, -0.0767,  0.0686,  0.0513, -0.0823,  0.1583, -0.0096, -0.0859,
        -0.1031, -0.0816, -0.0134, -0.1057, -0.0281, -0.0869, -0.0441,  0.0412,
         0.0248, -0.1142,  0.0537, -0.0174, -0.0976, -0.1554, -0.1593,  0.0657,
         0.1219,  0.1404, -0.0095,  0.1217, -0.0513,  0.1163, -0.0555,  0.0779,
         0.0077, -0.0607, -0.0395,  0.1259,  0.0014, -0.1626,  0.0974, -0.0396,
         0.1150, -0.0256, -0.1555,  0.0533,  0.0825,  0.1094, -0.0647, -0.0277,
        -0.0040, -0.1429,  0.1133,  0.0548,  0.0406,  0.1483, -0.0923,  0.0266,
        -0.1497, -0.0809,  0.1554, -0.0586, -0.1514,  0.0779, -0.1074,  0.0094,
        -0.1308, -0.0392, -0.0583,  0.0224,  0.1522, -0.0837, -0.1417, -0.1220,
        -0.0172, -0.0032, -0.1214, -0.0898, -0.0304, -0.0452,  0.0313, -0.0979,
         0.0833,  0.1582,  0.1406,  0.0032, -0.0557, -0.1252,  0.0750, -0.0589,
         0.1424,  0.0521,  0.0278, -0.0135,  0.1478,  0.0283,  0.1454,  0.0204,
         0.0585,  0.0603,  0.0392,  0.0956,  0.1614, -0.0095, -0.0550, -0.0483],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0 tensor([[-0.0323,  0.1327,  0.1158,  ...,  0.0022, -0.1417, -0.0308],
        [-0.1345,  0.0025,  0.1160,  ...,  0.0340, -0.1638, -0.0749],
        [ 0.1443, -0.0490, -0.0612,  ...,  0.0205, -0.1723,  0.1191],
        ...,
        [ 0.1423,  0.1830,  0.0264,  ...,  0.0815,  0.0459, -0.1604],
        [ 0.0512, -0.1655, -0.1076,  ...,  0.0932,  0.1537, -0.1354],
        [-0.1555, -0.0926, -0.0552,  ..., -0.1048, -0.1391, -0.0724]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0 tensor([[ 0.1092,  0.1401, -0.0798,  ...,  0.0319, -0.0106, -0.0173],
        [ 0.0775,  0.1751, -0.1330,  ...,  0.0465, -0.1743, -0.1459],
        [-0.1001,  0.0257,  0.0280,  ..., -0.0619, -0.0062,  0.0509],
        ...,
        [-0.0418, -0.0962,  0.0694,  ..., -0.0170,  0.0832,  0.1833],
        [ 0.1839, -0.0126, -0.0113,  ...,  0.0885, -0.1122, -0.0896],
        [ 0.0456,  0.1513,  0.1584,  ..., -0.0044,  0.1529, -0.1332]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0 tensor([ 0.0636, -0.1653, -0.1099,  0.0347,  0.0500,  0.0979, -0.0470,  0.1664,
         0.0701,  0.1041,  0.1374, -0.0515,  0.1031, -0.0203, -0.0671, -0.1219,
        -0.0895,  0.0749,  0.1853, -0.1844,  0.0009, -0.0147, -0.0005, -0.0295,
         0.1141,  0.1262,  0.0524, -0.1304,  0.1230,  0.1604,  0.1849,  0.1153,
         0.1367, -0.1100,  0.1823, -0.0288,  0.1286, -0.1500,  0.0606, -0.0720,
         0.1580,  0.0510, -0.1197, -0.1846, -0.0554, -0.0260,  0.1020, -0.0751,
        -0.1560,  0.1274,  0.0264,  0.0132, -0.0250, -0.0763, -0.1300, -0.0982,
         0.0897, -0.0389, -0.1298, -0.1410,  0.1513,  0.1554, -0.1341, -0.0365,
        -0.1417,  0.0318, -0.0819, -0.1067,  0.1084,  0.0232,  0.0193,  0.0472,
        -0.1331,  0.0990,  0.0268, -0.0462, -0.0909,  0.0120,  0.1124, -0.1168,
         0.0749, -0.1555,  0.1706,  0.1492,  0.1441,  0.0519, -0.1494, -0.0797,
        -0.1023,  0.0514,  0.1117,  0.0866, -0.0259,  0.0292, -0.0004, -0.1626,
        -0.1105, -0.0931,  0.0759, -0.0239, -0.0750,  0.0624,  0.0731,  0.1174,
        -0.0562, -0.0165,  0.1234, -0.1447, -0.0355,  0.0944, -0.1549, -0.0841,
         0.1673,  0.0701,  0.0083, -0.1262, -0.0165,  0.1353,  0.1735, -0.1419,
        -0.0038, -0.0177, -0.1188, -0.0395, -0.0145, -0.1807,  0.0394, -0.1531],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0 tensor([ 0.1370, -0.0819, -0.0191,  0.0662, -0.0334,  0.0389,  0.0874, -0.1158,
         0.0448, -0.1119, -0.1729,  0.1291,  0.1457, -0.0824,  0.1676,  0.1055,
         0.1382,  0.0474,  0.0814,  0.1662, -0.1104,  0.0161,  0.1226,  0.0091,
        -0.0408,  0.0993,  0.0234, -0.1311, -0.0647,  0.1274, -0.0366,  0.1371,
         0.0052, -0.1186, -0.1436,  0.0537,  0.1212, -0.1506,  0.1295,  0.1805,
         0.0945,  0.1105, -0.0464, -0.1787, -0.1565, -0.0947,  0.0232, -0.1026,
        -0.0431,  0.0866,  0.0450, -0.1019,  0.0703, -0.1616,  0.0529, -0.1554,
        -0.0793,  0.0056, -0.0705,  0.0435, -0.1290, -0.1530,  0.1053, -0.1110,
         0.1620, -0.1503,  0.1102,  0.0753, -0.0581, -0.0192,  0.0652,  0.0447,
         0.0112,  0.1372, -0.1135,  0.0026,  0.1622,  0.0556, -0.1054, -0.0675,
        -0.0315,  0.1296,  0.0606,  0.0908, -0.1458,  0.0115,  0.0101, -0.0608,
        -0.1098,  0.0213, -0.0274,  0.1187,  0.0369, -0.1242,  0.0662, -0.0225,
        -0.0920,  0.0013, -0.1204,  0.1574,  0.0447, -0.1328, -0.0514,  0.1458,
         0.0907,  0.1596,  0.1516,  0.1016, -0.0431, -0.0225, -0.1563,  0.1739,
        -0.1632, -0.0505, -0.1132,  0.0789,  0.1443,  0.0454, -0.0230, -0.1345,
         0.0966, -0.1428,  0.0918,  0.0242,  0.1816, -0.0379, -0.0852, -0.1276],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0_reverse tensor([[ 0.1638, -0.1564,  0.1590,  ..., -0.1437, -0.0330,  0.1223],
        [ 0.0164,  0.0468, -0.1191,  ..., -0.1495, -0.1382,  0.1315],
        [ 0.1398,  0.0352, -0.1123,  ..., -0.1204, -0.0046,  0.1230],
        ...,
        [ 0.1370,  0.1363,  0.1700,  ..., -0.0159,  0.1522, -0.0815],
        [ 0.1526,  0.1522, -0.0406,  ...,  0.0613, -0.1192,  0.0467],
        [ 0.0303, -0.1461,  0.1801,  ...,  0.0849,  0.1134,  0.1480]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.0006,  0.1539, -0.0086,  ...,  0.0369,  0.1292,  0.1231],
        [ 0.0351, -0.0191, -0.1675,  ..., -0.1002,  0.0789,  0.0740],
        [ 0.1789, -0.1444,  0.1398,  ...,  0.0225,  0.0229,  0.0317],
        ...,
        [-0.1070,  0.0454, -0.1495,  ..., -0.0278,  0.0366,  0.0721],
        [-0.0357,  0.0290, -0.0056,  ..., -0.1591,  0.0577, -0.0405],
        [ 0.0136,  0.0527,  0.1419,  ..., -0.1554,  0.0921,  0.0749]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0_reverse tensor([-0.1305,  0.1061, -0.0282, -0.1562,  0.0252, -0.0703,  0.1787,  0.1639,
         0.0524, -0.0277,  0.0842,  0.1761,  0.0289, -0.1202,  0.1408, -0.1777,
        -0.0573, -0.0538, -0.0611, -0.0904,  0.0283,  0.1583,  0.0443,  0.0540,
         0.0367, -0.1398, -0.1495, -0.0681,  0.0544,  0.1202,  0.0544,  0.1446,
         0.1434,  0.0393,  0.1519, -0.1728, -0.0264,  0.1733,  0.1654,  0.0112,
         0.0124, -0.0290,  0.0329,  0.1097, -0.0267, -0.1347,  0.0148,  0.1178,
        -0.0532,  0.1258,  0.0120,  0.0168, -0.1195, -0.1025, -0.0303,  0.0852,
         0.0188,  0.0165,  0.0844,  0.1184,  0.1050, -0.1083,  0.0387,  0.0139,
        -0.0212,  0.0395, -0.0773, -0.1649, -0.0565,  0.1628,  0.1463,  0.1129,
        -0.1062, -0.1608, -0.1400, -0.0026, -0.0138, -0.0210, -0.0936,  0.1274,
         0.1089,  0.1497,  0.1189,  0.0697, -0.1310, -0.0220, -0.0899, -0.0098,
         0.0930,  0.0537, -0.0687, -0.0240,  0.0870, -0.0710, -0.1356,  0.1032,
         0.0312,  0.0941,  0.1493,  0.0783, -0.0039,  0.0665, -0.0597, -0.1543,
         0.0586,  0.1408, -0.1372,  0.0758,  0.0514, -0.1101, -0.0620,  0.0669,
        -0.1575,  0.0883,  0.0309,  0.0319,  0.1306,  0.1568,  0.0535,  0.0426,
         0.0468, -0.0014, -0.0859,  0.0175, -0.1155, -0.1775,  0.0319,  0.0319],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0_reverse tensor([-1.6653e-01,  1.1100e-01, -1.0131e-01, -1.6703e-01, -1.0779e-01,
        -3.1476e-02,  1.4825e-01, -8.7696e-02,  4.7632e-02,  1.6134e-01,
        -7.6768e-02, -2.4214e-02, -5.4421e-02,  6.8988e-02,  1.3923e-01,
         1.0255e-01,  1.5797e-01, -5.6291e-02,  1.0645e-01,  6.0119e-02,
        -1.1088e-02,  7.4555e-02,  1.0708e-01,  1.7721e-02,  8.7600e-03,
        -1.2419e-01, -5.7175e-02,  4.3288e-02, -5.7252e-02, -1.6311e-01,
        -9.6093e-02,  1.0064e-01, -1.0607e-01, -1.2043e-01, -3.9329e-02,
        -1.2196e-02,  1.0008e-01,  1.4370e-01, -1.1262e-01, -5.8366e-02,
         1.5810e-01, -1.5416e-01, -5.1543e-02, -1.3144e-01, -8.1789e-02,
        -1.1528e-01,  1.4945e-01,  4.1277e-02, -2.2652e-02,  1.5947e-01,
        -1.3365e-01,  8.5268e-02,  1.4515e-01, -1.0815e-01,  4.3321e-02,
        -1.0549e-01,  8.5736e-03, -1.4202e-01,  1.3108e-01,  1.4620e-01,
        -6.6671e-02, -1.1950e-01, -5.6908e-02,  1.2297e-01, -3.5000e-02,
         1.5377e-01,  1.0160e-01,  9.4526e-02, -9.1576e-02, -1.2713e-01,
        -7.0106e-02, -8.7457e-02,  8.9068e-02,  9.7667e-02,  1.0470e-01,
        -4.6185e-02, -3.5995e-02,  7.0687e-02,  8.6842e-02,  1.2204e-01,
         6.9388e-02,  8.7323e-02, -5.2485e-02,  8.8991e-02,  1.8421e-02,
        -1.2373e-01,  1.6946e-01, -1.0037e-01,  8.0050e-02,  1.2141e-01,
         1.0716e-01,  1.2961e-01, -6.6895e-02, -4.5974e-02, -1.1352e-01,
         1.5816e-01,  1.4684e-01, -1.9821e-02, -1.2147e-01, -1.1607e-01,
         5.2466e-03,  6.9301e-02, -1.4727e-01, -2.8493e-02, -1.2070e-01,
         1.6603e-01, -8.3744e-02,  9.2512e-02, -1.2650e-01,  1.1024e-01,
        -1.9560e-03,  4.2157e-03, -1.5609e-01,  1.4818e-01, -1.4942e-01,
        -3.4621e-02, -8.0710e-02,  1.4697e-01, -8.4397e-02, -1.5026e-01,
         5.8197e-02, -1.3074e-04,  1.0442e-01,  1.4694e-01,  9.3785e-02,
        -1.6874e-01, -1.5494e-02,  3.7588e-02], device='cuda:0') torch.Size([128])
fc_blocks.0.0.weight tensor([[-0.1263,  0.0268,  0.1015,  ...,  0.0092,  0.0994, -0.0880],
        [ 0.1254, -0.0045, -0.0516,  ...,  0.0396, -0.0173, -0.0043],
        [ 0.0436,  0.0246, -0.0889,  ...,  0.0368,  0.0918, -0.1058],
        ...,
        [ 0.0007, -0.0013, -0.0971,  ..., -0.0825,  0.0109,  0.1067],
        [ 0.1328, -0.0811, -0.1036,  ...,  0.0273, -0.0253, -0.0416],
        [ 0.1101,  0.0273,  0.0431,  ...,  0.0510,  0.1255,  0.0629]],
       device='cuda:0') torch.Size([32, 64])
fc_blocks.0.0.bias tensor([-0.0794,  0.0302,  0.0823,  0.0014, -0.0008, -0.1020, -0.0569,  0.0310,
         0.0982,  0.0406,  0.0521, -0.0911, -0.1120, -0.1146,  0.0330,  0.0415,
        -0.0762, -0.0674, -0.0542,  0.0999, -0.0873,  0.0733, -0.0999, -0.0465,
         0.1199,  0.0135, -0.0763, -0.0208, -0.0794, -0.0813, -0.0120,  0.0938],
       device='cuda:0') torch.Size([32])
fc_blocks.1.0.weight tensor([[ 0.1389, -0.1099,  0.1014,  0.0332, -0.0804,  0.0053,  0.1138,  0.0897,
          0.1566,  0.1151,  0.0223, -0.1780,  0.1706, -0.1021, -0.1473,  0.0924,
          0.0773,  0.0155, -0.0302,  0.0569, -0.1098, -0.0204, -0.1626,  0.0193,
         -0.0723,  0.0874, -0.0508, -0.0253,  0.0271, -0.0747,  0.0364,  0.1048],
        [ 0.0864, -0.1303,  0.1665, -0.0617, -0.0022,  0.1655, -0.1632, -0.0028,
          0.1575, -0.1636, -0.1149, -0.1322, -0.1381, -0.0708,  0.1120,  0.0256,
          0.0042, -0.0317,  0.0985, -0.0410, -0.0161,  0.0690, -0.0967, -0.0466,
         -0.1673,  0.0987, -0.0500,  0.0897,  0.0319, -0.1253,  0.1234,  0.0614],
        [ 0.0898,  0.0619,  0.0412,  0.0614,  0.0833, -0.0952,  0.1308,  0.1202,
         -0.0816, -0.0255, -0.0246, -0.1473,  0.1014, -0.1651,  0.1077, -0.0961,
         -0.0795,  0.1124, -0.1556, -0.1561, -0.1543, -0.1620, -0.0073,  0.0799,
          0.0777, -0.1022, -0.0074,  0.1308, -0.1820,  0.1551,  0.1079, -0.0318],
        [-0.1815, -0.0232,  0.0204,  0.0848, -0.1734, -0.0767,  0.1307,  0.0885,
         -0.0735,  0.1276,  0.0146, -0.0336,  0.0977, -0.0806,  0.0708,  0.0523,
          0.0017,  0.1387,  0.1588,  0.0176,  0.0667,  0.1358, -0.0064, -0.0130,
          0.1487,  0.0373, -0.0077, -0.1672, -0.0958, -0.0239,  0.0741, -0.0215],
        [-0.0777,  0.0897,  0.1168,  0.1280,  0.0689,  0.0896, -0.1071,  0.1301,
          0.0110, -0.0428,  0.1692,  0.0452, -0.1521, -0.0836, -0.0258,  0.1420,
          0.1131,  0.0217,  0.0116,  0.1204, -0.0106, -0.0881, -0.1107,  0.0699,
          0.0617,  0.1566, -0.1247,  0.0125,  0.0558, -0.1379, -0.0326,  0.0044],
        [-0.0004,  0.0970,  0.1013,  0.0258,  0.1599,  0.0628, -0.1122, -0.0410,
         -0.0040,  0.0031, -0.1683, -0.0259, -0.1660, -0.0867,  0.0625, -0.0129,
         -0.1158, -0.0313,  0.0386, -0.1120, -0.0957,  0.0777, -0.0241, -0.1193,
         -0.0696,  0.0992, -0.0185,  0.0584, -0.0889,  0.1168,  0.0327,  0.1042],
        [-0.0186,  0.1499,  0.0957, -0.0825, -0.0695, -0.1009, -0.0113, -0.1643,
         -0.1109,  0.1351, -0.0601, -0.1713, -0.1006,  0.0686,  0.0037,  0.1767,
         -0.1526,  0.0089,  0.0640,  0.0795,  0.0797, -0.0730, -0.0359, -0.0231,
         -0.1178, -0.0523, -0.1435,  0.1126, -0.0559,  0.0418,  0.1381,  0.0784],
        [ 0.0148, -0.1732,  0.0235, -0.0896, -0.0563,  0.0270, -0.1666, -0.1209,
         -0.1057,  0.0605,  0.1589, -0.0392,  0.0390,  0.0180, -0.0885,  0.0993,
          0.1043, -0.1610, -0.0584, -0.1490,  0.0590,  0.1581,  0.0951, -0.0374,
         -0.0777,  0.1749, -0.1617, -0.0144, -0.0633,  0.1209, -0.0944, -0.1461],
        [ 0.0326,  0.0621,  0.0910, -0.1598,  0.0069,  0.0793,  0.0994,  0.1174,
          0.1048,  0.0234,  0.0131, -0.1534,  0.1169,  0.1813,  0.1083,  0.0969,
          0.1338,  0.0402, -0.0693,  0.1326, -0.0294,  0.1274, -0.1346, -0.1131,
          0.0879, -0.0854, -0.0589, -0.0133,  0.0686,  0.0564,  0.1443, -0.0188],
        [ 0.0921, -0.0183, -0.0331, -0.0298, -0.0440, -0.0157, -0.1280, -0.1382,
          0.1443,  0.0803,  0.0928, -0.1094, -0.0831,  0.1304,  0.0322, -0.1438,
         -0.1060, -0.1463, -0.0165, -0.1144,  0.1403,  0.1681,  0.0727, -0.1664,
          0.0474, -0.1234, -0.0302, -0.0668,  0.0117,  0.0743, -0.0306,  0.0035],
        [-0.0726,  0.0155, -0.0601,  0.1079, -0.1362, -0.1550, -0.1649, -0.1424,
         -0.1758,  0.1573,  0.1287, -0.1050, -0.1184, -0.0282,  0.0090,  0.1217,
          0.1457, -0.1647, -0.1146, -0.0926, -0.1282, -0.1786,  0.0319,  0.0350,
         -0.1269, -0.0366, -0.0248,  0.0198, -0.1088, -0.1607,  0.0501,  0.1174],
        [-0.0581, -0.1102,  0.1525,  0.1652,  0.1051, -0.1431,  0.0885, -0.1462,
         -0.0864,  0.0323,  0.1086,  0.0232,  0.0802, -0.0141,  0.0457,  0.1130,
          0.0889,  0.0714, -0.1289, -0.0949,  0.0087,  0.0533,  0.0137, -0.0337,
         -0.1694, -0.1123,  0.1063,  0.0677,  0.1766, -0.0220, -0.0230,  0.1436],
        [ 0.1160,  0.0178, -0.0316,  0.1119, -0.1123, -0.0858, -0.0613, -0.0640,
         -0.0345, -0.0472, -0.0152,  0.0771, -0.0788,  0.1426, -0.0928,  0.0157,
          0.0844, -0.0424, -0.1412,  0.0831, -0.0851, -0.0520,  0.1333,  0.0614,
         -0.1782,  0.0333, -0.0200, -0.1100,  0.0455,  0.1616, -0.0443,  0.1635],
        [-0.0168, -0.1137,  0.1180,  0.1047, -0.1748,  0.0800,  0.0801,  0.1448,
         -0.0641,  0.0562, -0.0664, -0.1034,  0.0148, -0.0505, -0.0412,  0.0478,
         -0.0676,  0.1626, -0.1108,  0.0253,  0.1555, -0.1513,  0.0081,  0.1569,
         -0.0999,  0.1011,  0.1410, -0.0565, -0.1515,  0.0410, -0.0453,  0.0349],
        [ 0.1201,  0.0743, -0.1846, -0.0536, -0.0310,  0.0567,  0.0635, -0.1537,
         -0.1846, -0.0729,  0.0645, -0.0180, -0.1286, -0.1668,  0.0187, -0.1000,
          0.1297, -0.1738, -0.1166, -0.0447, -0.0118,  0.0698,  0.0623,  0.0678,
         -0.0321, -0.0188,  0.0783, -0.0021,  0.1050,  0.0911, -0.0889, -0.0885],
        [ 0.1458, -0.1472,  0.0293, -0.0906, -0.1626,  0.0347, -0.1151,  0.0310,
         -0.0431,  0.1380, -0.1124,  0.0712,  0.0018, -0.0683, -0.0766,  0.0014,
          0.0567, -0.0984,  0.1630,  0.1814,  0.1259,  0.1186,  0.1630, -0.1050,
          0.1193,  0.1435, -0.1668, -0.0917,  0.1590,  0.1433,  0.0498,  0.1271]],
       device='cuda:0') torch.Size([16, 32])
fc_blocks.1.0.bias tensor([ 0.1323,  0.1060,  0.0928,  0.1263, -0.0983, -0.1333,  0.0812,  0.0964,
        -0.0736, -0.1278,  0.1234,  0.0694,  0.1179,  0.1214, -0.0187, -0.0466],
       device='cuda:0') torch.Size([16])
fc_blocks.2.0.weight tensor([[-0.0611, -0.0383, -0.0962, -0.0053,  0.2055, -0.1766, -0.1559, -0.1896,
          0.0205, -0.1004,  0.2021,  0.1738, -0.1897, -0.1107, -0.2133, -0.1127],
        [ 0.0488, -0.1744,  0.2249,  0.2305, -0.0068, -0.1253,  0.1487,  0.1567,
         -0.2376,  0.0677, -0.1075,  0.1167,  0.0675,  0.2378,  0.1465, -0.1548],
        [-0.0241, -0.1746,  0.0652,  0.1880, -0.1582, -0.0539,  0.0435,  0.2010,
         -0.1030,  0.0756,  0.1024,  0.0458, -0.1973, -0.0111, -0.2096,  0.1421],
        [-0.1677,  0.0004, -0.0419, -0.0805,  0.1139,  0.1945, -0.0795, -0.0423,
          0.1279,  0.2179,  0.1380,  0.1371,  0.1650,  0.1054,  0.0314,  0.1048],
        [ 0.1259, -0.0292, -0.0372, -0.0171, -0.0691,  0.0432, -0.0155,  0.0209,
         -0.0824,  0.2434,  0.1543, -0.1830, -0.1207, -0.1013,  0.2549, -0.0049],
        [-0.2321, -0.2272, -0.1902, -0.1983,  0.0916, -0.1398, -0.1452, -0.2147,
          0.0734,  0.0989, -0.0106,  0.2215,  0.0917,  0.2570, -0.0081,  0.2468],
        [-0.0689,  0.1002, -0.1400,  0.0151,  0.1219, -0.1230, -0.0119,  0.1250,
         -0.0028,  0.1585,  0.0645, -0.0713,  0.1781, -0.1840,  0.2394,  0.1967],
        [ 0.1429, -0.1095, -0.0713,  0.1037, -0.2312,  0.1657,  0.1889, -0.2283,
         -0.2102, -0.1943, -0.0274, -0.1996, -0.2027,  0.2221,  0.0282,  0.1441]],
       device='cuda:0') torch.Size([8, 16])
fc_blocks.2.0.bias tensor([-0.2220,  0.0179, -0.2025,  0.0872,  0.1136,  0.1861,  0.0340,  0.1668],
       device='cuda:0') torch.Size([8])
fc_blocks.3.0.weight tensor([[-0.3164,  0.0506,  0.0776,  0.2751,  0.0510, -0.3624,  0.0631, -0.0304],
        [ 0.1008, -0.0943, -0.2784,  0.0984, -0.1693, -0.1890, -0.1270,  0.2450],
        [-0.1461, -0.3238,  0.2691, -0.2308, -0.2885,  0.2708, -0.0452,  0.2452],
        [-0.1303,  0.2040,  0.0774, -0.3327,  0.1328,  0.1115, -0.2892,  0.1426]],
       device='cuda:0') torch.Size([4, 8])
fc_blocks.3.0.bias tensor([-0.2179,  0.1614,  0.0934, -0.2158], device='cuda:0') torch.Size([4])
fc_blocks.4.0.weight tensor([[ 0.1674,  0.3624, -0.1353, -0.2980],
        [ 0.5056, -0.3372, -0.0783, -0.0587]], device='cuda:0') torch.Size([2, 4])
fc_blocks.4.0.bias tensor([-0.1670,  0.4326], device='cuda:0') torch.Size([2])
