==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 47.81it/s]
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.71it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........torch.Size([128, 1811, 3])
tensor([[1118, 1118, 1118],
        [  23,   23,   23],
        [1120, 1120, 1120],
        [ 463,  463,  463],
        [ 166,  166,  166],
        [1182, 1182, 1182],
        [ 742,  742,  742],
        [ 691,  691,  691],
        [ 945,  945,  945],
        [ 421,  421,  421],
        [ 279,  279,  279],
        [ 534,  534,  534],
        [ 104,  104,  104],
        [ 679,  679,  679],
        [ 569,  569,  569],
        [1537, 1537, 1537],
        [ 550,  550,  550],
        [1577, 1577, 1577],
        [1050, 1050, 1050],
        [ 729,  729,  729],
        [ 709,  709,  709],
        [ 810,  810,  810],
        [ 166,  166,  166],
        [ 240,  240,  240],
        [ 623,  623,  623],
        [ 716,  716,  716],
        [1096, 1096, 1096],
        [1332, 1332, 1332],
        [1548, 1548, 1548],
        [ 228,  228,  228],
        [ 885,  885,  885],
        [  97,   97,   97],
        [ 435,  435,  435],
        [  29,   29,   29],
        [ 810,  810,  810],
        [ 952,  952,  952],
        [1124, 1124, 1124],
        [1648, 1648, 1648],
        [ 726,  726,  726],
        [ 653,  653,  653],
        [ 149,  149,  149],
        [ 311,  311,  311],
        [1032, 1032, 1032],
        [ 597,  597,  597],
        [1645, 1645, 1645],
        [ 773,  773,  773],
        [1475, 1475, 1475],
        [ 612,  612,  612],
        [1811, 1811, 1811],
        [ 244,  244,  244],
        [1115, 1115, 1115],
        [1067, 1067, 1067],
        [ 713,  713,  713],
        [ 378,  378,  378],
        [ 172,  172,  172],
        [ 957,  957,  957],
        [ 502,  502,  502],
        [1358, 1358, 1358],
        [1622, 1622, 1622],
        [ 303,  303,  303],
        [ 816,  816,  816],
        [1032, 1032, 1032],
        [ 899,  899,  899],
        [1062, 1062, 1062],
        [ 414,  414,  414],
        [ 260,  260,  260],
        [1172, 1172, 1172],
        [1128, 1128, 1128],
        [1071, 1071, 1071],
        [1188, 1188, 1188],
        [ 948,  948,  948],
        [1741, 1741, 1741],
        [ 565,  565,  565],
        [1036, 1036, 1036],
        [ 479,  479,  479],
        [ 594,  594,  594],
        [1443, 1443, 1443],
        [ 806,  806,  806],
        [ 265,  265,  265],
        [ 880,  880,  880],
        [ 629,  629,  629],
        [1122, 1122, 1122],
        [ 277,  277,  277],
        [ 698,  698,  698],
        [ 742,  742,  742],
        [ 521,  521,  521],
        [ 574,  574,  574],
        [ 144,  144,  144],
        [ 131,  131,  131],
        [ 685,  685,  685],
        [1021, 1021, 1021],
        [ 306,  306,  306],
        [ 835,  835,  835],
        [ 565,  565,  565],
        [  69,   69,   69],
        [1128, 1128, 1128],
        [ 953,  953,  953],
        [ 393,  393,  393],
        [1574, 1574, 1574],
        [ 812,  812,  812],
        [ 340,  340,  340],
        [ 879,  879,  879],
        [1522, 1522, 1522],
        [ 586,  586,  586],
        [ 507,  507,  507],
        [ 489,  489,  489],
        [1377, 1377, 1377],
        [ 642,  642,  642],
        [ 149,  149,  149],
        [ 148,  148,  148],
        [ 708,  708,  708],
        [ 646,  646,  646],
        [ 396,  396,  396],
        [ 433,  433,  433],
        [1600, 1600, 1600],
        [1126, 1126, 1126],
        [1049, 1049, 1049],
        [ 948,  948,  948],
        [1313, 1313, 1313],
        [1409, 1409, 1409],
        [ 668,  668,  668],
        [ 110,  110,  110],
        [ 987,  987,  987],
        [ 443,  443,  443],
        [ 147,  147,  147],
        [ 908,  908,  908],
        [ 409,  409,  409],
        [ 340,  340,  340]], device='cuda:0')
