==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 27.82it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 27.75it/s]
===============================Dataset shape===============================
Mixed : (6425,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 64.66it/s]
===============================Dataset shape===============================
Mixed : (1002,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 621, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 621, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 621, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 622, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 672, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 672, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 708, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 788, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 788, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 671, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 671, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 712, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 712, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 681, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 681, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 682, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 682, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 728, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 728, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 678, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 678, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 678, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 679, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 704, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 653, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 653, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 653, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 654, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 665, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 665, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 722, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 722, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 691, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 691, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 685, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 685, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 685, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 686, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 697, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 697, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 721, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 721, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 689, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 689, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 690, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 596, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 596, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 596, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 597, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 640, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 640, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 640, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 641, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 704, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 663, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 663, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 648, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 648, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 648, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 648, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 700, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 700, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 701, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 660, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 660, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 661, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 752, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 674, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 674, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 674, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 675, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 698, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 652, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 652, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 652, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 653, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 632, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 632, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/50].........Train Loss : 2065.758, Val Loss : 5910.565
======> Trajectory Loss : 1402.839, Gravity Loss : 0.003, EndOfTrajectory Loss : 6.629, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
Opening in existing browser session.
[1031/160900.847497:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1031/160901.208621:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1031/160901.504129:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/50].........Train Loss : 1449.650, Val Loss : 2976.780
======> Trajectory Loss : 801.731, Gravity Loss : 0.002, EndOfTrajectory Loss : 6.479, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 3/50].........Train Loss : 988.650, Val Loss : 1224.517
======> Trajectory Loss : 359.080, Gravity Loss : 0.001, EndOfTrajectory Loss : 6.296, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 4/50].........Train Loss : 688.057, Val Loss : 752.859
======> Trajectory Loss : 79.312, Gravity Loss : 0.000, EndOfTrajectory Loss : 6.087, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 5/50].........Train Loss : 599.358, Val Loss : 815.361
======> Trajectory Loss : 15.719, Gravity Loss : 0.000, EndOfTrajectory Loss : 5.836, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 6/50].........Train Loss : 591.186, Val Loss : 865.391
======> Trajectory Loss : 26.444, Gravity Loss : 0.000, EndOfTrajectory Loss : 5.590, BelowGroundPenalize Loss : 5.711
MultiviewReprojection Loss : 0.000
===> [Minibatch 7/50].........Train Loss : 565.342, Val Loss : 635.763
======> Trajectory Loss : 38.146, Gravity Loss : 0.000, EndOfTrajectory Loss : 5.185, BelowGroundPenalize Loss : 8.661
MultiviewReprojection Loss : 0.000
===> [Minibatch 8/50].........Train Loss : 489.620, Val Loss : 444.330
======> Trajectory Loss : 19.287, Gravity Loss : 0.000, EndOfTrajectory Loss : 4.663, BelowGroundPenalize Loss : 4.005
MultiviewReprojection Loss : 0.000
===> [Minibatch 9/50].........Train Loss : 401.036, Val Loss : 356.064
======> Trajectory Loss : 2.821, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.976, BelowGroundPenalize Loss : 0.567
MultiviewReprojection Loss : 0.000
===> [Minibatch 10/50].........Train Loss : 336.481, Val Loss : 322.669
======> Trajectory Loss : 0.729, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.357, BelowGroundPenalize Loss : 0.021
MultiviewReprojection Loss : 0.000
===> [Minibatch 11/50].........Train Loss : 309.682, Val Loss : 337.088
======> Trajectory Loss : 1.488, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.082, BelowGroundPenalize Loss : 0.007
MultiviewReprojection Loss : 0.000
===> [Minibatch 12/50].........Train Loss : 332.725, Val Loss : 374.456
======> Trajectory Loss : 1.102, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.316, BelowGroundPenalize Loss : 0.006
MultiviewReprojection Loss : 0.000
===> [Minibatch 13/50].........Train Loss : 372.847, Val Loss : 401.937
======> Trajectory Loss : 0.546, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.722, BelowGroundPenalize Loss : 0.083
MultiviewReprojection Loss : 0.000
===> [Minibatch 14/50].........Train Loss : 399.524, Val Loss : 406.594
======> Trajectory Loss : 0.654, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.988, BelowGroundPenalize Loss : 0.091
MultiviewReprojection Loss : 0.000
===> [Minibatch 15/50].........Train Loss : 405.929, Val Loss : 397.968
======> Trajectory Loss : 0.474, Gravity Loss : 0.000, EndOfTrajectory Loss : 4.054, BelowGroundPenalize Loss : 0.077
MultiviewReprojection Loss : 0.000
===> [Minibatch 16/50].........Train Loss : 395.908, Val Loss : 377.507
======> Trajectory Loss : 0.789, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.951, BelowGroundPenalize Loss : 0.005
MultiviewReprojection Loss : 0.000
===> [Minibatch 17/50].........Train Loss : 372.738, Val Loss : 348.565
======> Trajectory Loss : 0.817, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.719, BelowGroundPenalize Loss : 0.002
MultiviewReprojection Loss : 0.000
===> [Minibatch 18/50].........Train Loss : 345.050, Val Loss : 327.719
======> Trajectory Loss : 0.382, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.447, BelowGroundPenalize Loss : 0.004
MultiviewReprojection Loss : 0.000
===> [Minibatch 19/50].........Train Loss : 322.717, Val Loss : 316.707
======> Trajectory Loss : 0.619, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.220, BelowGroundPenalize Loss : 0.072
MultiviewReprojection Loss : 0.000
===> [Minibatch 20/50].........Train Loss : 307.288, Val Loss : 314.168
======> Trajectory Loss : 0.619, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.066, BelowGroundPenalize Loss : 0.095
MultiviewReprojection Loss : 0.000
===> [Minibatch 21/50].........Train Loss : 303.169, Val Loss : 320.758
======> Trajectory Loss : 0.444, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.027, BelowGroundPenalize Loss : 0.066
MultiviewReprojection Loss : 0.000
===> [Minibatch 22/50].........Train Loss : 307.013, Val Loss : 326.459
======> Trajectory Loss : 0.661, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.064, BelowGroundPenalize Loss : 0.001
MultiviewReprojection Loss : 0.000
===> [Minibatch 23/50].........Train Loss : 310.316, Val Loss : 325.174
======> Trajectory Loss : 0.548, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.098, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 24/50].........Train Loss : 311.012, Val Loss : 322.544
======> Trajectory Loss : 0.424, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.106, BelowGroundPenalize Loss : 0.004
MultiviewReprojection Loss : 0.000
===> [Minibatch 25/50].........Train Loss : 307.450, Val Loss : 317.661
======> Trajectory Loss : 0.528, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.069, BelowGroundPenalize Loss : 0.055
MultiviewReprojection Loss : 0.000
===> [Minibatch 26/50].........Train Loss : 303.355, Val Loss : 309.744
======> Trajectory Loss : 0.644, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.026, BelowGroundPenalize Loss : 0.083
MultiviewReprojection Loss : 0.000
===> [Minibatch 27/50].........Train Loss : 299.509, Val Loss : 309.785
======> Trajectory Loss : 0.285, Gravity Loss : 0.000, EndOfTrajectory Loss : 2.992, BelowGroundPenalize Loss : 0.018
MultiviewReprojection Loss : 0.000
===> [Minibatch 28/50].........Train Loss : 299.985, Val Loss : 310.691
======> Trajectory Loss : 0.788, Gravity Loss : 0.000, EndOfTrajectory Loss : 2.992, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 29/50].........Train Loss : 301.039, Val Loss : 307.749
======> Trajectory Loss : 0.486, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.006, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
===> [Minibatch 30/50].........Train Loss : 300.395, Val Loss : 306.037
======> Trajectory Loss : 0.262, Gravity Loss : 0.000, EndOfTrajectory Loss : 3.001, BelowGroundPenalize Loss : 0.000
MultiviewReprojection Loss : 0.000
