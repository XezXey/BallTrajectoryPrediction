==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [9, 10]
1. input_col =  [3, 4, 9, 10]
2. input_startpos_col =  [3, 4, 5, 9, 10]
3. gt_col =  [5, 9, 10]
4. gt_startpos_col =  [0, 1, 2, 9, 10]
5. gt_xyz_col =  [0, 1, 2, 9, 10]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                  | 0/3 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 28.87it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 28.70it/s]
===============================Dataset shape===============================
Mixed : (6426,)
===========================================================================
Mixed:   0%|                                                                  | 0/2 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|██████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 74.42it/s]
Mixed : (1029,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 723, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 4]), initial position=torch.Size([128, 1, 5])
gt batch [0] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 732, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 4]), initial position=torch.Size([128, 1, 5])
gt batch [1] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 598, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 598, 4]), initial position=torch.Size([128, 1, 5])
gt batch [2] : batch=torch.Size([128, 598, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 599, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 669, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 4]), initial position=torch.Size([128, 1, 5])
gt batch [3] : batch=torch.Size([128, 669, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 711, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 4]), initial position=torch.Size([128, 1, 5])
gt batch [4] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 648, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 4]), initial position=torch.Size([128, 1, 5])
gt batch [5] : batch=torch.Size([128, 648, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 650, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 650, 4]), initial position=torch.Size([128, 1, 5])
gt batch [6] : batch=torch.Size([128, 650, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 651, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 698, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 4]), initial position=torch.Size([128, 1, 5])
gt batch [7] : batch=torch.Size([128, 698, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 700, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 5])
gt batch [8] : batch=torch.Size([128, 700, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 701, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 688, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 5])
gt batch [9] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 667, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 4]), initial position=torch.Size([128, 1, 5])
gt batch [10] : batch=torch.Size([128, 667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 649, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 4]), initial position=torch.Size([128, 1, 5])
gt batch [11] : batch=torch.Size([128, 649, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 650, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 788, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 5])
gt batch [12] : batch=torch.Size([128, 788, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 660, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 4]), initial position=torch.Size([128, 1, 5])
gt batch [13] : batch=torch.Size([128, 660, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 661, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 703, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 703, 4]), initial position=torch.Size([128, 1, 5])
gt batch [14] : batch=torch.Size([128, 703, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 712, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 4]), initial position=torch.Size([128, 1, 5])
gt batch [15] : batch=torch.Size([128, 712, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 711, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 4]), initial position=torch.Size([128, 1, 5])
gt batch [16] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 728, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 4]), initial position=torch.Size([128, 1, 5])
gt batch [17] : batch=torch.Size([128, 728, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 680, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 4]), initial position=torch.Size([128, 1, 5])
gt batch [18] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 667, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 4]), initial position=torch.Size([128, 1, 5])
gt batch [19] : batch=torch.Size([128, 667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 734, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 4]), initial position=torch.Size([128, 1, 5])
gt batch [20] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 636, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 636, 4]), initial position=torch.Size([128, 1, 5])
gt batch [21] : batch=torch.Size([128, 636, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 637, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 758, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 4]), initial position=torch.Size([128, 1, 5])
gt batch [22] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 655, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 655, 4]), initial position=torch.Size([128, 1, 5])
gt batch [23] : batch=torch.Size([128, 655, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 656, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 674, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 674, 4]), initial position=torch.Size([128, 1, 5])
gt batch [24] : batch=torch.Size([128, 674, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 675, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 802, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 5])
gt batch [25] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 637, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 637, 4]), initial position=torch.Size([128, 1, 5])
gt batch [26] : batch=torch.Size([128, 637, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 638, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 621, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 621, 4]), initial position=torch.Size([128, 1, 5])
gt batch [27] : batch=torch.Size([128, 621, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 622, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 687, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 4]), initial position=torch.Size([128, 1, 5])
gt batch [28] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 689, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 5])
gt batch [29] : batch=torch.Size([128, 689, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 690, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 704, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 4]), initial position=torch.Size([128, 1, 5])
gt batch [30] : batch=torch.Size([128, 704, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 677, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 677, 4]), initial position=torch.Size([128, 1, 5])
gt batch [31] : batch=torch.Size([128, 677, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 678, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 672, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 4]), initial position=torch.Size([128, 1, 5])
gt batch [32] : batch=torch.Size([128, 672, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 652, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 652, 4]), initial position=torch.Size([128, 1, 5])
gt batch [33] : batch=torch.Size([128, 652, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 653, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 680, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 4]), initial position=torch.Size([128, 1, 5])
gt batch [34] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 722, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 4]), initial position=torch.Size([128, 1, 5])
gt batch [35] : batch=torch.Size([128, 722, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 670, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 4]), initial position=torch.Size([128, 1, 5])
gt batch [36] : batch=torch.Size([128, 670, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 699, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 4]), initial position=torch.Size([128, 1, 5])
gt batch [37] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 687, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 4]), initial position=torch.Size([128, 1, 5])
gt batch [38] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 648, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 4]), initial position=torch.Size([128, 1, 5])
gt batch [39] : batch=torch.Size([128, 648, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 772, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 4]), initial position=torch.Size([128, 1, 5])
gt batch [40] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 715, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 4]), initial position=torch.Size([128, 1, 5])
gt batch [41] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 696, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 4]), initial position=torch.Size([128, 1, 5])
gt batch [42] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 742, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 4]), initial position=torch.Size([128, 1, 5])
gt batch [43] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 688, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 5])
gt batch [44] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 670, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 4]), initial position=torch.Size([128, 1, 5])
gt batch [45] : batch=torch.Size([128, 670, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 742, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 4]), initial position=torch.Size([128, 1, 5])
gt batch [46] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 721, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 4]), initial position=torch.Size([128, 1, 5])
gt batch [47] : batch=torch.Size([128, 721, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 752, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 4]), initial position=torch.Size([128, 1, 5])
gt batch [48] : batch=torch.Size([128, 752, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 723, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 4]), initial position=torch.Size([128, 1, 5])
gt batch [49] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'model_depth': BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(4, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)}
{'model_depth': {'input_size': 4, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [4, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - model_depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(4, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/50].........
   [##] Training... Train Loss : 2609.345
   ======> Trajectory Loss : 2170.432, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.003, BelowGroundPenalize Loss : 438.910, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 9049.279
   ======> Trajectory Loss : 7840.424, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.011, BelowGroundPenalize Loss : 1208.845, MultiviewReprojection Loss : 0.000
Opening in existing browser session.
[1110/220411.384124:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/50].........
   [##] Training... Train Loss : 1705.603
   ======> Trajectory Loss : 1412.073, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.002, BelowGroundPenalize Loss : 293.528, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 2117.135
   ======> Trajectory Loss : 1834.192, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.002, BelowGroundPenalize Loss : 282.940, MultiviewReprojection Loss : 0.000
===> [Minibatch 3/50].........
   [##] Training... Train Loss : 408.832
   ======> Trajectory Loss : 331.946, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 76.886, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 4189.638
   ======> Trajectory Loss : 4189.631, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.007, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
[21057:21057:1110/220414.405886:ERROR:password_sync_bridge.cc(361)] Passwords datatype error was encountered: Failed to load entries from password store. Encryption service failure.
===> [Minibatch 4/50].........
   [##] Training... Train Loss : 766.661
   ======> Trajectory Loss : 766.659, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.002, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 2365.908
   ======> Trajectory Loss : 2365.904, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.004, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 5/50].........
   [##] Training... Train Loss : 414.499
   ======> Trajectory Loss : 414.498, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 67.060
   ======> Trajectory Loss : 67.060, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 6/50].........
   [##] Training... Train Loss : 12.520
   ======> Trajectory Loss : 12.519, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 900.113
   ======> Trajectory Loss : 779.371, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 120.742, MultiviewReprojection Loss : 0.000
===> [Minibatch 7/50].........
   [##] Training... Train Loss : 160.752
   ======> Trajectory Loss : 135.731, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 25.020, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 1456.378
   ======> Trajectory Loss : 1261.144, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.002, BelowGroundPenalize Loss : 195.232, MultiviewReprojection Loss : 0.000
===> [Minibatch 8/50].........
   [##] Training... Train Loss : 274.925
   ======> Trajectory Loss : 228.923, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 46.002, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 1202.567
   ======> Trajectory Loss : 1041.233, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 161.332, MultiviewReprojection Loss : 0.000
[1110/220419.214106:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 9/50].........
   [##] Training... Train Loss : 212.471
   ======> Trajectory Loss : 176.181, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 36.290, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 591.121
   ======> Trajectory Loss : 511.569, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 79.552, MultiviewReprojection Loss : 0.000
===> [Minibatch 10/50].........
   [##] Training... Train Loss : 109.939
   ======> Trajectory Loss : 90.824, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 19.115, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 55.733
   ======> Trajectory Loss : 48.060, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 7.673, MultiviewReprojection Loss : 0.000
===> [Minibatch 11/50].........
   [##] Training... Train Loss : 10.205
   ======> Trajectory Loss : 8.439, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 1.766, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 286.167
   ======> Trajectory Loss : 286.166, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 12/50].........
   [##] Training... Train Loss : 51.483
   ======> Trajectory Loss : 51.483, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 784.774
   ======> Trajectory Loss : 784.772, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 13/50].........
   [##] Training... Train Loss : 136.134
   ======> Trajectory Loss : 136.133, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 746.321
   ======> Trajectory Loss : 746.320, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 14/50].........
   [##] Training... Train Loss : 132.182
   ======> Trajectory Loss : 132.182, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 340.637
   ======> Trajectory Loss : 340.636, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 15/50].........
   [##] Training... Train Loss : 61.867
   ======> Trajectory Loss : 61.867, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 29.115
   ======> Trajectory Loss : 29.115, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 16/50].........
   [##] Training... Train Loss : 5.518
   ======> Trajectory Loss : 5.518, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 99.786
   ======> Trajectory Loss : 86.167, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 13.620, MultiviewReprojection Loss : 0.000
===> [Minibatch 17/50].........
   [##] Training... Train Loss : 18.654
   ======> Trajectory Loss : 15.225, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 3.429, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 289.144
   ======> Trajectory Loss : 250.061, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 39.082, MultiviewReprojection Loss : 0.000
===> [Minibatch 18/50].........
   [##] Training... Train Loss : 53.345
   ======> Trajectory Loss : 43.226, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 10.119, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 346.365
   ======> Trajectory Loss : 299.609, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 46.756, MultiviewReprojection Loss : 0.000
