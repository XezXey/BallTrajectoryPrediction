==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 48.21it/s]
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.45it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
torch.Size([4, 2, 1, 32])
torch.Size([4, 2, 1, 32])
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[[[ 1.5713e+00, -1.1528e+00, -6.5105e-01,  1.1887e+00,  9.9007e-01,
            5.6301e-01, -1.7037e+00,  6.5128e-02,  5.3434e-01,  1.2247e+00,
           -2.0148e+00, -4.3666e-01, -1.1444e+00, -4.6871e-01,  9.2568e-02,
            4.7052e-01, -1.2158e+00, -1.1104e-01,  5.0841e-01, -1.2020e+00,
            1.2774e+00,  1.5381e-01, -2.9335e-01,  9.9906e-01,  2.7665e-01,
           -4.0589e-01, -7.6625e-01,  1.3679e+00, -3.2453e-01, -5.0149e-01,
            1.6008e-01, -2.2146e+00]],

         [[ 6.5367e-01,  3.8875e-02,  1.1956e+00, -9.1043e-01,  1.3384e+00,
            3.0522e-01,  7.6647e-01,  2.9782e-01,  1.7099e+00, -5.3354e-01,
           -2.6959e-01, -1.2463e+00,  1.5999e-01,  1.9933e-01, -9.4974e-01,
            5.6105e-01,  1.6540e+00, -7.1696e-01,  1.2097e+00, -6.0441e-04,
            1.9827e+00, -1.9084e-01, -2.4421e+00, -7.0765e-01, -1.0337e+00,
           -1.0663e+00,  1.1362e+00, -1.3978e-02, -3.6585e-01,  1.1611e-01,
           -5.7717e-02, -5.8963e-01]]],


        [[[-2.0849e-01,  2.8462e-01,  7.1312e-01,  1.1909e+00,  2.9195e-01,
            9.0994e-01, -3.8945e-01,  2.5507e-01, -8.2498e-01,  2.3306e-01,
           -3.5217e-01, -8.8510e-01,  8.2827e-01,  1.0360e-01, -3.9870e-01,
            1.9118e+00, -6.0867e-01,  1.8914e+00, -1.1682e+00,  3.1255e-01,
            7.0360e-01,  8.9651e-01, -6.9564e-01, -5.6836e-01, -1.0431e+00,
            1.8207e+00,  1.6312e-01,  2.6968e-01,  2.1496e+00, -4.7494e-01,
           -1.3859e+00, -2.8075e-01]],

         [[ 6.0255e-01, -7.1464e-01,  1.0176e+00,  2.0588e-01, -2.4169e-01,
            3.8838e-02, -9.3873e-05,  4.0346e-01,  1.1988e+00,  4.4899e-02,
           -1.0497e+00, -1.7832e-01, -1.6446e+00, -8.2322e-01, -1.9708e-02,
            3.2668e-01,  1.1880e+00,  1.1919e+00, -8.9800e-01, -7.0891e-01,
            1.4675e+00,  2.8155e+00,  1.9406e+00,  1.8036e+00, -1.4947e+00,
            8.6190e-01, -1.1202e-01,  5.0868e-01, -2.1454e-01,  7.9864e-01,
            1.7141e-01,  8.0672e-01]]],


        [[[ 6.5196e-01, -1.0531e+00,  7.0941e-01, -8.4134e-01, -1.4833e+00,
           -1.1613e+00,  1.9505e+00,  5.8499e-01, -2.7320e-02,  2.0857e+00,
            4.5251e-02, -7.9732e-01,  6.2380e-01,  5.6318e-01,  1.9229e-01,
           -5.8415e-01,  1.7559e-01, -1.4405e+00, -7.2159e-01,  1.0324e+00,
           -3.4790e-02, -1.2845e-01, -1.2030e+00, -2.3669e-01, -2.3703e-01,
           -8.3043e-01, -5.2663e-01, -8.0654e-01, -1.5032e+00, -1.3851e+00,
            1.5886e+00, -7.7493e-01]],

         [[ 1.3080e-01,  6.6714e-01,  1.1175e-01,  6.4438e-01, -6.8857e-01,
           -1.5278e+00, -1.1230e+00, -4.3191e-01, -5.1524e-01, -3.0277e-01,
           -1.5773e-01, -7.2043e-02,  1.8361e-01, -1.9682e+00,  2.3186e-01,
           -2.8344e+00, -9.1095e-01,  9.9725e-01, -4.8295e-01, -2.1678e-01,
           -1.3095e+00,  1.0840e+00, -1.4402e+00,  9.7537e-01,  1.4867e+00,
           -5.8724e-02,  7.9787e-01,  8.2631e-02,  1.7985e-01,  2.4334e-01,
            4.5110e-01,  8.5248e-01]]],


        [[[ 2.2529e+00,  2.6294e-01,  4.0701e-01,  5.0078e-01, -9.6037e-01,
           -1.2808e-01, -1.0844e-01, -9.3947e-01, -4.7945e-01, -6.6145e-01,
            3.2022e-01, -1.4786e+00,  7.5129e-01, -6.7581e-01, -4.2351e-01,
           -1.1087e+00,  1.2661e-01,  3.2337e-01, -1.0655e+00,  1.1371e+00,
            2.2319e-01,  1.8673e-01,  5.7171e-01, -1.3905e+00,  1.3656e+00,
            8.3682e-01, -1.6691e-02,  6.3780e-01, -4.1280e-01, -1.1828e+00,
           -8.1777e-01, -9.8059e-01]],

         [[ 8.3573e-01, -2.0192e-01,  2.3080e+00,  1.0351e+00, -1.6094e-01,
            6.3276e-03,  8.9665e-01, -2.2678e-01,  2.5895e-01, -1.6012e+00,
           -1.3396e-01, -2.0916e-01, -3.7159e-01,  3.7238e-01,  7.9355e-01,
           -1.0723e+00,  6.0945e-01,  3.6178e-01, -4.4295e-02,  3.5950e-01,
            1.4403e+00, -4.9334e-01, -8.2826e-01,  1.7958e+00, -1.4715e+00,
            1.9880e+00, -2.3929e+00, -6.8517e-02, -2.2532e+00, -4.8533e-01,
            8.4769e-02, -1.1061e+00]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 1.7884,  0.0739, -0.4595,  0.5153,  0.9376, -0.1294,  0.8460,
           -0.6505,  1.8607, -0.5272, -0.6354, -0.8467,  0.6999, -0.5796,
           -1.1204,  1.0432, -0.4690,  0.3773,  0.5364,  1.4152, -1.0191,
            0.8453,  0.6936,  0.2714, -1.3713,  0.3817,  0.1340, -1.7688,
            1.5443,  2.2222, -0.5138,  0.0258]],

         [[-0.5501, -0.8164,  1.6997,  0.7530,  0.0881, -0.4376, -1.3479,
            1.2352, -0.5632, -1.5437, -0.7963,  0.7993,  0.1940,  0.8686,
           -0.2376,  0.7482, -0.4769, -0.3559, -1.0905, -0.8744, -1.0795,
            1.0298, -1.1808,  0.5809, -0.5799,  1.1876,  0.9118,  0.3332,
           -0.9387,  0.3851, -0.5272,  0.3919]]],


        [[[ 0.9160, -0.3736,  0.3198,  1.9818, -3.1262,  0.4642, -0.1911,
            0.6418, -0.7927,  0.1840, -0.6138, -0.2895,  2.3061,  0.6849,
           -0.4188,  2.0392,  1.4601, -2.7978, -0.4343,  0.9754,  0.1184,
            0.1879,  1.3143,  0.2712, -1.4301,  0.5612, -0.6546, -0.9158,
           -0.2270, -0.4852,  1.5421, -1.2868]],

         [[ 0.6270, -0.1003,  1.1606, -0.4109,  0.5925,  0.3000, -0.5834,
           -1.1453, -1.3843,  0.0311, -0.4686, -0.3257, -0.0596,  0.8640,
            1.6315,  0.8989,  0.1146,  1.0096,  0.6640,  1.0811, -1.7360,
            0.9103, -0.8187,  0.8541,  0.5592,  0.5405,  0.9683, -0.6436,
           -1.2568,  0.8487, -0.0760,  0.5418]]],


        [[[ 1.1183,  1.0393,  0.8816,  0.2597, -0.1110,  0.7201, -0.3102,
            1.1877, -1.7213,  0.7539, -0.6842, -0.7038, -0.3429, -0.9380,
            0.4222, -1.5522,  0.8135, -0.4591, -0.4445, -0.6268, -0.7070,
            0.0326,  0.1215,  1.3239, -0.0302,  0.8099, -0.1898, -0.3220,
           -0.3342, -1.3359,  2.1754,  0.8035]],

         [[-1.4981, -0.2323, -0.8802,  1.2246,  0.3155,  0.1506,  0.7060,
            0.6302,  0.5034,  0.5405,  0.8114,  0.0947, -2.0320, -0.4181,
           -0.3990,  0.7412,  1.5464, -0.8898,  0.5019, -0.0907, -0.5038,
            1.0170, -0.2941, -0.5716,  0.6734,  0.2046,  0.2258, -2.2062,
           -0.9296, -1.2244,  1.0460, -1.6375]]],


        [[[ 0.4347,  0.5332,  0.8445,  0.9735, -1.0186,  1.5942,  0.8049,
           -0.0474,  0.1276,  1.6016,  0.0685, -0.0816,  0.4680, -1.5148,
           -1.5990,  0.7020, -0.5239, -0.6125, -2.2372, -0.4158, -1.2714,
           -0.3429,  1.9831,  0.8777,  0.1201,  0.8321, -0.3792,  0.1194,
           -0.6196, -0.8079,  0.5762,  0.5755]],

         [[ 0.6705, -0.4693, -1.1926, -0.6639, -0.3883, -0.5502, -0.5527,
            0.5131,  0.2421,  1.5851, -0.0656, -1.7758,  1.2743,  0.4653,
            0.4716,  0.3839, -1.6964, -0.2941,  0.8958, -0.3157,  0.0203,
            0.8881, -0.4270, -0.1378,  0.0051, -0.1320, -0.7495, -0.3522,
           -2.1019,  1.2445,  0.8173, -0.3210]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[ 1.5613, -1.1428, -0.6411,  1.1788,  0.9801,  0.5530, -1.7137,
           0.0552,  0.5243,  1.2147, -2.0246, -0.4267, -1.1544, -0.4787,
           0.0826,  0.4605, -1.2058, -0.1011,  0.4985, -1.1921,  1.2675,
           0.1438, -0.2834,  1.0090,  0.2667, -0.3960, -0.7563,  1.3778,
          -0.3345, -0.5115,  0.1701, -2.2245]],

        [[ 0.6637,  0.0489,  1.2055, -0.9204,  1.3284,  0.2952,  0.7565,
           0.2878,  1.7199, -0.5235, -0.2796, -1.2363,  0.1500,  0.1895,
          -0.9597,  0.5511,  1.6440, -0.7070,  1.1997, -0.0106,  1.9727,
          -0.1809, -2.4521, -0.6977, -1.0237, -1.0762,  1.1462, -0.0040,
          -0.3758,  0.1261, -0.0477, -0.5797]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[ 1.7984,  0.0837, -0.4695,  0.5253,  0.9276, -0.1195,  0.8560,
          -0.6604,  1.8707, -0.5172, -0.6254, -0.8567,  0.6900, -0.5896,
          -1.1304,  1.0332, -0.4790,  0.3674,  0.5264,  1.4252, -1.0291,
           0.8353,  0.7036,  0.2814, -1.3813,  0.3917,  0.1439, -1.7588,
           1.5543,  2.2122, -0.5038,  0.0358]],

        [[-0.5401, -0.8064,  1.6897,  0.7430,  0.0781, -0.4475, -1.3579,
           1.2451, -0.5532, -1.5537, -0.7863,  0.8093,  0.1840,  0.8587,
          -0.2476,  0.7383, -0.4669, -0.3659, -1.1004, -0.8844, -1.0695,
           1.0398, -1.1908,  0.5709, -0.5899,  1.1776,  0.9018,  0.3432,
          -0.9287,  0.3951, -0.5172,  0.4019]]], device='cuda:0') torch.Size([4, 2, 1, 32])
