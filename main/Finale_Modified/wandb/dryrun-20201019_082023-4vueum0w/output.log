==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.75it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 13.21it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.55it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 786, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 786, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 737, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 737, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 737, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 738, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 698, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 730, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 730, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 767, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 767, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 767, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 759, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 759, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 750, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 750, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 751, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 711, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 741, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 741, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 741, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 765, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 765, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 766, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 774, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 774, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 774, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 775, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
FSD
FSD
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........recurrent_blocks.0.weight_ih_l0 tensor([[ 0.0949, -0.1655, -0.0148],
        [ 0.0855,  0.0298,  0.0531],
        [ 0.0603, -0.1596,  0.1568],
        [ 0.1266, -0.0937, -0.0376],
        [-0.1821,  0.0390,  0.0323],
        [-0.0857,  0.0595,  0.0500],
        [-0.1472,  0.0763,  0.1505],
        [-0.0738, -0.0221,  0.0414],
        [ 0.0867, -0.1693, -0.0998],
        [-0.0667,  0.0912, -0.1742],
        [ 0.0039, -0.1399,  0.1518],
        [ 0.0495, -0.0112, -0.0119],
        [-0.1508, -0.0878, -0.0851],
        [ 0.1691,  0.1383, -0.1112],
        [-0.0723,  0.1831, -0.1356],
        [ 0.1808,  0.1255,  0.0457],
        [ 0.0640,  0.1196,  0.0198],
        [-0.0301, -0.1776, -0.0232],
        [ 0.1788,  0.0371, -0.0432],
        [-0.0229, -0.0815,  0.0640],
        [ 0.1145, -0.0232, -0.1423],
        [ 0.0822,  0.0958,  0.0729],
        [-0.0536,  0.1645, -0.0339],
        [ 0.1359, -0.1827,  0.0755],
        [ 0.1373,  0.0401, -0.0383],
        [-0.0057,  0.1104, -0.0578],
        [-0.1530, -0.1422, -0.0601],
        [ 0.0563, -0.0097,  0.1275],
        [ 0.0128, -0.0581,  0.0978],
        [ 0.1298,  0.0284,  0.1512],
        [-0.1406, -0.1130,  0.1056],
        [ 0.0639, -0.0245,  0.1610],
        [-0.0665,  0.1444,  0.0125],
        [-0.1157, -0.0510, -0.1363],
        [ 0.1675, -0.0162,  0.1594],
        [-0.0779, -0.1532, -0.1301],
        [ 0.1422,  0.1106,  0.1311],
        [-0.1290,  0.0565,  0.1147],
        [-0.1535, -0.1651,  0.0299],
        [-0.0922, -0.1324,  0.0371],
        [ 0.0940, -0.0459, -0.0007],
        [-0.0601,  0.0928,  0.1542],
        [ 0.1079,  0.1126, -0.0959],
        [ 0.0101,  0.1453, -0.1833],
        [-0.1417,  0.0070,  0.0061],
        [ 0.0481, -0.1217, -0.0463],
        [-0.1763, -0.0424, -0.0718],
        [-0.1327,  0.0964, -0.0727],
        [ 0.0924,  0.0847,  0.0835],
        [ 0.1423,  0.0464, -0.1498],
        [-0.1075,  0.1158,  0.0168],
        [ 0.1032,  0.1016,  0.1638],
        [ 0.1359,  0.0487,  0.0035],
        [-0.1399,  0.1396, -0.1583],
        [ 0.0099,  0.0125, -0.0083],
        [-0.0857, -0.1201, -0.0592],
        [-0.1807,  0.0839,  0.0029],
        [ 0.0025, -0.0970, -0.0847],
        [ 0.1336,  0.1599, -0.0173],
        [-0.0877,  0.0471,  0.0997],
        [ 0.1373,  0.0345, -0.0444],
        [ 0.1497, -0.0285,  0.0854],
        [-0.0574, -0.0203, -0.0557],
        [ 0.0122,  0.1665, -0.0798],
        [-0.1656, -0.1064, -0.1406],
        [-0.0108,  0.0581, -0.0939],
        [-0.0995, -0.0494,  0.0809],
        [-0.0256, -0.0974, -0.0960],
        [ 0.0590,  0.0501, -0.0371],
        [ 0.0449,  0.0231,  0.1058],
        [ 0.1158, -0.0365, -0.1534],
        [-0.1065, -0.0576, -0.0329],
        [-0.1710, -0.0751,  0.1332],
        [ 0.1348, -0.1292, -0.0645],
        [-0.0536,  0.1263,  0.1015],
        [ 0.0432,  0.0699, -0.0187],
        [-0.0074,  0.0420, -0.0113],
        [ 0.0192, -0.0747,  0.1635],
        [-0.1272, -0.0269,  0.1459],
        [-0.1169, -0.1770,  0.0504],
        [ 0.0720, -0.1486, -0.0477],
        [-0.1238,  0.0880, -0.0665],
        [ 0.0712, -0.1195, -0.0096],
        [-0.1052,  0.1153, -0.0291],
        [-0.0436,  0.1324, -0.1414],
        [-0.0928,  0.1405,  0.0332],
        [-0.0281,  0.1698,  0.0403],
        [-0.1710,  0.1178, -0.0587],
        [-0.0993,  0.0610, -0.0544],
        [-0.1701, -0.1144, -0.0669],
        [ 0.0617, -0.0702,  0.1367],
        [-0.0364, -0.0336, -0.0178],
        [ 0.1660, -0.0290,  0.1347],
        [ 0.0401,  0.1221, -0.1544],
        [ 0.0332,  0.0467,  0.0191],
        [-0.1079,  0.0057, -0.0193],
        [-0.0916,  0.1425, -0.1174],
        [ 0.1365, -0.1705,  0.1060],
        [-0.0762, -0.0214,  0.0950],
        [-0.0772,  0.0181,  0.1530],
        [-0.1010,  0.1473, -0.1062],
        [ 0.1104,  0.1190,  0.1108],
        [-0.1385,  0.1058,  0.1023],
        [-0.0323, -0.0050, -0.0676],
        [ 0.0846,  0.0375,  0.0637],
        [-0.0583, -0.0292,  0.0058],
        [ 0.0390,  0.1485,  0.0847],
        [ 0.0764,  0.1376,  0.0809],
        [-0.1050, -0.1395, -0.0105],
        [-0.0108, -0.0372,  0.0726],
        [-0.1613,  0.0460, -0.0732],
        [ 0.1572,  0.1346, -0.1561],
        [-0.1683, -0.0831,  0.1566],
        [ 0.1437, -0.0695, -0.0113],
        [-0.0076,  0.0807,  0.1645],
        [-0.0141,  0.1409, -0.1422],
        [-0.1109, -0.1629, -0.0964],
        [-0.0610, -0.0011,  0.1306],
        [ 0.0727, -0.0876,  0.0574],
        [ 0.1851, -0.1078,  0.1385],
        [ 0.1648,  0.0400, -0.1275],
        [ 0.1131,  0.1791,  0.1257],
        [ 0.0744,  0.1495, -0.1028],
        [ 0.1057,  0.1651, -0.0849],
        [-0.1674, -0.1253, -0.0188],
        [ 0.1380,  0.1651,  0.0222],
        [-0.0758, -0.0699, -0.0203],
        [ 0.0695,  0.1707,  0.0519]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0 tensor([[ 0.0046, -0.0220, -0.0905,  ...,  0.0495,  0.1394,  0.0720],
        [ 0.1193,  0.0567,  0.1437,  ..., -0.1625,  0.1116,  0.1083],
        [ 0.0148, -0.1090,  0.0454,  ..., -0.0072, -0.0734,  0.0429],
        ...,
        [ 0.1303,  0.1647, -0.0128,  ..., -0.1090, -0.1228, -0.1263],
        [-0.1857,  0.1318, -0.0742,  ...,  0.1498, -0.0846,  0.0624],
        [-0.0457,  0.0449, -0.0303,  ..., -0.0256, -0.1309,  0.1448]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0 tensor([ 0.1866,  0.0763, -0.1300,  0.0189,  0.1229,  0.0695,  0.0500,  0.0500,
        -0.1585,  0.1248,  0.0715, -0.0161, -0.1037, -0.0950, -0.0083, -0.0813,
        -0.0161, -0.0862, -0.0659,  0.0175, -0.0354, -0.1214, -0.0557,  0.0722,
        -0.1038, -0.1571, -0.0688,  0.1446, -0.1566, -0.1112, -0.1230,  0.1358,
         0.1108, -0.1070,  0.0195,  0.0722, -0.1248, -0.1641, -0.0418, -0.0332,
        -0.0308, -0.1245,  0.0281, -0.1187, -0.1248, -0.0489, -0.1172, -0.0864,
         0.1347, -0.1310, -0.0008,  0.1218,  0.1130,  0.1393, -0.0715, -0.1573,
        -0.0758,  0.0568, -0.0383, -0.1636,  0.0507,  0.0405,  0.0657,  0.1266,
         0.1116, -0.0110, -0.0912, -0.1345,  0.0740, -0.0742,  0.1520,  0.0750,
        -0.1412,  0.1603, -0.1779, -0.0867,  0.1557, -0.0097,  0.1085,  0.1294,
         0.0225,  0.1576,  0.1335, -0.1028,  0.1723,  0.0314, -0.1166, -0.1802,
         0.0031, -0.0247,  0.0648,  0.1133, -0.1006, -0.0966,  0.1261, -0.0169,
        -0.0913, -0.0466,  0.1773,  0.0141, -0.0603, -0.0987, -0.1407, -0.1861,
         0.0236, -0.1678,  0.1193, -0.1864, -0.1174,  0.1058, -0.0187,  0.1091,
        -0.0987,  0.1065,  0.0859,  0.1073,  0.1557, -0.1584,  0.0792,  0.1038,
         0.1335,  0.0641,  0.0527,  0.0002, -0.1482,  0.0064,  0.0807, -0.0165],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0 tensor([-0.0991,  0.0169,  0.1060,  0.0347, -0.1323, -0.1664,  0.1594,  0.0789,
         0.1181, -0.1702,  0.0318,  0.0915,  0.1249,  0.1137,  0.0081,  0.0822,
        -0.0786,  0.0400,  0.1352, -0.1433,  0.0706,  0.1207,  0.1222, -0.0131,
         0.0056, -0.1225, -0.0458, -0.0396, -0.0887,  0.0593,  0.1183, -0.1037,
        -0.0725,  0.1389,  0.1224,  0.1097,  0.0085, -0.1294, -0.1295,  0.0771,
         0.1428,  0.0846, -0.0417,  0.0902,  0.1768,  0.0532,  0.1015,  0.1561,
        -0.0593, -0.1749, -0.0112, -0.0589,  0.0730, -0.0150, -0.1838,  0.1625,
         0.0466,  0.1823, -0.0962, -0.1342, -0.1652,  0.0453,  0.1097, -0.0217,
         0.1770, -0.0068, -0.1604, -0.1010,  0.0067, -0.0648, -0.0320,  0.0611,
        -0.0736,  0.1437,  0.1002,  0.0948,  0.0627, -0.1529, -0.0279, -0.1156,
        -0.0956,  0.0879, -0.0238,  0.0873,  0.0499, -0.1435, -0.0217,  0.1591,
        -0.0426,  0.0926,  0.0791, -0.1587, -0.1810, -0.1087,  0.0094, -0.1063,
         0.1142, -0.0321,  0.0271, -0.0366,  0.0038, -0.1562, -0.0982, -0.0794,
        -0.1268, -0.0030,  0.1116, -0.0057, -0.1158,  0.0482,  0.0612,  0.1031,
        -0.1207, -0.1176,  0.1535,  0.0616, -0.0606, -0.1540, -0.0159, -0.1546,
        -0.1303,  0.0078, -0.1608, -0.1081, -0.0834, -0.0768,  0.0952,  0.1238],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.weight_ih_l0_reverse tensor([[ 1.3678e-01, -9.4430e-02, -9.5304e-02],
        [ 5.6715e-02, -1.1598e-01, -7.8308e-02],
        [-1.4935e-01,  1.3256e-01, -1.6914e-01],
        [-1.2262e-01,  4.1034e-02, -5.4513e-02],
        [ 3.2360e-02, -1.6659e-01, -3.7264e-02],
        [ 1.7943e-01, -8.2951e-02, -1.1252e-01],
        [-3.3327e-02,  9.5086e-04, -3.4720e-02],
        [-1.6379e-01, -1.1678e-01, -1.6305e-01],
        [-9.5042e-02, -1.2755e-01, -2.3955e-02],
        [ 1.2967e-01, -1.6828e-01, -1.7977e-01],
        [ 1.6122e-01,  1.4917e-01,  9.2968e-02],
        [ 2.0876e-02,  1.6600e-01, -8.9046e-02],
        [ 6.0628e-02,  6.5413e-02, -1.4204e-02],
        [-1.8198e-01,  2.6066e-02, -5.6970e-02],
        [ 5.2311e-02, -7.3892e-03, -1.6694e-01],
        [ 1.3061e-01, -1.5986e-01, -1.8443e-01],
        [ 4.8608e-02, -1.1216e-01,  1.8562e-01],
        [ 4.3905e-02, -1.8226e-01, -3.1333e-02],
        [ 3.7306e-02,  1.2987e-01,  4.1081e-02],
        [-9.4524e-02, -1.4225e-01,  1.2026e-01],
        [-2.7736e-02, -8.6533e-02,  8.4477e-02],
        [-1.4338e-01,  4.8291e-02, -1.0797e-01],
        [-6.1392e-02,  8.3332e-03,  1.6639e-01],
        [-1.2737e-02,  2.9024e-02, -1.8599e-01],
        [-1.9221e-02, -1.3697e-01, -1.7815e-01],
        [-3.5585e-02,  1.1574e-01,  3.6746e-02],
        [-1.3504e-01, -1.2783e-01, -1.1516e-01],
        [ 1.6315e-01,  1.3957e-01, -1.6481e-01],
        [ 4.5584e-02, -2.6017e-05, -1.3818e-01],
        [-8.3781e-02, -3.1499e-02, -1.6408e-01],
        [ 1.4005e-01,  9.8478e-02,  8.1136e-02],
        [ 1.6014e-01, -1.4874e-01,  1.5110e-01],
        [ 1.6072e-01, -8.5144e-02,  1.8651e-01],
        [-1.0743e-01, -5.5071e-02, -5.6943e-02],
        [-8.5023e-02, -2.5166e-02,  8.9763e-02],
        [ 1.2634e-01, -5.7283e-02,  8.4920e-02],
        [ 1.6274e-01,  1.5544e-01,  2.8997e-02],
        [-1.0752e-01, -7.0324e-02,  1.1000e-02],
        [-1.0430e-01, -4.8451e-02, -1.2537e-01],
        [-2.0151e-02,  4.4593e-02,  4.9326e-02],
        [ 1.4994e-01,  1.1715e-01,  1.6925e-01],
        [ 1.4658e-01, -1.5773e-01, -3.6691e-02],
        [ 8.8461e-02, -2.4627e-02,  1.1528e-02],
        [ 7.9340e-03, -1.1860e-01, -1.3893e-01],
        [ 6.7723e-03, -1.6101e-01, -1.3316e-01],
        [ 3.7728e-02, -1.5844e-01,  7.9491e-03],
        [-1.1665e-01, -1.6435e-01,  2.0532e-02],
        [-1.2511e-01,  6.0090e-02,  5.0435e-02],
        [ 2.6519e-02, -1.3909e-01, -7.3676e-02],
        [ 1.2063e-01, -1.5989e-01, -3.4710e-02],
        [ 9.7965e-02,  8.5792e-02, -4.3817e-02],
        [ 1.2936e-01, -1.8135e-01, -1.3080e-01],
        [-2.9370e-02,  4.0401e-02, -1.2252e-01],
        [ 4.6765e-02,  5.8552e-02,  1.3591e-01],
        [-7.5613e-02, -1.6614e-01, -1.4296e-01],
        [-5.3518e-02,  1.6085e-01, -1.6174e-01],
        [ 1.7413e-01,  8.2516e-02,  2.8153e-02],
        [ 9.6397e-02, -1.4490e-01, -1.6374e-01],
        [-1.8380e-01, -1.0420e-01, -9.9927e-02],
        [ 1.6915e-01,  4.6755e-02, -3.5342e-02],
        [-9.0929e-02,  3.4394e-02, -1.0628e-01],
        [ 1.5817e-01,  1.8390e-02,  9.4125e-02],
        [-1.4583e-01,  2.1002e-02, -6.0827e-02],
        [-9.7661e-02, -5.3044e-03,  1.3467e-02],
        [ 9.1885e-02,  8.1067e-02, -9.8338e-02],
        [ 1.7887e-01,  1.1108e-01,  1.1610e-01],
        [ 1.5312e-01,  7.6227e-02,  9.0569e-02],
        [-1.1429e-01,  4.2873e-02, -6.1447e-02],
        [-4.5738e-02, -4.4325e-02,  3.1356e-02],
        [-1.0317e-01, -2.2212e-02, -1.7424e-01],
        [-1.2413e-01,  1.3863e-01,  6.3772e-02],
        [ 2.4594e-02, -4.1002e-02, -1.7812e-01],
        [ 1.1023e-01, -2.7398e-02,  8.1388e-02],
        [-5.7352e-02, -1.7224e-02,  2.6765e-02],
        [ 1.1191e-01,  1.6353e-01, -1.4140e-01],
        [ 1.5636e-03,  8.0231e-02, -2.5083e-02],
        [ 1.7221e-01, -8.2514e-02, -1.5232e-01],
        [-6.6753e-02, -1.6375e-01, -1.7293e-01],
        [ 1.1328e-01, -1.5326e-01,  1.5127e-02],
        [-4.5479e-02,  5.9318e-02, -7.7927e-03],
        [-3.7948e-02,  1.3726e-02, -2.5757e-02],
        [ 1.0591e-01, -9.6818e-02,  8.2133e-02],
        [ 1.0585e-01, -7.2480e-02,  6.1599e-02],
        [ 1.1871e-01,  5.9392e-02, -8.4516e-02],
        [ 1.5521e-01, -1.1363e-01,  1.5339e-01],
        [ 1.4409e-01,  1.0429e-01, -1.5716e-02],
        [-4.6786e-02, -6.4908e-02, -1.6942e-01],
        [ 1.5755e-01, -1.6552e-02, -6.9848e-02],
        [ 7.3128e-02, -5.7809e-02,  5.4720e-02],
        [ 4.4094e-02,  5.9673e-02, -1.5913e-01],
        [-1.0841e-01, -7.8345e-02,  1.5570e-01],
        [ 1.4922e-01,  6.3623e-02,  5.8399e-03],
        [-1.6598e-01,  5.2926e-02,  1.2287e-01],
        [-1.8529e-02,  2.0162e-02, -8.4741e-02],
        [-1.2558e-01,  2.5051e-03, -9.3588e-02],
        [ 1.0235e-02,  1.0102e-01, -1.8494e-01],
        [-9.0835e-02, -1.5346e-01, -8.7897e-02],
        [-1.5337e-01, -6.4200e-02,  1.1116e-01],
        [-2.7839e-02,  3.1174e-02,  8.4496e-02],
        [-2.6414e-02, -4.0979e-02, -3.1894e-02],
        [-1.5801e-01, -1.0995e-01, -1.0160e-01],
        [-4.3775e-02,  5.0930e-02, -7.0903e-03],
        [-7.1371e-03, -1.7061e-02,  7.0962e-02],
        [-9.3695e-03, -5.3025e-02, -1.5177e-01],
        [ 1.1909e-01,  1.3827e-01,  9.3611e-02],
        [ 1.1832e-01, -9.5019e-02,  1.6183e-01],
        [ 1.1966e-01, -1.3119e-01,  7.3062e-02],
        [ 5.2539e-02, -2.5530e-02, -8.0445e-02],
        [ 1.3996e-01,  1.7243e-01, -5.1724e-02],
        [ 1.6593e-01,  1.3301e-01,  1.6837e-01],
        [-1.0257e-01,  1.2035e-01,  1.0343e-01],
        [ 6.5677e-02, -2.1083e-02, -9.1232e-02],
        [ 1.0047e-01,  1.5937e-01, -8.1564e-02],
        [-4.9143e-02, -1.6245e-01, -3.8287e-02],
        [-5.5242e-02, -1.9725e-02,  2.5000e-02],
        [ 1.1221e-01, -6.6261e-02,  1.4350e-02],
        [-1.2937e-01, -1.7844e-02, -1.3924e-01],
        [ 1.7097e-01,  1.7705e-01,  2.3476e-02],
        [ 1.7583e-01,  6.8353e-03, -1.4494e-01],
        [-7.8273e-03, -2.0606e-02,  1.3507e-01],
        [ 8.9386e-02, -1.3634e-01,  1.0142e-01],
        [ 6.5554e-02, -1.0632e-01,  1.0804e-01],
        [ 2.8643e-02, -1.2711e-01, -8.4617e-02],
        [-6.4056e-02, -8.4616e-02, -2.1780e-02],
        [ 4.7142e-02,  1.6746e-01,  1.3989e-01],
        [-8.2250e-02,  5.2979e-02,  7.8315e-03],
        [-5.5729e-02, -1.2407e-02,  5.1942e-02],
        [-1.3606e-01,  8.4970e-02,  1.1937e-01]], device='cuda:0') torch.Size([128, 3])
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-0.0351, -0.0280, -0.0882,  ..., -0.0732,  0.0520,  0.0621],
        [-0.0161, -0.1482,  0.1465,  ..., -0.0401,  0.0477, -0.0641],
        [ 0.1011,  0.1088, -0.0790,  ...,  0.1610, -0.0256, -0.1132],
        ...,
        [-0.0558,  0.0298, -0.1557,  ..., -0.1012,  0.0503, -0.0751],
        [ 0.1059, -0.1018, -0.0411,  ..., -0.1043, -0.1001, -0.0165],
        [ 0.1485,  0.1106, -0.1469,  ...,  0.1204,  0.0910,  0.0246]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 0.1374, -0.1858,  0.0329,  0.0255,  0.1639, -0.1609,  0.0195, -0.0347,
         0.1285, -0.1238, -0.0098, -0.1704, -0.1431, -0.0888,  0.1337, -0.1752,
         0.1090,  0.0968, -0.1090, -0.1057,  0.1120,  0.0777,  0.1266,  0.0536,
         0.0434, -0.0483, -0.0119,  0.0944, -0.1472, -0.1776,  0.1050, -0.1386,
        -0.1438, -0.1565, -0.1243, -0.0236,  0.0162, -0.0177, -0.0325,  0.0976,
         0.0014,  0.1141, -0.0922,  0.0162,  0.0318,  0.0582,  0.0809,  0.0297,
        -0.0752, -0.0371, -0.0147,  0.0320,  0.0933,  0.0763, -0.1215, -0.0962,
         0.1499, -0.0091, -0.1152, -0.0822,  0.0315,  0.1246,  0.0060,  0.0170,
         0.1092, -0.0095, -0.0848, -0.0468,  0.1047,  0.0265,  0.1476,  0.1316,
         0.0143,  0.1213,  0.1051, -0.1011, -0.0451, -0.0321,  0.0234,  0.1383,
        -0.0851,  0.1268,  0.1708, -0.0705, -0.1404, -0.0721, -0.0748, -0.0709,
        -0.0256,  0.1467,  0.0292, -0.0276,  0.0611,  0.0153, -0.1854, -0.1527,
         0.1549, -0.0394,  0.0543, -0.0482, -0.1383,  0.0201,  0.1476, -0.1830,
         0.1839,  0.0505,  0.1367, -0.1045,  0.0380, -0.0410,  0.0993, -0.1394,
         0.1191,  0.0722, -0.1578, -0.0914, -0.0582, -0.0731, -0.0360,  0.0339,
        -0.0643, -0.0947, -0.0551,  0.0707, -0.0498,  0.0377,  0.1376,  0.0561],
       device='cuda:0') torch.Size([128])
recurrent_blocks.0.bias_hh_l0_reverse tensor([-0.1423,  0.0924,  0.0940,  0.0112,  0.0550,  0.0281,  0.0090,  0.0355,
        -0.0785, -0.0510,  0.1173,  0.1649,  0.1587, -0.0368, -0.0466,  0.1442,
         0.0677,  0.1409, -0.0287, -0.0638, -0.1720,  0.0100, -0.1664, -0.1314,
         0.0981,  0.0045,  0.0036, -0.0569,  0.0203, -0.1033, -0.0703,  0.1799,
        -0.0598, -0.0148,  0.0471,  0.1419, -0.0879,  0.0737, -0.1400, -0.0569,
        -0.0901, -0.0123,  0.0369, -0.0537,  0.1604, -0.0888, -0.1125, -0.0517,
        -0.0733,  0.0858,  0.0459, -0.1617, -0.1280,  0.1227, -0.1660, -0.1522,
        -0.1321, -0.0648, -0.0162,  0.1180, -0.1097,  0.0454,  0.0637,  0.1434,
         0.1101,  0.1591, -0.1369,  0.1374, -0.0744, -0.1395, -0.0050,  0.1574,
         0.1668,  0.1352,  0.0733, -0.0870,  0.0538,  0.0335,  0.1646,  0.0194,
        -0.1253,  0.0949, -0.1206,  0.0143, -0.0021,  0.1442, -0.0051,  0.0412,
        -0.0182,  0.1793,  0.0772, -0.0928, -0.0008,  0.0748,  0.0472, -0.1056,
        -0.0919, -0.0488, -0.0316,  0.1318, -0.0547,  0.0611,  0.0918,  0.0805,
         0.0384,  0.1547,  0.0983, -0.0868, -0.0534,  0.0836,  0.0548,  0.0729,
        -0.0673,  0.0381, -0.0609,  0.0551, -0.1466, -0.1325,  0.0475,  0.1644,
         0.0797, -0.0132, -0.0444,  0.0177, -0.0373,  0.0809,  0.0423, -0.0745],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0 tensor([[ 0.0489, -0.1218, -0.0348,  ...,  0.0456,  0.0413, -0.0799],
        [-0.0921, -0.1651, -0.1225,  ...,  0.0401,  0.0668, -0.1583],
        [ 0.1415,  0.0417, -0.1424,  ..., -0.1457, -0.0514,  0.0543],
        ...,
        [-0.0384, -0.0810, -0.0799,  ..., -0.0530, -0.0452, -0.1532],
        [-0.0799,  0.1176, -0.1368,  ...,  0.0822, -0.1096, -0.0915],
        [-0.0998,  0.1493, -0.0067,  ..., -0.0494, -0.1025, -0.1588]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0 tensor([[-0.0967,  0.0779,  0.1078,  ...,  0.1450,  0.0515, -0.0956],
        [ 0.1557,  0.0240, -0.0584,  ..., -0.0441,  0.0330, -0.0690],
        [-0.0631, -0.0019,  0.1254,  ..., -0.0126,  0.1601,  0.0571],
        ...,
        [ 0.0807,  0.0335, -0.0677,  ..., -0.0190,  0.0575, -0.0366],
        [ 0.1424,  0.1388, -0.1213,  ...,  0.0574,  0.0054, -0.0441],
        [ 0.0113, -0.0078,  0.1035,  ..., -0.1399,  0.0607, -0.1170]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0 tensor([-0.1568,  0.0614, -0.0875, -0.0796, -0.0305, -0.1477, -0.0856,  0.1237,
        -0.1482,  0.1577, -0.1679,  0.0638,  0.1131, -0.1697,  0.0484,  0.1315,
         0.0475,  0.1343,  0.0460,  0.0076, -0.0574, -0.0234, -0.1158,  0.0661,
         0.1256,  0.0810, -0.1591, -0.1755, -0.0132,  0.0037,  0.0482,  0.1810,
         0.1576, -0.0065,  0.1027, -0.1423, -0.1585, -0.1400, -0.1178,  0.0735,
        -0.0954,  0.1796,  0.0611,  0.0587, -0.0475,  0.1315, -0.1812,  0.0562,
        -0.0466, -0.1349,  0.0730,  0.0677, -0.1182,  0.1795,  0.0552, -0.1314,
        -0.1093,  0.0552,  0.1113, -0.1136,  0.0469, -0.0525,  0.0546,  0.0061,
        -0.1221,  0.1009, -0.1545,  0.0216, -0.0413, -0.0250,  0.0266,  0.0349,
        -0.0658, -0.0131, -0.0210,  0.1008, -0.1124,  0.0331, -0.1418,  0.0173,
         0.0529,  0.1612, -0.1229,  0.1477,  0.1607, -0.0193, -0.0444, -0.0927,
        -0.0614, -0.1095, -0.1659, -0.0171,  0.1810,  0.1349,  0.1020, -0.1834,
        -0.0633, -0.0482,  0.1106,  0.1264,  0.1492, -0.0932,  0.1194,  0.0944,
        -0.0500,  0.0336, -0.0100,  0.1041,  0.0128,  0.0679,  0.1485, -0.1343,
         0.1771, -0.1545, -0.1114, -0.0813, -0.1622,  0.0898, -0.0589, -0.0454,
        -0.0458,  0.1495,  0.1443,  0.1304,  0.0489, -0.1281, -0.0338, -0.1040],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0 tensor([-0.0796, -0.0308,  0.0508,  0.0541,  0.1668,  0.1357, -0.0968, -0.0303,
         0.0260,  0.1552,  0.0215, -0.0947, -0.0385, -0.0311,  0.1656, -0.0466,
         0.0254,  0.0653, -0.0810, -0.1650, -0.1307, -0.0345,  0.0718, -0.0276,
        -0.0573, -0.0244, -0.0925, -0.0812, -0.1542,  0.0229, -0.0757,  0.0766,
         0.0640,  0.0914, -0.1629,  0.1082, -0.0795,  0.1259,  0.1450, -0.0767,
         0.1640,  0.0095, -0.1263,  0.0304, -0.0488,  0.1363, -0.0186, -0.0726,
        -0.0908, -0.0383,  0.1143, -0.1401,  0.1634,  0.0552, -0.0701, -0.0456,
        -0.0244,  0.1765, -0.0822, -0.1827,  0.0277, -0.1198, -0.0714, -0.1615,
        -0.0779,  0.1076,  0.0371,  0.0344, -0.0958,  0.1150,  0.1624,  0.1343,
        -0.0250, -0.0483,  0.1167,  0.0811,  0.0744, -0.1011, -0.0383, -0.0754,
        -0.1676,  0.1364, -0.0552, -0.0781, -0.0124, -0.1799, -0.0962,  0.1475,
         0.0625,  0.0591, -0.0619,  0.1377, -0.0299,  0.1029, -0.0235,  0.1120,
        -0.0659,  0.1646,  0.0114,  0.0038,  0.0835, -0.0293, -0.0365, -0.0658,
         0.1691, -0.1584,  0.1254,  0.0838, -0.1342, -0.0887, -0.1577, -0.1181,
        -0.1216, -0.0664, -0.1817, -0.0557,  0.1503, -0.0270,  0.1169, -0.1679,
         0.0239, -0.0691, -0.1866, -0.0787,  0.1815, -0.1672, -0.1226, -0.0063],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 0.0007,  0.1354,  0.0765,  ...,  0.0312,  0.1615,  0.1537],
        [-0.0218, -0.0133, -0.0508,  ...,  0.0349,  0.0051, -0.0628],
        [-0.0133, -0.0350,  0.1021,  ...,  0.0694, -0.0520,  0.1326],
        ...,
        [-0.1742, -0.1200, -0.1005,  ..., -0.0600,  0.1309,  0.1215],
        [ 0.0203, -0.1208, -0.0042,  ..., -0.1002,  0.1174, -0.1037],
        [-0.1525, -0.1617, -0.0409,  ...,  0.1288,  0.1837,  0.0984]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.1.weight_hh_l0_reverse tensor([[ 0.0893, -0.1808,  0.0227,  ..., -0.1604,  0.1658, -0.0105],
        [ 0.1666,  0.1177,  0.0901,  ...,  0.0813, -0.0062, -0.0612],
        [ 0.1277, -0.0042,  0.0526,  ...,  0.1070, -0.1371,  0.0596],
        ...,
        [-0.1005,  0.0098,  0.1509,  ...,  0.1122, -0.1764,  0.1215],
        [ 0.1077,  0.0326, -0.1789,  ...,  0.0848,  0.1177,  0.0052],
        [-0.0819, -0.1561,  0.0734,  ..., -0.0386, -0.0845,  0.0162]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.1.bias_ih_l0_reverse tensor([ 0.0896,  0.1046,  0.1723,  0.1432, -0.1448, -0.0656,  0.1545,  0.1416,
         0.0701,  0.0935,  0.1070,  0.1671, -0.0575,  0.0960,  0.1400,  0.0148,
         0.1229,  0.0695, -0.1260,  0.0942,  0.0699, -0.0807, -0.0681, -0.0570,
         0.0314,  0.0398, -0.1645, -0.1467, -0.0030, -0.0427,  0.0364,  0.0592,
         0.0017, -0.1276, -0.1400, -0.1744,  0.0932,  0.0785, -0.0734,  0.0775,
         0.1511,  0.1481,  0.0431,  0.0726, -0.1050, -0.1421,  0.0141, -0.1788,
         0.1235, -0.0596,  0.1412, -0.0267,  0.1521,  0.1478,  0.1251, -0.1185,
        -0.0139, -0.1430,  0.0513,  0.1688, -0.0228, -0.1546,  0.1247,  0.1525,
        -0.0029,  0.1463,  0.0555,  0.0104, -0.0028, -0.1414, -0.0938,  0.1417,
         0.1608,  0.1707, -0.0984,  0.0333, -0.0491, -0.1215, -0.0090,  0.0919,
         0.1374, -0.0190, -0.1409, -0.1576,  0.0135,  0.0623, -0.0125,  0.1399,
        -0.1251,  0.1202, -0.0657,  0.1235, -0.0982,  0.1105,  0.0378,  0.0533,
        -0.1656, -0.1009, -0.1528,  0.1192,  0.0969,  0.1248,  0.0690, -0.0647,
        -0.0434, -0.0179, -0.1286,  0.1463,  0.0363, -0.0282,  0.0580, -0.1644,
         0.0176,  0.1034, -0.0748, -0.1775, -0.1303,  0.0623, -0.1688, -0.1552,
        -0.1560,  0.1266, -0.1396, -0.1153,  0.1600,  0.0658, -0.0817, -0.1142],
       device='cuda:0') torch.Size([128])
recurrent_blocks.1.bias_hh_l0_reverse tensor([ 0.0446, -0.0655, -0.1351,  0.0110, -0.1664,  0.1358,  0.1184, -0.0446,
        -0.0785, -0.0105,  0.0298,  0.0452, -0.0008, -0.1089,  0.1123,  0.0172,
        -0.1604, -0.0705, -0.1030, -0.1732, -0.0779, -0.1366, -0.0667,  0.0972,
         0.0287,  0.1011, -0.0258, -0.0445, -0.0393, -0.0410, -0.1772, -0.1250,
        -0.1452, -0.1275, -0.0751, -0.0406,  0.0715, -0.1494, -0.1819, -0.0916,
        -0.1444,  0.0864,  0.1036,  0.0448, -0.0723, -0.0801,  0.1348, -0.0812,
        -0.0589,  0.1228, -0.1831, -0.0307, -0.1018, -0.0893, -0.0398, -0.0699,
         0.1149, -0.1538,  0.0495, -0.0773, -0.0942, -0.1132,  0.0689, -0.0123,
        -0.0218, -0.0280,  0.1515,  0.0109, -0.0493, -0.1863, -0.0509, -0.0324,
         0.0457, -0.1330,  0.1146,  0.1158, -0.0799, -0.1075, -0.0979,  0.0442,
        -0.0744,  0.1173, -0.1044,  0.1049, -0.0508,  0.1372,  0.0698, -0.0662,
        -0.0610, -0.0897, -0.0687,  0.0996, -0.1476,  0.1147, -0.1460, -0.1608,
         0.0349,  0.1508,  0.0782, -0.0854, -0.1057, -0.1465, -0.1266,  0.0659,
         0.0337,  0.1761, -0.1094, -0.0223,  0.0008,  0.1015,  0.1277, -0.0980,
         0.1625,  0.1428,  0.1098,  0.0400,  0.1300, -0.0054,  0.0079, -0.1637,
        -0.1529,  0.1198, -0.1538,  0.1681,  0.0167,  0.0171,  0.0071, -0.1707],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0 tensor([[ 0.1354, -0.0264, -0.0583,  ...,  0.0925,  0.0010,  0.0996],
        [ 0.0957,  0.1613,  0.1120,  ..., -0.1386, -0.1247,  0.1787],
        [ 0.0585, -0.0094,  0.0790,  ..., -0.0343, -0.0533, -0.0634],
        ...,
        [ 0.0810, -0.1556,  0.0746,  ..., -0.0109, -0.0085, -0.0312],
        [ 0.1421, -0.1614, -0.1442,  ..., -0.1837, -0.0369, -0.1571],
        [ 0.0204,  0.0388,  0.0591,  ..., -0.0275, -0.1524, -0.0215]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0 tensor([[ 0.0730, -0.1668,  0.1195,  ..., -0.0171, -0.0944, -0.1255],
        [ 0.0508,  0.0921, -0.1060,  ...,  0.0072,  0.0120,  0.1010],
        [ 0.1543,  0.0102,  0.1547,  ...,  0.0088, -0.0506, -0.0033],
        ...,
        [ 0.0874, -0.0798, -0.1002,  ..., -0.0242, -0.1371, -0.0471],
        [ 0.0422,  0.0671,  0.0041,  ..., -0.1792,  0.0200,  0.0190],
        [-0.0767,  0.0460,  0.0350,  ..., -0.0697,  0.0618, -0.1448]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0 tensor([ 0.1252, -0.0524,  0.1231,  0.1660,  0.1561,  0.0938, -0.0139, -0.1316,
         0.1346,  0.1858, -0.0048,  0.1849,  0.0947,  0.0816,  0.0831, -0.0700,
         0.1166,  0.0652,  0.0094, -0.1617, -0.0984, -0.1160,  0.1527, -0.0161,
         0.1835, -0.1408, -0.0835, -0.1809,  0.0144, -0.1671,  0.0465,  0.0620,
        -0.0136, -0.1651,  0.1547, -0.1317,  0.0977, -0.0502, -0.0368,  0.1535,
         0.1174,  0.1509,  0.1020,  0.0071,  0.0042,  0.1630, -0.0778,  0.1457,
         0.0798,  0.0590,  0.0561,  0.1768,  0.0563, -0.0763, -0.1835, -0.0535,
        -0.0544, -0.1708,  0.1001,  0.0047,  0.0196, -0.1079,  0.0948, -0.0109,
         0.1086,  0.1289, -0.1858, -0.1032, -0.0076,  0.1407, -0.1731,  0.0827,
         0.0747,  0.0183, -0.0961, -0.1433,  0.0500,  0.1561,  0.1199, -0.1183,
        -0.1596, -0.0193, -0.0458, -0.1794, -0.0809, -0.1740,  0.1612, -0.0274,
         0.1533, -0.0328,  0.0078, -0.0092,  0.1103, -0.0900, -0.0846, -0.1408,
        -0.1595, -0.0477,  0.0755, -0.1569, -0.0811,  0.0793, -0.1624, -0.0743,
         0.1180,  0.1561, -0.1446,  0.0384,  0.0607, -0.1352,  0.0742, -0.1406,
         0.1390,  0.1435, -0.0740, -0.1469,  0.1836,  0.0638, -0.0297,  0.0798,
        -0.1399, -0.0377,  0.0344, -0.1582,  0.0383, -0.1052, -0.1036,  0.1233],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0 tensor([ 0.0973,  0.0154,  0.0257, -0.0251, -0.0350, -0.0146, -0.0783,  0.0056,
        -0.0380,  0.0768,  0.1840,  0.0658,  0.0706, -0.0783,  0.1667, -0.0276,
        -0.0743, -0.1596, -0.0155, -0.1294, -0.1532,  0.0450, -0.1254, -0.0684,
         0.1563,  0.0242, -0.1371, -0.1220, -0.1217, -0.0056, -0.0374,  0.1362,
         0.0154, -0.0308,  0.0655, -0.1509,  0.0436, -0.0082, -0.1248,  0.0970,
         0.1035, -0.1658,  0.0729,  0.1719,  0.1301,  0.0289, -0.1007,  0.0942,
         0.0599, -0.1223,  0.1280, -0.0559,  0.1781,  0.0409, -0.0110, -0.0545,
         0.1360, -0.0294, -0.0996,  0.1418,  0.0172,  0.0444,  0.0252, -0.1600,
        -0.0497, -0.0837,  0.0167,  0.0640,  0.1570, -0.0535,  0.0068,  0.0041,
        -0.0298, -0.1459,  0.0538, -0.0600, -0.0324, -0.0301,  0.0506, -0.1717,
         0.0231,  0.0111,  0.0564, -0.1045,  0.1738, -0.1050, -0.1244,  0.1053,
         0.1477,  0.0678, -0.0728,  0.0852, -0.1093,  0.1192, -0.0653, -0.0010,
         0.0640, -0.0213, -0.0275, -0.1139, -0.1001,  0.1111,  0.1014,  0.0331,
         0.0840, -0.1323, -0.0044, -0.0537,  0.1427,  0.0195, -0.0624,  0.1657,
         0.0084,  0.0672, -0.1855,  0.1799,  0.1713,  0.1586, -0.0102, -0.0792,
        -0.0403, -0.1822,  0.0389, -0.0548, -0.0243, -0.1009, -0.1106,  0.0698],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.weight_ih_l0_reverse tensor([[ 0.1577, -0.0430,  0.1609,  ..., -0.0892,  0.1139,  0.0434],
        [ 0.1156, -0.0731,  0.0045,  ..., -0.1173, -0.0430,  0.1339],
        [ 0.1370, -0.1308,  0.1192,  ..., -0.1027,  0.1211,  0.0779],
        ...,
        [-0.0462, -0.1179, -0.0556,  ...,  0.0266, -0.0365, -0.0860],
        [-0.0953, -0.1547,  0.0938,  ..., -0.0500,  0.1500, -0.1474],
        [ 0.1220, -0.0881,  0.1001,  ..., -0.0903,  0.1669, -0.0589]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-0.0597, -0.0406,  0.0915,  ..., -0.1364,  0.1860, -0.0908],
        [-0.1385, -0.0392,  0.0999,  ...,  0.1778, -0.0804, -0.1529],
        [ 0.1625, -0.0718,  0.0598,  ..., -0.1402,  0.0667, -0.0322],
        ...,
        [ 0.0374, -0.0763, -0.1567,  ..., -0.1240,  0.1256, -0.0318],
        [ 0.1073, -0.0344, -0.0997,  ...,  0.1076, -0.1317,  0.1401],
        [-0.1173, -0.0879, -0.0135,  ...,  0.1673,  0.1293, -0.0796]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.2.bias_ih_l0_reverse tensor([-0.0805, -0.1575, -0.1626,  0.0350, -0.0152,  0.1639,  0.0827, -0.0234,
        -0.1865,  0.0641, -0.1440,  0.1292,  0.0964,  0.0961, -0.1291, -0.1644,
         0.1722,  0.0957, -0.1084,  0.0911, -0.0542, -0.1433,  0.0014, -0.1630,
        -0.0494,  0.0034, -0.0648, -0.1463, -0.1609,  0.0458, -0.0593, -0.0842,
        -0.0117,  0.0164, -0.1565,  0.1755, -0.1224,  0.0884,  0.0571,  0.1072,
        -0.0280,  0.1135, -0.1388, -0.1091,  0.0782,  0.1121,  0.1055, -0.1294,
         0.0069, -0.0741, -0.0984, -0.1238, -0.0317, -0.0546, -0.1479,  0.0682,
        -0.0290, -0.1591,  0.1346,  0.1181, -0.1294,  0.1521, -0.0299,  0.0546,
        -0.0421,  0.0500, -0.1210, -0.0349,  0.0221,  0.1561,  0.0559, -0.0485,
        -0.0797, -0.0497,  0.0924, -0.1112, -0.0618,  0.0632,  0.1169, -0.0426,
        -0.0736,  0.1015, -0.0681, -0.1265,  0.1114, -0.0452,  0.1677,  0.1071,
        -0.1168,  0.0153, -0.1199,  0.1230,  0.0613, -0.0336, -0.0570,  0.0919,
         0.0291, -0.0532, -0.0802,  0.0682, -0.1648, -0.0075, -0.0471, -0.1124,
         0.0818,  0.0085, -0.1583, -0.1399, -0.1352, -0.1784,  0.1136,  0.1128,
        -0.1599, -0.1688, -0.1393,  0.0843,  0.0193, -0.0706,  0.0174, -0.0958,
         0.0734, -0.1288,  0.0193, -0.0585,  0.1616,  0.1042, -0.0779, -0.1212],
       device='cuda:0') torch.Size([128])
recurrent_blocks.2.bias_hh_l0_reverse tensor([-0.0877, -0.0638, -0.0280,  0.0967, -0.0311,  0.0973, -0.1372,  0.0232,
         0.0495, -0.0248,  0.0475,  0.0565,  0.1372, -0.1450,  0.0581,  0.0282,
         0.1442, -0.1018, -0.0349, -0.1663, -0.0147,  0.0232,  0.1799, -0.0599,
        -0.0382,  0.0559, -0.0096,  0.1854,  0.0818,  0.0843, -0.0677, -0.1488,
         0.0100,  0.1077,  0.0998, -0.0220,  0.0647, -0.1655,  0.0023,  0.0933,
         0.0800, -0.0928,  0.0757,  0.0945,  0.0835, -0.0769,  0.0152, -0.0948,
        -0.0240, -0.0573,  0.1532, -0.0982, -0.1141, -0.0883, -0.0320, -0.1522,
         0.0288, -0.0229,  0.1138, -0.0188, -0.1131, -0.0333, -0.0527,  0.1411,
        -0.0082,  0.0243,  0.0644, -0.1734,  0.0492, -0.0066,  0.0739,  0.0074,
         0.0824,  0.1549,  0.1448, -0.0709,  0.1788,  0.0858,  0.0974,  0.0109,
        -0.1336,  0.0797,  0.1696,  0.1056,  0.1856, -0.0287,  0.0918, -0.0660,
        -0.1080,  0.0677, -0.0850, -0.0363, -0.1422,  0.1437, -0.1282,  0.0897,
        -0.1126,  0.0025,  0.0629, -0.0102, -0.1263, -0.0526,  0.0780,  0.0623,
        -0.1050, -0.1582, -0.1010,  0.1272, -0.0317,  0.0531, -0.0307,  0.1012,
        -0.1416,  0.0100, -0.1000, -0.0326,  0.0563,  0.0178,  0.1051,  0.1088,
         0.1857, -0.0996, -0.1658,  0.0975,  0.0986, -0.0945,  0.0301, -0.1798],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0 tensor([[-0.0418, -0.0005,  0.0713,  ...,  0.1648,  0.0761, -0.1641],
        [-0.0924,  0.1653, -0.1817,  ..., -0.1179, -0.1682,  0.0242],
        [-0.1217,  0.0879, -0.1417,  ..., -0.0361, -0.0154,  0.0010],
        ...,
        [ 0.1574, -0.0293,  0.0975,  ...,  0.1056,  0.0247, -0.1008],
        [ 0.0309,  0.1525, -0.1135,  ..., -0.1417,  0.1764, -0.0815],
        [ 0.1105,  0.1171,  0.0369,  ...,  0.0548, -0.1094, -0.0184]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0 tensor([[-0.0489,  0.0787,  0.0621,  ..., -0.0225, -0.1130,  0.0548],
        [-0.0783, -0.1251, -0.0993,  ..., -0.0657, -0.0567,  0.1578],
        [-0.1549,  0.0984,  0.0640,  ...,  0.0403, -0.0275, -0.0056],
        ...,
        [ 0.0938, -0.0877, -0.1183,  ..., -0.1169, -0.1473, -0.1252],
        [-0.1843, -0.0861,  0.0891,  ...,  0.1625, -0.0278, -0.1791],
        [-0.0282,  0.0068,  0.1604,  ...,  0.1711,  0.0616, -0.1047]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0 tensor([-0.0658,  0.1277, -0.1353,  0.0853, -0.0182, -0.1626,  0.0273,  0.0710,
        -0.1032,  0.0288,  0.0924, -0.0541,  0.0768,  0.0111,  0.0052,  0.1163,
         0.0268, -0.0952,  0.0323,  0.0663,  0.0894, -0.0662, -0.0225,  0.1507,
        -0.0438,  0.1465, -0.0382,  0.1502,  0.0652, -0.1438,  0.0254,  0.0751,
         0.0232,  0.0229,  0.0344, -0.1231,  0.0748, -0.1445,  0.1397,  0.1408,
         0.1332,  0.1763,  0.1225,  0.0807, -0.1401, -0.1846,  0.1204,  0.0241,
         0.1383, -0.0253, -0.1477,  0.0801,  0.0296, -0.1142, -0.0314, -0.1624,
        -0.0341,  0.1543, -0.0727, -0.1552, -0.0633, -0.1462, -0.1231, -0.1265,
         0.0324, -0.1773,  0.1066,  0.1830, -0.1548,  0.1157, -0.0867, -0.1294,
        -0.0919, -0.1778,  0.1239, -0.0674, -0.1429,  0.1233,  0.0916,  0.1647,
        -0.1245, -0.0803,  0.0185, -0.1601, -0.1395, -0.1824,  0.1722, -0.1280,
         0.1472,  0.0316, -0.1510,  0.0889, -0.1416,  0.0544, -0.0462,  0.0648,
         0.1566,  0.1832,  0.0889,  0.0816,  0.1815, -0.1587,  0.1213, -0.0516,
        -0.0898, -0.1518, -0.1498, -0.0776, -0.0542, -0.1387,  0.0969, -0.0377,
         0.0202,  0.1075, -0.1856, -0.1101, -0.0218,  0.1277, -0.1538,  0.1220,
         0.1804,  0.1566,  0.0205,  0.0923, -0.1748, -0.0758, -0.0540,  0.1205],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0 tensor([ 0.0409,  0.1601, -0.1380,  0.0521, -0.0276, -0.1860, -0.1248, -0.0809,
        -0.1385,  0.0062, -0.1591,  0.1250, -0.1080,  0.0694,  0.0269,  0.1571,
         0.0221, -0.1809, -0.0042,  0.1861, -0.1523, -0.0252,  0.0253, -0.0461,
         0.0637, -0.0068, -0.0967, -0.0296,  0.0294, -0.1285, -0.1114,  0.0978,
         0.1579,  0.0996,  0.0212, -0.1242,  0.1400,  0.1522,  0.1549, -0.1329,
         0.0754,  0.1594,  0.1615, -0.0171,  0.0574, -0.0244, -0.1002,  0.1269,
        -0.0600,  0.0845,  0.1501, -0.0942,  0.0436, -0.1371, -0.1195,  0.0497,
         0.1382, -0.0153,  0.0347,  0.1829, -0.0105, -0.0248, -0.0770, -0.0515,
         0.1655, -0.0717, -0.0885,  0.1054, -0.1753, -0.0450,  0.1303,  0.0023,
         0.1098,  0.0412, -0.1229, -0.0882,  0.0913, -0.0922, -0.1265,  0.0103,
         0.1037,  0.1660, -0.1046,  0.1363,  0.0117,  0.0466,  0.1425, -0.1464,
        -0.0676,  0.1625,  0.1373, -0.1719, -0.1658,  0.0445, -0.0683, -0.0122,
        -0.1798, -0.1296,  0.0402, -0.0790, -0.1472, -0.1729, -0.0967, -0.0502,
        -0.0844,  0.1367, -0.1464, -0.0603, -0.0019,  0.0488,  0.0473,  0.0951,
         0.0300, -0.0210, -0.1567,  0.0282, -0.1391,  0.0610,  0.1757,  0.0959,
        -0.1058,  0.0820, -0.0770,  0.0943,  0.0490,  0.1037, -0.0628,  0.0805],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.weight_ih_l0_reverse tensor([[-0.0272,  0.0044,  0.0502,  ..., -0.0830, -0.1196,  0.1273],
        [ 0.0377,  0.0432, -0.0808,  ..., -0.1439,  0.0088, -0.0541],
        [ 0.0116,  0.0658, -0.0349,  ..., -0.1351, -0.1093, -0.1652],
        ...,
        [ 0.0069,  0.0600,  0.0067,  ..., -0.0886, -0.0543, -0.0872],
        [-0.0357,  0.0332, -0.1083,  ...,  0.0358, -0.0349,  0.1144],
        [-0.1196, -0.1296,  0.0944,  ...,  0.1145, -0.1053, -0.0921]],
       device='cuda:0') torch.Size([128, 64])
recurrent_blocks.3.weight_hh_l0_reverse tensor([[ 0.0507,  0.0185, -0.1321,  ...,  0.0789,  0.1142, -0.0984],
        [-0.0536,  0.0871, -0.1360,  ..., -0.0139,  0.1667,  0.0422],
        [-0.0143,  0.0485,  0.0666,  ..., -0.0279,  0.0866,  0.0770],
        ...,
        [-0.0088,  0.1642, -0.1071,  ...,  0.0294,  0.1406,  0.1459],
        [ 0.0134, -0.1013,  0.1533,  ..., -0.0407, -0.0054,  0.1320],
        [-0.0382, -0.0283,  0.1299,  ...,  0.0034,  0.0272,  0.0560]],
       device='cuda:0') torch.Size([128, 32])
recurrent_blocks.3.bias_ih_l0_reverse tensor([-0.0049, -0.0362,  0.1573,  0.0549,  0.1707, -0.0011,  0.1467,  0.0883,
         0.0763, -0.1483,  0.1790, -0.0751,  0.0430,  0.0193,  0.1196,  0.0560,
        -0.1346, -0.0077,  0.0245,  0.0835, -0.0049,  0.1803,  0.1536,  0.0036,
         0.1467, -0.1529,  0.1298, -0.0749, -0.0130, -0.1570,  0.0484,  0.1273,
         0.0917, -0.1343,  0.0645, -0.0974,  0.0310,  0.0666, -0.1485, -0.1800,
         0.0745,  0.1634, -0.1597, -0.0832, -0.1491, -0.0206,  0.1642,  0.1481,
        -0.0922,  0.1228,  0.1741,  0.1630,  0.0072,  0.1090,  0.0265, -0.0910,
        -0.0600, -0.1703,  0.0773,  0.0325, -0.1477,  0.1246, -0.1652, -0.1665,
        -0.1546, -0.0687,  0.0995,  0.1543,  0.0139, -0.1428, -0.0267,  0.1100,
        -0.0941,  0.1353,  0.0989, -0.1639,  0.0598, -0.0887,  0.1633,  0.0041,
         0.1503,  0.1566,  0.0914,  0.0687,  0.1329, -0.1606,  0.1321,  0.0805,
        -0.1547,  0.0582, -0.0730, -0.0859,  0.0755, -0.1628,  0.0597, -0.0106,
         0.1526,  0.0238, -0.1501,  0.1134,  0.0608,  0.0482, -0.0843,  0.0792,
         0.1159, -0.1706,  0.0405, -0.0879, -0.1112,  0.1199, -0.0332,  0.1502,
         0.0158, -0.0171,  0.1174, -0.1562,  0.1171,  0.0968, -0.1452,  0.1820,
        -0.1813, -0.1750, -0.1380, -0.0623, -0.0429, -0.1588, -0.0465,  0.0481],
       device='cuda:0') torch.Size([128])
recurrent_blocks.3.bias_hh_l0_reverse tensor([-0.1738, -0.0664,  0.0770, -0.0726,  0.1256,  0.0335, -0.0818,  0.0104,
        -0.1852,  0.0861, -0.1035, -0.1771,  0.0890,  0.1459, -0.1805, -0.1116,
        -0.0064, -0.1398, -0.1213,  0.1225,  0.1236, -0.1026,  0.0178, -0.0378,
        -0.0593, -0.1028, -0.0313,  0.1482,  0.0372, -0.0262,  0.1610,  0.0035,
         0.0338,  0.0612,  0.1251, -0.1772,  0.1249,  0.1163,  0.1073,  0.1363,
        -0.1143,  0.0181, -0.1225, -0.0113, -0.1391,  0.0348, -0.0039,  0.0567,
        -0.1596, -0.0800, -0.0773,  0.0448, -0.1699, -0.1474,  0.0653,  0.1389,
        -0.1679, -0.0209,  0.1077,  0.0686,  0.0376,  0.1195,  0.1547,  0.0321,
        -0.0062,  0.1151, -0.0118, -0.0498,  0.0535,  0.0002,  0.1817, -0.0078,
         0.0707, -0.1484,  0.1847, -0.1291, -0.0710,  0.0453, -0.1471,  0.1697,
        -0.1257, -0.1600, -0.0676, -0.0923, -0.1403, -0.0921, -0.1191,  0.0588,
        -0.0759, -0.0370,  0.1062, -0.0516,  0.0128,  0.0198,  0.0751,  0.0376,
         0.0014,  0.0018, -0.0255,  0.1541, -0.0092, -0.0503,  0.0338,  0.0395,
         0.0354, -0.1371,  0.0603,  0.1108, -0.0527,  0.1333, -0.0277,  0.0017,
         0.1642, -0.0803,  0.0203,  0.1110,  0.0629,  0.0847,  0.0325,  0.1572,
         0.0866,  0.0628, -0.0422, -0.0524, -0.1054,  0.0259,  0.0659,  0.0489],
       device='cuda:0') torch.Size([128])
fc_blocks.0.0.weight tensor([[ 0.0280, -0.0005, -0.0353,  ..., -0.0258, -0.0203, -0.1170],
        [-0.0078, -0.1214,  0.0427,  ...,  0.0217,  0.1083,  0.0614],
        [-0.0470, -0.1048,  0.0658,  ..., -0.1084, -0.0224,  0.0919],
        ...,
        [ 0.0653,  0.0414,  0.0557,  ..., -0.1150, -0.0897, -0.0856],
        [ 0.0984,  0.0887,  0.1296,  ...,  0.0726, -0.0588,  0.0262],
        [ 0.0741, -0.0650,  0.0822,  ..., -0.1110, -0.1098,  0.0594]],
       device='cuda:0') torch.Size([32, 64])
fc_blocks.0.0.bias tensor([ 0.0380, -0.0875,  0.0896, -0.1069,  0.0902, -0.0139,  0.0239,  0.0664,
         0.0752, -0.0649,  0.0560,  0.1088, -0.0877,  0.0661,  0.0603, -0.0878,
         0.1309, -0.1101, -0.0221, -0.0045,  0.0167,  0.1217,  0.1051,  0.1122,
        -0.0753,  0.0858, -0.1120,  0.0101, -0.0563, -0.0951,  0.0554,  0.0790],
       device='cuda:0') torch.Size([32])
fc_blocks.1.0.weight tensor([[-7.6250e-02,  7.1381e-02,  4.1790e-02, -5.3729e-02, -1.0373e-01,
         -9.6339e-02,  9.1456e-02,  7.4626e-02,  1.2999e-01, -1.2698e-01,
         -1.7768e-01, -6.8841e-02,  6.2072e-02,  8.3994e-02,  3.6915e-03,
          6.8447e-03,  7.5685e-02, -5.9903e-03, -6.8296e-02,  1.2313e-01,
         -1.3248e-01, -6.1360e-02,  9.2526e-02,  2.2354e-02, -5.0133e-02,
         -4.1686e-02, -2.0685e-02,  9.1687e-02, -1.0487e-01, -1.6201e-01,
         -1.8364e-02, -6.3804e-02],
        [-8.9217e-02, -1.9396e-02,  6.5680e-02,  9.5536e-03,  1.3779e-01,
          1.7452e-01, -2.2721e-02,  1.8643e-01, -1.2935e-01, -1.2105e-02,
         -5.9791e-02, -1.1075e-01, -5.4136e-02,  6.3883e-02, -1.6522e-02,
         -9.0454e-02, -7.5031e-03, -6.1732e-02, -3.7186e-02,  1.4863e-01,
         -1.1296e-01,  2.9868e-02,  6.7199e-02, -1.3479e-01, -5.0977e-02,
          1.7404e-01, -1.1841e-01,  1.4582e-01,  7.4879e-03, -9.0172e-02,
          1.5895e-01,  6.2023e-02],
        [-9.6049e-02,  1.1770e-01,  6.7180e-02,  9.6415e-02,  5.1385e-02,
         -9.6407e-02, -2.6076e-02, -4.7625e-02,  1.4081e-02, -6.1739e-03,
          1.0574e-01, -9.5657e-03, -1.3778e-01,  6.2638e-02, -1.0675e-01,
          7.6355e-02,  1.5372e-01, -9.3653e-02,  4.4863e-02, -1.2466e-01,
         -1.1058e-01, -1.5402e-01,  2.1563e-03,  1.2881e-01,  1.8197e-02,
          1.0288e-01, -1.5196e-01, -2.5276e-02, -4.3089e-02, -1.5192e-01,
          1.3815e-01,  7.0988e-02],
        [ 7.9191e-02,  6.0866e-02,  1.7745e-01,  1.8101e-01,  5.7356e-03,
          2.4403e-02,  9.7047e-02, -5.6240e-02, -3.9637e-02, -1.3694e-01,
         -1.1802e-01, -4.1841e-02, -2.9935e-03,  1.5213e-01, -5.0793e-02,
         -3.2528e-02, -5.6547e-02, -1.2864e-02,  1.8255e-01, -7.8685e-02,
          1.3345e-01, -1.4592e-01, -1.1656e-01, -1.5159e-01, -1.6001e-01,
         -1.4638e-01,  4.7704e-02,  1.4208e-01,  2.5173e-02, -1.6423e-01,
         -5.7808e-02,  3.3474e-02],
        [-3.8635e-02, -7.9091e-03,  6.9638e-02, -1.6630e-01,  1.5473e-01,
          8.3865e-03,  1.1985e-01,  6.5371e-02,  2.0420e-02, -7.7252e-02,
          1.0409e-01, -1.3283e-01, -1.3733e-01, -8.0544e-02, -1.5914e-01,
         -4.4381e-03,  7.8853e-02, -7.3482e-02,  1.1388e-01, -8.0702e-02,
          7.3044e-03,  1.7105e-01,  9.9982e-02,  1.7490e-02,  9.2206e-02,
          1.4717e-01, -4.9018e-02, -2.8764e-02, -1.0343e-01,  1.4109e-01,
          5.8529e-02, -8.4025e-02],
        [-8.8581e-02,  9.2652e-02, -1.0551e-01, -7.9722e-02,  3.3155e-02,
         -1.6527e-01,  1.0993e-01,  1.1415e-01,  1.4027e-01, -1.5582e-01,
         -1.7665e-01,  1.0083e-01, -1.3078e-01,  2.8184e-02, -1.8006e-01,
         -2.8832e-02,  1.8925e-02, -1.0171e-01,  9.0128e-02,  7.8903e-02,
          1.3580e-02,  1.0818e-01, -1.3790e-01, -9.3596e-02,  1.1218e-01,
         -1.2920e-02, -6.0500e-02,  4.8138e-02, -5.0189e-02,  6.7951e-02,
         -1.5385e-01, -1.7783e-01],
        [-1.4762e-01,  1.1571e-01,  1.0076e-02,  5.0429e-02, -1.0735e-01,
          1.6163e-01, -9.2268e-02,  9.9235e-02, -1.6381e-01, -1.1229e-01,
         -1.6072e-01, -6.0598e-02,  1.7398e-02,  1.5432e-01,  1.3406e-02,
          1.4811e-01,  1.4674e-02,  1.4462e-01, -6.1380e-02,  1.2688e-01,
          1.9493e-02, -2.2648e-02, -2.7944e-02, -3.1905e-02, -1.0033e-02,
          5.1353e-02,  8.9142e-02,  5.2909e-02, -4.8252e-02, -4.9735e-02,
          3.0292e-02,  1.7342e-01],
        [ 8.5712e-02, -7.8708e-02, -1.1402e-01, -4.0335e-02,  8.5725e-02,
          1.2168e-01,  8.2394e-02,  8.9726e-02, -1.2303e-02,  4.9645e-02,
         -5.6528e-02,  8.6522e-03, -1.8285e-01,  3.4267e-02, -1.6448e-01,
          6.0573e-02,  3.4229e-03,  1.6309e-01,  1.2960e-01, -1.1539e-01,
          1.0599e-01, -9.0972e-03,  1.5953e-01, -1.5877e-01,  7.3847e-02,
         -4.3152e-03,  1.6393e-01,  4.3834e-03, -6.8257e-02, -1.4729e-01,
          7.9657e-02,  1.5210e-01],
        [ 7.3788e-03,  8.6082e-03, -8.6676e-02,  1.0210e-01,  1.1370e-01,
          1.0981e-01, -1.1882e-01, -1.6398e-01, -7.2123e-02,  3.8866e-02,
          9.2299e-02, -1.5651e-01,  3.7164e-02, -1.8053e-01,  1.5188e-01,
         -8.7255e-02, -5.6112e-02, -4.4606e-02, -1.3011e-01, -8.3033e-02,
         -1.0506e-01, -8.1859e-02,  1.5881e-01, -1.2235e-02, -2.4768e-02,
         -3.6362e-03, -6.1526e-02, -7.4810e-02,  1.1556e-01,  6.2415e-02,
          9.0857e-02,  7.6520e-02],
        [ 2.4184e-02, -7.8228e-02,  1.6457e-01, -1.0141e-01, -3.4708e-02,
          8.2634e-02, -1.4228e-01,  2.8519e-02, -8.7441e-02, -1.5204e-01,
         -7.6277e-02,  5.6605e-02, -2.1655e-02,  4.0367e-02,  1.2415e-01,
          9.0788e-02, -1.4773e-01,  7.0141e-02,  1.3891e-01,  1.3162e-01,
         -1.5190e-01, -1.5612e-01,  1.5256e-01, -1.6378e-01, -1.2406e-01,
          1.0680e-01, -1.7461e-01,  8.4674e-02, -6.5783e-02,  3.4190e-02,
          5.8041e-02,  8.9698e-03],
        [ 7.3898e-02, -1.4173e-01,  1.1121e-01, -1.4729e-01,  2.8735e-02,
          1.6075e-01, -8.3033e-03, -8.5573e-02, -3.9973e-02,  4.8388e-03,
         -4.7658e-02,  1.5800e-01, -3.6458e-03, -1.0154e-01, -1.7431e-01,
         -1.0033e-01,  1.4491e-01,  4.3255e-02,  4.9281e-02,  3.8242e-02,
         -3.5099e-02,  4.9549e-02,  5.9161e-02,  1.4055e-01, -5.3893e-02,
          4.1720e-02, -1.1389e-02,  1.1659e-01, -5.2793e-02,  2.5705e-02,
          7.6111e-02, -1.6766e-01],
        [ 7.3377e-02, -1.3629e-01,  6.5991e-02,  1.1877e-01,  3.6897e-02,
          1.4979e-01,  1.6678e-01,  7.6373e-02,  2.1627e-02,  7.7883e-02,
         -2.0249e-02,  1.7192e-01, -1.1200e-01, -1.8828e-02,  7.3979e-02,
         -4.6716e-02,  1.3326e-01,  8.6281e-02,  1.8515e-01, -8.5035e-02,
         -2.6306e-02, -4.2771e-02,  3.7396e-02,  1.0643e-01, -2.1316e-02,
         -3.8270e-02,  1.5490e-01, -4.8315e-02,  1.3254e-01, -1.0186e-01,
         -1.0365e-01,  1.3980e-01],
        [-8.3530e-02,  9.7541e-02, -1.7922e-02, -7.9212e-02, -9.8224e-02,
          1.3612e-02,  1.4572e-01, -6.5400e-02, -1.3471e-01, -6.8600e-02,
         -7.9658e-02, -1.4803e-01, -7.0866e-02,  8.1355e-02,  1.4615e-01,
         -3.0679e-03,  2.1062e-02,  7.6201e-02, -6.5241e-02, -4.6362e-02,
         -1.0534e-01, -7.2670e-02, -7.9243e-02, -1.3909e-01,  4.9466e-02,
          7.5803e-02, -1.4881e-01,  1.3910e-01, -1.7341e-01,  2.0904e-02,
          9.1805e-02, -4.3420e-02],
        [-1.1430e-01, -5.9338e-02, -1.4530e-01,  1.8615e-01, -1.2385e-01,
          1.6951e-01, -8.0095e-03,  4.5980e-02, -1.3868e-01, -3.1707e-04,
          1.0632e-01,  6.6824e-02, -9.4176e-02,  5.5805e-02,  1.4766e-01,
         -9.3187e-02, -1.3203e-01,  1.1206e-01,  1.4322e-01,  1.8024e-04,
         -4.4460e-02,  4.5737e-02, -4.0009e-02, -9.4458e-02, -9.1307e-02,
          1.8156e-01, -1.4936e-01, -6.5925e-02, -1.1142e-01, -1.3941e-01,
         -6.3916e-02, -2.2412e-02],
        [-1.8054e-01, -1.7996e-02,  1.3521e-02, -1.5321e-01,  1.5265e-01,
          1.9383e-02,  6.8644e-02,  5.6970e-02, -1.5787e-02, -6.6406e-02,
          8.4283e-02,  1.3405e-01, -1.0128e-01, -1.4569e-01,  1.1481e-03,
          8.5201e-02, -1.5086e-01,  9.7787e-02, -5.3195e-02, -2.8489e-03,
          1.4549e-02,  8.5871e-02,  5.7111e-02,  1.6377e-01,  1.1632e-01,
          1.5587e-02,  6.8207e-02,  1.3808e-01,  2.5044e-02,  3.5445e-02,
          1.2863e-01, -3.1468e-03],
        [ 4.3864e-02,  1.2387e-01,  2.2043e-02, -1.0207e-01, -8.7495e-02,
          3.6942e-02, -1.6497e-01,  4.5048e-02,  3.3127e-04,  9.7213e-02,
          9.8422e-02, -1.2678e-01,  1.8439e-01,  8.9043e-02, -1.4866e-01,
         -1.0352e-01,  4.0353e-02,  1.7843e-02, -6.3557e-02, -8.8789e-02,
         -1.6450e-02,  1.4332e-01,  1.3067e-01,  9.2240e-02,  4.2261e-03,
         -1.6648e-01,  9.6734e-02, -1.2563e-01, -4.3448e-02, -8.6858e-02,
         -1.3192e-01, -1.4331e-01]], device='cuda:0') torch.Size([16, 32])
fc_blocks.1.0.bias tensor([-0.1707,  0.1578,  0.0272,  0.0236,  0.1699, -0.1085,  0.0524, -0.1110,
         0.0429, -0.0957, -0.1564,  0.1332,  0.0648, -0.0008, -0.0511, -0.1007],
       device='cuda:0') torch.Size([16])
fc_blocks.2.0.weight tensor([[-1.8886e-01,  2.1247e-01,  3.8577e-02,  1.1124e-01,  7.2698e-02,
         -1.0940e-01,  1.9405e-01, -1.7618e-01, -2.2742e-01,  1.3018e-01,
         -1.4176e-01,  2.7517e-02, -2.0457e-01,  1.4319e-01, -2.3898e-01,
          1.5483e-01],
        [ 2.0944e-02, -1.1516e-01, -5.8400e-02, -1.8599e-01, -2.0310e-01,
         -4.4568e-02, -1.4685e-01,  1.9467e-01, -1.2293e-01,  1.7669e-01,
         -9.4388e-02,  1.7689e-01,  1.4472e-01,  2.5033e-01,  6.8985e-02,
          1.1711e-01],
        [-2.1037e-01, -8.9364e-02, -1.7732e-01, -1.4420e-02, -1.7857e-02,
          1.3778e-01,  1.7954e-01,  7.6713e-02,  1.4821e-01, -1.1406e-01,
         -2.1857e-01, -1.2793e-01,  1.6777e-01, -2.8833e-02,  6.4171e-02,
          2.8978e-02],
        [-2.3162e-01,  6.4130e-02, -2.2017e-01, -1.4914e-01, -2.0384e-01,
          1.7255e-02,  1.1032e-01, -1.2522e-01,  1.1118e-01,  1.6212e-01,
          1.8600e-01, -2.0379e-01, -9.2142e-02, -1.6293e-01,  1.5772e-01,
          1.4746e-01],
        [-3.6739e-02,  1.1707e-01, -5.7375e-04,  2.1024e-01,  1.6150e-01,
          1.8073e-01,  1.6412e-01,  1.5110e-01,  2.1262e-01,  7.8792e-02,
         -1.9212e-01,  2.2906e-01, -1.5486e-01,  1.0562e-01, -2.3929e-01,
          2.0008e-01],
        [-1.8534e-01,  7.8445e-02,  1.8774e-01,  5.3236e-02, -3.6912e-02,
          1.9893e-01, -1.7284e-01,  7.9948e-03, -2.4385e-01,  2.4561e-01,
          1.0113e-01, -6.5307e-02,  1.5572e-01,  7.9277e-02,  1.3707e-01,
         -2.2504e-01],
        [-7.3453e-02, -6.2358e-02, -7.7229e-02, -2.2368e-02,  2.5550e-01,
          1.1548e-01,  1.6755e-01,  1.0544e-02,  6.5125e-02, -6.2125e-05,
          5.1165e-02,  2.8993e-02, -1.3614e-01, -1.1615e-02,  1.5252e-01,
          4.4119e-02],
        [ 5.2518e-02,  2.1905e-01, -1.8497e-01, -7.2331e-02, -1.4701e-01,
         -1.7509e-01, -1.6229e-01, -9.0264e-02,  7.4761e-02,  1.2387e-01,
          2.1472e-01,  1.8305e-01, -2.0838e-01,  8.5536e-02, -2.0290e-01,
         -1.1503e-01]], device='cuda:0') torch.Size([8, 16])
fc_blocks.2.0.bias tensor([ 0.2111,  0.0528, -0.0006,  0.1898, -0.2025, -0.1379, -0.0206, -0.0223],
       device='cuda:0') torch.Size([8])
fc_blocks.3.0.weight tensor([[-0.2701,  0.3113, -0.2228, -0.0205,  0.2783, -0.2819,  0.0575,  0.0126],
        [ 0.1343,  0.2114, -0.2098, -0.2940,  0.0045, -0.1854, -0.1126,  0.0071],
        [-0.2230, -0.3413, -0.1597,  0.3341,  0.3054,  0.3484, -0.0133, -0.1555],
        [-0.0148, -0.2006, -0.1593,  0.0758, -0.1672,  0.0972,  0.2612,  0.3030]],
       device='cuda:0') torch.Size([4, 8])
fc_blocks.3.0.bias tensor([ 0.0394, -0.3091,  0.0242,  0.0689], device='cuda:0') torch.Size([4])
fc_blocks.4.0.weight tensor([[ 0.0393, -0.2104,  0.4315, -0.3862],
        [ 0.3858, -0.0557,  0.4582, -0.5012]], device='cuda:0') torch.Size([2, 4])
fc_blocks.4.0.bias tensor([ 0.4725, -0.1841], device='cuda:0') torch.Size([2])
Train Loss : 929.872, Val Loss : 2122.614
======> Trajectory Loss : 663.392, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.432, BelowGroundPenalize Loss : 123.327
