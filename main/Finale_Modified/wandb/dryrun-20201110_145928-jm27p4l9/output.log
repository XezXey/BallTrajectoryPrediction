==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  []
1. input_col =  [3, 4]
2. input_startpos_col =  [3, 4, 5]
3. gt_col =  [5]
4. gt_startpos_col =  [0, 1, 2]
5. gt_xyz_col =  [0, 1, 2]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                  | 0/3 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 28.13it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 27.99it/s]
===============================Dataset shape===============================
Mixed : (6426,)
===========================================================================
Mixed:   0%|                                                                  | 0/2 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 73.87it/s]
===============================Dataset shape===============================
Mixed : (1029,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 648, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 2]), initial position=torch.Size([128, 1, 3])
gt batch [0] : batch=torch.Size([128, 648, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 722, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 2]), initial position=torch.Size([128, 1, 3])
gt batch [1] : batch=torch.Size([128, 722, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 641, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 641, 2]), initial position=torch.Size([128, 1, 3])
gt batch [2] : batch=torch.Size([128, 641, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 642, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 707, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 2]), initial position=torch.Size([128, 1, 3])
gt batch [3] : batch=torch.Size([128, 707, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 2]), initial position=torch.Size([128, 1, 3])
gt batch [4] : batch=torch.Size([128, 718, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 2]), initial position=torch.Size([128, 1, 3])
gt batch [5] : batch=torch.Size([128, 758, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 666, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 2]), initial position=torch.Size([128, 1, 3])
gt batch [6] : batch=torch.Size([128, 666, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 788, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 2]), initial position=torch.Size([128, 1, 3])
gt batch [7] : batch=torch.Size([128, 788, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 671, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 2]), initial position=torch.Size([128, 1, 3])
gt batch [8] : batch=torch.Size([128, 671, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 2]), initial position=torch.Size([128, 1, 3])
gt batch [9] : batch=torch.Size([128, 742, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 2]), initial position=torch.Size([128, 1, 3])
gt batch [10] : batch=torch.Size([128, 699, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 700, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 2]), initial position=torch.Size([128, 1, 3])
gt batch [11] : batch=torch.Size([128, 700, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 701, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 2]), initial position=torch.Size([128, 1, 3])
gt batch [12] : batch=torch.Size([128, 680, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 663, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 2]), initial position=torch.Size([128, 1, 3])
gt batch [13] : batch=torch.Size([128, 663, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 2]), initial position=torch.Size([128, 1, 3])
gt batch [14] : batch=torch.Size([128, 723, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 2]), initial position=torch.Size([128, 1, 3])
gt batch [15] : batch=torch.Size([128, 680, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 648, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 2]), initial position=torch.Size([128, 1, 3])
gt batch [16] : batch=torch.Size([128, 648, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 670, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 2]), initial position=torch.Size([128, 1, 3])
gt batch [17] : batch=torch.Size([128, 670, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 2]), initial position=torch.Size([128, 1, 3])
gt batch [18] : batch=torch.Size([128, 752, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 2]), initial position=torch.Size([128, 1, 3])
gt batch [19] : batch=torch.Size([128, 696, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 2]), initial position=torch.Size([128, 1, 3])
gt batch [20] : batch=torch.Size([128, 711, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 677, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 677, 2]), initial position=torch.Size([128, 1, 3])
gt batch [21] : batch=torch.Size([128, 677, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 678, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 728, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 2]), initial position=torch.Size([128, 1, 3])
gt batch [22] : batch=torch.Size([128, 728, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 2]), initial position=torch.Size([128, 1, 3])
gt batch [23] : batch=torch.Size([128, 732, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 2]), initial position=torch.Size([128, 1, 3])
gt batch [24] : batch=torch.Size([128, 734, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 669, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 2]), initial position=torch.Size([128, 1, 3])
gt batch [25] : batch=torch.Size([128, 669, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 2]), initial position=torch.Size([128, 1, 3])
gt batch [26] : batch=torch.Size([128, 715, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 2]), initial position=torch.Size([128, 1, 3])
gt batch [27] : batch=torch.Size([128, 802, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 2]), initial position=torch.Size([128, 1, 3])
gt batch [28] : batch=torch.Size([128, 691, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 681, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 2]), initial position=torch.Size([128, 1, 3])
gt batch [29] : batch=torch.Size([128, 681, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 633, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 2]), initial position=torch.Size([128, 1, 3])
gt batch [30] : batch=torch.Size([128, 633, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 634, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 657, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 2]), initial position=torch.Size([128, 1, 3])
gt batch [31] : batch=torch.Size([128, 657, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 647, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 647, 2]), initial position=torch.Size([128, 1, 3])
gt batch [32] : batch=torch.Size([128, 647, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 648, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 2]), initial position=torch.Size([128, 1, 3])
gt batch [33] : batch=torch.Size([128, 680, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 2]), initial position=torch.Size([128, 1, 3])
gt batch [34] : batch=torch.Size([128, 699, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 708, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 2]), initial position=torch.Size([128, 1, 3])
gt batch [35] : batch=torch.Size([128, 708, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 2]), initial position=torch.Size([128, 1, 3])
gt batch [36] : batch=torch.Size([128, 687, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 697, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 2]), initial position=torch.Size([128, 1, 3])
gt batch [37] : batch=torch.Size([128, 697, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 2]), initial position=torch.Size([128, 1, 3])
gt batch [38] : batch=torch.Size([128, 691, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 2]), initial position=torch.Size([128, 1, 3])
gt batch [39] : batch=torch.Size([128, 718, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 2]), initial position=torch.Size([128, 1, 3])
gt batch [40] : batch=torch.Size([128, 704, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 711, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 2]), initial position=torch.Size([128, 1, 3])
gt batch [41] : batch=torch.Size([128, 711, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 2]), initial position=torch.Size([128, 1, 3])
gt batch [42] : batch=torch.Size([128, 693, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 2]), initial position=torch.Size([128, 1, 3])
gt batch [43] : batch=torch.Size([128, 698, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 2]), initial position=torch.Size([128, 1, 3])
gt batch [44] : batch=torch.Size([128, 715, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 673, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 2]), initial position=torch.Size([128, 1, 3])
gt batch [45] : batch=torch.Size([128, 673, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 674, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 682, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 2]), initial position=torch.Size([128, 1, 3])
gt batch [46] : batch=torch.Size([128, 682, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 689, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 2]), initial position=torch.Size([128, 1, 3])
gt batch [47] : batch=torch.Size([128, 689, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 690, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 636, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 636, 2]), initial position=torch.Size([128, 1, 3])
gt batch [48] : batch=torch.Size([128, 636, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 637, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 2]), initial position=torch.Size([128, 1, 3])
gt batch [49] : batch=torch.Size([128, 742, 1]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 3]), initial position=torch.Size([128, 1, 3])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'model_depth': BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)}
{'model_depth': {'input_size': 2, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - model_depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/50].........
   [##] Training... Train Loss : 1189.406
   ======> Trajectory Loss : 973.272, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 216.133, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 5614.290
   ======> Trajectory Loss : 4810.749, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.007, BelowGroundPenalize Loss : 803.533, MultiviewReprojection Loss : 0.000
Opening in existing browser session.
[1110/215935.137580:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/50].........
   [##] Training... Train Loss : 906.679
   ======> Trajectory Loss : 744.367, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 162.311, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 2556.787
   ======> Trajectory Loss : 2189.169, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.003, BelowGroundPenalize Loss : 367.614, MultiviewReprojection Loss : 0.000
===> [Minibatch 3/50].........
   [##] Training... Train Loss : 417.511
   ======> Trajectory Loss : 341.361, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 76.149, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 820.912
   ======> Trajectory Loss : 820.910, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
[14924:14924:1110/215938.130815:ERROR:password_sync_bridge.cc(361)] Passwords datatype error was encountered: Failed to load entries from password store. Encryption service failure.
===> [Minibatch 4/50].........
   [##] Training... Train Loss : 111.890
   ======> Trajectory Loss : 111.890, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 56.195
   ======> Trajectory Loss : 56.194, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.001, MultiviewReprojection Loss : 0.000
===> [Minibatch 5/50].........
   [##] Training... Train Loss : 9.010
   ======> Trajectory Loss : 9.010, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 472.208
   ======> Trajectory Loss : 403.851, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 68.356, MultiviewReprojection Loss : 0.000
===> [Minibatch 6/50].........
   [##] Training... Train Loss : 74.865
   ======> Trajectory Loss : 63.252, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 11.613, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 549.029
   ======> Trajectory Loss : 469.735, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 79.293, MultiviewReprojection Loss : 0.000
===> [Minibatch 7/50].........
   [##] Training... Train Loss : 98.788
   ======> Trajectory Loss : 81.332, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 17.456, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 178.977
   ======> Trajectory Loss : 152.964, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 26.013, MultiviewReprojection Loss : 0.000
===> [Minibatch 8/50].........
   [##] Training... Train Loss : 29.747
   ======> Trajectory Loss : 24.488, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 5.259, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 58.289
   ======> Trajectory Loss : 58.289, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 9/50].........
   [##] Training... Train Loss : 9.016
   ======> Trajectory Loss : 9.016, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 129.601
   ======> Trajectory Loss : 129.600, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
===> [Minibatch 10/50].........
   [##] Training... Train Loss : 19.016
   ======> Trajectory Loss : 19.016, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 24.519
   ======> Trajectory Loss : 24.519, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
[1110/215945.638825:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 11/50].........
   [##] Training... Train Loss : 3.563
   ======> Trajectory Loss : 3.563, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 58.406
   ======> Trajectory Loss : 49.910, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 8.496, MultiviewReprojection Loss : 0.000
===> [Minibatch 12/50].........
   [##] Training... Train Loss : 9.767
   ======> Trajectory Loss : 8.012, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 1.755, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 110.598
   ======> Trajectory Loss : 94.612, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 15.986, MultiviewReprojection Loss : 0.000
===> [Minibatch 13/50].........
   [##] Training... Train Loss : 19.113
   ======> Trajectory Loss : 16.121, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 2.993, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 54.071
   ======> Trajectory Loss : 46.232, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 7.840, MultiviewReprojection Loss : 0.000
===> [Minibatch 14/50].........
   [##] Training... Train Loss : 9.574
   ======> Trajectory Loss : 7.905, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 1.669, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 1.369
   ======> Trajectory Loss : 1.365, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.004, MultiviewReprojection Loss : 0.000
