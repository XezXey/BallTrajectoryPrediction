==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 46.70it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.09it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1684, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1684, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1684, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1685, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
torch.Size([4, 2, 1, 32])
torch.Size([4, 2, 1, 32])
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........H at 0 tensor([[[-0.0369, -0.1334, -0.9425,  ..., -0.8040,  0.8712,  0.2067],
         [-0.0369, -0.1334, -0.9425,  ..., -0.8040,  0.8712,  0.2067],
         [-0.0369, -0.1334, -0.9425,  ..., -0.8040,  0.8712,  0.2067],
         ...,
         [-0.0369, -0.1334, -0.9425,  ..., -0.8040,  0.8712,  0.2067],
         [-0.0369, -0.1334, -0.9425,  ..., -0.8040,  0.8712,  0.2067],
         [-0.0369, -0.1334, -0.9425,  ..., -0.8040,  0.8712,  0.2067]],

        [[-0.3285,  0.5221,  0.6666,  ..., -0.1309,  0.2172,  0.9858],
         [-0.3285,  0.5221,  0.6666,  ..., -0.1309,  0.2172,  0.9858],
         [-0.3285,  0.5221,  0.6666,  ..., -0.1309,  0.2172,  0.9858],
         ...,
         [-0.3285,  0.5221,  0.6666,  ..., -0.1309,  0.2172,  0.9858],
         [-0.3285,  0.5221,  0.6666,  ..., -0.1309,  0.2172,  0.9858],
         [-0.3285,  0.5221,  0.6666,  ..., -0.1309,  0.2172,  0.9858]]],
       device='cuda:0', grad_fn=<SelectBackward>)
H at 1 tensor([[[-2.6495e-01, -8.0002e-01, -7.8122e-04,  ...,  1.2595e+00,
          -3.7262e-01,  3.1314e-01],
         [-2.6495e-01, -8.0002e-01, -7.8122e-04,  ...,  1.2595e+00,
          -3.7262e-01,  3.1314e-01],
         [-2.6495e-01, -8.0002e-01, -7.8122e-04,  ...,  1.2595e+00,
          -3.7262e-01,  3.1314e-01],
         ...,
         [-2.6495e-01, -8.0002e-01, -7.8122e-04,  ...,  1.2595e+00,
          -3.7262e-01,  3.1314e-01],
         [-2.6495e-01, -8.0002e-01, -7.8122e-04,  ...,  1.2595e+00,
          -3.7262e-01,  3.1314e-01],
         [-2.6495e-01, -8.0002e-01, -7.8122e-04,  ...,  1.2595e+00,
          -3.7262e-01,  3.1314e-01]],

        [[ 9.2163e-01, -8.2904e-01,  6.3382e-01,  ...,  3.4217e-01,
           1.3200e+00,  1.2173e+00],
         [ 9.2163e-01, -8.2904e-01,  6.3382e-01,  ...,  3.4217e-01,
           1.3200e+00,  1.2173e+00],
         [ 9.2163e-01, -8.2904e-01,  6.3382e-01,  ...,  3.4217e-01,
           1.3200e+00,  1.2173e+00],
         ...,
         [ 9.2163e-01, -8.2904e-01,  6.3382e-01,  ...,  3.4217e-01,
           1.3200e+00,  1.2173e+00],
         [ 9.2163e-01, -8.2904e-01,  6.3382e-01,  ...,  3.4217e-01,
           1.3200e+00,  1.2173e+00],
         [ 9.2163e-01, -8.2904e-01,  6.3382e-01,  ...,  3.4217e-01,
           1.3200e+00,  1.2173e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
H at 2 tensor([[[ 0.0818,  1.0306,  0.3519,  ...,  1.2344, -1.3479, -0.7136],
         [ 0.0818,  1.0306,  0.3519,  ...,  1.2344, -1.3479, -0.7136],
         [ 0.0818,  1.0306,  0.3519,  ...,  1.2344, -1.3479, -0.7136],
         ...,
         [ 0.0818,  1.0306,  0.3519,  ...,  1.2344, -1.3479, -0.7136],
         [ 0.0818,  1.0306,  0.3519,  ...,  1.2344, -1.3479, -0.7136],
         [ 0.0818,  1.0306,  0.3519,  ...,  1.2344, -1.3479, -0.7136]],

        [[ 0.0335, -0.2678, -0.4157,  ..., -0.9642,  0.2329,  0.8378],
         [ 0.0335, -0.2678, -0.4157,  ..., -0.9642,  0.2329,  0.8378],
         [ 0.0335, -0.2678, -0.4157,  ..., -0.9642,  0.2329,  0.8378],
         ...,
         [ 0.0335, -0.2678, -0.4157,  ..., -0.9642,  0.2329,  0.8378],
         [ 0.0335, -0.2678, -0.4157,  ..., -0.9642,  0.2329,  0.8378],
         [ 0.0335, -0.2678, -0.4157,  ..., -0.9642,  0.2329,  0.8378]]],
       device='cuda:0', grad_fn=<SelectBackward>)
H at 3 tensor([[[-1.1671,  2.0233,  0.6229,  ...,  0.3108, -1.2095,  0.6206],
         [-1.1671,  2.0233,  0.6229,  ...,  0.3108, -1.2095,  0.6206],
         [-1.1671,  2.0233,  0.6229,  ...,  0.3108, -1.2095,  0.6206],
         ...,
         [-1.1671,  2.0233,  0.6229,  ...,  0.3108, -1.2095,  0.6206],
         [-1.1671,  2.0233,  0.6229,  ...,  0.3108, -1.2095,  0.6206],
         [-1.1671,  2.0233,  0.6229,  ...,  0.3108, -1.2095,  0.6206]],

        [[ 1.4905, -0.4672,  0.7239,  ..., -1.8317,  1.1827,  0.6025],
         [ 1.4905, -0.4672,  0.7239,  ..., -1.8317,  1.1827,  0.6025],
         [ 1.4905, -0.4672,  0.7239,  ..., -1.8317,  1.1827,  0.6025],
         ...,
         [ 1.4905, -0.4672,  0.7239,  ..., -1.8317,  1.1827,  0.6025],
         [ 1.4905, -0.4672,  0.7239,  ..., -1.8317,  1.1827,  0.6025],
         [ 1.4905, -0.4672,  0.7239,  ..., -1.8317,  1.1827,  0.6025]]],
       device='cuda:0', grad_fn=<SelectBackward>)
H at 0 tensor([[[ 1.1427, -1.5495,  0.6069,  ..., -1.6566,  0.9483,  1.9328],
         [ 1.1427, -1.5495,  0.6069,  ..., -1.6566,  0.9483,  1.9328],
         [ 1.1427, -1.5495,  0.6069,  ..., -1.6566,  0.9483,  1.9328],
         ...,
         [ 1.1427, -1.5495,  0.6069,  ..., -1.6566,  0.9483,  1.9328],
         [ 1.1427, -1.5495,  0.6069,  ..., -1.6566,  0.9483,  1.9328],
         [ 1.1427, -1.5495,  0.6069,  ..., -1.6566,  0.9483,  1.9328]],

        [[ 0.2068, -0.2135, -0.4543,  ...,  2.2999,  0.4698,  0.2974],
         [ 0.2068, -0.2135, -0.4543,  ...,  2.2999,  0.4698,  0.2974],
         [ 0.2068, -0.2135, -0.4543,  ...,  2.2999,  0.4698,  0.2974],
         ...,
         [ 0.2068, -0.2135, -0.4543,  ...,  2.2999,  0.4698,  0.2974],
         [ 0.2068, -0.2135, -0.4543,  ...,  2.2999,  0.4698,  0.2974],
         [ 0.2068, -0.2135, -0.4543,  ...,  2.2999,  0.4698,  0.2974]]],
       device='cuda:0', grad_fn=<SelectBackward>)
H at 1 tensor([[[-0.9510,  0.6470, -0.6161,  ...,  0.0700,  0.9911,  1.3370],
         [-0.9510,  0.6470, -0.6161,  ...,  0.0700,  0.9911,  1.3370],
         [-0.9510,  0.6470, -0.6161,  ...,  0.0700,  0.9911,  1.3370],
         ...,
         [-0.9510,  0.6470, -0.6161,  ...,  0.0700,  0.9911,  1.3370],
         [-0.9510,  0.6470, -0.6161,  ...,  0.0700,  0.9911,  1.3370],
         [-0.9510,  0.6470, -0.6161,  ...,  0.0700,  0.9911,  1.3370]],

        [[ 0.8857,  0.8951,  1.2158,  ...,  0.4400,  0.2905, -0.9958],
         [ 0.8857,  0.8951,  1.2158,  ...,  0.4400,  0.2905, -0.9958],
         [ 0.8857,  0.8951,  1.2158,  ...,  0.4400,  0.2905, -0.9958],
         ...,
         [ 0.8857,  0.8951,  1.2158,  ...,  0.4400,  0.2905, -0.9958],
         [ 0.8857,  0.8951,  1.2158,  ...,  0.4400,  0.2905, -0.9958],
         [ 0.8857,  0.8951,  1.2158,  ...,  0.4400,  0.2905, -0.9958]]],
       device='cuda:0', grad_fn=<SelectBackward>)
H at 2 tensor([[[ 1.7913, -0.0127,  1.5347,  ..., -1.1303, -0.5096,  0.2313],
         [ 1.7913, -0.0127,  1.5347,  ..., -1.1303, -0.5096,  0.2313],
         [ 1.7913, -0.0127,  1.5347,  ..., -1.1303, -0.5096,  0.2313],
         ...,
         [ 1.7913, -0.0127,  1.5347,  ..., -1.1303, -0.5096,  0.2313],
         [ 1.7913, -0.0127,  1.5347,  ..., -1.1303, -0.5096,  0.2313],
         [ 1.7913, -0.0127,  1.5347,  ..., -1.1303, -0.5096,  0.2313]],

        [[-0.3452, -0.0254,  0.6671,  ...,  0.9882, -0.2353,  1.6452],
         [-0.3452, -0.0254,  0.6671,  ...,  0.9882, -0.2353,  1.6452],
         [-0.3452, -0.0254,  0.6671,  ...,  0.9882, -0.2353,  1.6452],
         ...,
         [-0.3452, -0.0254,  0.6671,  ...,  0.9882, -0.2353,  1.6452],
         [-0.3452, -0.0254,  0.6671,  ...,  0.9882, -0.2353,  1.6452],
         [-0.3452, -0.0254,  0.6671,  ...,  0.9882, -0.2353,  1.6452]]],
       device='cuda:0', grad_fn=<SelectBackward>)
H at 3 tensor([[[-1.1938,  0.8413,  0.6658,  ..., -1.0179, -0.0240, -1.9982],
         [-1.1938,  0.8413,  0.6658,  ..., -1.0179, -0.0240, -1.9982],
         [-1.1938,  0.8413,  0.6658,  ..., -1.0179, -0.0240, -1.9982],
         ...,
         [-1.1938,  0.8413,  0.6658,  ..., -1.0179, -0.0240, -1.9982],
         [-1.1938,  0.8413,  0.6658,  ..., -1.0179, -0.0240, -1.9982],
         [-1.1938,  0.8413,  0.6658,  ..., -1.0179, -0.0240, -1.9982]],

        [[ 0.3877,  0.4872, -0.0749,  ..., -2.3720,  2.0438,  0.1319],
         [ 0.3877,  0.4872, -0.0749,  ..., -2.3720,  2.0438,  0.1319],
         [ 0.3877,  0.4872, -0.0749,  ..., -2.3720,  2.0438,  0.1319],
         ...,
         [ 0.3877,  0.4872, -0.0749,  ..., -2.3720,  2.0438,  0.1319],
         [ 0.3877,  0.4872, -0.0749,  ..., -2.3720,  2.0438,  0.1319],
         [ 0.3877,  0.4872, -0.0749,  ..., -2.3720,  2.0438,  0.1319]]],
       device='cuda:0', grad_fn=<SelectBackward>)
