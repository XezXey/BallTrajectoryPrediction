==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 46.62it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.81it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1621, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1621, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1621, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1622, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1649, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1649, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1649, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1650, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
torch.Size([4, 2, 1, 32])
torch.Size([4, 2, 1, 32])
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[[[-0.1012,  0.3593,  0.1545,  1.2847, -0.2577,  0.3983,  0.1308,
           -0.7274,  1.0394, -0.0241,  1.8115, -0.9804, -1.8013, -0.8925,
            0.1250,  1.6060, -0.4803, -0.8712,  0.2686,  0.1567, -1.4056,
           -1.0944, -1.4650, -0.1039,  0.0446,  1.2684, -0.4756, -1.6679,
           -0.5206,  1.2683, -1.0366,  2.1280]],

         [[ 0.2007, -1.0963,  0.7175, -0.6430, -0.7486, -0.3205,  0.9311,
           -1.9338,  0.0382, -0.9268, -0.3735,  0.0291, -0.8777,  0.6427,
           -1.6570,  0.1411,  0.9257, -0.9647, -1.9093, -0.8664, -1.7396,
            1.3634,  0.0895, -1.6151, -0.8210, -0.6193,  1.4488, -0.4360,
            0.6422,  0.4549,  0.8384, -1.4839]]],


        [[[ 0.1553, -0.5279, -0.7765, -0.1114, -0.4956, -1.4761,  0.7843,
            0.3758,  0.4078,  1.2086,  0.4092, -1.0567, -1.8447, -0.5906,
           -0.8762, -1.1257, -0.6496, -0.8621, -0.9713, -0.6200, -1.5232,
            0.7885,  0.7279, -1.3497, -0.2150,  0.6328,  0.0580,  0.2319,
            0.7184,  1.2621, -2.0737,  0.3467]],

         [[-0.8543, -0.0996, -0.7757, -1.2477, -1.2851,  0.4864, -0.0930,
           -1.2248,  0.2288, -0.5877, -1.4019, -1.5358, -0.8932,  0.4899,
           -0.6707,  1.2262,  0.1385,  0.8139, -0.8610, -0.0065, -0.7788,
            2.4077, -0.7947, -0.2752, -0.3424,  0.1265, -0.4784, -0.8598,
            0.0430, -0.7130, -1.1608,  0.4290]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 8.4419e-02,  1.4570e+00, -8.3376e-01,  5.8188e-01,  2.7865e-01,
           -1.2956e-01,  2.0484e-01,  2.6754e-02, -2.2381e-01, -2.1216e-02,
           -4.3045e-01,  2.1821e-01,  7.9902e-01,  4.4718e-01,  2.3736e-02,
            5.9663e-01,  2.4086e-01,  7.8852e-02,  9.9427e-01, -4.3697e-01,
            1.3643e-01,  6.6216e-01, -1.1559e+00,  3.8654e-01,  1.0388e+00,
            2.2893e+00,  1.9832e+00,  5.9855e-01,  2.8555e-01, -1.1601e+00,
           -9.5504e-01,  5.8191e-01]],

         [[ 1.5505e-01,  3.3335e-01, -2.8460e-01, -1.5318e+00, -7.1598e-01,
           -2.9530e-01, -1.1758e+00,  4.9333e-01,  1.6294e-01,  6.3171e-01,
           -3.2364e-01,  5.4037e-01,  1.1323e+00, -2.9577e+00,  2.0075e-01,
            1.7421e-01, -5.0093e-01,  6.0727e-01, -5.7562e-01,  8.4794e-01,
            1.0084e+00, -3.5571e-01,  1.9009e-01, -8.9623e-01,  1.2367e+00,
            6.4473e-02,  1.5240e+00, -3.7786e-01,  8.8446e-01,  6.9556e-01,
           -2.6247e+00, -3.2672e-01]]],


        [[[ 1.0112e+00, -1.7273e+00, -2.5604e-01, -7.6314e-01,  9.0117e-02,
            2.2080e+00,  7.5844e-01, -1.5153e-01, -2.7020e-01, -3.0633e-01,
           -1.9010e-01, -7.7091e-02,  6.1956e-01, -3.3266e-01,  4.9958e-01,
            1.7294e-01,  8.0118e-01, -2.4916e-01,  7.4031e-01,  7.7920e-01,
           -9.4199e-02,  1.7473e-01,  3.4077e-01, -7.8317e-02,  5.4238e-01,
           -1.8350e+00, -8.6578e-01,  5.8417e-01, -5.9811e-01, -2.0741e+00,
           -5.4309e-01, -7.3854e-02]],

         [[-1.0877e+00,  7.1299e-02,  1.4233e+00, -7.9900e-01,  1.4509e+00,
           -1.2487e+00,  7.4077e-01,  1.3574e+00,  1.3807e+00, -9.2123e-01,
            3.9704e-01, -2.9790e-01,  5.0226e-01,  1.9390e+00,  2.6887e-01,
           -8.0466e-01, -8.3211e-01, -1.9934e+00,  3.1190e-01, -1.1688e-04,
            7.3496e-01, -4.6992e-01,  7.4991e-01, -1.6136e+00, -3.7198e-01,
           -9.6774e-01,  2.9849e-01,  1.9135e+00, -1.0842e+00,  7.5545e-01,
            1.2535e-01, -1.2868e+00]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[[-0.0912,  0.3493,  0.1445,  1.2747, -0.2677,  0.4082,  0.1208,
           -0.7175,  1.0295, -0.0142,  1.8215, -0.9904, -1.8112, -0.9024,
            0.1151,  1.6160, -0.4903, -0.8812,  0.2785,  0.1666, -1.3957,
           -1.0845, -1.4550, -0.0940,  0.0346,  1.2784, -0.4656, -1.6581,
           -0.5306,  1.2584, -1.0462,  2.1379]],

         [[ 0.2105, -1.0863,  0.7273, -0.6530, -0.7386, -0.3305,  0.9211,
           -1.9438,  0.0482, -0.9168, -0.3635,  0.0191, -0.8677,  0.6327,
           -1.6670,  0.1511,  0.9356, -0.9746, -1.9193, -0.8764, -1.7495,
            1.3734,  0.0995, -1.6051, -0.8310, -0.6093,  1.4393, -0.4460,
            0.6322,  0.4450,  0.8284, -1.4939]]],


        [[[ 0.1456, -0.5181, -0.7864, -0.1015, -0.5056, -1.4661,  0.7942,
            0.3658,  0.3978,  1.1986,  0.4191, -1.0666, -1.8546, -0.6005,
           -0.8862, -1.1160, -0.6398, -0.8721, -0.9613, -0.6101, -1.5331,
            0.7786,  0.7180, -1.3597, -0.2051,  0.6228,  0.0679,  0.2219,
            0.7284,  1.2721, -2.0837,  0.3567]],

         [[-0.8443, -0.0897, -0.7657, -1.2577, -1.2751,  0.4764, -0.0830,
           -1.2148,  0.2388, -0.5977, -1.3919, -1.5259, -0.8832,  0.4999,
           -0.6607,  1.2162,  0.1286,  0.8039, -0.8709, -0.0164, -0.7691,
            2.4176, -0.8047, -0.2652, -0.3324,  0.1165, -0.4685, -0.8698,
            0.0530, -0.7227, -1.1707,  0.4390]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 0.0744,  1.4670, -0.8437,  0.5719,  0.2886, -0.1196,  0.1950,
            0.0168, -0.2338, -0.0113, -0.4205,  0.2281,  0.7891,  0.4554,
            0.0138,  0.5867,  0.2309,  0.0689,  1.0043, -0.4470,  0.1463,
            0.6722, -1.1459,  0.3965,  1.0288,  2.2793,  1.9929,  0.5886,
            0.2756, -1.1701, -0.9650,  0.5919]],

         [[ 0.1650,  0.3234, -0.2746, -1.5218, -0.7260, -0.3053, -1.1858,
            0.4833,  0.1530,  0.6217, -0.3136,  0.5304,  1.1423, -2.9477,
            0.1908,  0.1842, -0.5109,  0.6173, -0.5656,  0.8380,  0.9992,
           -0.3457,  0.1801, -0.9062,  1.2466,  0.0546,  1.5340, -0.3878,
            0.8745,  0.6856, -2.6148, -0.3367]]],


        [[[ 1.0207, -1.7173, -0.2461, -0.7532,  0.1001,  2.1982,  0.7485,
           -0.1615, -0.2802, -0.3163, -0.1801, -0.0671,  0.6096, -0.3227,
            0.4896,  0.1629,  0.7912, -0.2392,  0.7503,  0.7692, -0.1042,
            0.1847,  0.3508, -0.0683,  0.5325, -1.8450, -0.8558,  0.5742,
           -0.6076, -2.0841, -0.5531, -0.0639]],

         [[-1.0777,  0.0613,  1.4333, -0.7891,  1.4409, -1.2387,  0.7308,
            1.3474,  1.3708, -0.9113,  0.4070, -0.3079,  0.5123,  1.9490,
            0.2589, -0.7947, -0.8421, -1.9834,  0.3219, -0.0101,  0.7449,
           -0.4798,  0.7399, -1.6236, -0.3620, -0.9777,  0.3085,  1.9035,
           -1.0743,  0.7455,  0.1154, -1.2964]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 8327.152, Val Loss : 5548.191
======> Trajectory Loss : 8186.957, Gravity Loss : 0.002, EndOfTrajectory Loss : 1.402, BelowGroundPenalize Loss : 0.000
===> [Minibatch 2/5].........BEFORE UPDATE
h tensor([[[[-0.0912,  0.3493,  0.1445,  1.2747, -0.2677,  0.4082,  0.1208,
           -0.7175,  1.0295, -0.0142,  1.8215, -0.9904, -1.8112, -0.9024,
            0.1151,  1.6160, -0.4903, -0.8812,  0.2785,  0.1666, -1.3957,
           -1.0845, -1.4550, -0.0940,  0.0346,  1.2784, -0.4656, -1.6581,
           -0.5306,  1.2584, -1.0462,  2.1379]],

         [[ 0.2105, -1.0863,  0.7273, -0.6530, -0.7386, -0.3305,  0.9211,
           -1.9438,  0.0482, -0.9168, -0.3635,  0.0191, -0.8677,  0.6327,
           -1.6670,  0.1511,  0.9356, -0.9746, -1.9193, -0.8764, -1.7495,
            1.3734,  0.0995, -1.6051, -0.8310, -0.6093,  1.4393, -0.4460,
            0.6322,  0.4450,  0.8284, -1.4939]]],


        [[[ 0.1456, -0.5181, -0.7864, -0.1015, -0.5056, -1.4661,  0.7942,
            0.3658,  0.3978,  1.1986,  0.4191, -1.0666, -1.8546, -0.6005,
           -0.8862, -1.1160, -0.6398, -0.8721, -0.9613, -0.6101, -1.5331,
            0.7786,  0.7180, -1.3597, -0.2051,  0.6228,  0.0679,  0.2219,
            0.7284,  1.2721, -2.0837,  0.3567]],

         [[-0.8443, -0.0897, -0.7657, -1.2577, -1.2751,  0.4764, -0.0830,
           -1.2148,  0.2388, -0.5977, -1.3919, -1.5259, -0.8832,  0.4999,
           -0.6607,  1.2162,  0.1286,  0.8039, -0.8709, -0.0164, -0.7691,
            2.4176, -0.8047, -0.2652, -0.3324,  0.1165, -0.4685, -0.8698,
            0.0530, -0.7227, -1.1707,  0.4390]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 0.0744,  1.4670, -0.8437,  0.5719,  0.2886, -0.1196,  0.1950,
            0.0168, -0.2338, -0.0113, -0.4205,  0.2281,  0.7891,  0.4554,
            0.0138,  0.5867,  0.2309,  0.0689,  1.0043, -0.4470,  0.1463,
            0.6722, -1.1459,  0.3965,  1.0288,  2.2793,  1.9929,  0.5886,
            0.2756, -1.1701, -0.9650,  0.5919]],

         [[ 0.1650,  0.3234, -0.2746, -1.5218, -0.7260, -0.3053, -1.1858,
            0.4833,  0.1530,  0.6217, -0.3136,  0.5304,  1.1423, -2.9477,
            0.1908,  0.1842, -0.5109,  0.6173, -0.5656,  0.8380,  0.9992,
           -0.3457,  0.1801, -0.9062,  1.2466,  0.0546,  1.5340, -0.3878,
            0.8745,  0.6856, -2.6148, -0.3367]]],


        [[[ 1.0207, -1.7173, -0.2461, -0.7532,  0.1001,  2.1982,  0.7485,
           -0.1615, -0.2802, -0.3163, -0.1801, -0.0671,  0.6096, -0.3227,
            0.4896,  0.1629,  0.7912, -0.2392,  0.7503,  0.7692, -0.1042,
            0.1847,  0.3508, -0.0683,  0.5325, -1.8450, -0.8558,  0.5742,
           -0.6076, -2.0841, -0.5531, -0.0639]],

         [[-1.0777,  0.0613,  1.4333, -0.7891,  1.4409, -1.2387,  0.7308,
            1.3474,  1.3708, -0.9113,  0.4070, -0.3079,  0.5123,  1.9490,
            0.2589, -0.7947, -0.8421, -1.9834,  0.3219, -0.0101,  0.7449,
           -0.4798,  0.7399, -1.6236, -0.3620, -0.9777,  0.3085,  1.9035,
           -1.0743,  0.7455,  0.1154, -1.2964]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[[-0.0822,  0.3441,  0.1345,  1.2648, -0.2758,  0.4150,  0.1124,
           -0.7078,  1.0210, -0.0160,  1.8314, -0.9940, -1.8204, -0.8979,
            0.1143,  1.6233, -0.4991, -0.8907,  0.2869,  0.1756, -1.3871,
           -1.0776, -1.4463, -0.0951,  0.0247,  1.2740, -0.4558, -1.6505,
           -0.5403,  1.2501, -1.0546,  2.1460]],

         [[ 0.2193, -1.0898,  0.7366, -0.6613, -0.7330, -0.3333,  0.9213,
           -1.9492,  0.0522, -0.9129, -0.3597,  0.0138, -0.8579,  0.6229,
           -1.6737,  0.1569,  0.9451, -0.9801, -1.9281, -0.8832, -1.7486,
            1.3720,  0.1054, -1.5953, -0.8390, -0.6074,  1.4460, -0.4508,
            0.6262,  0.4434,  0.8310, -1.4946]]],


        [[[ 0.1380, -0.5250, -0.7801, -0.1052, -0.5141, -1.4562,  0.8036,
            0.3559,  0.3894,  1.1896,  0.4125, -1.0608, -1.8642, -0.5972,
           -0.8799, -1.1230, -0.6451, -0.8820, -0.9672, -0.6166, -1.5413,
            0.7833,  0.7081, -1.3696, -0.1971,  0.6267,  0.0776,  0.2180,
            0.7374,  1.2819, -2.0922,  0.3623]],

         [[-0.8348, -0.0850, -0.7581, -1.2640, -1.2666,  0.4671, -0.0752,
           -1.2059,  0.2458, -0.6020, -1.3833, -1.5172, -0.8763,  0.5098,
           -0.6511,  1.2114,  0.1211,  0.8021, -0.8704, -0.0107, -0.7672,
            2.4246, -0.8074, -0.2611, -0.3298,  0.1108, -0.4617, -0.8788,
            0.0587, -0.7324, -1.1803,  0.4422]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 0.0799,  1.4764, -0.8386,  0.5765,  0.2966, -0.1256,  0.1962,
            0.0068, -0.2427, -0.0171, -0.4111,  0.2360,  0.7794,  0.4628,
            0.0053,  0.5902,  0.2223,  0.0757,  1.0136, -0.4566,  0.1408,
            0.6822, -1.1397,  0.4056,  1.0201,  2.2700,  2.0005,  0.5834,
            0.2657, -1.1790, -0.9742,  0.5858]],

         [[ 0.1721,  0.3257, -0.2680, -1.5127, -0.7303, -0.3151, -1.1828,
            0.4754,  0.1430,  0.6171, -0.3082,  0.5288,  1.1491, -2.9413,
            0.1906,  0.1898, -0.5147,  0.6204, -0.5596,  0.8286,  1.0061,
           -0.3430,  0.1747, -0.9143,  1.2509,  0.0463,  1.5402, -0.3885,
            0.8647,  0.6827, -2.6048, -0.3442]]],


        [[[ 1.0135, -1.7083, -0.2376, -0.7443,  0.1046,  2.1904,  0.7553,
           -0.1715, -0.2838, -0.3251, -0.1705, -0.0582,  0.6015, -0.3149,
            0.4808,  0.1555,  0.7818, -0.2294,  0.7601,  0.7606, -0.1136,
            0.1945,  0.3487, -0.0595,  0.5248, -1.8491, -0.8463,  0.5755,
           -0.6004, -2.0930, -0.5624, -0.0712]],

         [[-1.0707,  0.0605,  1.4393, -0.7796,  1.4360, -1.2414,  0.7300,
            1.3376,  1.3616, -0.9014,  0.4135, -0.3157,  0.5181,  1.9559,
            0.2652, -0.7882, -0.8454, -1.9790,  0.3281, -0.0192,  0.7545,
           -0.4884,  0.7332, -1.6335, -0.3559, -0.9876,  0.3155,  1.8976,
           -1.0680,  0.7445,  0.1055, -1.3044]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 5073.083, Val Loss : 1834.935
======> Trajectory Loss : 4933.728, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.394, BelowGroundPenalize Loss : 0.000
===> [Minibatch 3/5].........BEFORE UPDATE
h tensor([[[[-0.0822,  0.3441,  0.1345,  1.2648, -0.2758,  0.4150,  0.1124,
           -0.7078,  1.0210, -0.0160,  1.8314, -0.9940, -1.8204, -0.8979,
            0.1143,  1.6233, -0.4991, -0.8907,  0.2869,  0.1756, -1.3871,
           -1.0776, -1.4463, -0.0951,  0.0247,  1.2740, -0.4558, -1.6505,
           -0.5403,  1.2501, -1.0546,  2.1460]],

         [[ 0.2193, -1.0898,  0.7366, -0.6613, -0.7330, -0.3333,  0.9213,
           -1.9492,  0.0522, -0.9129, -0.3597,  0.0138, -0.8579,  0.6229,
           -1.6737,  0.1569,  0.9451, -0.9801, -1.9281, -0.8832, -1.7486,
            1.3720,  0.1054, -1.5953, -0.8390, -0.6074,  1.4460, -0.4508,
            0.6262,  0.4434,  0.8310, -1.4946]]],


        [[[ 0.1380, -0.5250, -0.7801, -0.1052, -0.5141, -1.4562,  0.8036,
            0.3559,  0.3894,  1.1896,  0.4125, -1.0608, -1.8642, -0.5972,
           -0.8799, -1.1230, -0.6451, -0.8820, -0.9672, -0.6166, -1.5413,
            0.7833,  0.7081, -1.3696, -0.1971,  0.6267,  0.0776,  0.2180,
            0.7374,  1.2819, -2.0922,  0.3623]],

         [[-0.8348, -0.0850, -0.7581, -1.2640, -1.2666,  0.4671, -0.0752,
           -1.2059,  0.2458, -0.6020, -1.3833, -1.5172, -0.8763,  0.5098,
           -0.6511,  1.2114,  0.1211,  0.8021, -0.8704, -0.0107, -0.7672,
            2.4246, -0.8074, -0.2611, -0.3298,  0.1108, -0.4617, -0.8788,
            0.0587, -0.7324, -1.1803,  0.4422]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 0.0799,  1.4764, -0.8386,  0.5765,  0.2966, -0.1256,  0.1962,
            0.0068, -0.2427, -0.0171, -0.4111,  0.2360,  0.7794,  0.4628,
            0.0053,  0.5902,  0.2223,  0.0757,  1.0136, -0.4566,  0.1408,
            0.6822, -1.1397,  0.4056,  1.0201,  2.2700,  2.0005,  0.5834,
            0.2657, -1.1790, -0.9742,  0.5858]],

         [[ 0.1721,  0.3257, -0.2680, -1.5127, -0.7303, -0.3151, -1.1828,
            0.4754,  0.1430,  0.6171, -0.3082,  0.5288,  1.1491, -2.9413,
            0.1906,  0.1898, -0.5147,  0.6204, -0.5596,  0.8286,  1.0061,
           -0.3430,  0.1747, -0.9143,  1.2509,  0.0463,  1.5402, -0.3885,
            0.8647,  0.6827, -2.6048, -0.3442]]],


        [[[ 1.0135, -1.7083, -0.2376, -0.7443,  0.1046,  2.1904,  0.7553,
           -0.1715, -0.2838, -0.3251, -0.1705, -0.0582,  0.6015, -0.3149,
            0.4808,  0.1555,  0.7818, -0.2294,  0.7601,  0.7606, -0.1136,
            0.1945,  0.3487, -0.0595,  0.5248, -1.8491, -0.8463,  0.5755,
           -0.6004, -2.0930, -0.5624, -0.0712]],

         [[-1.0707,  0.0605,  1.4393, -0.7796,  1.4360, -1.2414,  0.7300,
            1.3376,  1.3616, -0.9014,  0.4135, -0.3157,  0.5181,  1.9559,
            0.2652, -0.7882, -0.8454, -1.9790,  0.3281, -0.0192,  0.7545,
           -0.4884,  0.7332, -1.6335, -0.3559, -0.9876,  0.3155,  1.8976,
           -1.0680,  0.7445,  0.1055, -1.3044]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[[[-0.0734,  0.3395,  0.1245,  1.2550, -0.2836,  0.4230,  0.1038,
           -0.7004,  1.0134, -0.0225,  1.8389, -0.9880, -1.8264, -0.8908,
            0.1080,  1.6305, -0.5079, -0.8884,  0.2946,  0.1696, -1.3790,
           -1.0705, -1.4379, -0.0900,  0.0160,  1.2669, -0.4485, -1.6419,
           -0.5485,  1.2426, -1.0620,  2.1536]],

         [[ 0.2283, -1.0962,  0.7325, -0.6699, -0.7284, -0.3295,  0.9264,
           -1.9487,  0.0514, -0.9112, -0.3627,  0.0113, -0.8493,  0.6141,
           -1.6771,  0.1564,  0.9540, -0.9844, -1.9338, -0.8806, -1.7440,
            1.3667,  0.1077, -1.5865, -0.8478, -0.6126,  1.4539, -0.4503,
            0.6277,  0.4459,  0.8376, -1.4908]]],


        [[[ 0.1302, -0.5333, -0.7722, -0.0997, -0.5220, -1.4594,  0.8129,
            0.3465,  0.3938,  1.1819,  0.4146, -1.0533, -1.8725, -0.5906,
           -0.8727, -1.1308, -0.6517, -0.8914, -0.9662, -0.6243, -1.5500,
            0.7904,  0.7012, -1.3766, -0.1883,  0.6336,  0.0860,  0.2237,
            0.7455,  1.2914, -2.0999,  0.3569]],

         [[-0.8256, -0.0776, -0.7549, -1.2697, -1.2576,  0.4575, -0.0730,
           -1.1965,  0.2481, -0.6003, -1.3744, -1.5089, -0.8691,  0.5180,
           -0.6415,  1.2108,  0.1167,  0.8058, -0.8647, -0.0033, -0.7724,
            2.4312, -0.8047, -0.2602, -0.3295,  0.1090, -0.4552, -0.8881,
            0.0633, -0.7421, -1.1901,  0.4376]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[[[ 0.0757,  1.4857, -0.8315,  0.5834,  0.2922, -0.1318,  0.1899,
           -0.0032, -0.2508, -0.0243, -0.4022,  0.2439,  0.7712,  0.4710,
           -0.0033,  0.5971,  0.2140,  0.0833,  1.0223, -0.4657,  0.1340,
            0.6915, -1.1353,  0.4142,  1.0110,  2.2624,  2.0080,  0.5888,
            0.2568, -1.1788, -0.9832,  0.5844]],

         [[ 0.1793,  0.3322, -0.2641, -1.5040, -0.7278, -0.3246, -1.1760,
            0.4668,  0.1342,  0.6227, -0.3085,  0.5336,  1.1573, -2.9375,
            0.1953,  0.1906, -0.5126,  0.6190, -0.5539,  0.8305,  1.0139,
           -0.3405,  0.1777, -0.9173,  1.2468,  0.0380,  1.5388, -0.3834,
            0.8675,  0.6760, -2.5957, -0.3438]]],


        [[[ 1.0061, -1.6989, -0.2290, -0.7356,  0.0992,  2.1825,  0.7610,
           -0.1805, -0.2780, -0.3332, -0.1616, -0.0490,  0.5937, -0.3066,
            0.4725,  0.1470,  0.7735, -0.2199,  0.7693,  0.7524, -0.1225,
            0.2023,  0.3426, -0.0508,  0.5162, -1.8557, -0.8385,  0.5819,
           -0.5924, -2.1025, -0.5714, -0.0796]],

         [[-1.0647,  0.0658,  1.4408, -0.7707,  1.4364, -1.2480,  0.7344,
            1.3276,  1.3533, -0.8934,  0.4179, -0.3234,  0.5248,  1.9623,
            0.2732, -0.7846, -0.8427, -1.9770,  0.3332, -0.0201,  0.7642,
           -0.4941,  0.7298, -1.6433, -0.3548, -0.9930,  0.3209,  1.8950,
           -1.0602,  0.7381,  0.0960, -1.3131]]]], device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 2008.829, Val Loss : 635.218
======> Trajectory Loss : 1869.581, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.392, BelowGroundPenalize Loss : 0.000
