==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [9, 10, 5]
1. input_col =  [3, 4, 9, 10, 5]
2. input_startpos_col =  [3, 4, 5, 9, 10, 5]
3. gt_col =  [5, 9, 10, 5]
4. gt_startpos_col =  [0, 1, 2, 9, 10, 5]
5. gt_xyz_col =  [0, 1, 2, 9, 10, 5]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                  | 0/3 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 27.99it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 27.84it/s]
===============================Dataset shape===============================
Mixed : (6426,)
===========================================================================
Mixed:   0%|                                                                  | 0/2 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 72.99it/s]
===============================Dataset shape===============================
Mixed : (1029,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 670, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 5]), initial position=torch.Size([128, 1, 6])
gt batch [0] : batch=torch.Size([128, 670, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 711, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 5]), initial position=torch.Size([128, 1, 6])
gt batch [1] : batch=torch.Size([128, 711, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 669, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 5]), initial position=torch.Size([128, 1, 6])
gt batch [2] : batch=torch.Size([128, 669, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 682, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 5]), initial position=torch.Size([128, 1, 6])
gt batch [3] : batch=torch.Size([128, 682, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 723, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 5]), initial position=torch.Size([128, 1, 6])
gt batch [4] : batch=torch.Size([128, 723, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 788, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 5]), initial position=torch.Size([128, 1, 6])
gt batch [5] : batch=torch.Size([128, 788, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 672, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 5]), initial position=torch.Size([128, 1, 6])
gt batch [6] : batch=torch.Size([128, 672, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 732, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 5]), initial position=torch.Size([128, 1, 6])
gt batch [7] : batch=torch.Size([128, 732, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 693, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 5]), initial position=torch.Size([128, 1, 6])
gt batch [8] : batch=torch.Size([128, 693, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 758, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 5]), initial position=torch.Size([128, 1, 6])
gt batch [9] : batch=torch.Size([128, 758, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 687, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 5]), initial position=torch.Size([128, 1, 6])
gt batch [10] : batch=torch.Size([128, 687, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 728, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 5]), initial position=torch.Size([128, 1, 6])
gt batch [11] : batch=torch.Size([128, 728, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 667, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 5]), initial position=torch.Size([128, 1, 6])
gt batch [12] : batch=torch.Size([128, 667, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 772, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 5]), initial position=torch.Size([128, 1, 6])
gt batch [13] : batch=torch.Size([128, 772, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 712, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 5]), initial position=torch.Size([128, 1, 6])
gt batch [14] : batch=torch.Size([128, 712, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 688, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 5]), initial position=torch.Size([128, 1, 6])
gt batch [15] : batch=torch.Size([128, 688, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 707, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 5]), initial position=torch.Size([128, 1, 6])
gt batch [16] : batch=torch.Size([128, 707, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 696, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 5]), initial position=torch.Size([128, 1, 6])
gt batch [17] : batch=torch.Size([128, 696, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 700, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 5]), initial position=torch.Size([128, 1, 6])
gt batch [18] : batch=torch.Size([128, 700, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 701, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 659, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 659, 5]), initial position=torch.Size([128, 1, 6])
gt batch [19] : batch=torch.Size([128, 659, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 663, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 5]), initial position=torch.Size([128, 1, 6])
gt batch [20] : batch=torch.Size([128, 663, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 688, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 5]), initial position=torch.Size([128, 1, 6])
gt batch [21] : batch=torch.Size([128, 688, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 677, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 677, 5]), initial position=torch.Size([128, 1, 6])
gt batch [22] : batch=torch.Size([128, 677, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 678, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 660, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 5]), initial position=torch.Size([128, 1, 6])
gt batch [23] : batch=torch.Size([128, 660, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 661, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 721, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 5]), initial position=torch.Size([128, 1, 6])
gt batch [24] : batch=torch.Size([128, 721, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 685, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 685, 5]), initial position=torch.Size([128, 1, 6])
gt batch [25] : batch=torch.Size([128, 685, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 686, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 715, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 5]), initial position=torch.Size([128, 1, 6])
gt batch [26] : batch=torch.Size([128, 715, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 704, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 5]), initial position=torch.Size([128, 1, 6])
gt batch [27] : batch=torch.Size([128, 704, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 663, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 5]), initial position=torch.Size([128, 1, 6])
gt batch [28] : batch=torch.Size([128, 663, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 718, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 5]), initial position=torch.Size([128, 1, 6])
gt batch [29] : batch=torch.Size([128, 718, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 742, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 5]), initial position=torch.Size([128, 1, 6])
gt batch [30] : batch=torch.Size([128, 742, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 722, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 5]), initial position=torch.Size([128, 1, 6])
gt batch [31] : batch=torch.Size([128, 722, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 680, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 5]), initial position=torch.Size([128, 1, 6])
gt batch [32] : batch=torch.Size([128, 680, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 635, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 635, 5]), initial position=torch.Size([128, 1, 6])
gt batch [33] : batch=torch.Size([128, 635, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 636, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 708, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 5]), initial position=torch.Size([128, 1, 6])
gt batch [34] : batch=torch.Size([128, 708, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 742, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 5]), initial position=torch.Size([128, 1, 6])
gt batch [35] : batch=torch.Size([128, 742, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 734, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 5]), initial position=torch.Size([128, 1, 6])
gt batch [36] : batch=torch.Size([128, 734, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 703, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 703, 5]), initial position=torch.Size([128, 1, 6])
gt batch [37] : batch=torch.Size([128, 703, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 699, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 5]), initial position=torch.Size([128, 1, 6])
gt batch [38] : batch=torch.Size([128, 699, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 688, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 5]), initial position=torch.Size([128, 1, 6])
gt batch [39] : batch=torch.Size([128, 688, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 698, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 5]), initial position=torch.Size([128, 1, 6])
gt batch [40] : batch=torch.Size([128, 698, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 723, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 5]), initial position=torch.Size([128, 1, 6])
gt batch [41] : batch=torch.Size([128, 723, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 632, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 5]), initial position=torch.Size([128, 1, 6])
gt batch [42] : batch=torch.Size([128, 632, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 715, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 5]), initial position=torch.Size([128, 1, 6])
gt batch [43] : batch=torch.Size([128, 715, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 665, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 5]), initial position=torch.Size([128, 1, 6])
gt batch [44] : batch=torch.Size([128, 665, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 711, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 711, 5]), initial position=torch.Size([128, 1, 6])
gt batch [45] : batch=torch.Size([128, 711, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 629, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 629, 5]), initial position=torch.Size([128, 1, 6])
gt batch [46] : batch=torch.Size([128, 629, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 630, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 802, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 5]), initial position=torch.Size([128, 1, 6])
gt batch [47] : batch=torch.Size([128, 802, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 669, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 669, 5]), initial position=torch.Size([128, 1, 6])
gt batch [48] : batch=torch.Size([128, 669, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 659, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 659, 5]), initial position=torch.Size([128, 1, 6])
gt batch [49] : batch=torch.Size([128, 659, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'model_depth': BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(5, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)}
{'model_depth': {'input_size': 5, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [5, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - model_depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(5, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/50].........
   [##] Training... Train Loss : 538.230
   ======> Trajectory Loss : 439.540, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 98.689, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 804.456
   ======> Trajectory Loss : 697.194, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.001, BelowGroundPenalize Loss : 107.262, MultiviewReprojection Loss : 0.000
Opening in existing browser session.
[1110/220449.353377:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/50].........
   [##] Training... Train Loss : 145.863
   ======> Trajectory Loss : 120.972, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 24.891, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 174.739
   ======> Trajectory Loss : 151.237, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 23.502, MultiviewReprojection Loss : 0.000
===> [Minibatch 3/50].........
   [##] Training... Train Loss : 33.909
   ======> Trajectory Loss : 28.002, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 5.907, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 81.448
   ======> Trajectory Loss : 81.448, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
[22604:22705:1110/220451.930584:ERROR:get_updates_processor.cc(258)] PostClientToServerMessage() failed during GetUpdates with error 2
[1110/220452.032225:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 4/50].........
   [##] Training... Train Loss : 14.793
   ======> Trajectory Loss : 14.793, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
   [##] Validating... Val Loss : 55.115
   ======> Trajectory Loss : 55.115, EndOfTrajectory Loss : 0.000, Gravity Loss : 0.000, BelowGroundPenalize Loss : 0.000, MultiviewReprojection Loss : 0.000
