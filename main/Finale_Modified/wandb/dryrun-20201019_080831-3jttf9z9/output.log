==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.53it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 13.01it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 23.76it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 737, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 737, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 737, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 738, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 824, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 824, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 797, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 797, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 771, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 771, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 771, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 750, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 750, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 751, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 749, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 749, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 753, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 753, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 754, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 786, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 786, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 694, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 694, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 695, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 709, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 709, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 710, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 833, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 683, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 683, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 684, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 744, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 744, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 744, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........tensor([[[-0.0451,  0.8307,  0.4445,  ..., -0.7366,  0.7510,  0.3296],
         [-0.9432, -0.1909,  0.3771,  ...,  0.5110,  0.0658,  0.0575],
         [-0.3733,  0.4910,  2.0802,  ..., -1.0760,  0.1053, -0.6155],
         ...,
         [-0.9568, -0.9091,  0.3340,  ..., -0.6446, -0.6048, -1.1669],
         [ 0.1962,  0.4427,  0.7526,  ..., -1.2690, -0.8292,  0.0021],
         [-0.8966,  0.5791, -1.2346,  ..., -0.1573,  0.7136,  0.4093]],

        [[ 1.0621,  0.0799,  0.7894,  ...,  0.7075,  0.1574,  2.1057],
         [ 1.1549, -1.9188,  0.5348,  ..., -1.1818,  0.0630,  1.5829],
         [-1.0583, -1.4549,  1.0516,  ...,  0.0601, -0.2963, -0.9681],
         ...,
         [ 1.1733,  1.2163,  0.1121,  ...,  0.3018,  0.8095, -0.0087],
         [-1.5723, -1.0710, -0.0895,  ...,  0.0023, -0.8346, -0.3964],
         [ 0.5943, -0.0575,  1.0849,  ...,  0.3646, -0.4136, -0.0892]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.1758e+00, -8.8421e-01, -1.0389e+00,  ...,  1.6041e-01,
           1.4085e+00,  3.5351e-01],
         [-7.3799e-01, -6.9546e-01,  1.2406e+00,  ...,  1.9692e+00,
          -1.0980e+00,  5.0748e-01],
         [ 4.8386e-01,  1.5949e+00,  8.3349e-01,  ...,  2.5334e+00,
           5.3089e-01,  1.8849e+00],
         ...,
         [-2.7009e-01, -3.5409e-01,  8.8048e-01,  ..., -9.2723e-01,
           6.7409e-02,  1.9849e-01],
         [-1.0201e+00, -1.8267e+00,  9.9601e-01,  ..., -4.0202e-01,
          -9.3140e-02, -1.1482e-01],
         [-9.8140e-01,  1.9408e+00,  1.5323e-01,  ...,  2.0263e+00,
          -3.9275e-01,  4.6737e-01]],

        [[ 1.4140e-01,  1.0438e+00,  3.2396e-01,  ..., -1.5696e-01,
          -1.3451e+00,  7.5591e-01],
         [-1.0626e+00,  2.4954e-01, -3.7164e-01,  ...,  1.4321e+00,
           2.7628e-01,  1.0768e+00],
         [-1.0095e+00,  1.0108e+00, -1.7936e+00,  ..., -8.1598e-01,
           1.4941e+00,  3.3724e-01],
         ...,
         [-2.5292e-02,  2.1993e+00, -4.6642e-01,  ..., -1.0858e+00,
           3.0165e+00,  1.0954e+00],
         [-3.1857e+00, -6.6476e-01,  1.9423e-01,  ..., -2.9071e-01,
           4.6051e-01,  1.9818e-03],
         [-1.7846e+00, -5.7883e-01,  7.2820e-01,  ...,  1.0430e+00,
          -3.8238e-01, -9.1701e-01]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[-0.7781,  0.0746,  2.3467,  ...,  1.4491,  2.7052, -0.0192],
         [ 1.1345, -1.5173,  1.2110,  ..., -0.7618, -0.8456, -0.0975],
         [ 0.5623,  1.0546,  0.2037,  ..., -0.3523,  0.9058,  0.0745],
         ...,
         [-0.6529, -0.7412,  1.2456,  ..., -0.2380, -0.0057,  1.2673],
         [-1.1849,  0.5534, -0.0990,  ..., -0.3310,  2.3393, -1.1237],
         [ 0.6354,  1.0607, -1.8918,  ...,  0.5778,  0.0146,  0.0046]],

        [[-1.9667,  0.9710, -0.8503,  ...,  0.5729, -0.9890, -1.7604],
         [-0.8643, -0.8571, -1.2422,  ..., -0.3703, -0.1359,  1.3911],
         [ 0.3002,  1.4038,  1.1437,  ..., -2.4492,  2.2876, -0.3197],
         ...,
         [-0.1378,  0.3926,  1.4920,  ...,  0.4163,  1.2474,  1.0599],
         [-2.5936, -0.7456, -1.5247,  ...,  0.0320,  0.1485,  0.6417],
         [-0.7062,  0.5991, -0.9037,  ..., -0.2681, -0.5394,  0.7444]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.1013, -0.0173, -0.7952,  ...,  0.9564, -0.7156,  0.4670],
         [ 0.2673, -0.1002, -0.1759,  ..., -0.3711,  0.7181,  0.7894],
         [ 0.5826,  1.8437, -0.4804,  ..., -1.2764, -0.4256,  0.0369],
         ...,
         [ 0.4096,  0.4693, -1.2906,  ..., -1.0465, -0.9641, -2.0065],
         [-0.1188, -0.9789,  0.4165,  ...,  0.0605,  2.1339,  0.4067],
         [-0.1864, -0.5667,  0.3810,  ...,  0.3259,  0.6297,  0.1796]],

        [[ 0.6227,  1.3301, -1.4758,  ...,  0.8194, -0.0981, -0.1582],
         [ 0.7625,  0.1563, -0.0703,  ..., -1.3940,  0.2271,  0.6104],
         [-0.3961,  1.3592,  0.2278,  ...,  0.8648, -0.3713, -1.7581],
         ...,
         [-0.3461, -0.0720, -1.8429,  ...,  0.7647,  1.0288, -1.0865],
         [ 0.8662,  1.1273,  0.0776,  ...,  0.3279,  1.1952,  0.7161],
         [ 1.3222,  0.0961,  0.3367,  ..., -0.0831,  0.9109,  0.5070]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 0.1094, -1.6331, -0.5931,  ...,  0.1782, -0.9360,  1.5734],
         [ 1.1786,  1.2280,  0.5710,  ..., -2.1603,  0.0419,  0.3460],
         [-0.5711,  0.5402, -0.2730,  ...,  0.7701, -0.3883, -1.4661],
         ...,
         [-0.0126,  0.5154,  1.0781,  ..., -1.3197,  0.1719, -0.0580],
         [ 0.2096, -2.9974,  0.3963,  ...,  0.7642,  0.6626,  0.3712],
         [ 1.3292,  1.5631,  0.4064,  ..., -0.3956,  0.0249, -1.1429]],

        [[-0.7624,  0.8453,  0.0122,  ..., -0.5829, -0.4594, -0.2327],
         [ 0.4789, -1.1125, -0.2564,  ...,  0.8362,  0.1345,  0.9019],
         [-0.6368,  0.9423,  1.9802,  ..., -0.8592,  0.6591, -0.5431],
         ...,
         [-0.4199,  0.6099, -2.1691,  ...,  0.1840, -0.6023,  0.6495],
         [ 0.3701,  1.4952, -0.0648,  ...,  0.2158, -0.7217,  0.2020],
         [-0.9188,  0.3637, -0.5221,  ...,  0.5391, -0.4374, -0.6794]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.8077e-01, -6.3728e-02, -5.9573e-01,  ..., -2.2855e-01,
           1.5993e+00, -9.8378e-01],
         [ 3.1065e-01,  3.6189e-01, -9.5908e-01,  ...,  1.2563e+00,
          -4.7903e-01,  1.1705e+00],
         [-1.7981e+00,  1.6897e-02, -1.3392e+00,  ..., -1.0365e-01,
           2.1617e+00,  1.3790e-01],
         ...,
         [ 2.3661e-01,  8.7795e-01,  2.9552e-01,  ..., -5.0659e-01,
          -5.1440e-01,  5.3342e-01],
         [-1.8789e-01,  3.5592e-01, -1.0933e+00,  ...,  3.1970e-01,
           5.5838e-01,  6.8350e-01],
         [-5.9065e-01,  5.4710e-01,  6.9128e-01,  ...,  6.2220e-01,
          -7.3356e-01,  5.1693e-01]],

        [[ 1.0014e+00, -1.8480e+00, -1.5100e-01,  ..., -2.1449e-01,
          -2.3230e+00,  1.1885e+00],
         [ 1.3076e-01,  4.1158e-01,  2.1098e-01,  ...,  9.3000e-01,
           4.4041e-01, -9.3514e-01],
         [-1.4193e+00,  2.1835e+00,  3.5227e-01,  ..., -5.3237e-01,
          -1.2477e+00,  4.2696e-04],
         ...,
         [-2.3309e+00, -2.2694e-01,  7.0412e-01,  ...,  2.3675e+00,
           3.6863e-01, -1.2770e-01],
         [ 4.6211e-01, -6.2064e-01,  3.1271e-01,  ..., -6.8522e-02,
          -1.6156e-01, -2.3126e+00],
         [ 8.6960e-01, -1.8077e+00,  8.0647e-01,  ..., -1.2469e+00,
           2.1931e+00,  2.4251e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.1712, -1.4758,  1.1822,  ..., -1.2831, -0.3024, -1.3578],
         [-1.0719,  1.9422, -0.3370,  ..., -0.5776,  0.6468,  1.3502],
         [-2.5306,  0.6565,  2.2725,  ...,  0.2138,  1.2017, -0.8490],
         ...,
         [-0.9193,  0.5400,  1.3740,  ..., -1.0970, -0.6877, -0.4058],
         [-0.5819, -0.4837, -0.6291,  ..., -1.5906, -0.3591,  0.5758],
         [-1.4594, -0.1929, -1.4231,  ...,  0.8332,  0.9765,  1.1971]],

        [[-1.5127,  0.9002,  0.1846,  ...,  1.2142,  1.1214, -0.2935],
         [-0.4125, -0.6810,  1.2139,  ..., -1.1922, -0.4010, -0.0084],
         [-0.4675,  0.0760,  0.0129,  ...,  0.4296,  0.7649, -0.8476],
         ...,
         [-1.5668, -0.6091, -0.6948,  ..., -0.4885, -0.4762, -1.7078],
         [ 0.0374,  0.5246,  0.3830,  ...,  1.2176, -0.0472,  1.2934],
         [ 0.7459, -0.8338,  0.7009,  ..., -0.0390,  1.1550, -1.3132]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.5472,  2.0929,  0.9590,  ..., -0.0430, -0.2004,  0.3806],
         [ 0.5203,  0.0838, -1.2684,  ..., -1.2119,  0.1412,  1.0483],
         [-1.0089, -0.3398, -1.4636,  ...,  1.9897,  2.1254, -0.9350],
         ...,
         [-0.3076,  0.2663, -0.2906,  ..., -0.2701, -0.1896,  0.2700],
         [-1.1044,  0.7640,  0.7626,  ...,  0.4543, -0.1051, -0.0100],
         [-0.0270, -1.0889,  0.9597,  ...,  0.3817,  0.2318,  0.7042]],

        [[-1.8390,  1.3925,  0.0322,  ..., -0.2019,  0.6259,  0.5979],
         [ 1.1507, -0.9866, -0.6223,  ..., -0.3437, -1.7825,  0.5354],
         [ 2.1850,  0.1097,  1.9356,  ..., -1.0712,  0.8423, -0.8403],
         ...,
         [-1.1151,  3.0973, -0.3182,  ..., -0.9144, -1.6132,  1.3740],
         [ 1.5066,  0.2851,  1.4189,  ..., -0.8123,  1.2482, -0.1768],
         [ 0.1203, -0.6181,  0.4611,  ...,  0.7872,  1.3233, -0.7174]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.1324, -0.0973, -3.0564,  ..., -0.5336, -1.6340, -1.5472],
         [-0.0495,  1.2914, -0.1572,  ...,  0.5819,  1.6480,  0.1367],
         [ 1.7949,  0.1714, -1.1377,  ..., -0.3209, -0.0697, -1.5979],
         ...,
         [-1.0173,  0.4545,  1.2902,  ...,  0.4912,  0.8114, -0.7254],
         [-0.0487,  1.7488, -1.3799,  ...,  0.3480,  0.7969, -1.4378],
         [-1.0318, -0.3052,  1.3906,  ...,  1.4417, -1.1963, -2.5585]],

        [[ 0.3641,  1.9312, -0.5590,  ...,  0.9604, -0.8176,  1.0557],
         [-0.0315,  0.2855, -0.4316,  ...,  0.6248,  0.5352, -1.2318],
         [-0.2563,  1.5219, -1.1577,  ...,  0.7111, -0.8083, -0.0254],
         ...,
         [-1.3557,  0.8468, -0.0169,  ..., -0.5711, -0.1235, -0.3827],
         [-1.2103,  0.1149,  0.4073,  ..., -0.1412, -2.5026, -0.4225],
         [-1.4634, -0.6225,  0.8878,  ..., -0.2362, -1.5961,  1.2756]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.5138, -0.4568, -0.9294,  ...,  0.6067, -0.3559,  1.4177],
         [-0.5695, -0.8424,  1.8432,  ...,  0.8929, -0.0717, -2.4595],
         [ 0.2183, -1.6339,  0.6953,  ..., -0.9095, -0.4539, -0.4424],
         ...,
         [ 0.2307,  1.6932, -0.4328,  ...,  1.4511,  1.2154, -0.5804],
         [ 0.3035,  0.3604, -0.6882,  ..., -0.6019, -0.4377, -0.6328],
         [-0.7892,  0.2740,  0.5687,  ...,  0.1599,  0.0944, -0.5247]],

        [[-0.2233, -0.8492, -0.8356,  ..., -0.3983,  0.4084, -0.7036],
         [-0.1188,  0.4572,  0.6314,  ..., -1.1449,  0.1372, -1.1763],
         [ 0.8406,  0.5806,  0.2937,  ..., -0.9487,  1.2801, -0.9180],
         ...,
         [-0.1874,  0.0950, -1.2792,  ..., -0.1943,  0.4678, -2.6523],
         [ 0.4862, -0.2871,  1.3833,  ...,  0.5223, -0.5857,  0.5468],
         [ 1.0627,  0.2569,  0.1086,  ...,  0.9282, -0.3788, -0.2992]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.4644,  1.5134, -0.1168,  ..., -0.6807, -0.0759, -0.7739],
         [-0.5401, -0.0438, -0.8798,  ...,  0.1156, -1.0572,  0.0833],
         [ 0.4707,  0.1504, -0.2909,  ..., -0.4584,  1.0962, -1.0203],
         ...,
         [-0.1997, -0.8296, -0.8084,  ..., -0.1617,  0.1785,  0.8122],
         [-0.4470,  0.6993, -2.1023,  ..., -0.0662,  1.6055,  0.1314],
         [-0.3705,  0.6911, -0.2848,  ...,  1.8216,  0.1636,  0.7157]],

        [[ 1.3501, -0.2209,  0.6009,  ..., -0.9431, -0.1097,  0.8537],
         [-0.0077, -1.3384,  0.1270,  ..., -0.4655,  0.7015,  1.0251],
         [-0.2868,  0.7535, -0.5385,  ...,  0.3773,  0.4976, -0.2780],
         ...,
         [-0.9982,  0.3552,  1.2270,  ..., -0.1330,  0.9643,  1.0942],
         [ 1.7182,  0.3049, -0.1627,  ..., -0.7665, -0.1307,  0.3095],
         [ 0.0173,  0.3951, -1.1457,  ..., -0.9443, -0.8332,  0.5347]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.4069,  1.0793,  1.8434,  ..., -0.5123,  1.2029, -0.1066],
         [ 0.7351, -1.2806, -0.4919,  ...,  2.1808,  1.1612,  1.3179],
         [-1.0882, -0.1697, -0.9158,  ...,  0.0295,  1.4273, -0.6644],
         ...,
         [ 1.6927,  0.2258, -0.9961,  ...,  0.1255, -0.4220,  0.7545],
         [-0.2693,  0.3891,  1.1025,  ...,  0.0680,  0.6764,  0.2759],
         [ 0.7229, -0.0190, -1.1456,  ..., -0.5901,  1.1645, -0.7309]],

        [[ 2.3261, -0.4419, -0.4152,  ..., -0.0028, -1.0570,  0.0961],
         [-0.2318,  0.2894, -0.6880,  ...,  0.0394,  1.7555, -0.0292],
         [ 1.2363,  1.3917, -0.6931,  ...,  1.5470,  0.3485, -2.4528],
         ...,
         [-0.6172,  0.1966,  0.4990,  ...,  0.6023,  0.9224,  1.5235],
         [ 1.3410,  0.1189, -0.3435,  ..., -1.2860,  0.3259, -0.5132],
         [-0.0490,  0.9625, -0.2542,  ..., -0.0910,  0.4270, -1.1481]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-1.6684, -0.6215,  0.7622,  ...,  0.1714, -0.4877, -1.0033],
         [-0.1838,  1.7336, -0.5087,  ...,  1.5687, -0.3370,  0.0412],
         [-0.5694, -0.2883, -0.0246,  ...,  2.2257, -2.4789, -0.1821],
         ...,
         [ 0.2283,  0.0753,  0.1149,  ...,  0.8914, -0.0639, -0.2896],
         [ 0.0207,  2.3948,  1.1139,  ..., -0.3774,  0.7507, -0.6135],
         [ 0.2429,  1.0652,  0.2875,  ..., -1.0451,  0.1929,  0.1200]],

        [[ 0.9356,  1.4348,  0.1488,  ...,  0.5095, -2.2757, -0.6683],
         [-0.1549,  0.0745,  0.6091,  ..., -0.0984,  0.6083, -0.2866],
         [ 0.7819, -0.4008,  0.5007,  ..., -0.1039,  0.8977, -0.7442],
         ...,
         [-0.3454,  1.5591,  1.5751,  ...,  2.1766,  0.2638,  0.5819],
         [ 0.7099, -1.5534,  2.5870,  ...,  0.1930,  1.5115,  0.3726],
         [-0.1515,  0.5098, -1.1303,  ...,  0.0252, -1.2465,  1.9252]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 1.1018,  1.3876,  0.5373,  ...,  0.2433, -0.2450,  1.4207],
         [ 0.5138, -1.5312, -0.9111,  ...,  0.7979, -0.0445, -2.3422],
         [ 1.7730, -0.1473, -1.2383,  ..., -0.6955, -1.7987,  0.8557],
         ...,
         [-1.1543,  0.0263, -2.5954,  ..., -0.8700, -0.4728,  0.4923],
         [-1.4443,  1.4429,  0.0470,  ..., -0.7467,  1.4104,  1.2575],
         [ 1.0462,  0.0999,  1.3356,  ..., -2.0362,  0.9227, -0.8577]],

        [[-0.5194,  0.2958, -0.1525,  ..., -0.9869,  2.1015,  0.1328],
         [-0.5430,  1.6125, -0.2495,  ...,  0.5578,  1.7886,  0.4689],
         [ 0.5508,  0.5987, -0.4829,  ...,  0.0936,  1.6981, -2.9155],
         ...,
         [ 1.2430,  0.1507,  0.7892,  ..., -0.7773,  0.6777, -0.1278],
         [-1.7746,  0.7241, -1.3579,  ...,  0.1311, -0.9496, -1.4351],
         [-1.2089,  1.2850, -1.0182,  ...,  1.6203,  2.0025, -0.4647]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.3206, -0.2045, -1.4867,  ...,  2.3268, -0.2823,  2.0268],
         [ 0.1921,  0.0220,  0.4555,  ..., -0.0619,  0.4596,  0.6065],
         [-2.0686, -0.3511, -1.0804,  ..., -0.8598, -0.4780,  1.0063],
         ...,
         [-0.0305, -0.6947,  0.2796,  ...,  0.8532,  0.4500,  0.5300],
         [ 0.0703,  0.3504,  0.1607,  ...,  0.2555, -1.6974, -1.6337],
         [ 0.3998, -0.5004, -0.2186,  ...,  0.4787, -0.8576, -1.7229]],

        [[ 0.7206, -1.3196,  0.9020,  ...,  0.3196,  1.4066,  1.0399],
         [ 1.3862,  1.1063,  1.3127,  ...,  0.2974,  2.4088, -1.2349],
         [-0.6537, -0.6851, -0.0867,  ...,  0.0611, -0.5393, -0.8061],
         ...,
         [ 0.9057,  1.2048,  1.8011,  ..., -0.3527,  1.1625, -0.6891],
         [-1.8459, -0.8064,  0.1770,  ...,  0.7076,  0.5103,  1.0619],
         [ 0.6838, -0.2592,  1.2776,  ...,  0.3473,  0.7128,  1.4611]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.0345,  0.1782,  0.5551,  ..., -0.7804, -0.8465,  0.9267],
         [-0.6558, -1.9463,  0.5501,  ...,  1.9071, -1.5069, -0.2677],
         [-0.3750, -0.4087, -0.8713,  ..., -1.4835,  0.4546, -1.8310],
         ...,
         [ 0.0878, -1.1465, -0.5563,  ...,  0.6640,  0.7889,  0.1226],
         [ 0.2564,  0.5120,  0.7573,  ...,  0.3377,  0.0163,  0.0613],
         [ 1.5317,  0.7826,  0.1309,  ...,  0.5429,  0.4776,  0.4196]],

        [[-0.6787, -0.1972, -0.9096,  ..., -1.1821, -0.6203, -0.6696],
         [ 1.0408, -0.0330,  0.6304,  ...,  0.9609, -0.0124,  0.1717],
         [ 1.7428, -0.1267, -0.1572,  ..., -0.4581,  2.1993,  1.8067],
         ...,
         [ 0.5242,  2.2012,  0.8253,  ...,  1.4762, -2.4132,  0.8271],
         [-0.3855,  0.0917,  1.3916,  ..., -0.0963, -0.4756,  1.1397],
         [-0.5200, -0.2687,  2.0947,  ...,  0.3355, -0.2229, -0.6661]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.0451,  0.8307,  0.4445,  ..., -0.7366,  0.7510,  0.3296],
         [-0.9432, -0.1909,  0.3771,  ...,  0.5110,  0.0658,  0.0575],
         [-0.3733,  0.4910,  2.0802,  ..., -1.0760,  0.1053, -0.6155],
         ...,
         [-0.9568, -0.9091,  0.3340,  ..., -0.6446, -0.6048, -1.1669],
         [ 0.1962,  0.4427,  0.7526,  ..., -1.2690, -0.8292,  0.0021],
         [-0.8966,  0.5791, -1.2346,  ..., -0.1573,  0.7136,  0.4093]],

        [[ 1.0621,  0.0799,  0.7894,  ...,  0.7075,  0.1574,  2.1057],
         [ 1.1549, -1.9188,  0.5348,  ..., -1.1818,  0.0630,  1.5829],
         [-1.0583, -1.4549,  1.0516,  ...,  0.0601, -0.2963, -0.9681],
         ...,
         [ 1.1733,  1.2163,  0.1121,  ...,  0.3018,  0.8095, -0.0087],
         [-1.5723, -1.0710, -0.0895,  ...,  0.0023, -0.8346, -0.3964],
         [ 0.5943, -0.0575,  1.0849,  ...,  0.3646, -0.4136, -0.0892]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.1758e+00, -8.8421e-01, -1.0389e+00,  ...,  1.6041e-01,
           1.4085e+00,  3.5351e-01],
         [-7.3799e-01, -6.9546e-01,  1.2406e+00,  ...,  1.9692e+00,
          -1.0980e+00,  5.0748e-01],
         [ 4.8386e-01,  1.5949e+00,  8.3349e-01,  ...,  2.5334e+00,
           5.3089e-01,  1.8849e+00],
         ...,
         [-2.7009e-01, -3.5409e-01,  8.8048e-01,  ..., -9.2723e-01,
           6.7409e-02,  1.9849e-01],
         [-1.0201e+00, -1.8267e+00,  9.9601e-01,  ..., -4.0202e-01,
          -9.3140e-02, -1.1482e-01],
         [-9.8140e-01,  1.9408e+00,  1.5323e-01,  ...,  2.0263e+00,
          -3.9275e-01,  4.6737e-01]],

        [[ 1.4140e-01,  1.0438e+00,  3.2396e-01,  ..., -1.5696e-01,
          -1.3451e+00,  7.5591e-01],
         [-1.0626e+00,  2.4954e-01, -3.7164e-01,  ...,  1.4321e+00,
           2.7628e-01,  1.0768e+00],
         [-1.0095e+00,  1.0108e+00, -1.7936e+00,  ..., -8.1598e-01,
           1.4941e+00,  3.3724e-01],
         ...,
         [-2.5292e-02,  2.1993e+00, -4.6642e-01,  ..., -1.0858e+00,
           3.0165e+00,  1.0954e+00],
         [-3.1857e+00, -6.6476e-01,  1.9423e-01,  ..., -2.9071e-01,
           4.6051e-01,  1.9818e-03],
         [-1.7846e+00, -5.7883e-01,  7.2820e-01,  ...,  1.0430e+00,
          -3.8238e-01, -9.1701e-01]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[-0.7781,  0.0746,  2.3467,  ...,  1.4491,  2.7052, -0.0192],
         [ 1.1345, -1.5173,  1.2110,  ..., -0.7618, -0.8456, -0.0975],
         [ 0.5623,  1.0546,  0.2037,  ..., -0.3523,  0.9058,  0.0745],
         ...,
         [-0.6529, -0.7412,  1.2456,  ..., -0.2380, -0.0057,  1.2673],
         [-1.1849,  0.5534, -0.0990,  ..., -0.3310,  2.3393, -1.1237],
         [ 0.6354,  1.0607, -1.8918,  ...,  0.5778,  0.0146,  0.0046]],

        [[-1.9667,  0.9710, -0.8503,  ...,  0.5729, -0.9890, -1.7604],
         [-0.8643, -0.8571, -1.2422,  ..., -0.3703, -0.1359,  1.3911],
         [ 0.3002,  1.4038,  1.1437,  ..., -2.4492,  2.2876, -0.3197],
         ...,
         [-0.1378,  0.3926,  1.4920,  ...,  0.4163,  1.2474,  1.0599],
         [-2.5936, -0.7456, -1.5247,  ...,  0.0320,  0.1485,  0.6417],
         [-0.7062,  0.5991, -0.9037,  ..., -0.2681, -0.5394,  0.7444]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.1013, -0.0173, -0.7952,  ...,  0.9564, -0.7156,  0.4670],
         [ 0.2673, -0.1002, -0.1759,  ..., -0.3711,  0.7181,  0.7894],
         [ 0.5826,  1.8437, -0.4804,  ..., -1.2764, -0.4256,  0.0369],
         ...,
         [ 0.4096,  0.4693, -1.2906,  ..., -1.0465, -0.9641, -2.0065],
         [-0.1188, -0.9789,  0.4165,  ...,  0.0605,  2.1339,  0.4067],
         [-0.1864, -0.5667,  0.3810,  ...,  0.3259,  0.6297,  0.1796]],

        [[ 0.6227,  1.3301, -1.4758,  ...,  0.8194, -0.0981, -0.1582],
         [ 0.7625,  0.1563, -0.0703,  ..., -1.3940,  0.2271,  0.6104],
         [-0.3961,  1.3592,  0.2278,  ...,  0.8648, -0.3713, -1.7581],
         ...,
         [-0.3461, -0.0720, -1.8429,  ...,  0.7647,  1.0288, -1.0865],
         [ 0.8662,  1.1273,  0.0776,  ...,  0.3279,  1.1952,  0.7161],
         [ 1.3222,  0.0961,  0.3367,  ..., -0.0831,  0.9109,  0.5070]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 0.1094, -1.6331, -0.5931,  ...,  0.1782, -0.9360,  1.5734],
         [ 1.1786,  1.2280,  0.5710,  ..., -2.1603,  0.0419,  0.3460],
         [-0.5711,  0.5402, -0.2730,  ...,  0.7701, -0.3883, -1.4661],
         ...,
         [-0.0126,  0.5154,  1.0781,  ..., -1.3197,  0.1719, -0.0580],
         [ 0.2096, -2.9974,  0.3963,  ...,  0.7642,  0.6626,  0.3712],
         [ 1.3292,  1.5631,  0.4064,  ..., -0.3956,  0.0249, -1.1429]],

        [[-0.7624,  0.8453,  0.0122,  ..., -0.5829, -0.4594, -0.2327],
         [ 0.4789, -1.1125, -0.2564,  ...,  0.8362,  0.1345,  0.9019],
         [-0.6368,  0.9423,  1.9802,  ..., -0.8592,  0.6591, -0.5431],
         ...,
         [-0.4199,  0.6099, -2.1691,  ...,  0.1840, -0.6023,  0.6495],
         [ 0.3701,  1.4952, -0.0648,  ...,  0.2158, -0.7217,  0.2020],
         [-0.9188,  0.3637, -0.5221,  ...,  0.5391, -0.4374, -0.6794]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.8077e-01, -6.3728e-02, -5.9573e-01,  ..., -2.2855e-01,
           1.5993e+00, -9.8378e-01],
         [ 3.1065e-01,  3.6189e-01, -9.5908e-01,  ...,  1.2563e+00,
          -4.7903e-01,  1.1705e+00],
         [-1.7981e+00,  1.6897e-02, -1.3392e+00,  ..., -1.0365e-01,
           2.1617e+00,  1.3790e-01],
         ...,
         [ 2.3661e-01,  8.7795e-01,  2.9552e-01,  ..., -5.0659e-01,
          -5.1440e-01,  5.3342e-01],
         [-1.8789e-01,  3.5592e-01, -1.0933e+00,  ...,  3.1970e-01,
           5.5838e-01,  6.8350e-01],
         [-5.9065e-01,  5.4710e-01,  6.9128e-01,  ...,  6.2220e-01,
          -7.3356e-01,  5.1693e-01]],

        [[ 1.0014e+00, -1.8480e+00, -1.5100e-01,  ..., -2.1449e-01,
          -2.3230e+00,  1.1885e+00],
         [ 1.3076e-01,  4.1158e-01,  2.1098e-01,  ...,  9.3000e-01,
           4.4041e-01, -9.3514e-01],
         [-1.4193e+00,  2.1835e+00,  3.5227e-01,  ..., -5.3237e-01,
          -1.2477e+00,  4.2696e-04],
         ...,
         [-2.3309e+00, -2.2694e-01,  7.0412e-01,  ...,  2.3675e+00,
           3.6863e-01, -1.2770e-01],
         [ 4.6211e-01, -6.2064e-01,  3.1271e-01,  ..., -6.8522e-02,
          -1.6156e-01, -2.3126e+00],
         [ 8.6960e-01, -1.8077e+00,  8.0647e-01,  ..., -1.2469e+00,
           2.1931e+00,  2.4251e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.1712, -1.4758,  1.1822,  ..., -1.2831, -0.3024, -1.3578],
         [-1.0719,  1.9422, -0.3370,  ..., -0.5776,  0.6468,  1.3502],
         [-2.5306,  0.6565,  2.2725,  ...,  0.2138,  1.2017, -0.8490],
         ...,
         [-0.9193,  0.5400,  1.3740,  ..., -1.0970, -0.6877, -0.4058],
         [-0.5819, -0.4837, -0.6291,  ..., -1.5906, -0.3591,  0.5758],
         [-1.4594, -0.1929, -1.4231,  ...,  0.8332,  0.9765,  1.1971]],

        [[-1.5127,  0.9002,  0.1846,  ...,  1.2142,  1.1214, -0.2935],
         [-0.4125, -0.6810,  1.2139,  ..., -1.1922, -0.4010, -0.0084],
         [-0.4675,  0.0760,  0.0129,  ...,  0.4296,  0.7649, -0.8476],
         ...,
         [-1.5668, -0.6091, -0.6948,  ..., -0.4885, -0.4762, -1.7078],
         [ 0.0374,  0.5246,  0.3830,  ...,  1.2176, -0.0472,  1.2934],
         [ 0.7459, -0.8338,  0.7009,  ..., -0.0390,  1.1550, -1.3132]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.5472,  2.0929,  0.9590,  ..., -0.0430, -0.2004,  0.3806],
         [ 0.5203,  0.0838, -1.2684,  ..., -1.2119,  0.1412,  1.0483],
         [-1.0089, -0.3398, -1.4636,  ...,  1.9897,  2.1254, -0.9350],
         ...,
         [-0.3076,  0.2663, -0.2906,  ..., -0.2701, -0.1896,  0.2700],
         [-1.1044,  0.7640,  0.7626,  ...,  0.4543, -0.1051, -0.0100],
         [-0.0270, -1.0889,  0.9597,  ...,  0.3817,  0.2318,  0.7042]],

        [[-1.8390,  1.3925,  0.0322,  ..., -0.2019,  0.6259,  0.5979],
         [ 1.1507, -0.9866, -0.6223,  ..., -0.3437, -1.7825,  0.5354],
         [ 2.1850,  0.1097,  1.9356,  ..., -1.0712,  0.8423, -0.8403],
         ...,
         [-1.1151,  3.0973, -0.3182,  ..., -0.9144, -1.6132,  1.3740],
         [ 1.5066,  0.2851,  1.4189,  ..., -0.8123,  1.2482, -0.1768],
         [ 0.1203, -0.6181,  0.4611,  ...,  0.7872,  1.3233, -0.7174]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.1324, -0.0973, -3.0564,  ..., -0.5336, -1.6340, -1.5472],
         [-0.0495,  1.2914, -0.1572,  ...,  0.5819,  1.6480,  0.1367],
         [ 1.7949,  0.1714, -1.1377,  ..., -0.3209, -0.0697, -1.5979],
         ...,
         [-1.0173,  0.4545,  1.2902,  ...,  0.4912,  0.8114, -0.7254],
         [-0.0487,  1.7488, -1.3799,  ...,  0.3480,  0.7969, -1.4378],
         [-1.0318, -0.3052,  1.3906,  ...,  1.4417, -1.1963, -2.5585]],

        [[ 0.3641,  1.9312, -0.5590,  ...,  0.9604, -0.8176,  1.0557],
         [-0.0315,  0.2855, -0.4316,  ...,  0.6248,  0.5352, -1.2318],
         [-0.2563,  1.5219, -1.1577,  ...,  0.7111, -0.8083, -0.0254],
         ...,
         [-1.3557,  0.8468, -0.0169,  ..., -0.5711, -0.1235, -0.3827],
         [-1.2103,  0.1149,  0.4073,  ..., -0.1412, -2.5026, -0.4225],
         [-1.4634, -0.6225,  0.8878,  ..., -0.2362, -1.5961,  1.2756]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.5138, -0.4568, -0.9294,  ...,  0.6067, -0.3559,  1.4177],
         [-0.5695, -0.8424,  1.8432,  ...,  0.8929, -0.0717, -2.4595],
         [ 0.2183, -1.6339,  0.6953,  ..., -0.9095, -0.4539, -0.4424],
         ...,
         [ 0.2307,  1.6932, -0.4328,  ...,  1.4511,  1.2154, -0.5804],
         [ 0.3035,  0.3604, -0.6882,  ..., -0.6019, -0.4377, -0.6328],
         [-0.7892,  0.2740,  0.5687,  ...,  0.1599,  0.0944, -0.5247]],

        [[-0.2233, -0.8492, -0.8356,  ..., -0.3983,  0.4084, -0.7036],
         [-0.1188,  0.4572,  0.6314,  ..., -1.1449,  0.1372, -1.1763],
         [ 0.8406,  0.5806,  0.2937,  ..., -0.9487,  1.2801, -0.9180],
         ...,
         [-0.1874,  0.0950, -1.2792,  ..., -0.1943,  0.4678, -2.6523],
         [ 0.4862, -0.2871,  1.3833,  ...,  0.5223, -0.5857,  0.5468],
         [ 1.0627,  0.2569,  0.1086,  ...,  0.9282, -0.3788, -0.2992]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.4644,  1.5134, -0.1168,  ..., -0.6807, -0.0759, -0.7739],
         [-0.5401, -0.0438, -0.8798,  ...,  0.1156, -1.0572,  0.0833],
         [ 0.4707,  0.1504, -0.2909,  ..., -0.4584,  1.0962, -1.0203],
         ...,
         [-0.1997, -0.8296, -0.8084,  ..., -0.1617,  0.1785,  0.8122],
         [-0.4470,  0.6993, -2.1023,  ..., -0.0662,  1.6055,  0.1314],
         [-0.3705,  0.6911, -0.2848,  ...,  1.8216,  0.1636,  0.7157]],

        [[ 1.3501, -0.2209,  0.6009,  ..., -0.9431, -0.1097,  0.8537],
         [-0.0077, -1.3384,  0.1270,  ..., -0.4655,  0.7015,  1.0251],
         [-0.2868,  0.7535, -0.5385,  ...,  0.3773,  0.4976, -0.2780],
         ...,
         [-0.9982,  0.3552,  1.2270,  ..., -0.1330,  0.9643,  1.0942],
         [ 1.7182,  0.3049, -0.1627,  ..., -0.7665, -0.1307,  0.3095],
         [ 0.0173,  0.3951, -1.1457,  ..., -0.9443, -0.8332,  0.5347]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.4069,  1.0793,  1.8434,  ..., -0.5123,  1.2029, -0.1066],
         [ 0.7351, -1.2806, -0.4919,  ...,  2.1808,  1.1612,  1.3179],
         [-1.0882, -0.1697, -0.9158,  ...,  0.0295,  1.4273, -0.6644],
         ...,
         [ 1.6927,  0.2258, -0.9961,  ...,  0.1255, -0.4220,  0.7545],
         [-0.2693,  0.3891,  1.1025,  ...,  0.0680,  0.6764,  0.2759],
         [ 0.7229, -0.0190, -1.1456,  ..., -0.5901,  1.1645, -0.7309]],

        [[ 2.3261, -0.4419, -0.4152,  ..., -0.0028, -1.0570,  0.0961],
         [-0.2318,  0.2894, -0.6880,  ...,  0.0394,  1.7555, -0.0292],
         [ 1.2363,  1.3917, -0.6931,  ...,  1.5470,  0.3485, -2.4528],
         ...,
         [-0.6172,  0.1966,  0.4990,  ...,  0.6023,  0.9224,  1.5235],
         [ 1.3410,  0.1189, -0.3435,  ..., -1.2860,  0.3259, -0.5132],
         [-0.0490,  0.9625, -0.2542,  ..., -0.0910,  0.4270, -1.1481]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-1.6684, -0.6215,  0.7622,  ...,  0.1714, -0.4877, -1.0033],
         [-0.1838,  1.7336, -0.5087,  ...,  1.5687, -0.3370,  0.0412],
         [-0.5694, -0.2883, -0.0246,  ...,  2.2257, -2.4789, -0.1821],
         ...,
         [ 0.2283,  0.0753,  0.1149,  ...,  0.8914, -0.0639, -0.2896],
         [ 0.0207,  2.3948,  1.1139,  ..., -0.3774,  0.7507, -0.6135],
         [ 0.2429,  1.0652,  0.2875,  ..., -1.0451,  0.1929,  0.1200]],

        [[ 0.9356,  1.4348,  0.1488,  ...,  0.5095, -2.2757, -0.6683],
         [-0.1549,  0.0745,  0.6091,  ..., -0.0984,  0.6083, -0.2866],
         [ 0.7819, -0.4008,  0.5007,  ..., -0.1039,  0.8977, -0.7442],
         ...,
         [-0.3454,  1.5591,  1.5751,  ...,  2.1766,  0.2638,  0.5819],
         [ 0.7099, -1.5534,  2.5870,  ...,  0.1930,  1.5115,  0.3726],
         [-0.1515,  0.5098, -1.1303,  ...,  0.0252, -1.2465,  1.9252]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 1.1018,  1.3876,  0.5373,  ...,  0.2433, -0.2450,  1.4207],
         [ 0.5138, -1.5312, -0.9111,  ...,  0.7979, -0.0445, -2.3422],
         [ 1.7730, -0.1473, -1.2383,  ..., -0.6955, -1.7987,  0.8557],
         ...,
         [-1.1543,  0.0263, -2.5954,  ..., -0.8700, -0.4728,  0.4923],
         [-1.4443,  1.4429,  0.0470,  ..., -0.7467,  1.4104,  1.2575],
         [ 1.0462,  0.0999,  1.3356,  ..., -2.0362,  0.9227, -0.8577]],

        [[-0.5194,  0.2958, -0.1525,  ..., -0.9869,  2.1015,  0.1328],
         [-0.5430,  1.6125, -0.2495,  ...,  0.5578,  1.7886,  0.4689],
         [ 0.5508,  0.5987, -0.4829,  ...,  0.0936,  1.6981, -2.9155],
         ...,
         [ 1.2430,  0.1507,  0.7892,  ..., -0.7773,  0.6777, -0.1278],
         [-1.7746,  0.7241, -1.3579,  ...,  0.1311, -0.9496, -1.4351],
         [-1.2089,  1.2850, -1.0182,  ...,  1.6203,  2.0025, -0.4647]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.3206, -0.2045, -1.4867,  ...,  2.3268, -0.2823,  2.0268],
         [ 0.1921,  0.0220,  0.4555,  ..., -0.0619,  0.4596,  0.6065],
         [-2.0686, -0.3511, -1.0804,  ..., -0.8598, -0.4780,  1.0063],
         ...,
         [-0.0305, -0.6947,  0.2796,  ...,  0.8532,  0.4500,  0.5300],
         [ 0.0703,  0.3504,  0.1607,  ...,  0.2555, -1.6974, -1.6337],
         [ 0.3998, -0.5004, -0.2186,  ...,  0.4787, -0.8576, -1.7229]],

        [[ 0.7206, -1.3196,  0.9020,  ...,  0.3196,  1.4066,  1.0399],
         [ 1.3862,  1.1063,  1.3127,  ...,  0.2974,  2.4088, -1.2349],
         [-0.6537, -0.6851, -0.0867,  ...,  0.0611, -0.5393, -0.8061],
         ...,
         [ 0.9057,  1.2048,  1.8011,  ..., -0.3527,  1.1625, -0.6891],
         [-1.8459, -0.8064,  0.1770,  ...,  0.7076,  0.5103,  1.0619],
         [ 0.6838, -0.2592,  1.2776,  ...,  0.3473,  0.7128,  1.4611]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.0345,  0.1782,  0.5551,  ..., -0.7804, -0.8465,  0.9267],
         [-0.6558, -1.9463,  0.5501,  ...,  1.9071, -1.5069, -0.2677],
         [-0.3750, -0.4087, -0.8713,  ..., -1.4835,  0.4546, -1.8310],
         ...,
         [ 0.0878, -1.1465, -0.5563,  ...,  0.6640,  0.7889,  0.1226],
         [ 0.2564,  0.5120,  0.7573,  ...,  0.3377,  0.0163,  0.0613],
         [ 1.5317,  0.7826,  0.1309,  ...,  0.5429,  0.4776,  0.4196]],

        [[-0.6787, -0.1972, -0.9096,  ..., -1.1821, -0.6203, -0.6696],
         [ 1.0408, -0.0330,  0.6304,  ...,  0.9609, -0.0124,  0.1717],
         [ 1.7428, -0.1267, -0.1572,  ..., -0.4581,  2.1993,  1.8067],
         ...,
         [ 0.5242,  2.2012,  0.8253,  ...,  1.4762, -2.4132,  0.8271],
         [-0.3855,  0.0917,  1.3916,  ..., -0.0963, -0.4756,  1.1397],
         [-0.5200, -0.2687,  2.0947,  ...,  0.3355, -0.2229, -0.6661]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 420.997, Val Loss : 800.167
======> Trajectory Loss : 237.242, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.394, BelowGroundPenalize Loss : 44.360
Opening in existing browser session.
[1019/150839.182399:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/150839.470484:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/150839.764620:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/129].........tensor([[[-0.0451,  0.8307,  0.4445,  ..., -0.7366,  0.7510,  0.3296],
         [-0.9432, -0.1909,  0.3771,  ...,  0.5110,  0.0658,  0.0575],
         [-0.3733,  0.4910,  2.0802,  ..., -1.0760,  0.1053, -0.6155],
         ...,
         [-0.9568, -0.9091,  0.3340,  ..., -0.6446, -0.6048, -1.1669],
         [ 0.1962,  0.4427,  0.7526,  ..., -1.2690, -0.8292,  0.0021],
         [-0.8966,  0.5791, -1.2346,  ..., -0.1573,  0.7136,  0.4093]],

        [[ 1.0621,  0.0799,  0.7894,  ...,  0.7075,  0.1574,  2.1057],
         [ 1.1549, -1.9188,  0.5348,  ..., -1.1818,  0.0630,  1.5829],
         [-1.0583, -1.4549,  1.0516,  ...,  0.0601, -0.2963, -0.9681],
         ...,
         [ 1.1733,  1.2163,  0.1121,  ...,  0.3018,  0.8095, -0.0087],
         [-1.5723, -1.0710, -0.0895,  ...,  0.0023, -0.8346, -0.3964],
         [ 0.5943, -0.0575,  1.0849,  ...,  0.3646, -0.4136, -0.0892]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.1758e+00, -8.8421e-01, -1.0389e+00,  ...,  1.6041e-01,
           1.4085e+00,  3.5351e-01],
         [-7.3799e-01, -6.9546e-01,  1.2406e+00,  ...,  1.9692e+00,
          -1.0980e+00,  5.0748e-01],
         [ 4.8386e-01,  1.5949e+00,  8.3349e-01,  ...,  2.5334e+00,
           5.3089e-01,  1.8849e+00],
         ...,
         [-2.7009e-01, -3.5409e-01,  8.8048e-01,  ..., -9.2723e-01,
           6.7409e-02,  1.9849e-01],
         [-1.0201e+00, -1.8267e+00,  9.9601e-01,  ..., -4.0202e-01,
          -9.3140e-02, -1.1482e-01],
         [-9.8140e-01,  1.9408e+00,  1.5323e-01,  ...,  2.0263e+00,
          -3.9275e-01,  4.6737e-01]],

        [[ 1.4140e-01,  1.0438e+00,  3.2396e-01,  ..., -1.5696e-01,
          -1.3451e+00,  7.5591e-01],
         [-1.0626e+00,  2.4954e-01, -3.7164e-01,  ...,  1.4321e+00,
           2.7628e-01,  1.0768e+00],
         [-1.0095e+00,  1.0108e+00, -1.7936e+00,  ..., -8.1598e-01,
           1.4941e+00,  3.3724e-01],
         ...,
         [-2.5292e-02,  2.1993e+00, -4.6642e-01,  ..., -1.0858e+00,
           3.0165e+00,  1.0954e+00],
         [-3.1857e+00, -6.6476e-01,  1.9423e-01,  ..., -2.9071e-01,
           4.6051e-01,  1.9818e-03],
         [-1.7846e+00, -5.7883e-01,  7.2820e-01,  ...,  1.0430e+00,
          -3.8238e-01, -9.1701e-01]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[-0.7781,  0.0746,  2.3467,  ...,  1.4491,  2.7052, -0.0192],
         [ 1.1345, -1.5173,  1.2110,  ..., -0.7618, -0.8456, -0.0975],
         [ 0.5623,  1.0546,  0.2037,  ..., -0.3523,  0.9058,  0.0745],
         ...,
         [-0.6529, -0.7412,  1.2456,  ..., -0.2380, -0.0057,  1.2673],
         [-1.1849,  0.5534, -0.0990,  ..., -0.3310,  2.3393, -1.1237],
         [ 0.6354,  1.0607, -1.8918,  ...,  0.5778,  0.0146,  0.0046]],

        [[-1.9667,  0.9710, -0.8503,  ...,  0.5729, -0.9890, -1.7604],
         [-0.8643, -0.8571, -1.2422,  ..., -0.3703, -0.1359,  1.3911],
         [ 0.3002,  1.4038,  1.1437,  ..., -2.4492,  2.2876, -0.3197],
         ...,
         [-0.1378,  0.3926,  1.4920,  ...,  0.4163,  1.2474,  1.0599],
         [-2.5936, -0.7456, -1.5247,  ...,  0.0320,  0.1485,  0.6417],
         [-0.7062,  0.5991, -0.9037,  ..., -0.2681, -0.5394,  0.7444]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.1013, -0.0173, -0.7952,  ...,  0.9564, -0.7156,  0.4670],
         [ 0.2673, -0.1002, -0.1759,  ..., -0.3711,  0.7181,  0.7894],
         [ 0.5826,  1.8437, -0.4804,  ..., -1.2764, -0.4256,  0.0369],
         ...,
         [ 0.4096,  0.4693, -1.2906,  ..., -1.0465, -0.9641, -2.0065],
         [-0.1188, -0.9789,  0.4165,  ...,  0.0605,  2.1339,  0.4067],
         [-0.1864, -0.5667,  0.3810,  ...,  0.3259,  0.6297,  0.1796]],

        [[ 0.6227,  1.3301, -1.4758,  ...,  0.8194, -0.0981, -0.1582],
         [ 0.7625,  0.1563, -0.0703,  ..., -1.3940,  0.2271,  0.6104],
         [-0.3961,  1.3592,  0.2278,  ...,  0.8648, -0.3713, -1.7581],
         ...,
         [-0.3461, -0.0720, -1.8429,  ...,  0.7647,  1.0288, -1.0865],
         [ 0.8662,  1.1273,  0.0776,  ...,  0.3279,  1.1952,  0.7161],
         [ 1.3222,  0.0961,  0.3367,  ..., -0.0831,  0.9109,  0.5070]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 0.1094, -1.6331, -0.5931,  ...,  0.1782, -0.9360,  1.5734],
         [ 1.1786,  1.2280,  0.5710,  ..., -2.1603,  0.0419,  0.3460],
         [-0.5711,  0.5402, -0.2730,  ...,  0.7701, -0.3883, -1.4661],
         ...,
         [-0.0126,  0.5154,  1.0781,  ..., -1.3197,  0.1719, -0.0580],
         [ 0.2096, -2.9974,  0.3963,  ...,  0.7642,  0.6626,  0.3712],
         [ 1.3292,  1.5631,  0.4064,  ..., -0.3956,  0.0249, -1.1429]],

        [[-0.7624,  0.8453,  0.0122,  ..., -0.5829, -0.4594, -0.2327],
         [ 0.4789, -1.1125, -0.2564,  ...,  0.8362,  0.1345,  0.9019],
         [-0.6368,  0.9423,  1.9802,  ..., -0.8592,  0.6591, -0.5431],
         ...,
         [-0.4199,  0.6099, -2.1691,  ...,  0.1840, -0.6023,  0.6495],
         [ 0.3701,  1.4952, -0.0648,  ...,  0.2158, -0.7217,  0.2020],
         [-0.9188,  0.3637, -0.5221,  ...,  0.5391, -0.4374, -0.6794]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.8077e-01, -6.3728e-02, -5.9573e-01,  ..., -2.2855e-01,
           1.5993e+00, -9.8378e-01],
         [ 3.1065e-01,  3.6189e-01, -9.5908e-01,  ...,  1.2563e+00,
          -4.7903e-01,  1.1705e+00],
         [-1.7981e+00,  1.6897e-02, -1.3392e+00,  ..., -1.0365e-01,
           2.1617e+00,  1.3790e-01],
         ...,
         [ 2.3661e-01,  8.7795e-01,  2.9552e-01,  ..., -5.0659e-01,
          -5.1440e-01,  5.3342e-01],
         [-1.8789e-01,  3.5592e-01, -1.0933e+00,  ...,  3.1970e-01,
           5.5838e-01,  6.8350e-01],
         [-5.9065e-01,  5.4710e-01,  6.9128e-01,  ...,  6.2220e-01,
          -7.3356e-01,  5.1693e-01]],

        [[ 1.0014e+00, -1.8480e+00, -1.5100e-01,  ..., -2.1449e-01,
          -2.3230e+00,  1.1885e+00],
         [ 1.3076e-01,  4.1158e-01,  2.1098e-01,  ...,  9.3000e-01,
           4.4041e-01, -9.3514e-01],
         [-1.4193e+00,  2.1835e+00,  3.5227e-01,  ..., -5.3237e-01,
          -1.2477e+00,  4.2696e-04],
         ...,
         [-2.3309e+00, -2.2694e-01,  7.0412e-01,  ...,  2.3675e+00,
           3.6863e-01, -1.2770e-01],
         [ 4.6211e-01, -6.2064e-01,  3.1271e-01,  ..., -6.8522e-02,
          -1.6156e-01, -2.3126e+00],
         [ 8.6960e-01, -1.8077e+00,  8.0647e-01,  ..., -1.2469e+00,
           2.1931e+00,  2.4251e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.1712, -1.4758,  1.1822,  ..., -1.2831, -0.3024, -1.3578],
         [-1.0719,  1.9422, -0.3370,  ..., -0.5776,  0.6468,  1.3502],
         [-2.5306,  0.6565,  2.2725,  ...,  0.2138,  1.2017, -0.8490],
         ...,
         [-0.9193,  0.5400,  1.3740,  ..., -1.0970, -0.6877, -0.4058],
         [-0.5819, -0.4837, -0.6291,  ..., -1.5906, -0.3591,  0.5758],
         [-1.4594, -0.1929, -1.4231,  ...,  0.8332,  0.9765,  1.1971]],

        [[-1.5127,  0.9002,  0.1846,  ...,  1.2142,  1.1214, -0.2935],
         [-0.4125, -0.6810,  1.2139,  ..., -1.1922, -0.4010, -0.0084],
         [-0.4675,  0.0760,  0.0129,  ...,  0.4296,  0.7649, -0.8476],
         ...,
         [-1.5668, -0.6091, -0.6948,  ..., -0.4885, -0.4762, -1.7078],
         [ 0.0374,  0.5246,  0.3830,  ...,  1.2176, -0.0472,  1.2934],
         [ 0.7459, -0.8338,  0.7009,  ..., -0.0390,  1.1550, -1.3132]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.5472,  2.0929,  0.9590,  ..., -0.0430, -0.2004,  0.3806],
         [ 0.5203,  0.0838, -1.2684,  ..., -1.2119,  0.1412,  1.0483],
         [-1.0089, -0.3398, -1.4636,  ...,  1.9897,  2.1254, -0.9350],
         ...,
         [-0.3076,  0.2663, -0.2906,  ..., -0.2701, -0.1896,  0.2700],
         [-1.1044,  0.7640,  0.7626,  ...,  0.4543, -0.1051, -0.0100],
         [-0.0270, -1.0889,  0.9597,  ...,  0.3817,  0.2318,  0.7042]],

        [[-1.8390,  1.3925,  0.0322,  ..., -0.2019,  0.6259,  0.5979],
         [ 1.1507, -0.9866, -0.6223,  ..., -0.3437, -1.7825,  0.5354],
         [ 2.1850,  0.1097,  1.9356,  ..., -1.0712,  0.8423, -0.8403],
         ...,
         [-1.1151,  3.0973, -0.3182,  ..., -0.9144, -1.6132,  1.3740],
         [ 1.5066,  0.2851,  1.4189,  ..., -0.8123,  1.2482, -0.1768],
         [ 0.1203, -0.6181,  0.4611,  ...,  0.7872,  1.3233, -0.7174]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.1324, -0.0973, -3.0564,  ..., -0.5336, -1.6340, -1.5472],
         [-0.0495,  1.2914, -0.1572,  ...,  0.5819,  1.6480,  0.1367],
         [ 1.7949,  0.1714, -1.1377,  ..., -0.3209, -0.0697, -1.5979],
         ...,
         [-1.0173,  0.4545,  1.2902,  ...,  0.4912,  0.8114, -0.7254],
         [-0.0487,  1.7488, -1.3799,  ...,  0.3480,  0.7969, -1.4378],
         [-1.0318, -0.3052,  1.3906,  ...,  1.4417, -1.1963, -2.5585]],

        [[ 0.3641,  1.9312, -0.5590,  ...,  0.9604, -0.8176,  1.0557],
         [-0.0315,  0.2855, -0.4316,  ...,  0.6248,  0.5352, -1.2318],
         [-0.2563,  1.5219, -1.1577,  ...,  0.7111, -0.8083, -0.0254],
         ...,
         [-1.3557,  0.8468, -0.0169,  ..., -0.5711, -0.1235, -0.3827],
         [-1.2103,  0.1149,  0.4073,  ..., -0.1412, -2.5026, -0.4225],
         [-1.4634, -0.6225,  0.8878,  ..., -0.2362, -1.5961,  1.2756]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.5138, -0.4568, -0.9294,  ...,  0.6067, -0.3559,  1.4177],
         [-0.5695, -0.8424,  1.8432,  ...,  0.8929, -0.0717, -2.4595],
         [ 0.2183, -1.6339,  0.6953,  ..., -0.9095, -0.4539, -0.4424],
         ...,
         [ 0.2307,  1.6932, -0.4328,  ...,  1.4511,  1.2154, -0.5804],
         [ 0.3035,  0.3604, -0.6882,  ..., -0.6019, -0.4377, -0.6328],
         [-0.7892,  0.2740,  0.5687,  ...,  0.1599,  0.0944, -0.5247]],

        [[-0.2233, -0.8492, -0.8356,  ..., -0.3983,  0.4084, -0.7036],
         [-0.1188,  0.4572,  0.6314,  ..., -1.1449,  0.1372, -1.1763],
         [ 0.8406,  0.5806,  0.2937,  ..., -0.9487,  1.2801, -0.9180],
         ...,
         [-0.1874,  0.0950, -1.2792,  ..., -0.1943,  0.4678, -2.6523],
         [ 0.4862, -0.2871,  1.3833,  ...,  0.5223, -0.5857,  0.5468],
         [ 1.0627,  0.2569,  0.1086,  ...,  0.9282, -0.3788, -0.2992]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.4644,  1.5134, -0.1168,  ..., -0.6807, -0.0759, -0.7739],
         [-0.5401, -0.0438, -0.8798,  ...,  0.1156, -1.0572,  0.0833],
         [ 0.4707,  0.1504, -0.2909,  ..., -0.4584,  1.0962, -1.0203],
         ...,
         [-0.1997, -0.8296, -0.8084,  ..., -0.1617,  0.1785,  0.8122],
         [-0.4470,  0.6993, -2.1023,  ..., -0.0662,  1.6055,  0.1314],
         [-0.3705,  0.6911, -0.2848,  ...,  1.8216,  0.1636,  0.7157]],

        [[ 1.3501, -0.2209,  0.6009,  ..., -0.9431, -0.1097,  0.8537],
         [-0.0077, -1.3384,  0.1270,  ..., -0.4655,  0.7015,  1.0251],
         [-0.2868,  0.7535, -0.5385,  ...,  0.3773,  0.4976, -0.2780],
         ...,
         [-0.9982,  0.3552,  1.2270,  ..., -0.1330,  0.9643,  1.0942],
         [ 1.7182,  0.3049, -0.1627,  ..., -0.7665, -0.1307,  0.3095],
         [ 0.0173,  0.3951, -1.1457,  ..., -0.9443, -0.8332,  0.5347]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.4069,  1.0793,  1.8434,  ..., -0.5123,  1.2029, -0.1066],
         [ 0.7351, -1.2806, -0.4919,  ...,  2.1808,  1.1612,  1.3179],
         [-1.0882, -0.1697, -0.9158,  ...,  0.0295,  1.4273, -0.6644],
         ...,
         [ 1.6927,  0.2258, -0.9961,  ...,  0.1255, -0.4220,  0.7545],
         [-0.2693,  0.3891,  1.1025,  ...,  0.0680,  0.6764,  0.2759],
         [ 0.7229, -0.0190, -1.1456,  ..., -0.5901,  1.1645, -0.7309]],

        [[ 2.3261, -0.4419, -0.4152,  ..., -0.0028, -1.0570,  0.0961],
         [-0.2318,  0.2894, -0.6880,  ...,  0.0394,  1.7555, -0.0292],
         [ 1.2363,  1.3917, -0.6931,  ...,  1.5470,  0.3485, -2.4528],
         ...,
         [-0.6172,  0.1966,  0.4990,  ...,  0.6023,  0.9224,  1.5235],
         [ 1.3410,  0.1189, -0.3435,  ..., -1.2860,  0.3259, -0.5132],
         [-0.0490,  0.9625, -0.2542,  ..., -0.0910,  0.4270, -1.1481]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-1.6684, -0.6215,  0.7622,  ...,  0.1714, -0.4877, -1.0033],
         [-0.1838,  1.7336, -0.5087,  ...,  1.5687, -0.3370,  0.0412],
         [-0.5694, -0.2883, -0.0246,  ...,  2.2257, -2.4789, -0.1821],
         ...,
         [ 0.2283,  0.0753,  0.1149,  ...,  0.8914, -0.0639, -0.2896],
         [ 0.0207,  2.3948,  1.1139,  ..., -0.3774,  0.7507, -0.6135],
         [ 0.2429,  1.0652,  0.2875,  ..., -1.0451,  0.1929,  0.1200]],

        [[ 0.9356,  1.4348,  0.1488,  ...,  0.5095, -2.2757, -0.6683],
         [-0.1549,  0.0745,  0.6091,  ..., -0.0984,  0.6083, -0.2866],
         [ 0.7819, -0.4008,  0.5007,  ..., -0.1039,  0.8977, -0.7442],
         ...,
         [-0.3454,  1.5591,  1.5751,  ...,  2.1766,  0.2638,  0.5819],
         [ 0.7099, -1.5534,  2.5870,  ...,  0.1930,  1.5115,  0.3726],
         [-0.1515,  0.5098, -1.1303,  ...,  0.0252, -1.2465,  1.9252]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 1.1018,  1.3876,  0.5373,  ...,  0.2433, -0.2450,  1.4207],
         [ 0.5138, -1.5312, -0.9111,  ...,  0.7979, -0.0445, -2.3422],
         [ 1.7730, -0.1473, -1.2383,  ..., -0.6955, -1.7987,  0.8557],
         ...,
         [-1.1543,  0.0263, -2.5954,  ..., -0.8700, -0.4728,  0.4923],
         [-1.4443,  1.4429,  0.0470,  ..., -0.7467,  1.4104,  1.2575],
         [ 1.0462,  0.0999,  1.3356,  ..., -2.0362,  0.9227, -0.8577]],

        [[-0.5194,  0.2958, -0.1525,  ..., -0.9869,  2.1015,  0.1328],
         [-0.5430,  1.6125, -0.2495,  ...,  0.5578,  1.7886,  0.4689],
         [ 0.5508,  0.5987, -0.4829,  ...,  0.0936,  1.6981, -2.9155],
         ...,
         [ 1.2430,  0.1507,  0.7892,  ..., -0.7773,  0.6777, -0.1278],
         [-1.7746,  0.7241, -1.3579,  ...,  0.1311, -0.9496, -1.4351],
         [-1.2089,  1.2850, -1.0182,  ...,  1.6203,  2.0025, -0.4647]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.3206, -0.2045, -1.4867,  ...,  2.3268, -0.2823,  2.0268],
         [ 0.1921,  0.0220,  0.4555,  ..., -0.0619,  0.4596,  0.6065],
         [-2.0686, -0.3511, -1.0804,  ..., -0.8598, -0.4780,  1.0063],
         ...,
         [-0.0305, -0.6947,  0.2796,  ...,  0.8532,  0.4500,  0.5300],
         [ 0.0703,  0.3504,  0.1607,  ...,  0.2555, -1.6974, -1.6337],
         [ 0.3998, -0.5004, -0.2186,  ...,  0.4787, -0.8576, -1.7229]],

        [[ 0.7206, -1.3196,  0.9020,  ...,  0.3196,  1.4066,  1.0399],
         [ 1.3862,  1.1063,  1.3127,  ...,  0.2974,  2.4088, -1.2349],
         [-0.6537, -0.6851, -0.0867,  ...,  0.0611, -0.5393, -0.8061],
         ...,
         [ 0.9057,  1.2048,  1.8011,  ..., -0.3527,  1.1625, -0.6891],
         [-1.8459, -0.8064,  0.1770,  ...,  0.7076,  0.5103,  1.0619],
         [ 0.6838, -0.2592,  1.2776,  ...,  0.3473,  0.7128,  1.4611]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.0345,  0.1782,  0.5551,  ..., -0.7804, -0.8465,  0.9267],
         [-0.6558, -1.9463,  0.5501,  ...,  1.9071, -1.5069, -0.2677],
         [-0.3750, -0.4087, -0.8713,  ..., -1.4835,  0.4546, -1.8310],
         ...,
         [ 0.0878, -1.1465, -0.5563,  ...,  0.6640,  0.7889,  0.1226],
         [ 0.2564,  0.5120,  0.7573,  ...,  0.3377,  0.0163,  0.0613],
         [ 1.5317,  0.7826,  0.1309,  ...,  0.5429,  0.4776,  0.4196]],

        [[-0.6787, -0.1972, -0.9096,  ..., -1.1821, -0.6203, -0.6696],
         [ 1.0408, -0.0330,  0.6304,  ...,  0.9609, -0.0124,  0.1717],
         [ 1.7428, -0.1267, -0.1572,  ..., -0.4581,  2.1993,  1.8067],
         ...,
         [ 0.5242,  2.2012,  0.8253,  ...,  1.4762, -2.4132,  0.8271],
         [-0.3855,  0.0917,  1.3916,  ..., -0.0963, -0.4756,  1.1397],
         [-0.5200, -0.2687,  2.0947,  ...,  0.3355, -0.2229, -0.6661]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.0451,  0.8307,  0.4445,  ..., -0.7366,  0.7510,  0.3296],
         [-0.9432, -0.1909,  0.3771,  ...,  0.5110,  0.0658,  0.0575],
         [-0.3733,  0.4910,  2.0802,  ..., -1.0760,  0.1053, -0.6155],
         ...,
         [-0.9568, -0.9091,  0.3340,  ..., -0.6446, -0.6048, -1.1669],
         [ 0.1962,  0.4427,  0.7526,  ..., -1.2690, -0.8292,  0.0021],
         [-0.8966,  0.5791, -1.2346,  ..., -0.1573,  0.7136,  0.4093]],

        [[ 1.0621,  0.0799,  0.7894,  ...,  0.7075,  0.1574,  2.1057],
         [ 1.1549, -1.9188,  0.5348,  ..., -1.1818,  0.0630,  1.5829],
         [-1.0583, -1.4549,  1.0516,  ...,  0.0601, -0.2963, -0.9681],
         ...,
         [ 1.1733,  1.2163,  0.1121,  ...,  0.3018,  0.8095, -0.0087],
         [-1.5723, -1.0710, -0.0895,  ...,  0.0023, -0.8346, -0.3964],
         [ 0.5943, -0.0575,  1.0849,  ...,  0.3646, -0.4136, -0.0892]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.1758e+00, -8.8421e-01, -1.0389e+00,  ...,  1.6041e-01,
           1.4085e+00,  3.5351e-01],
         [-7.3799e-01, -6.9546e-01,  1.2406e+00,  ...,  1.9692e+00,
          -1.0980e+00,  5.0748e-01],
         [ 4.8386e-01,  1.5949e+00,  8.3349e-01,  ...,  2.5334e+00,
           5.3089e-01,  1.8849e+00],
         ...,
         [-2.7009e-01, -3.5409e-01,  8.8048e-01,  ..., -9.2723e-01,
           6.7409e-02,  1.9849e-01],
         [-1.0201e+00, -1.8267e+00,  9.9601e-01,  ..., -4.0202e-01,
          -9.3140e-02, -1.1482e-01],
         [-9.8140e-01,  1.9408e+00,  1.5323e-01,  ...,  2.0263e+00,
          -3.9275e-01,  4.6737e-01]],

        [[ 1.4140e-01,  1.0438e+00,  3.2396e-01,  ..., -1.5696e-01,
          -1.3451e+00,  7.5591e-01],
         [-1.0626e+00,  2.4954e-01, -3.7164e-01,  ...,  1.4321e+00,
           2.7628e-01,  1.0768e+00],
         [-1.0095e+00,  1.0108e+00, -1.7936e+00,  ..., -8.1598e-01,
           1.4941e+00,  3.3724e-01],
         ...,
         [-2.5292e-02,  2.1993e+00, -4.6642e-01,  ..., -1.0858e+00,
           3.0165e+00,  1.0954e+00],
         [-3.1857e+00, -6.6476e-01,  1.9423e-01,  ..., -2.9071e-01,
           4.6051e-01,  1.9818e-03],
         [-1.7846e+00, -5.7883e-01,  7.2820e-01,  ...,  1.0430e+00,
          -3.8238e-01, -9.1701e-01]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[-0.7781,  0.0746,  2.3467,  ...,  1.4491,  2.7052, -0.0192],
         [ 1.1345, -1.5173,  1.2110,  ..., -0.7618, -0.8456, -0.0975],
         [ 0.5623,  1.0546,  0.2037,  ..., -0.3523,  0.9058,  0.0745],
         ...,
         [-0.6529, -0.7412,  1.2456,  ..., -0.2380, -0.0057,  1.2673],
         [-1.1849,  0.5534, -0.0990,  ..., -0.3310,  2.3393, -1.1237],
         [ 0.6354,  1.0607, -1.8918,  ...,  0.5778,  0.0146,  0.0046]],

        [[-1.9667,  0.9710, -0.8503,  ...,  0.5729, -0.9890, -1.7604],
         [-0.8643, -0.8571, -1.2422,  ..., -0.3703, -0.1359,  1.3911],
         [ 0.3002,  1.4038,  1.1437,  ..., -2.4492,  2.2876, -0.3197],
         ...,
         [-0.1378,  0.3926,  1.4920,  ...,  0.4163,  1.2474,  1.0599],
         [-2.5936, -0.7456, -1.5247,  ...,  0.0320,  0.1485,  0.6417],
         [-0.7062,  0.5991, -0.9037,  ..., -0.2681, -0.5394,  0.7444]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.1013, -0.0173, -0.7952,  ...,  0.9564, -0.7156,  0.4670],
         [ 0.2673, -0.1002, -0.1759,  ..., -0.3711,  0.7181,  0.7894],
         [ 0.5826,  1.8437, -0.4804,  ..., -1.2764, -0.4256,  0.0369],
         ...,
         [ 0.4096,  0.4693, -1.2906,  ..., -1.0465, -0.9641, -2.0065],
         [-0.1188, -0.9789,  0.4165,  ...,  0.0605,  2.1339,  0.4067],
         [-0.1864, -0.5667,  0.3810,  ...,  0.3259,  0.6297,  0.1796]],

        [[ 0.6227,  1.3301, -1.4758,  ...,  0.8194, -0.0981, -0.1582],
         [ 0.7625,  0.1563, -0.0703,  ..., -1.3940,  0.2271,  0.6104],
         [-0.3961,  1.3592,  0.2278,  ...,  0.8648, -0.3713, -1.7581],
         ...,
         [-0.3461, -0.0720, -1.8429,  ...,  0.7647,  1.0288, -1.0865],
         [ 0.8662,  1.1273,  0.0776,  ...,  0.3279,  1.1952,  0.7161],
         [ 1.3222,  0.0961,  0.3367,  ..., -0.0831,  0.9109,  0.5070]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 0.1094, -1.6331, -0.5931,  ...,  0.1782, -0.9360,  1.5734],
         [ 1.1786,  1.2280,  0.5710,  ..., -2.1603,  0.0419,  0.3460],
         [-0.5711,  0.5402, -0.2730,  ...,  0.7701, -0.3883, -1.4661],
         ...,
         [-0.0126,  0.5154,  1.0781,  ..., -1.3197,  0.1719, -0.0580],
         [ 0.2096, -2.9974,  0.3963,  ...,  0.7642,  0.6626,  0.3712],
         [ 1.3292,  1.5631,  0.4064,  ..., -0.3956,  0.0249, -1.1429]],

        [[-0.7624,  0.8453,  0.0122,  ..., -0.5829, -0.4594, -0.2327],
         [ 0.4789, -1.1125, -0.2564,  ...,  0.8362,  0.1345,  0.9019],
         [-0.6368,  0.9423,  1.9802,  ..., -0.8592,  0.6591, -0.5431],
         ...,
         [-0.4199,  0.6099, -2.1691,  ...,  0.1840, -0.6023,  0.6495],
         [ 0.3701,  1.4952, -0.0648,  ...,  0.2158, -0.7217,  0.2020],
         [-0.9188,  0.3637, -0.5221,  ...,  0.5391, -0.4374, -0.6794]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.8077e-01, -6.3728e-02, -5.9573e-01,  ..., -2.2855e-01,
           1.5993e+00, -9.8378e-01],
         [ 3.1065e-01,  3.6189e-01, -9.5908e-01,  ...,  1.2563e+00,
          -4.7903e-01,  1.1705e+00],
         [-1.7981e+00,  1.6897e-02, -1.3392e+00,  ..., -1.0365e-01,
           2.1617e+00,  1.3790e-01],
         ...,
         [ 2.3661e-01,  8.7795e-01,  2.9552e-01,  ..., -5.0659e-01,
          -5.1440e-01,  5.3342e-01],
         [-1.8789e-01,  3.5592e-01, -1.0933e+00,  ...,  3.1970e-01,
           5.5838e-01,  6.8350e-01],
         [-5.9065e-01,  5.4710e-01,  6.9128e-01,  ...,  6.2220e-01,
          -7.3356e-01,  5.1693e-01]],

        [[ 1.0014e+00, -1.8480e+00, -1.5100e-01,  ..., -2.1449e-01,
          -2.3230e+00,  1.1885e+00],
         [ 1.3076e-01,  4.1158e-01,  2.1098e-01,  ...,  9.3000e-01,
           4.4041e-01, -9.3514e-01],
         [-1.4193e+00,  2.1835e+00,  3.5227e-01,  ..., -5.3237e-01,
          -1.2477e+00,  4.2696e-04],
         ...,
         [-2.3309e+00, -2.2694e-01,  7.0412e-01,  ...,  2.3675e+00,
           3.6863e-01, -1.2770e-01],
         [ 4.6211e-01, -6.2064e-01,  3.1271e-01,  ..., -6.8522e-02,
          -1.6156e-01, -2.3126e+00],
         [ 8.6960e-01, -1.8077e+00,  8.0647e-01,  ..., -1.2469e+00,
           2.1931e+00,  2.4251e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.1712, -1.4758,  1.1822,  ..., -1.2831, -0.3024, -1.3578],
         [-1.0719,  1.9422, -0.3370,  ..., -0.5776,  0.6468,  1.3502],
         [-2.5306,  0.6565,  2.2725,  ...,  0.2138,  1.2017, -0.8490],
         ...,
         [-0.9193,  0.5400,  1.3740,  ..., -1.0970, -0.6877, -0.4058],
         [-0.5819, -0.4837, -0.6291,  ..., -1.5906, -0.3591,  0.5758],
         [-1.4594, -0.1929, -1.4231,  ...,  0.8332,  0.9765,  1.1971]],

        [[-1.5127,  0.9002,  0.1846,  ...,  1.2142,  1.1214, -0.2935],
         [-0.4125, -0.6810,  1.2139,  ..., -1.1922, -0.4010, -0.0084],
         [-0.4675,  0.0760,  0.0129,  ...,  0.4296,  0.7649, -0.8476],
         ...,
         [-1.5668, -0.6091, -0.6948,  ..., -0.4885, -0.4762, -1.7078],
         [ 0.0374,  0.5246,  0.3830,  ...,  1.2176, -0.0472,  1.2934],
         [ 0.7459, -0.8338,  0.7009,  ..., -0.0390,  1.1550, -1.3132]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.5472,  2.0929,  0.9590,  ..., -0.0430, -0.2004,  0.3806],
         [ 0.5203,  0.0838, -1.2684,  ..., -1.2119,  0.1412,  1.0483],
         [-1.0089, -0.3398, -1.4636,  ...,  1.9897,  2.1254, -0.9350],
         ...,
         [-0.3076,  0.2663, -0.2906,  ..., -0.2701, -0.1896,  0.2700],
         [-1.1044,  0.7640,  0.7626,  ...,  0.4543, -0.1051, -0.0100],
         [-0.0270, -1.0889,  0.9597,  ...,  0.3817,  0.2318,  0.7042]],

        [[-1.8390,  1.3925,  0.0322,  ..., -0.2019,  0.6259,  0.5979],
         [ 1.1507, -0.9866, -0.6223,  ..., -0.3437, -1.7825,  0.5354],
         [ 2.1850,  0.1097,  1.9356,  ..., -1.0712,  0.8423, -0.8403],
         ...,
         [-1.1151,  3.0973, -0.3182,  ..., -0.9144, -1.6132,  1.3740],
         [ 1.5066,  0.2851,  1.4189,  ..., -0.8123,  1.2482, -0.1768],
         [ 0.1203, -0.6181,  0.4611,  ...,  0.7872,  1.3233, -0.7174]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.1324, -0.0973, -3.0564,  ..., -0.5336, -1.6340, -1.5472],
         [-0.0495,  1.2914, -0.1572,  ...,  0.5819,  1.6480,  0.1367],
         [ 1.7949,  0.1714, -1.1377,  ..., -0.3209, -0.0697, -1.5979],
         ...,
         [-1.0173,  0.4545,  1.2902,  ...,  0.4912,  0.8114, -0.7254],
         [-0.0487,  1.7488, -1.3799,  ...,  0.3480,  0.7969, -1.4378],
         [-1.0318, -0.3052,  1.3906,  ...,  1.4417, -1.1963, -2.5585]],

        [[ 0.3641,  1.9312, -0.5590,  ...,  0.9604, -0.8176,  1.0557],
         [-0.0315,  0.2855, -0.4316,  ...,  0.6248,  0.5352, -1.2318],
         [-0.2563,  1.5219, -1.1577,  ...,  0.7111, -0.8083, -0.0254],
         ...,
         [-1.3557,  0.8468, -0.0169,  ..., -0.5711, -0.1235, -0.3827],
         [-1.2103,  0.1149,  0.4073,  ..., -0.1412, -2.5026, -0.4225],
         [-1.4634, -0.6225,  0.8878,  ..., -0.2362, -1.5961,  1.2756]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.5138, -0.4568, -0.9294,  ...,  0.6067, -0.3559,  1.4177],
         [-0.5695, -0.8424,  1.8432,  ...,  0.8929, -0.0717, -2.4595],
         [ 0.2183, -1.6339,  0.6953,  ..., -0.9095, -0.4539, -0.4424],
         ...,
         [ 0.2307,  1.6932, -0.4328,  ...,  1.4511,  1.2154, -0.5804],
         [ 0.3035,  0.3604, -0.6882,  ..., -0.6019, -0.4377, -0.6328],
         [-0.7892,  0.2740,  0.5687,  ...,  0.1599,  0.0944, -0.5247]],

        [[-0.2233, -0.8492, -0.8356,  ..., -0.3983,  0.4084, -0.7036],
         [-0.1188,  0.4572,  0.6314,  ..., -1.1449,  0.1372, -1.1763],
         [ 0.8406,  0.5806,  0.2937,  ..., -0.9487,  1.2801, -0.9180],
         ...,
         [-0.1874,  0.0950, -1.2792,  ..., -0.1943,  0.4678, -2.6523],
         [ 0.4862, -0.2871,  1.3833,  ...,  0.5223, -0.5857,  0.5468],
         [ 1.0627,  0.2569,  0.1086,  ...,  0.9282, -0.3788, -0.2992]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.4644,  1.5134, -0.1168,  ..., -0.6807, -0.0759, -0.7739],
         [-0.5401, -0.0438, -0.8798,  ...,  0.1156, -1.0572,  0.0833],
         [ 0.4707,  0.1504, -0.2909,  ..., -0.4584,  1.0962, -1.0203],
         ...,
         [-0.1997, -0.8296, -0.8084,  ..., -0.1617,  0.1785,  0.8122],
         [-0.4470,  0.6993, -2.1023,  ..., -0.0662,  1.6055,  0.1314],
         [-0.3705,  0.6911, -0.2848,  ...,  1.8216,  0.1636,  0.7157]],

        [[ 1.3501, -0.2209,  0.6009,  ..., -0.9431, -0.1097,  0.8537],
         [-0.0077, -1.3384,  0.1270,  ..., -0.4655,  0.7015,  1.0251],
         [-0.2868,  0.7535, -0.5385,  ...,  0.3773,  0.4976, -0.2780],
         ...,
         [-0.9982,  0.3552,  1.2270,  ..., -0.1330,  0.9643,  1.0942],
         [ 1.7182,  0.3049, -0.1627,  ..., -0.7665, -0.1307,  0.3095],
         [ 0.0173,  0.3951, -1.1457,  ..., -0.9443, -0.8332,  0.5347]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.4069,  1.0793,  1.8434,  ..., -0.5123,  1.2029, -0.1066],
         [ 0.7351, -1.2806, -0.4919,  ...,  2.1808,  1.1612,  1.3179],
         [-1.0882, -0.1697, -0.9158,  ...,  0.0295,  1.4273, -0.6644],
         ...,
         [ 1.6927,  0.2258, -0.9961,  ...,  0.1255, -0.4220,  0.7545],
         [-0.2693,  0.3891,  1.1025,  ...,  0.0680,  0.6764,  0.2759],
         [ 0.7229, -0.0190, -1.1456,  ..., -0.5901,  1.1645, -0.7309]],

        [[ 2.3261, -0.4419, -0.4152,  ..., -0.0028, -1.0570,  0.0961],
         [-0.2318,  0.2894, -0.6880,  ...,  0.0394,  1.7555, -0.0292],
         [ 1.2363,  1.3917, -0.6931,  ...,  1.5470,  0.3485, -2.4528],
         ...,
         [-0.6172,  0.1966,  0.4990,  ...,  0.6023,  0.9224,  1.5235],
         [ 1.3410,  0.1189, -0.3435,  ..., -1.2860,  0.3259, -0.5132],
         [-0.0490,  0.9625, -0.2542,  ..., -0.0910,  0.4270, -1.1481]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-1.6684, -0.6215,  0.7622,  ...,  0.1714, -0.4877, -1.0033],
         [-0.1838,  1.7336, -0.5087,  ...,  1.5687, -0.3370,  0.0412],
         [-0.5694, -0.2883, -0.0246,  ...,  2.2257, -2.4789, -0.1821],
         ...,
         [ 0.2283,  0.0753,  0.1149,  ...,  0.8914, -0.0639, -0.2896],
         [ 0.0207,  2.3948,  1.1139,  ..., -0.3774,  0.7507, -0.6135],
         [ 0.2429,  1.0652,  0.2875,  ..., -1.0451,  0.1929,  0.1200]],

        [[ 0.9356,  1.4348,  0.1488,  ...,  0.5095, -2.2757, -0.6683],
         [-0.1549,  0.0745,  0.6091,  ..., -0.0984,  0.6083, -0.2866],
         [ 0.7819, -0.4008,  0.5007,  ..., -0.1039,  0.8977, -0.7442],
         ...,
         [-0.3454,  1.5591,  1.5751,  ...,  2.1766,  0.2638,  0.5819],
         [ 0.7099, -1.5534,  2.5870,  ...,  0.1930,  1.5115,  0.3726],
         [-0.1515,  0.5098, -1.1303,  ...,  0.0252, -1.2465,  1.9252]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 1.1018,  1.3876,  0.5373,  ...,  0.2433, -0.2450,  1.4207],
         [ 0.5138, -1.5312, -0.9111,  ...,  0.7979, -0.0445, -2.3422],
         [ 1.7730, -0.1473, -1.2383,  ..., -0.6955, -1.7987,  0.8557],
         ...,
         [-1.1543,  0.0263, -2.5954,  ..., -0.8700, -0.4728,  0.4923],
         [-1.4443,  1.4429,  0.0470,  ..., -0.7467,  1.4104,  1.2575],
         [ 1.0462,  0.0999,  1.3356,  ..., -2.0362,  0.9227, -0.8577]],

        [[-0.5194,  0.2958, -0.1525,  ..., -0.9869,  2.1015,  0.1328],
         [-0.5430,  1.6125, -0.2495,  ...,  0.5578,  1.7886,  0.4689],
         [ 0.5508,  0.5987, -0.4829,  ...,  0.0936,  1.6981, -2.9155],
         ...,
         [ 1.2430,  0.1507,  0.7892,  ..., -0.7773,  0.6777, -0.1278],
         [-1.7746,  0.7241, -1.3579,  ...,  0.1311, -0.9496, -1.4351],
         [-1.2089,  1.2850, -1.0182,  ...,  1.6203,  2.0025, -0.4647]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.3206, -0.2045, -1.4867,  ...,  2.3268, -0.2823,  2.0268],
         [ 0.1921,  0.0220,  0.4555,  ..., -0.0619,  0.4596,  0.6065],
         [-2.0686, -0.3511, -1.0804,  ..., -0.8598, -0.4780,  1.0063],
         ...,
         [-0.0305, -0.6947,  0.2796,  ...,  0.8532,  0.4500,  0.5300],
         [ 0.0703,  0.3504,  0.1607,  ...,  0.2555, -1.6974, -1.6337],
         [ 0.3998, -0.5004, -0.2186,  ...,  0.4787, -0.8576, -1.7229]],

        [[ 0.7206, -1.3196,  0.9020,  ...,  0.3196,  1.4066,  1.0399],
         [ 1.3862,  1.1063,  1.3127,  ...,  0.2974,  2.4088, -1.2349],
         [-0.6537, -0.6851, -0.0867,  ...,  0.0611, -0.5393, -0.8061],
         ...,
         [ 0.9057,  1.2048,  1.8011,  ..., -0.3527,  1.1625, -0.6891],
         [-1.8459, -0.8064,  0.1770,  ...,  0.7076,  0.5103,  1.0619],
         [ 0.6838, -0.2592,  1.2776,  ...,  0.3473,  0.7128,  1.4611]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.0345,  0.1782,  0.5551,  ..., -0.7804, -0.8465,  0.9267],
         [-0.6558, -1.9463,  0.5501,  ...,  1.9071, -1.5069, -0.2677],
         [-0.3750, -0.4087, -0.8713,  ..., -1.4835,  0.4546, -1.8310],
         ...,
         [ 0.0878, -1.1465, -0.5563,  ...,  0.6640,  0.7889,  0.1226],
         [ 0.2564,  0.5120,  0.7573,  ...,  0.3377,  0.0163,  0.0613],
         [ 1.5317,  0.7826,  0.1309,  ...,  0.5429,  0.4776,  0.4196]],

        [[-0.6787, -0.1972, -0.9096,  ..., -1.1821, -0.6203, -0.6696],
         [ 1.0408, -0.0330,  0.6304,  ...,  0.9609, -0.0124,  0.1717],
         [ 1.7428, -0.1267, -0.1572,  ..., -0.4581,  2.1993,  1.8067],
         ...,
         [ 0.5242,  2.2012,  0.8253,  ...,  1.4762, -2.4132,  0.8271],
         [-0.3855,  0.0917,  1.3916,  ..., -0.0963, -0.4756,  1.1397],
         [-0.5200, -0.2687,  2.0947,  ...,  0.3355, -0.2229, -0.6661]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 295.863, Val Loss : 379.893
======> Trajectory Loss : 135.359, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.387, BelowGroundPenalize Loss : 21.805
===> [Minibatch 3/129].........tensor([[[-0.0451,  0.8307,  0.4445,  ..., -0.7366,  0.7510,  0.3296],
         [-0.9432, -0.1909,  0.3771,  ...,  0.5110,  0.0658,  0.0575],
         [-0.3733,  0.4910,  2.0802,  ..., -1.0760,  0.1053, -0.6155],
         ...,
         [-0.9568, -0.9091,  0.3340,  ..., -0.6446, -0.6048, -1.1669],
         [ 0.1962,  0.4427,  0.7526,  ..., -1.2690, -0.8292,  0.0021],
         [-0.8966,  0.5791, -1.2346,  ..., -0.1573,  0.7136,  0.4093]],

        [[ 1.0621,  0.0799,  0.7894,  ...,  0.7075,  0.1574,  2.1057],
         [ 1.1549, -1.9188,  0.5348,  ..., -1.1818,  0.0630,  1.5829],
         [-1.0583, -1.4549,  1.0516,  ...,  0.0601, -0.2963, -0.9681],
         ...,
         [ 1.1733,  1.2163,  0.1121,  ...,  0.3018,  0.8095, -0.0087],
         [-1.5723, -1.0710, -0.0895,  ...,  0.0023, -0.8346, -0.3964],
         [ 0.5943, -0.0575,  1.0849,  ...,  0.3646, -0.4136, -0.0892]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.1758e+00, -8.8421e-01, -1.0389e+00,  ...,  1.6041e-01,
           1.4085e+00,  3.5351e-01],
         [-7.3799e-01, -6.9546e-01,  1.2406e+00,  ...,  1.9692e+00,
          -1.0980e+00,  5.0748e-01],
         [ 4.8386e-01,  1.5949e+00,  8.3349e-01,  ...,  2.5334e+00,
           5.3089e-01,  1.8849e+00],
         ...,
         [-2.7009e-01, -3.5409e-01,  8.8048e-01,  ..., -9.2723e-01,
           6.7409e-02,  1.9849e-01],
         [-1.0201e+00, -1.8267e+00,  9.9601e-01,  ..., -4.0202e-01,
          -9.3140e-02, -1.1482e-01],
         [-9.8140e-01,  1.9408e+00,  1.5323e-01,  ...,  2.0263e+00,
          -3.9275e-01,  4.6737e-01]],

        [[ 1.4140e-01,  1.0438e+00,  3.2396e-01,  ..., -1.5696e-01,
          -1.3451e+00,  7.5591e-01],
         [-1.0626e+00,  2.4954e-01, -3.7164e-01,  ...,  1.4321e+00,
           2.7628e-01,  1.0768e+00],
         [-1.0095e+00,  1.0108e+00, -1.7936e+00,  ..., -8.1598e-01,
           1.4941e+00,  3.3724e-01],
         ...,
         [-2.5292e-02,  2.1993e+00, -4.6642e-01,  ..., -1.0858e+00,
           3.0165e+00,  1.0954e+00],
         [-3.1857e+00, -6.6476e-01,  1.9423e-01,  ..., -2.9071e-01,
           4.6051e-01,  1.9818e-03],
         [-1.7846e+00, -5.7883e-01,  7.2820e-01,  ...,  1.0430e+00,
          -3.8238e-01, -9.1701e-01]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[-0.7781,  0.0746,  2.3467,  ...,  1.4491,  2.7052, -0.0192],
         [ 1.1345, -1.5173,  1.2110,  ..., -0.7618, -0.8456, -0.0975],
         [ 0.5623,  1.0546,  0.2037,  ..., -0.3523,  0.9058,  0.0745],
         ...,
         [-0.6529, -0.7412,  1.2456,  ..., -0.2380, -0.0057,  1.2673],
         [-1.1849,  0.5534, -0.0990,  ..., -0.3310,  2.3393, -1.1237],
         [ 0.6354,  1.0607, -1.8918,  ...,  0.5778,  0.0146,  0.0046]],

        [[-1.9667,  0.9710, -0.8503,  ...,  0.5729, -0.9890, -1.7604],
         [-0.8643, -0.8571, -1.2422,  ..., -0.3703, -0.1359,  1.3911],
         [ 0.3002,  1.4038,  1.1437,  ..., -2.4492,  2.2876, -0.3197],
         ...,
         [-0.1378,  0.3926,  1.4920,  ...,  0.4163,  1.2474,  1.0599],
         [-2.5936, -0.7456, -1.5247,  ...,  0.0320,  0.1485,  0.6417],
         [-0.7062,  0.5991, -0.9037,  ..., -0.2681, -0.5394,  0.7444]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.1013, -0.0173, -0.7952,  ...,  0.9564, -0.7156,  0.4670],
         [ 0.2673, -0.1002, -0.1759,  ..., -0.3711,  0.7181,  0.7894],
         [ 0.5826,  1.8437, -0.4804,  ..., -1.2764, -0.4256,  0.0369],
         ...,
         [ 0.4096,  0.4693, -1.2906,  ..., -1.0465, -0.9641, -2.0065],
         [-0.1188, -0.9789,  0.4165,  ...,  0.0605,  2.1339,  0.4067],
         [-0.1864, -0.5667,  0.3810,  ...,  0.3259,  0.6297,  0.1796]],

        [[ 0.6227,  1.3301, -1.4758,  ...,  0.8194, -0.0981, -0.1582],
         [ 0.7625,  0.1563, -0.0703,  ..., -1.3940,  0.2271,  0.6104],
         [-0.3961,  1.3592,  0.2278,  ...,  0.8648, -0.3713, -1.7581],
         ...,
         [-0.3461, -0.0720, -1.8429,  ...,  0.7647,  1.0288, -1.0865],
         [ 0.8662,  1.1273,  0.0776,  ...,  0.3279,  1.1952,  0.7161],
         [ 1.3222,  0.0961,  0.3367,  ..., -0.0831,  0.9109,  0.5070]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 0.1094, -1.6331, -0.5931,  ...,  0.1782, -0.9360,  1.5734],
         [ 1.1786,  1.2280,  0.5710,  ..., -2.1603,  0.0419,  0.3460],
         [-0.5711,  0.5402, -0.2730,  ...,  0.7701, -0.3883, -1.4661],
         ...,
         [-0.0126,  0.5154,  1.0781,  ..., -1.3197,  0.1719, -0.0580],
         [ 0.2096, -2.9974,  0.3963,  ...,  0.7642,  0.6626,  0.3712],
         [ 1.3292,  1.5631,  0.4064,  ..., -0.3956,  0.0249, -1.1429]],

        [[-0.7624,  0.8453,  0.0122,  ..., -0.5829, -0.4594, -0.2327],
         [ 0.4789, -1.1125, -0.2564,  ...,  0.8362,  0.1345,  0.9019],
         [-0.6368,  0.9423,  1.9802,  ..., -0.8592,  0.6591, -0.5431],
         ...,
         [-0.4199,  0.6099, -2.1691,  ...,  0.1840, -0.6023,  0.6495],
         [ 0.3701,  1.4952, -0.0648,  ...,  0.2158, -0.7217,  0.2020],
         [-0.9188,  0.3637, -0.5221,  ...,  0.5391, -0.4374, -0.6794]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.8077e-01, -6.3728e-02, -5.9573e-01,  ..., -2.2855e-01,
           1.5993e+00, -9.8378e-01],
         [ 3.1065e-01,  3.6189e-01, -9.5908e-01,  ...,  1.2563e+00,
          -4.7903e-01,  1.1705e+00],
         [-1.7981e+00,  1.6897e-02, -1.3392e+00,  ..., -1.0365e-01,
           2.1617e+00,  1.3790e-01],
         ...,
         [ 2.3661e-01,  8.7795e-01,  2.9552e-01,  ..., -5.0659e-01,
          -5.1440e-01,  5.3342e-01],
         [-1.8789e-01,  3.5592e-01, -1.0933e+00,  ...,  3.1970e-01,
           5.5838e-01,  6.8350e-01],
         [-5.9065e-01,  5.4710e-01,  6.9128e-01,  ...,  6.2220e-01,
          -7.3356e-01,  5.1693e-01]],

        [[ 1.0014e+00, -1.8480e+00, -1.5100e-01,  ..., -2.1449e-01,
          -2.3230e+00,  1.1885e+00],
         [ 1.3076e-01,  4.1158e-01,  2.1098e-01,  ...,  9.3000e-01,
           4.4041e-01, -9.3514e-01],
         [-1.4193e+00,  2.1835e+00,  3.5227e-01,  ..., -5.3237e-01,
          -1.2477e+00,  4.2696e-04],
         ...,
         [-2.3309e+00, -2.2694e-01,  7.0412e-01,  ...,  2.3675e+00,
           3.6863e-01, -1.2770e-01],
         [ 4.6211e-01, -6.2064e-01,  3.1271e-01,  ..., -6.8522e-02,
          -1.6156e-01, -2.3126e+00],
         [ 8.6960e-01, -1.8077e+00,  8.0647e-01,  ..., -1.2469e+00,
           2.1931e+00,  2.4251e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.1712, -1.4758,  1.1822,  ..., -1.2831, -0.3024, -1.3578],
         [-1.0719,  1.9422, -0.3370,  ..., -0.5776,  0.6468,  1.3502],
         [-2.5306,  0.6565,  2.2725,  ...,  0.2138,  1.2017, -0.8490],
         ...,
         [-0.9193,  0.5400,  1.3740,  ..., -1.0970, -0.6877, -0.4058],
         [-0.5819, -0.4837, -0.6291,  ..., -1.5906, -0.3591,  0.5758],
         [-1.4594, -0.1929, -1.4231,  ...,  0.8332,  0.9765,  1.1971]],

        [[-1.5127,  0.9002,  0.1846,  ...,  1.2142,  1.1214, -0.2935],
         [-0.4125, -0.6810,  1.2139,  ..., -1.1922, -0.4010, -0.0084],
         [-0.4675,  0.0760,  0.0129,  ...,  0.4296,  0.7649, -0.8476],
         ...,
         [-1.5668, -0.6091, -0.6948,  ..., -0.4885, -0.4762, -1.7078],
         [ 0.0374,  0.5246,  0.3830,  ...,  1.2176, -0.0472,  1.2934],
         [ 0.7459, -0.8338,  0.7009,  ..., -0.0390,  1.1550, -1.3132]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.5472,  2.0929,  0.9590,  ..., -0.0430, -0.2004,  0.3806],
         [ 0.5203,  0.0838, -1.2684,  ..., -1.2119,  0.1412,  1.0483],
         [-1.0089, -0.3398, -1.4636,  ...,  1.9897,  2.1254, -0.9350],
         ...,
         [-0.3076,  0.2663, -0.2906,  ..., -0.2701, -0.1896,  0.2700],
         [-1.1044,  0.7640,  0.7626,  ...,  0.4543, -0.1051, -0.0100],
         [-0.0270, -1.0889,  0.9597,  ...,  0.3817,  0.2318,  0.7042]],

        [[-1.8390,  1.3925,  0.0322,  ..., -0.2019,  0.6259,  0.5979],
         [ 1.1507, -0.9866, -0.6223,  ..., -0.3437, -1.7825,  0.5354],
         [ 2.1850,  0.1097,  1.9356,  ..., -1.0712,  0.8423, -0.8403],
         ...,
         [-1.1151,  3.0973, -0.3182,  ..., -0.9144, -1.6132,  1.3740],
         [ 1.5066,  0.2851,  1.4189,  ..., -0.8123,  1.2482, -0.1768],
         [ 0.1203, -0.6181,  0.4611,  ...,  0.7872,  1.3233, -0.7174]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.1324, -0.0973, -3.0564,  ..., -0.5336, -1.6340, -1.5472],
         [-0.0495,  1.2914, -0.1572,  ...,  0.5819,  1.6480,  0.1367],
         [ 1.7949,  0.1714, -1.1377,  ..., -0.3209, -0.0697, -1.5979],
         ...,
         [-1.0173,  0.4545,  1.2902,  ...,  0.4912,  0.8114, -0.7254],
         [-0.0487,  1.7488, -1.3799,  ...,  0.3480,  0.7969, -1.4378],
         [-1.0318, -0.3052,  1.3906,  ...,  1.4417, -1.1963, -2.5585]],

        [[ 0.3641,  1.9312, -0.5590,  ...,  0.9604, -0.8176,  1.0557],
         [-0.0315,  0.2855, -0.4316,  ...,  0.6248,  0.5352, -1.2318],
         [-0.2563,  1.5219, -1.1577,  ...,  0.7111, -0.8083, -0.0254],
         ...,
         [-1.3557,  0.8468, -0.0169,  ..., -0.5711, -0.1235, -0.3827],
         [-1.2103,  0.1149,  0.4073,  ..., -0.1412, -2.5026, -0.4225],
         [-1.4634, -0.6225,  0.8878,  ..., -0.2362, -1.5961,  1.2756]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-0.5138, -0.4568, -0.9294,  ...,  0.6067, -0.3559,  1.4177],
         [-0.5695, -0.8424,  1.8432,  ...,  0.8929, -0.0717, -2.4595],
         [ 0.2183, -1.6339,  0.6953,  ..., -0.9095, -0.4539, -0.4424],
         ...,
         [ 0.2307,  1.6932, -0.4328,  ...,  1.4511,  1.2154, -0.5804],
         [ 0.3035,  0.3604, -0.6882,  ..., -0.6019, -0.4377, -0.6328],
         [-0.7892,  0.2740,  0.5687,  ...,  0.1599,  0.0944, -0.5247]],

        [[-0.2233, -0.8492, -0.8356,  ..., -0.3983,  0.4084, -0.7036],
         [-0.1188,  0.4572,  0.6314,  ..., -1.1449,  0.1372, -1.1763],
         [ 0.8406,  0.5806,  0.2937,  ..., -0.9487,  1.2801, -0.9180],
         ...,
         [-0.1874,  0.0950, -1.2792,  ..., -0.1943,  0.4678, -2.6523],
         [ 0.4862, -0.2871,  1.3833,  ...,  0.5223, -0.5857,  0.5468],
         [ 1.0627,  0.2569,  0.1086,  ...,  0.9282, -0.3788, -0.2992]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.4644,  1.5134, -0.1168,  ..., -0.6807, -0.0759, -0.7739],
         [-0.5401, -0.0438, -0.8798,  ...,  0.1156, -1.0572,  0.0833],
         [ 0.4707,  0.1504, -0.2909,  ..., -0.4584,  1.0962, -1.0203],
         ...,
         [-0.1997, -0.8296, -0.8084,  ..., -0.1617,  0.1785,  0.8122],
         [-0.4470,  0.6993, -2.1023,  ..., -0.0662,  1.6055,  0.1314],
         [-0.3705,  0.6911, -0.2848,  ...,  1.8216,  0.1636,  0.7157]],

        [[ 1.3501, -0.2209,  0.6009,  ..., -0.9431, -0.1097,  0.8537],
         [-0.0077, -1.3384,  0.1270,  ..., -0.4655,  0.7015,  1.0251],
         [-0.2868,  0.7535, -0.5385,  ...,  0.3773,  0.4976, -0.2780],
         ...,
         [-0.9982,  0.3552,  1.2270,  ..., -0.1330,  0.9643,  1.0942],
         [ 1.7182,  0.3049, -0.1627,  ..., -0.7665, -0.1307,  0.3095],
         [ 0.0173,  0.3951, -1.1457,  ..., -0.9443, -0.8332,  0.5347]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 0.4069,  1.0793,  1.8434,  ..., -0.5123,  1.2029, -0.1066],
         [ 0.7351, -1.2806, -0.4919,  ...,  2.1808,  1.1612,  1.3179],
         [-1.0882, -0.1697, -0.9158,  ...,  0.0295,  1.4273, -0.6644],
         ...,
         [ 1.6927,  0.2258, -0.9961,  ...,  0.1255, -0.4220,  0.7545],
         [-0.2693,  0.3891,  1.1025,  ...,  0.0680,  0.6764,  0.2759],
         [ 0.7229, -0.0190, -1.1456,  ..., -0.5901,  1.1645, -0.7309]],

        [[ 2.3261, -0.4419, -0.4152,  ..., -0.0028, -1.0570,  0.0961],
         [-0.2318,  0.2894, -0.6880,  ...,  0.0394,  1.7555, -0.0292],
         [ 1.2363,  1.3917, -0.6931,  ...,  1.5470,  0.3485, -2.4528],
         ...,
         [-0.6172,  0.1966,  0.4990,  ...,  0.6023,  0.9224,  1.5235],
         [ 1.3410,  0.1189, -0.3435,  ..., -1.2860,  0.3259, -0.5132],
         [-0.0490,  0.9625, -0.2542,  ..., -0.0910,  0.4270, -1.1481]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-1.6684, -0.6215,  0.7622,  ...,  0.1714, -0.4877, -1.0033],
         [-0.1838,  1.7336, -0.5087,  ...,  1.5687, -0.3370,  0.0412],
         [-0.5694, -0.2883, -0.0246,  ...,  2.2257, -2.4789, -0.1821],
         ...,
         [ 0.2283,  0.0753,  0.1149,  ...,  0.8914, -0.0639, -0.2896],
         [ 0.0207,  2.3948,  1.1139,  ..., -0.3774,  0.7507, -0.6135],
         [ 0.2429,  1.0652,  0.2875,  ..., -1.0451,  0.1929,  0.1200]],

        [[ 0.9356,  1.4348,  0.1488,  ...,  0.5095, -2.2757, -0.6683],
         [-0.1549,  0.0745,  0.6091,  ..., -0.0984,  0.6083, -0.2866],
         [ 0.7819, -0.4008,  0.5007,  ..., -0.1039,  0.8977, -0.7442],
         ...,
         [-0.3454,  1.5591,  1.5751,  ...,  2.1766,  0.2638,  0.5819],
         [ 0.7099, -1.5534,  2.5870,  ...,  0.1930,  1.5115,  0.3726],
         [-0.1515,  0.5098, -1.1303,  ...,  0.0252, -1.2465,  1.9252]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[ 1.1018,  1.3876,  0.5373,  ...,  0.2433, -0.2450,  1.4207],
         [ 0.5138, -1.5312, -0.9111,  ...,  0.7979, -0.0445, -2.3422],
         [ 1.7730, -0.1473, -1.2383,  ..., -0.6955, -1.7987,  0.8557],
         ...,
         [-1.1543,  0.0263, -2.5954,  ..., -0.8700, -0.4728,  0.4923],
         [-1.4443,  1.4429,  0.0470,  ..., -0.7467,  1.4104,  1.2575],
         [ 1.0462,  0.0999,  1.3356,  ..., -2.0362,  0.9227, -0.8577]],

        [[-0.5194,  0.2958, -0.1525,  ..., -0.9869,  2.1015,  0.1328],
         [-0.5430,  1.6125, -0.2495,  ...,  0.5578,  1.7886,  0.4689],
         [ 0.5508,  0.5987, -0.4829,  ...,  0.0936,  1.6981, -2.9155],
         ...,
         [ 1.2430,  0.1507,  0.7892,  ..., -0.7773,  0.6777, -0.1278],
         [-1.7746,  0.7241, -1.3579,  ...,  0.1311, -0.9496, -1.4351],
         [-1.2089,  1.2850, -1.0182,  ...,  1.6203,  2.0025, -0.4647]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[-0.3206, -0.2045, -1.4867,  ...,  2.3268, -0.2823,  2.0268],
         [ 0.1921,  0.0220,  0.4555,  ..., -0.0619,  0.4596,  0.6065],
         [-2.0686, -0.3511, -1.0804,  ..., -0.8598, -0.4780,  1.0063],
         ...,
         [-0.0305, -0.6947,  0.2796,  ...,  0.8532,  0.4500,  0.5300],
         [ 0.0703,  0.3504,  0.1607,  ...,  0.2555, -1.6974, -1.6337],
         [ 0.3998, -0.5004, -0.2186,  ...,  0.4787, -0.8576, -1.7229]],

        [[ 0.7206, -1.3196,  0.9020,  ...,  0.3196,  1.4066,  1.0399],
         [ 1.3862,  1.1063,  1.3127,  ...,  0.2974,  2.4088, -1.2349],
         [-0.6537, -0.6851, -0.0867,  ...,  0.0611, -0.5393, -0.8061],
         ...,
         [ 0.9057,  1.2048,  1.8011,  ..., -0.3527,  1.1625, -0.6891],
         [-1.8459, -0.8064,  0.1770,  ...,  0.7076,  0.5103,  1.0619],
         [ 0.6838, -0.2592,  1.2776,  ...,  0.3473,  0.7128,  1.4611]]],
       device='cuda:0', grad_fn=<SelectBackward>) tensor([[[-1.0345,  0.1782,  0.5551,  ..., -0.7804, -0.8465,  0.9267],
         [-0.6558, -1.9463,  0.5501,  ...,  1.9071, -1.5069, -0.2677],
         [-0.3750, -0.4087, -0.8713,  ..., -1.4835,  0.4546, -1.8310],
         ...,
         [ 0.0878, -1.1465, -0.5563,  ...,  0.6640,  0.7889,  0.1226],
         [ 0.2564,  0.5120,  0.7573,  ...,  0.3377,  0.0163,  0.0613],
         [ 1.5317,  0.7826,  0.1309,  ...,  0.5429,  0.4776,  0.4196]],

        [[-0.6787, -0.1972, -0.9096,  ..., -1.1821, -0.6203, -0.6696],
         [ 1.0408, -0.0330,  0.6304,  ...,  0.9609, -0.0124,  0.1717],
         [ 1.7428, -0.1267, -0.1572,  ..., -0.4581,  2.1993,  1.8067],
         ...,
         [ 0.5242,  2.2012,  0.8253,  ...,  1.4762, -2.4132,  0.8271],
         [-0.3855,  0.0917,  1.3916,  ..., -0.0963, -0.4756,  1.1397],
         [-0.5200, -0.2687,  2.0947,  ...,  0.3355, -0.2229, -0.6661]]],
       device='cuda:0', grad_fn=<SelectBackward>)
