==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 15.46it/s]
===============================Dataset shape===============================
Mixed : (3660,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 59.45it/s]
===============================Dataset shape===============================
Mixed : (1729,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 654, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 654, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 654, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 655, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 609, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 609, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 609, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 610, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 696, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 696, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 657, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 657, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 676, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 676, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 676, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 677, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 633, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 633, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 634, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 616, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 616, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 616, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 617, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 672, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 672, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 646, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 646, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 646, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 647, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 671, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 671, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 672, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 643, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 643, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 643, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 644, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 644, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 644, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 644, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 645, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 614, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 614, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 614, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 615, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 665, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 665, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 683, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 683, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 683, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 684, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 605, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 605, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 605, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 606, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 662, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 662, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 662, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 645, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 645, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 645, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 646, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 658, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 658, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 659, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 633, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 633, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 634, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 656, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 656, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 656, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 697, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 697, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 627, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 627, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 627, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 628, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 599, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 599, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 599, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 600, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 646, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 646, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 646, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 647, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 632, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 632, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 633, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 631, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 631, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 631, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 632, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/28].........Train Loss : 527.318, Val Loss : 662.552
======> Trajectory Loss : 287.542, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.394, BelowGroundPenalize Loss : 100.394
Opening in existing browser session.
[1028/133139.257718:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1028/133139.549865:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1028/133139.816870:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/28].........Train Loss : 428.701, Val Loss : 234.678
======> Trajectory Loss : 214.696, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.386, BelowGroundPenalize Loss : 75.392
===> [Minibatch 3/28].........Train Loss : 218.861, Val Loss : 461.235
======> Trajectory Loss : 61.453, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.383, BelowGroundPenalize Loss : 19.076
===> [Minibatch 4/28].........Train Loss : 252.081, Val Loss : 197.583
======> Trajectory Loss : 115.365, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.366, BelowGroundPenalize Loss : 0.067
===> [Minibatch 5/28].........Train Loss : 160.104, Val Loss : 154.430
======> Trajectory Loss : 24.711, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.353, BelowGroundPenalize Loss : 0.117
===> [Minibatch 6/28].........Train Loss : 168.557, Val Loss : 147.671
======> Trajectory Loss : 29.673, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.303, BelowGroundPenalize Loss : 8.577
===> [Minibatch 7/28].........Train Loss : 160.456, Val Loss : 130.694
======> Trajectory Loss : 30.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.225, BelowGroundPenalize Loss : 7.939
===> [Minibatch 8/28].........Train Loss : 145.812, Val Loss : 115.227
======> Trajectory Loss : 17.883, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.248, BelowGroundPenalize Loss : 3.081
===> [Minibatch 9/28].........Train Loss : 122.018, Val Loss : 157.979
======> Trajectory Loss : 12.694, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.089, BelowGroundPenalize Loss : 0.454
===> [Minibatch 10/28].........Train Loss : 123.319, Val Loss : 179.013
======> Trajectory Loss : 22.021, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.012, BelowGroundPenalize Loss : 0.144
===> [Minibatch 11/28].........Train Loss : 126.724, Val Loss : 178.550
======> Trajectory Loss : 28.389, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.982, BelowGroundPenalize Loss : 0.120
===> [Minibatch 12/28].........Train Loss : 131.279, Val Loss : 131.938
======> Trajectory Loss : 22.118, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.091, BelowGroundPenalize Loss : 0.107
===> [Minibatch 13/28].........Train Loss : 107.705, Val Loss : 103.909
======> Trajectory Loss : 13.804, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.937, BelowGroundPenalize Loss : 0.197
===> [Minibatch 14/28].........Train Loss : 108.025, Val Loss : 100.032
======> Trajectory Loss : 13.233, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.937, BelowGroundPenalize Loss : 1.120
===> [Minibatch 15/28].........Train Loss : 107.012, Val Loss : 96.504
======> Trajectory Loss : 15.029, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.902, BelowGroundPenalize Loss : 1.812
===> [Minibatch 16/28].........Train Loss : 101.702, Val Loss : 97.563
======> Trajectory Loss : 13.739, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.865, BelowGroundPenalize Loss : 1.493
===> [Minibatch 17/28].........Train Loss : 101.871, Val Loss : 99.762
======> Trajectory Loss : 13.529, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.874, BelowGroundPenalize Loss : 0.967
===> [Minibatch 18/28].........Train Loss : 95.122, Val Loss : 97.003
======> Trajectory Loss : 12.547, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.822, BelowGroundPenalize Loss : 0.349
===> [Minibatch 19/28].........Train Loss : 96.729, Val Loss : 90.679
======> Trajectory Loss : 13.189, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.833, BelowGroundPenalize Loss : 0.264
===> [Minibatch 20/28].........Train Loss : 95.545, Val Loss : 92.010
======> Trajectory Loss : 13.598, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.817, BelowGroundPenalize Loss : 0.274
===> [Minibatch 21/28].........Train Loss : 96.476, Val Loss : 79.147
======> Trajectory Loss : 12.427, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.836, BelowGroundPenalize Loss : 0.462
===> [Minibatch 22/28].........Train Loss : 95.093, Val Loss : 80.764
======> Trajectory Loss : 12.368, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.819, BelowGroundPenalize Loss : 0.804
===> [Minibatch 23/28].........Train Loss : 91.934, Val Loss : 73.228
======> Trajectory Loss : 13.228, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.775, BelowGroundPenalize Loss : 1.166
===> [Minibatch 24/28].........Train Loss : 87.150, Val Loss : 74.753
======> Trajectory Loss : 13.106, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.729, BelowGroundPenalize Loss : 1.151
===> [Minibatch 25/28].........Train Loss : 84.881, Val Loss : 89.411
======> Trajectory Loss : 12.819, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.714, BelowGroundPenalize Loss : 0.649
===> [Minibatch 26/28].........Train Loss : 87.983, Val Loss : 77.766
======> Trajectory Loss : 12.713, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.749, BelowGroundPenalize Loss : 0.335
===> [Minibatch 27/28].........Train Loss : 85.104, Val Loss : 75.986
======> Trajectory Loss : 12.262, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.725, BelowGroundPenalize Loss : 0.351
===> [Minibatch 28/28].........Train Loss : 77.922, Val Loss : 69.967
======> Trajectory Loss : 13.388, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.642, BelowGroundPenalize Loss : 0.347
[#]Finish Epoch : 1/100000.........Train loss : 145.910, Val loss : 148.215
[+++]Saving the best model checkpoint : Prev loss 20000000000.000 > Curr loss 148.215
[+++]Saving the best model checkpoint to :  ../../model_checkpoints/test_trainable/Test//Test_best.pth
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 2/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/28].........Train Loss : 70.355, Val Loss : 62.988
======> Trajectory Loss : 11.849, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.581, BelowGroundPenalize Loss : 0.378
Opening in existing browser session.
[1028/133226.477670:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1028/133226.852478:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/28].........Train Loss : 73.863, Val Loss : 64.513
======> Trajectory Loss : 12.631, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.603, BelowGroundPenalize Loss : 0.900
[18526:18526:1028/133229.300734:ERROR:password_sync_bridge.cc(361)] Passwords datatype error was encountered: Failed to load entries from password store. Encryption service failure.
===> [Minibatch 3/28].........Train Loss : 69.409, Val Loss : 58.472
======> Trajectory Loss : 12.693, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.558, BelowGroundPenalize Loss : 0.964
===> [Minibatch 4/28].........Train Loss : 79.619, Val Loss : 46.727
======> Trajectory Loss : 13.598, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.650, BelowGroundPenalize Loss : 0.982
