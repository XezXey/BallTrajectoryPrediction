==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.48it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.85it/s]
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.33it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 738, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 738, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 738, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 692, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 692, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 764, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 764, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 720, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 720, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 720, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 856, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 800, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 800, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 800, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 828, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 739, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 739, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 740, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 764, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 764, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 704, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 786, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 786, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 834, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 781, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 781, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 717, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 717, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 717, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 730, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 730, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 703, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 703, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 703, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 727, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 727, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 725, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 725, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 725, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 726, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 744, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 744, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 744, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 827, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 827, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 770, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 770, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 771, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........OrderedDict([('initial_hidden', tensor([[[[-1.3396, -1.5608, -0.1458,  ...,  0.8469, -0.3280,  1.2237],
          [-0.4581,  1.0592, -0.3226,  ..., -1.4542, -0.7705,  1.5800],
          [ 0.2017, -0.7783,  0.2918,  ...,  0.2907,  1.7187,  1.7882],
          ...,
          [ 0.7833,  1.1539,  0.7220,  ..., -0.4660,  1.2576,  0.3330],
          [ 0.1419,  0.0263, -0.8517,  ...,  0.3357, -0.4099, -0.3520],
          [ 0.2660,  1.1352, -0.6903,  ..., -1.4246,  0.7014, -0.3154]],

         [[ 0.3689, -0.5945, -1.7584,  ...,  1.1767, -0.0238,  0.6506],
          [-0.8092, -0.8970,  0.4701,  ...,  0.5618,  1.5556,  0.2909],
          [-0.0072, -2.0879,  0.5196,  ..., -0.1717,  0.3805, -0.0083],
          ...,
          [-0.6824,  0.6961, -1.5582,  ..., -0.0075,  0.1154,  0.5336],
          [-0.7191, -0.6714,  1.3488,  ...,  0.4883,  0.0415,  1.3714],
          [-0.7997, -0.4170,  0.7012,  ..., -0.4684,  0.0582,  0.5954]]],


        [[[ 0.0108, -1.8494,  0.2962,  ...,  0.0186, -1.0872, -0.4134],
          [ 0.2283,  1.5069,  0.5539,  ..., -0.0430,  1.0636,  0.8823],
          [ 0.4701, -1.0513,  0.2336,  ...,  1.0761, -0.1636, -1.0911],
          ...,
          [ 0.9282, -0.3007,  2.6120,  ...,  0.2226,  0.1332, -2.0848],
          [-0.1074, -0.5813,  0.5887,  ..., -1.7900,  1.1542,  0.8795],
          [ 0.8545, -0.0406, -1.4891,  ...,  1.8668,  0.7780,  0.3850]],

         [[-0.8734,  1.2125,  1.3305,  ..., -1.3748,  0.3821,  0.0621],
          [-0.9201,  0.0363, -0.8871,  ..., -0.5290,  0.5141, -0.0116],
          [-1.0265,  0.3992,  0.7569,  ..., -0.8135, -0.1450,  0.2984],
          ...,
          [-1.4170, -1.6677, -1.9229,  ...,  0.5010,  0.6057,  0.1416],
          [-0.8596, -1.3071,  0.3476,  ..., -1.0026, -0.9877, -0.3848],
          [-0.9654, -0.3478, -0.7201,  ..., -0.0851,  0.4577, -0.7595]]],


        [[[-0.0647,  0.4569,  0.1412,  ...,  0.4881, -0.8207, -1.0965],
          [-1.2342, -0.7898, -0.1827,  ...,  0.0185, -0.6586, -1.4574],
          [-0.5442,  0.9295,  0.2884,  ..., -0.0872,  0.0134,  0.6918],
          ...,
          [ 0.2943,  1.0472,  0.1486,  ..., -0.8057, -0.2274,  0.5749],
          [ 0.0111, -0.2393, -0.3298,  ..., -1.3234,  0.5209, -0.2835],
          [-0.0139,  1.4878, -1.8545,  ..., -0.4852, -1.0374, -2.2963]],

         [[-0.4965, -1.1910,  0.2453,  ...,  2.3998, -0.1646,  0.8787],
          [ 1.3789, -1.2691,  0.2638,  ...,  0.9149, -0.2154,  1.6256],
          [-0.1278, -0.6918, -0.4083,  ..., -0.0422, -0.8245,  0.0744],
          ...,
          [ 0.7774,  0.1602, -1.4475,  ...,  0.1769,  0.9031, -0.4296],
          [-0.4094,  0.5334, -0.3226,  ...,  1.1448, -2.6342,  0.6084],
          [ 0.2550, -0.4581, -2.1831,  ..., -0.4394, -2.2990, -0.4295]]],


        [[[ 0.8694, -0.7086,  0.9484,  ..., -0.1302, -0.0856,  1.5510],
          [-0.0792,  1.2063,  0.7842,  ..., -0.0491,  0.5499,  1.1101],
          [-0.6376,  0.9138,  0.0822,  ...,  0.5207, -0.1239,  0.9575],
          ...,
          [ 0.8840, -0.2921, -0.3102,  ..., -1.3021,  1.1472,  0.0596],
          [-0.1023,  0.6481,  0.3917,  ..., -2.1348, -0.1700, -1.7384],
          [ 0.0609,  2.1021, -0.8125,  ..., -0.7879, -2.5820, -0.0778]],

         [[ 0.9483, -0.2056,  0.1213,  ...,  0.7337,  0.2928,  0.1633],
          [-0.4686, -0.3902, -0.2878,  ..., -0.2329, -0.0352, -0.0288],
          [ 0.1414,  1.3444,  0.2958,  ...,  0.1925, -1.3073,  0.2100],
          ...,
          [-1.7467, -0.4156, -0.0539,  ...,  2.1130,  0.1753, -0.8002],
          [ 0.0077,  1.7740, -0.4277,  ...,  1.1899,  1.2929,  0.5438],
          [ 0.1929, -0.4610, -2.4396,  ...,  0.6161, -0.3658, -1.4657]]]],
       device='cuda:0')), ('initial_cell', tensor([[[[-0.5051,  0.0226, -1.2976,  ...,  0.1041, -0.6366, -0.1800],
          [-1.7212,  0.4254,  0.0813,  ..., -0.0427, -0.2929, -0.7907],
          [ 0.9539,  0.3867,  1.4027,  ..., -1.2612, -0.5629, -1.4015],
          ...,
          [ 0.4082,  0.0424, -0.2387,  ...,  0.7624, -0.5704,  2.6003],
          [ 0.4849,  1.8416, -1.4852,  ...,  0.5344, -0.5223,  1.9477],
          [-1.0436, -0.2649, -0.6030,  ...,  0.7503,  0.8384, -0.5201]],

         [[-0.0318,  1.1402, -0.6942,  ..., -0.4596, -0.9820,  0.7822],
          [ 1.5161, -0.9494,  1.9338,  ..., -0.6069, -0.2959,  2.0238],
          [-0.0517, -0.2360, -0.8570,  ...,  0.0159,  1.0999, -0.1570],
          ...,
          [ 0.8628,  0.5508, -0.9152,  ..., -1.0637,  0.2964,  0.6294],
          [-0.3353,  2.3139, -0.3351,  ...,  0.7434,  0.5307,  0.7401],
          [-3.1392,  0.9073, -1.7177,  ..., -0.8941,  1.8857,  0.3239]]],


        [[[-1.1998,  1.3254, -0.1402,  ...,  1.3936, -1.4121, -0.0358],
          [-1.4247,  0.0618, -0.3031,  ...,  1.7261, -0.6912, -2.0815],
          [-1.4675,  0.1801,  0.2683,  ..., -0.1186,  0.2284,  0.0359],
          ...,
          [-0.4270,  1.6694, -1.4033,  ...,  0.8541,  0.8224, -0.1921],
          [ 0.2115, -0.3706, -1.1165,  ...,  0.3779,  0.1667, -0.5868],
          [ 0.2999,  0.9861,  1.7954,  ...,  0.2885, -0.4236,  0.0551]],

         [[-0.9972, -0.9401,  0.7554,  ..., -1.2871,  0.4607, -0.2717],
          [-0.1113, -1.0910,  1.4900,  ...,  1.0285,  1.0173,  1.1144],
          [-1.0797,  1.0199,  2.4314,  ...,  1.1593, -0.9168, -0.0184],
          ...,
          [-1.5632, -1.6841,  0.1535,  ...,  1.0708,  0.2617,  0.8894],
          [ 0.5636, -0.3565,  0.2217,  ..., -0.9905,  0.6866,  0.3239],
          [-1.0562,  0.2635, -1.2708,  ..., -0.0631,  0.5479,  0.4866]]],


        [[[-0.4803,  0.5346,  0.7691,  ...,  1.8003,  1.0222,  1.1737],
          [ 0.5351,  0.5826, -0.0928,  ...,  0.2217, -0.3269, -0.3472],
          [-1.0891,  0.1018, -1.3654,  ...,  1.9398,  0.4827, -1.1553],
          ...,
          [ 0.3857,  0.5324,  0.0919,  ...,  0.0747, -0.7205,  2.3124],
          [-2.0737,  0.6377,  0.8929,  ..., -0.9643, -0.4100,  1.2724],
          [-0.7499,  1.1452, -0.0412,  ...,  0.8483,  0.9677,  1.8222]],

         [[ 0.4002, -0.5513,  0.4702,  ...,  2.8067,  0.4231, -1.2286],
          [ 0.1751,  1.0955, -0.4744,  ...,  0.9411,  0.8004,  0.4760],
          [-0.0271, -1.2306, -0.7614,  ...,  0.7627, -1.5977, -1.5934],
          ...,
          [ 0.7801,  0.1576,  0.5261,  ..., -1.4656, -0.3510, -0.4333],
          [-1.1502,  1.7629,  0.9246,  ...,  0.5084,  0.4939, -1.7648],
          [-0.8596,  0.9286, -0.5526,  ...,  0.7925,  0.0690,  1.4991]]],


        [[[-1.4435, -1.9445,  0.2605,  ...,  0.4959,  0.2713,  0.1248],
          [-1.0996,  1.0056,  0.7580,  ..., -1.7032, -0.9666,  2.1131],
          [ 0.5695,  0.4885, -0.2991,  ..., -1.2178,  1.7896, -0.6253],
          ...,
          [ 1.0547,  0.7020, -0.1531,  ..., -0.1115,  0.6872, -0.5550],
          [-1.0683, -0.9344,  1.4386,  ...,  0.7490,  0.4649, -0.1535],
          [-0.2286,  1.1571, -1.1991,  ..., -0.1501, -0.2788,  0.2632]],

         [[ 1.0819,  1.0086, -1.7905,  ..., -0.5703, -0.5851, -0.6176],
          [ 0.4145,  0.4502,  0.4856,  ..., -1.4535,  0.4077, -0.2184],
          [-0.9429, -0.1003, -2.2228,  ..., -0.5227, -0.5428, -0.4493],
          ...,
          [ 2.9659, -0.8621, -1.1696,  ..., -0.0091,  1.8579,  0.5510],
          [ 1.0400, -0.3705, -1.2908,  ..., -0.2720,  0.9105, -1.3794],
          [-0.6910,  1.6330, -0.1470,  ..., -0.2493, -1.4325, -0.2545]]]],
       device='cuda:0')), ('h', tensor([[[[-1.3396, -1.5608, -0.1458,  ...,  0.8469, -0.3280,  1.2237],
          [-0.4581,  1.0592, -0.3226,  ..., -1.4542, -0.7705,  1.5800],
          [ 0.2017, -0.7783,  0.2918,  ...,  0.2907,  1.7187,  1.7882],
          ...,
          [ 0.7833,  1.1539,  0.7220,  ..., -0.4660,  1.2576,  0.3330],
          [ 0.1419,  0.0263, -0.8517,  ...,  0.3357, -0.4099, -0.3520],
          [ 0.2660,  1.1352, -0.6903,  ..., -1.4246,  0.7014, -0.3154]],

         [[ 0.3689, -0.5945, -1.7584,  ...,  1.1767, -0.0238,  0.6506],
          [-0.8092, -0.8970,  0.4701,  ...,  0.5618,  1.5556,  0.2909],
          [-0.0072, -2.0879,  0.5196,  ..., -0.1717,  0.3805, -0.0083],
          ...,
          [-0.6824,  0.6961, -1.5582,  ..., -0.0075,  0.1154,  0.5336],
          [-0.7191, -0.6714,  1.3488,  ...,  0.4883,  0.0415,  1.3714],
          [-0.7997, -0.4170,  0.7012,  ..., -0.4684,  0.0582,  0.5954]]],


        [[[ 0.0108, -1.8494,  0.2962,  ...,  0.0186, -1.0872, -0.4134],
          [ 0.2283,  1.5069,  0.5539,  ..., -0.0430,  1.0636,  0.8823],
          [ 0.4701, -1.0513,  0.2336,  ...,  1.0761, -0.1636, -1.0911],
          ...,
          [ 0.9282, -0.3007,  2.6120,  ...,  0.2226,  0.1332, -2.0848],
          [-0.1074, -0.5813,  0.5887,  ..., -1.7900,  1.1542,  0.8795],
          [ 0.8545, -0.0406, -1.4891,  ...,  1.8668,  0.7780,  0.3850]],

         [[-0.8734,  1.2125,  1.3305,  ..., -1.3748,  0.3821,  0.0621],
          [-0.9201,  0.0363, -0.8871,  ..., -0.5290,  0.5141, -0.0116],
          [-1.0265,  0.3992,  0.7569,  ..., -0.8135, -0.1450,  0.2984],
          ...,
          [-1.4170, -1.6677, -1.9229,  ...,  0.5010,  0.6057,  0.1416],
          [-0.8596, -1.3071,  0.3476,  ..., -1.0026, -0.9877, -0.3848],
          [-0.9654, -0.3478, -0.7201,  ..., -0.0851,  0.4577, -0.7595]]],


        [[[-0.0647,  0.4569,  0.1412,  ...,  0.4881, -0.8207, -1.0965],
          [-1.2342, -0.7898, -0.1827,  ...,  0.0185, -0.6586, -1.4574],
          [-0.5442,  0.9295,  0.2884,  ..., -0.0872,  0.0134,  0.6918],
          ...,
          [ 0.2943,  1.0472,  0.1486,  ..., -0.8057, -0.2274,  0.5749],
          [ 0.0111, -0.2393, -0.3298,  ..., -1.3234,  0.5209, -0.2835],
          [-0.0139,  1.4878, -1.8545,  ..., -0.4852, -1.0374, -2.2963]],

         [[-0.4965, -1.1910,  0.2453,  ...,  2.3998, -0.1646,  0.8787],
          [ 1.3789, -1.2691,  0.2638,  ...,  0.9149, -0.2154,  1.6256],
          [-0.1278, -0.6918, -0.4083,  ..., -0.0422, -0.8245,  0.0744],
          ...,
          [ 0.7774,  0.1602, -1.4475,  ...,  0.1769,  0.9031, -0.4296],
          [-0.4094,  0.5334, -0.3226,  ...,  1.1448, -2.6342,  0.6084],
          [ 0.2550, -0.4581, -2.1831,  ..., -0.4394, -2.2990, -0.4295]]],


        [[[ 0.8694, -0.7086,  0.9484,  ..., -0.1302, -0.0856,  1.5510],
          [-0.0792,  1.2063,  0.7842,  ..., -0.0491,  0.5499,  1.1101],
          [-0.6376,  0.9138,  0.0822,  ...,  0.5207, -0.1239,  0.9575],
          ...,
          [ 0.8840, -0.2921, -0.3102,  ..., -1.3021,  1.1472,  0.0596],
          [-0.1023,  0.6481,  0.3917,  ..., -2.1348, -0.1700, -1.7384],
          [ 0.0609,  2.1021, -0.8125,  ..., -0.7879, -2.5820, -0.0778]],

         [[ 0.9483, -0.2056,  0.1213,  ...,  0.7337,  0.2928,  0.1633],
          [-0.4686, -0.3902, -0.2878,  ..., -0.2329, -0.0352, -0.0288],
          [ 0.1414,  1.3444,  0.2958,  ...,  0.1925, -1.3073,  0.2100],
          ...,
          [-1.7467, -0.4156, -0.0539,  ...,  2.1130,  0.1753, -0.8002],
          [ 0.0077,  1.7740, -0.4277,  ...,  1.1899,  1.2929,  0.5438],
          [ 0.1929, -0.4610, -2.4396,  ...,  0.6161, -0.3658, -1.4657]]]],
       device='cuda:0')), ('c', tensor([[[[-0.5051,  0.0226, -1.2976,  ...,  0.1041, -0.6366, -0.1800],
          [-1.7212,  0.4254,  0.0813,  ..., -0.0427, -0.2929, -0.7907],
          [ 0.9539,  0.3867,  1.4027,  ..., -1.2612, -0.5629, -1.4015],
          ...,
          [ 0.4082,  0.0424, -0.2387,  ...,  0.7624, -0.5704,  2.6003],
          [ 0.4849,  1.8416, -1.4852,  ...,  0.5344, -0.5223,  1.9477],
          [-1.0436, -0.2649, -0.6030,  ...,  0.7503,  0.8384, -0.5201]],

         [[-0.0318,  1.1402, -0.6942,  ..., -0.4596, -0.9820,  0.7822],
          [ 1.5161, -0.9494,  1.9338,  ..., -0.6069, -0.2959,  2.0238],
          [-0.0517, -0.2360, -0.8570,  ...,  0.0159,  1.0999, -0.1570],
          ...,
          [ 0.8628,  0.5508, -0.9152,  ..., -1.0637,  0.2964,  0.6294],
          [-0.3353,  2.3139, -0.3351,  ...,  0.7434,  0.5307,  0.7401],
          [-3.1392,  0.9073, -1.7177,  ..., -0.8941,  1.8857,  0.3239]]],


        [[[-1.1998,  1.3254, -0.1402,  ...,  1.3936, -1.4121, -0.0358],
          [-1.4247,  0.0618, -0.3031,  ...,  1.7261, -0.6912, -2.0815],
          [-1.4675,  0.1801,  0.2683,  ..., -0.1186,  0.2284,  0.0359],
          ...,
          [-0.4270,  1.6694, -1.4033,  ...,  0.8541,  0.8224, -0.1921],
          [ 0.2115, -0.3706, -1.1165,  ...,  0.3779,  0.1667, -0.5868],
          [ 0.2999,  0.9861,  1.7954,  ...,  0.2885, -0.4236,  0.0551]],

         [[-0.9972, -0.9401,  0.7554,  ..., -1.2871,  0.4607, -0.2717],
          [-0.1113, -1.0910,  1.4900,  ...,  1.0285,  1.0173,  1.1144],
          [-1.0797,  1.0199,  2.4314,  ...,  1.1593, -0.9168, -0.0184],
          ...,
          [-1.5632, -1.6841,  0.1535,  ...,  1.0708,  0.2617,  0.8894],
          [ 0.5636, -0.3565,  0.2217,  ..., -0.9905,  0.6866,  0.3239],
          [-1.0562,  0.2635, -1.2708,  ..., -0.0631,  0.5479,  0.4866]]],


        [[[-0.4803,  0.5346,  0.7691,  ...,  1.8003,  1.0222,  1.1737],
          [ 0.5351,  0.5826, -0.0928,  ...,  0.2217, -0.3269, -0.3472],
          [-1.0891,  0.1018, -1.3654,  ...,  1.9398,  0.4827, -1.1553],
          ...,
          [ 0.3857,  0.5324,  0.0919,  ...,  0.0747, -0.7205,  2.3124],
          [-2.0737,  0.6377,  0.8929,  ..., -0.9643, -0.4100,  1.2724],
          [-0.7499,  1.1452, -0.0412,  ...,  0.8483,  0.9677,  1.8222]],

         [[ 0.4002, -0.5513,  0.4702,  ...,  2.8067,  0.4231, -1.2286],
          [ 0.1751,  1.0955, -0.4744,  ...,  0.9411,  0.8004,  0.4760],
          [-0.0271, -1.2306, -0.7614,  ...,  0.7627, -1.5977, -1.5934],
          ...,
          [ 0.7801,  0.1576,  0.5261,  ..., -1.4656, -0.3510, -0.4333],
          [-1.1502,  1.7629,  0.9246,  ...,  0.5084,  0.4939, -1.7648],
          [-0.8596,  0.9286, -0.5526,  ...,  0.7925,  0.0690,  1.4991]]],


        [[[-1.4435, -1.9445,  0.2605,  ...,  0.4959,  0.2713,  0.1248],
          [-1.0996,  1.0056,  0.7580,  ..., -1.7032, -0.9666,  2.1131],
          [ 0.5695,  0.4885, -0.2991,  ..., -1.2178,  1.7896, -0.6253],
          ...,
          [ 1.0547,  0.7020, -0.1531,  ..., -0.1115,  0.6872, -0.5550],
          [-1.0683, -0.9344,  1.4386,  ...,  0.7490,  0.4649, -0.1535],
          [-0.2286,  1.1571, -1.1991,  ..., -0.1501, -0.2788,  0.2632]],

         [[ 1.0819,  1.0086, -1.7905,  ..., -0.5703, -0.5851, -0.6176],
          [ 0.4145,  0.4502,  0.4856,  ..., -1.4535,  0.4077, -0.2184],
          [-0.9429, -0.1003, -2.2228,  ..., -0.5227, -0.5428, -0.4493],
          ...,
          [ 2.9659, -0.8621, -1.1696,  ..., -0.0091,  1.8579,  0.5510],
          [ 1.0400, -0.3705, -1.2908,  ..., -0.2720,  0.9105, -1.3794],
          [-0.6910,  1.6330, -0.1470,  ..., -0.2493, -1.4325, -0.2545]]]],
       device='cuda:0')), ('recurrent_blocks.0.weight_ih_l0', tensor([[-9.4111e-02, -1.4262e-01, -1.0058e-01],
        [ 1.0732e-01, -1.3198e-02, -3.7946e-02],
        [ 1.5533e-01, -6.5141e-02, -1.7123e-02],
        [-1.4602e-01,  2.9470e-02,  7.2489e-02],
        [ 7.5684e-02,  1.4063e-01,  1.8355e-01],
        [-4.4683e-02,  4.5228e-02,  5.1789e-02],
        [ 8.9280e-03, -6.6843e-02, -1.0259e-01],
        [-1.5033e-01,  1.7411e-02,  1.6654e-01],
        [-1.0085e-01, -1.5469e-01, -2.6561e-02],
        [ 7.3374e-02,  6.6351e-02, -8.3575e-02],
        [ 2.8333e-03,  1.2056e-01, -1.6057e-01],
        [-1.7974e-01,  2.4367e-02, -3.1505e-02],
        [-9.5771e-02, -1.3182e-01, -9.3271e-03],
        [-3.8706e-02, -1.4789e-01,  3.6411e-02],
        [-5.5651e-02,  8.8916e-02,  9.0970e-02],
        [-5.0955e-02,  2.2735e-02, -1.1543e-01],
        [-5.8568e-02,  2.0815e-02, -1.3023e-01],
        [ 7.5729e-02, -6.4153e-02,  2.9920e-02],
        [ 1.7813e-01,  1.6258e-01, -2.4721e-02],
        [-7.7846e-02,  9.2402e-02, -5.7111e-02],
        [-1.3545e-02, -1.2808e-01, -3.7910e-02],
        [-1.5150e-01, -1.1202e-01,  1.6649e-01],
        [ 6.9048e-02, -9.6690e-02, -1.9000e-02],
        [ 1.2439e-01,  1.7271e-01, -1.3396e-01],
        [-7.8769e-02, -8.5428e-02, -1.0093e-01],
        [ 2.9898e-02, -1.2442e-01, -5.0039e-02],
        [-4.3474e-02,  7.6513e-02, -9.4806e-02],
        [-1.4153e-01,  1.6348e-01,  1.3422e-01],
        [ 3.4565e-02, -7.5924e-02,  2.2999e-03],
        [ 2.1491e-02, -3.6362e-02,  3.7379e-02],
        [ 1.2393e-01, -7.0373e-02,  7.4462e-02],
        [ 1.0023e-01,  1.8553e-01,  1.1297e-01],
        [-8.7359e-02, -1.3244e-01,  7.9234e-02],
        [ 9.2477e-02,  1.4257e-01,  1.5670e-01],
        [-1.6021e-01,  9.6984e-02,  1.8485e-01],
        [-5.6589e-02, -1.5872e-01, -1.1507e-01],
        [ 9.2432e-02,  4.6082e-02, -7.0707e-02],
        [ 6.7383e-02, -1.3007e-01,  4.2675e-02],
        [-4.1444e-02,  3.9782e-02,  1.2741e-02],
        [-2.3862e-02, -3.6795e-02, -2.2608e-02],
        [ 1.3693e-01, -1.1932e-01, -6.3094e-02],
        [-1.0777e-01, -1.4849e-01, -2.4882e-02],
        [ 1.7859e-04,  1.3792e-01,  1.0012e-01],
        [-1.7659e-01, -1.3946e-01, -5.6058e-02],
        [ 3.5403e-02,  1.5137e-01, -6.1411e-02],
        [ 1.4718e-01,  7.8812e-02,  7.1356e-02],
        [ 1.7799e-01,  2.6770e-02, -1.4339e-01],
        [ 2.8603e-03,  1.5835e-01, -8.3539e-02],
        [-7.4504e-02, -1.4414e-01,  1.7965e-01],
        [-1.5581e-01,  9.8666e-02, -1.6647e-01],
        [ 1.0196e-01,  3.4352e-02, -1.4185e-01],
        [ 8.3798e-02,  4.3383e-02,  1.2302e-01],
        [-2.8070e-02,  1.7254e-02,  4.9654e-02],
        [-1.5170e-01,  1.3640e-01, -4.9534e-02],
        [ 4.3224e-02,  2.4092e-02, -1.3615e-01],
        [-8.2326e-02, -6.2875e-02, -1.1928e-01],
        [-3.6462e-02, -1.0271e-01,  1.2249e-01],
        [-9.8861e-02,  5.3827e-02, -7.7813e-02],
        [-1.6257e-01,  1.3329e-01, -6.0113e-02],
        [-1.1395e-02, -5.4271e-02, -8.8309e-02],
        [-1.5752e-02, -6.6374e-02,  1.4303e-01],
        [ 1.4498e-01,  1.5243e-01,  2.7107e-02],
        [ 1.2604e-01,  1.4028e-01,  5.8495e-02],
        [ 1.1548e-01, -2.1433e-02,  1.5190e-01],
        [-6.7209e-02, -3.7014e-02, -9.4029e-03],
        [-3.2119e-02, -2.6983e-02, -1.0311e-01],
        [ 2.3223e-02, -1.0057e-01, -1.8350e-01],
        [-5.8094e-03,  4.3645e-02,  1.5053e-01],
        [-9.8103e-02, -1.5661e-01, -1.4885e-01],
        [-7.9810e-02,  8.7686e-02,  5.0148e-02],
        [ 1.1983e-01,  1.3355e-01, -1.1584e-01],
        [-1.7579e-01,  1.3407e-01,  7.3574e-03],
        [ 1.4602e-02, -6.7309e-02, -6.3677e-02],
        [-1.0681e-01, -5.7643e-02,  3.5759e-02],
        [ 6.8049e-02, -1.0615e-01,  3.4361e-02],
        [-1.2195e-01, -1.2321e-01, -1.6471e-01],
        [-1.1205e-01,  3.2052e-02, -7.2145e-03],
        [-2.5636e-02, -4.0134e-02,  1.3314e-01],
        [ 1.7825e-01,  7.6260e-02, -6.2618e-02],
        [-1.6828e-01, -6.5123e-02, -1.4200e-01],
        [-1.4713e-01, -1.5118e-01, -1.5181e-01],
        [-1.7082e-02,  1.1413e-01, -1.3290e-01],
        [ 1.0743e-01,  8.7851e-02,  9.5975e-02],
        [ 5.9717e-02,  2.7361e-02, -6.2221e-02],
        [-1.7881e-01,  4.2335e-02, -6.0161e-02],
        [ 1.2081e-02,  8.9754e-02,  9.8706e-03],
        [-1.2739e-01,  9.1367e-02,  7.4368e-03],
        [-1.7233e-01, -1.8466e-01,  1.3636e-01],
        [ 5.8225e-02, -1.1583e-01,  9.1428e-02],
        [ 6.8251e-02,  1.1336e-01,  4.2817e-02],
        [ 1.6782e-01, -1.4305e-01, -2.7331e-02],
        [-8.1060e-02,  1.3067e-01,  5.7988e-02],
        [-2.6457e-02, -9.7451e-02,  1.7171e-01],
        [-1.5998e-01,  6.9746e-02, -1.6639e-01],
        [-1.0700e-01, -9.1910e-02, -1.2539e-01],
        [-1.3607e-01, -1.0028e-01,  3.7084e-02],
        [ 1.0600e-01, -1.3300e-01, -8.9157e-02],
        [-1.4540e-01,  8.9269e-02, -4.9371e-02],
        [ 4.5006e-02,  3.5521e-02, -1.5448e-01],
        [-1.4775e-01,  6.2150e-02,  1.0705e-01],
        [ 1.3352e-01,  2.2556e-02, -1.0786e-02],
        [-1.3181e-01,  1.1622e-01,  3.9001e-02],
        [-7.9607e-02,  6.8356e-02, -5.4518e-02],
        [-1.0876e-01,  1.0318e-01,  5.3579e-02],
        [ 1.0221e-01, -6.5387e-02, -8.2518e-02],
        [ 1.6885e-01,  1.0410e-01, -9.9194e-02],
        [ 1.3557e-01,  1.8354e-01,  1.1932e-02],
        [ 8.3922e-02, -6.6741e-02,  8.5989e-02],
        [ 1.6529e-01,  1.2117e-01, -1.7612e-01],
        [-1.2793e-01,  1.2009e-01,  7.3308e-02],
        [ 1.6172e-01,  1.4758e-01, -1.1506e-01],
        [-1.3379e-01, -6.2850e-02, -2.0474e-02],
        [ 8.8863e-02,  1.0848e-01,  1.1041e-01],
        [ 6.0701e-02, -1.6754e-01, -4.8344e-02],
        [ 6.5346e-02, -1.0238e-01,  3.9896e-02],
        [-1.8538e-01, -1.2844e-01,  1.2640e-01],
        [ 6.8056e-02, -9.4367e-02,  6.5116e-02],
        [-1.3336e-01, -1.2758e-01,  1.6667e-01],
        [ 7.9618e-02, -9.7162e-02,  3.3584e-02],
        [ 1.6673e-01,  1.5528e-01, -1.1144e-01],
        [ 1.0334e-01,  7.2615e-02, -1.2197e-01],
        [-1.4183e-01,  7.3523e-02,  1.7213e-01],
        [-8.1180e-02, -5.2704e-02, -1.0354e-01],
        [ 5.3435e-02,  5.7906e-02, -3.5559e-03],
        [-1.1857e-01,  3.3831e-02,  1.2982e-01],
        [-1.6261e-01, -7.7292e-02,  7.7729e-02],
        [ 1.4413e-01,  1.2255e-01,  1.1917e-01],
        [ 1.5186e-01, -1.5504e-01, -9.0791e-02]], device='cuda:0')), ('recurrent_blocks.0.weight_hh_l0', tensor([[-0.0848,  0.0131, -0.0966,  ..., -0.1085,  0.1594, -0.0312],
        [ 0.0068, -0.0097,  0.0149,  ..., -0.0733,  0.0337,  0.0155],
        [-0.0958, -0.1043,  0.1075,  ...,  0.1275,  0.0551, -0.0757],
        ...,
        [-0.0625,  0.1604, -0.1545,  ...,  0.0122,  0.1408,  0.0023],
        [-0.0766,  0.1214,  0.0005,  ..., -0.1238, -0.0942, -0.0455],
        [-0.0429,  0.1418,  0.1467,  ..., -0.0009, -0.1348, -0.1018]],
       device='cuda:0')), ('recurrent_blocks.0.bias_ih_l0', tensor([-0.1312,  0.0368,  0.1812, -0.0189,  0.0162, -0.1591, -0.1532,  0.1593,
        -0.0833, -0.0982, -0.0003, -0.0639, -0.1781,  0.0775,  0.0173,  0.0637,
         0.0998, -0.0737,  0.1587,  0.1028, -0.0562,  0.1152, -0.0654, -0.0398,
         0.1636,  0.0785, -0.0643, -0.1515, -0.0065, -0.0585, -0.0489,  0.0706,
        -0.0288, -0.0743,  0.0530,  0.0882, -0.0201,  0.1346, -0.1519, -0.0589,
         0.0164, -0.1646,  0.1203,  0.0122,  0.1179,  0.1077,  0.0182,  0.1361,
        -0.0838,  0.0920,  0.1349,  0.0627,  0.0838,  0.0638,  0.0226,  0.1508,
        -0.1407, -0.0105, -0.1397, -0.0497,  0.0182,  0.1652, -0.0385, -0.0938,
        -0.1282,  0.0520,  0.1202,  0.0979, -0.0328,  0.1596,  0.0965, -0.0938,
        -0.1237, -0.1154, -0.1110, -0.0561, -0.0812,  0.0027, -0.0234,  0.1127,
         0.0689,  0.0906,  0.0231,  0.1221,  0.1724, -0.1287, -0.0130, -0.0830,
        -0.1603,  0.0754,  0.1474,  0.1341,  0.1376,  0.0935,  0.1212,  0.0417,
         0.1659,  0.0933,  0.0441,  0.1548, -0.1132,  0.0978, -0.1639,  0.1835,
        -0.0058, -0.0292,  0.0595,  0.1500,  0.1606, -0.1457,  0.1537, -0.0433,
         0.0606,  0.1475,  0.0924,  0.0503,  0.1287,  0.1508,  0.0742,  0.1205,
         0.0498, -0.0866,  0.1611, -0.1252,  0.0416,  0.0884,  0.0366, -0.1569],
       device='cuda:0')), ('recurrent_blocks.0.bias_hh_l0', tensor([-0.0747, -0.0541,  0.0491,  0.0878,  0.1453, -0.1247,  0.1754, -0.1045,
         0.0912,  0.0317, -0.0031,  0.0577, -0.0327,  0.0034,  0.1814,  0.1820,
         0.1123, -0.1273,  0.1296, -0.1796, -0.1610, -0.1021,  0.0350,  0.1511,
        -0.0416, -0.0441,  0.0686,  0.1334,  0.0395,  0.1214,  0.0073, -0.1191,
        -0.0448, -0.1527, -0.1539, -0.0401, -0.0135, -0.0071, -0.1657, -0.0553,
        -0.0953, -0.0767,  0.0498, -0.0673,  0.0677,  0.0289, -0.0320,  0.0299,
        -0.0802, -0.1689,  0.1209,  0.0717,  0.0539,  0.1455,  0.0464,  0.1749,
        -0.1663,  0.0758,  0.1555,  0.0774, -0.0590, -0.0554,  0.0268,  0.0421,
         0.1032, -0.0380, -0.0970, -0.1718, -0.1668, -0.0955,  0.0954,  0.1354,
        -0.0012, -0.0023,  0.1425,  0.1413, -0.1070,  0.1753, -0.0427, -0.0908,
        -0.0845,  0.0226,  0.0254, -0.0311, -0.0680,  0.1108, -0.0515, -0.1457,
        -0.1677,  0.1461, -0.0362,  0.0894, -0.0125, -0.1860,  0.0298, -0.0929,
         0.0169, -0.1219, -0.0579, -0.1101,  0.1506,  0.0878, -0.1140,  0.1035,
         0.1639,  0.1563,  0.1589, -0.1068,  0.0049,  0.1664, -0.0721,  0.0577,
         0.0801, -0.0188,  0.0774,  0.0216, -0.0268, -0.1001,  0.1632,  0.1658,
         0.0886,  0.1839,  0.0257, -0.0466,  0.0134,  0.1337, -0.1212, -0.1658],
       device='cuda:0')), ('recurrent_blocks.0.weight_ih_l0_reverse', tensor([[-7.5844e-02,  1.7838e-02,  1.6052e-01],
        [-1.5448e-02,  1.2459e-01, -2.7576e-02],
        [-1.5811e-01,  1.5054e-01,  8.1581e-02],
        [-5.4838e-02, -3.3937e-02, -1.5205e-01],
        [ 1.4808e-01,  1.0639e-01, -1.5217e-01],
        [-7.9441e-02,  1.6182e-02, -1.5284e-01],
        [ 1.1253e-02,  3.7590e-02,  1.6406e-01],
        [ 7.9343e-02,  4.7727e-02,  1.3760e-01],
        [-1.0926e-01, -7.1662e-02,  1.8473e-01],
        [-1.4609e-01, -9.2690e-02, -8.0249e-02],
        [ 7.9642e-04, -1.7178e-01, -2.8411e-02],
        [ 6.6654e-03, -1.2033e-01,  2.4224e-02],
        [-1.5631e-01,  5.5119e-02, -1.0194e-01],
        [ 2.2283e-02, -1.6454e-01,  9.9849e-02],
        [-1.4335e-03, -9.0928e-02, -6.7238e-02],
        [-8.7555e-02,  2.8397e-03, -2.3967e-02],
        [ 1.1146e-01,  1.5861e-01,  2.7492e-03],
        [ 3.8659e-02,  1.2309e-01, -1.2200e-01],
        [-1.1433e-01, -4.1760e-03, -1.9878e-02],
        [-1.0501e-02, -1.4347e-01, -1.3150e-01],
        [ 1.8517e-01, -1.5059e-01, -7.0253e-02],
        [ 1.5164e-01, -4.6867e-02,  5.3214e-02],
        [-1.6290e-01,  1.0319e-01,  1.2958e-01],
        [-1.3730e-01,  4.3187e-02, -4.3469e-02],
        [-1.3281e-01,  3.7249e-02, -3.5551e-02],
        [ 2.0972e-02,  1.0681e-01, -1.1822e-01],
        [ 1.0762e-01, -1.1937e-01, -3.0474e-02],
        [-1.6919e-01, -4.0351e-02,  1.1313e-01],
        [-1.5173e-02, -1.2767e-01,  3.4770e-02],
        [ 1.4635e-01, -9.6305e-02, -1.2189e-01],
        [ 3.1656e-02,  7.9615e-02, -2.5925e-03],
        [ 1.3784e-01,  1.6350e-01, -3.2335e-02],
        [ 1.5190e-02,  1.8243e-01, -8.2408e-03],
        [-7.3486e-02,  1.3479e-01, -6.9546e-03],
        [-7.5081e-02,  4.2236e-03, -7.8434e-02],
        [ 5.5230e-02,  6.2711e-02, -1.3761e-01],
        [ 1.4177e-01, -9.2323e-02, -2.9632e-02],
        [ 1.2423e-01,  1.7172e-02,  1.0175e-01],
        [ 6.8992e-02, -1.3750e-01,  2.6930e-02],
        [ 7.9202e-02, -6.5196e-02,  5.2657e-02],
        [-9.8260e-02, -2.4470e-03,  1.5248e-01],
        [-1.1524e-02, -5.7603e-02,  9.4473e-02],
        [ 1.6655e-01,  2.4895e-02,  5.7843e-02],
        [ 1.7580e-01, -1.8110e-02, -8.2811e-02],
        [-1.3283e-01, -1.2396e-01, -5.8719e-02],
        [ 4.8949e-02, -8.6559e-02, -3.4515e-03],
        [ 4.2704e-02, -8.0759e-02,  9.8403e-02],
        [-1.1357e-01, -1.4819e-01, -1.5264e-02],
        [-5.9538e-02,  3.7494e-02,  5.2163e-02],
        [ 1.5778e-01, -6.4835e-02, -1.0066e-01],
        [ 4.0767e-02, -7.0720e-02,  4.3859e-02],
        [ 1.4598e-01, -1.3221e-02, -9.3745e-02],
        [ 3.3685e-03, -9.9747e-02, -2.7505e-03],
        [-2.0703e-02, -1.4638e-01, -2.0256e-02],
        [ 3.0300e-02,  2.6921e-02, -5.9029e-02],
        [ 8.4695e-02,  1.2259e-01,  5.2200e-02],
        [ 4.3616e-02, -2.9557e-02,  1.2310e-02],
        [-5.2362e-03, -4.7800e-02,  9.5821e-03],
        [ 7.4264e-03, -1.4815e-01,  6.9909e-02],
        [-3.5494e-02,  8.0436e-02, -1.5291e-01],
        [-1.9061e-02,  9.2240e-02,  5.7883e-02],
        [-1.1061e-01,  1.3935e-01, -4.3843e-02],
        [ 1.6168e-01,  1.5923e-01,  9.1568e-02],
        [-2.2840e-02,  3.9412e-02, -1.8622e-01],
        [-1.5009e-01, -8.4616e-02, -2.3160e-02],
        [ 8.4516e-02, -1.4886e-03,  1.8168e-01],
        [-1.6018e-01,  1.1772e-01, -1.1756e-01],
        [-1.4920e-01, -1.3407e-02, -6.1339e-02],
        [-1.5348e-01,  1.5924e-01, -1.1702e-01],
        [-9.3218e-02, -1.6531e-01, -1.4813e-01],
        [-1.3971e-01,  3.1471e-02,  1.4883e-01],
        [ 1.4288e-01, -3.5008e-03, -2.7996e-02],
        [-6.6857e-02, -1.5289e-01, -6.6239e-02],
        [ 1.1906e-01, -7.6658e-03,  2.1691e-02],
        [ 9.0695e-02, -1.0108e-01, -1.3384e-01],
        [-6.1650e-02,  5.0313e-02, -2.2673e-02],
        [ 4.8557e-02, -2.8210e-02, -7.7900e-02],
        [ 1.1108e-01,  1.8256e-01, -1.4602e-01],
        [-1.5107e-01,  1.5487e-01, -1.5132e-01],
        [-4.3261e-02, -2.3604e-02,  2.5643e-02],
        [-2.9167e-02, -1.3035e-01,  1.3799e-01],
        [ 4.6187e-02, -7.5973e-02, -4.4520e-02],
        [-1.1295e-01, -9.3008e-02,  1.3821e-01],
        [-2.0156e-02, -1.2174e-01, -1.2456e-01],
        [-9.0412e-02, -1.4666e-01, -6.0998e-03],
        [ 1.0963e-01,  1.4519e-01, -9.2740e-02],
        [-7.4856e-02, -1.2336e-01,  1.4618e-01],
        [-1.7082e-01, -1.6143e-01,  1.7174e-01],
        [ 4.4055e-02,  1.6696e-01, -1.5825e-01],
        [ 7.9394e-02,  1.2452e-01,  1.3837e-01],
        [-1.3106e-01,  3.1997e-02, -3.7722e-02],
        [-5.8420e-02,  5.7229e-02, -9.7180e-02],
        [ 1.8444e-03, -1.5358e-02,  8.5159e-02],
        [-1.6068e-02, -1.5607e-02,  6.9192e-02],
        [ 1.8165e-01, -1.6717e-02,  1.2941e-01],
        [ 9.0049e-02,  8.1378e-02,  1.0487e-01],
        [ 1.3530e-01,  6.7199e-02,  7.8351e-03],
        [ 4.9720e-03, -1.3923e-01,  1.5050e-01],
        [-1.2146e-01,  7.9898e-02, -6.3966e-02],
        [-2.5734e-03,  1.0646e-01, -4.4023e-02],
        [ 6.1570e-03,  1.4626e-01,  9.4897e-02],
        [-1.4388e-01,  8.5725e-02,  6.8775e-02],
        [ 7.0708e-02,  8.2791e-02, -1.7733e-01],
        [ 1.8385e-01, -7.4819e-02, -5.6680e-02],
        [ 1.7022e-01,  8.2781e-02,  2.0288e-02],
        [ 1.5503e-01,  1.4705e-01, -1.5549e-01],
        [-1.7998e-01,  5.5167e-02, -2.9494e-02],
        [-1.2338e-01,  1.4117e-01,  2.8432e-02],
        [-1.1312e-02,  1.3237e-01, -3.8825e-02],
        [ 1.5652e-04,  4.0570e-03,  7.4794e-02],
        [ 1.5697e-01,  3.8585e-02,  1.4411e-01],
        [ 6.9209e-02,  1.0264e-02, -6.1661e-03],
        [ 1.5752e-01,  1.3392e-02,  8.9016e-02],
        [ 1.7136e-02, -8.5446e-02, -6.4009e-02],
        [-1.5119e-01, -1.0736e-01,  5.2481e-02],
        [ 3.3822e-02,  1.4012e-01, -1.9281e-02],
        [-1.1557e-03,  2.7985e-02, -5.5307e-02],
        [ 9.9487e-03,  4.4309e-02,  4.1884e-02],
        [ 3.2893e-02, -6.7761e-02, -1.4097e-01],
        [ 3.9122e-02, -3.3733e-02, -7.1672e-02],
        [-5.5138e-02,  1.0253e-01, -1.5477e-01],
        [-8.2252e-02,  5.5065e-02, -1.3267e-01],
        [ 1.5969e-01,  5.6338e-03, -1.3781e-01],
        [ 5.0842e-02, -1.3880e-01, -3.6855e-02],
        [ 1.0259e-01,  1.5138e-01, -1.3893e-01],
        [-5.5322e-02, -1.0836e-01,  1.8160e-01],
        [ 1.6047e-01,  6.1861e-02,  1.1781e-01],
        [ 1.4671e-01,  1.1578e-01,  6.9802e-02]], device='cuda:0')), ('recurrent_blocks.0.weight_hh_l0_reverse', tensor([[-1.2431e-01,  1.8015e-01,  7.9987e-02,  ...,  1.4845e-01,
         -5.0897e-02,  6.1852e-02],
        [ 5.5854e-02, -1.1247e-01,  7.7613e-02,  ...,  1.5119e-01,
          5.4635e-02, -6.5085e-02],
        [ 1.1044e-02, -1.2659e-01,  1.6403e-01,  ...,  1.7473e-01,
          9.0869e-02, -1.1348e-01],
        ...,
        [ 1.4014e-01, -1.8115e-01, -2.7858e-02,  ..., -9.1940e-02,
          1.1629e-01,  1.2481e-01],
        [-1.3688e-01, -1.8535e-02,  3.8352e-02,  ...,  2.7514e-06,
         -1.7646e-01, -4.2214e-02],
        [-1.4269e-01, -1.7454e-01, -4.9995e-02,  ..., -3.5536e-02,
         -1.6996e-01, -7.5571e-02]], device='cuda:0')), ('recurrent_blocks.0.bias_ih_l0_reverse', tensor([ 0.0929, -0.0845, -0.1214,  0.1289, -0.0585,  0.1195, -0.0010,  0.0839,
         0.0296,  0.0960,  0.0512,  0.1291,  0.0644, -0.0135,  0.0131,  0.1690,
        -0.1238,  0.1475, -0.0012,  0.0848, -0.1492,  0.0662, -0.0537,  0.0345,
         0.0331,  0.0696,  0.1235,  0.0647, -0.1013,  0.1757, -0.1232, -0.1582,
         0.0837, -0.0732,  0.0916, -0.1503, -0.0484,  0.1289, -0.0195, -0.1153,
         0.0979, -0.1006, -0.0684, -0.1696,  0.1530,  0.0764, -0.0327,  0.1409,
        -0.1098, -0.0876,  0.1786, -0.0402, -0.0701,  0.0161, -0.0656,  0.0697,
         0.1097,  0.0885, -0.0532,  0.0316, -0.1202,  0.1676, -0.0511,  0.0778,
        -0.0521,  0.0583, -0.0919,  0.1222,  0.1664,  0.1385,  0.0478,  0.0289,
        -0.1066, -0.0722, -0.0943,  0.0390, -0.0317,  0.0195,  0.1025, -0.1841,
        -0.1630, -0.0684, -0.0573,  0.0321, -0.0445, -0.0795, -0.0767,  0.1799,
        -0.1269,  0.1449,  0.1350,  0.0869, -0.1076,  0.1024,  0.1471,  0.1404,
        -0.0260, -0.1767, -0.0192, -0.0959, -0.1337,  0.0793, -0.0253, -0.1537,
         0.0039, -0.1100, -0.1318, -0.1361, -0.0719, -0.0363, -0.1319, -0.0101,
         0.0034, -0.0321, -0.1187,  0.1376, -0.1282,  0.1185, -0.0346,  0.0387,
         0.1553, -0.0911,  0.1572,  0.0905,  0.0245,  0.0640, -0.0615,  0.1506],
       device='cuda:0')), ('recurrent_blocks.0.bias_hh_l0_reverse', tensor([-0.0681,  0.0733,  0.0697,  0.0132, -0.0170,  0.0918, -0.1765, -0.0165,
        -0.0472,  0.0229, -0.1448, -0.1701,  0.1289, -0.1495,  0.1605,  0.0003,
        -0.0931, -0.1638, -0.0277, -0.0819,  0.1602,  0.1255, -0.0395, -0.0281,
         0.0191, -0.1344,  0.1268,  0.0591,  0.0114, -0.1352, -0.1165, -0.0872,
         0.1841, -0.1165, -0.0287,  0.1537,  0.1518,  0.0985,  0.1156, -0.1139,
         0.0211, -0.1747,  0.1647,  0.0960,  0.1336,  0.1430, -0.1839, -0.1166,
         0.0310, -0.0752, -0.1603,  0.0444,  0.0946, -0.1146, -0.0962,  0.0048,
         0.0229,  0.1104,  0.0265, -0.0600, -0.1741, -0.1198,  0.0241,  0.0661,
         0.1623,  0.0046,  0.0550, -0.1405,  0.0713, -0.1547, -0.1582,  0.0770,
         0.0522,  0.0761,  0.1108, -0.0750,  0.0026,  0.0772, -0.0907,  0.0294,
         0.0297,  0.1439, -0.1559, -0.0527,  0.0021, -0.0080, -0.0173, -0.0691,
        -0.0165,  0.0067,  0.0432, -0.0789, -0.0271, -0.0361,  0.0846, -0.1121,
         0.1633,  0.1501, -0.0765,  0.0922,  0.1526,  0.0364, -0.1120, -0.1036,
        -0.1354, -0.0766,  0.0050, -0.0215,  0.1261,  0.0814, -0.1656,  0.0396,
        -0.0597,  0.0547,  0.1165,  0.0496, -0.1646,  0.0635, -0.0449, -0.0791,
        -0.1364,  0.0272, -0.1005, -0.0961,  0.1325, -0.0526, -0.0412, -0.0768],
       device='cuda:0')), ('recurrent_blocks.1.weight_ih_l0', tensor([[-0.1008,  0.0306,  0.1123,  ...,  0.1353, -0.0703,  0.0202],
        [ 0.1463, -0.0789, -0.0027,  ...,  0.1404,  0.0054,  0.0006],
        [-0.1010,  0.1099,  0.0971,  ...,  0.1555, -0.0446, -0.1159],
        ...,
        [-0.0121,  0.1089, -0.0232,  ...,  0.0654, -0.1559, -0.1245],
        [ 0.1640, -0.1172, -0.0012,  ...,  0.1046, -0.0904,  0.0596],
        [-0.1164,  0.0559,  0.1256,  ...,  0.0531,  0.0249,  0.0768]],
       device='cuda:0')), ('recurrent_blocks.1.weight_hh_l0', tensor([[-0.1688, -0.1405, -0.1547,  ...,  0.1570,  0.0276,  0.1539],
        [ 0.1325,  0.1607,  0.1665,  ...,  0.0012,  0.1148,  0.0937],
        [ 0.0377, -0.0325,  0.0577,  ..., -0.0815,  0.1260, -0.1358],
        ...,
        [-0.1699, -0.0588, -0.0572,  ..., -0.0286, -0.0981,  0.1487],
        [ 0.1107,  0.0322,  0.0779,  ...,  0.1535, -0.1012, -0.0236],
        [ 0.1424,  0.1538,  0.1319,  ...,  0.1556, -0.0374,  0.1093]],
       device='cuda:0')), ('recurrent_blocks.1.bias_ih_l0', tensor([ 0.1278,  0.0343, -0.0149,  0.1567,  0.0062,  0.0935,  0.1640,  0.0784,
        -0.1633, -0.0154, -0.0945,  0.0149,  0.0791,  0.1274,  0.0366, -0.1380,
        -0.1147, -0.1417, -0.1133, -0.1517,  0.0451, -0.0082,  0.0832, -0.1342,
         0.0092,  0.1117, -0.1560, -0.1516, -0.0302, -0.1218, -0.0932,  0.1067,
        -0.1284, -0.1248,  0.0394, -0.1273,  0.0070, -0.1170,  0.0968,  0.0213,
         0.1204, -0.1496, -0.0600, -0.1301, -0.1143,  0.0147, -0.1135, -0.0523,
         0.1777,  0.0263,  0.1388, -0.0942,  0.0570, -0.1481,  0.0355, -0.1249,
         0.1060,  0.0581, -0.0127,  0.0837, -0.1651,  0.1469,  0.1102,  0.0812,
         0.1145, -0.0329, -0.0006,  0.1510, -0.0838, -0.0752, -0.0713, -0.0904,
        -0.0993,  0.0399,  0.0301, -0.1395, -0.0211,  0.1271, -0.0219,  0.0288,
         0.0342,  0.1253,  0.0462,  0.1146,  0.1184, -0.0486,  0.1845, -0.1332,
        -0.0221, -0.0139,  0.0898, -0.1206, -0.0009, -0.1570,  0.0952,  0.0714,
        -0.0600,  0.1467, -0.0846,  0.1626,  0.0231,  0.0742, -0.0654, -0.0379,
        -0.0789,  0.0276, -0.0685,  0.0719, -0.0935,  0.0087,  0.0102, -0.0706,
         0.0141,  0.0225,  0.0500, -0.0922,  0.0811, -0.0621,  0.0893,  0.0298,
         0.1593,  0.0398,  0.0810,  0.0617,  0.0090,  0.0372, -0.0584,  0.0177],
       device='cuda:0')), ('recurrent_blocks.1.bias_hh_l0', tensor([-1.5209e-01, -1.2999e-01,  7.4582e-02,  4.7762e-02, -2.4848e-02,
        -2.1092e-02, -6.8486e-03,  1.7427e-01,  1.2760e-01, -8.8437e-02,
        -6.9436e-02,  1.2171e-01, -1.6209e-01, -1.2691e-01,  5.2766e-02,
        -7.7988e-02,  8.7064e-03, -1.5244e-01, -3.7882e-02, -1.6774e-01,
         1.5204e-01, -8.1665e-02, -7.4585e-02, -1.4295e-01,  1.5667e-01,
        -1.6849e-01, -1.6080e-01, -7.0383e-02,  3.5130e-02, -7.7766e-02,
         1.3040e-01,  1.1945e-02,  3.2225e-02, -1.8184e-01,  4.9026e-02,
        -1.5747e-02, -1.3872e-01,  1.1295e-01, -1.6136e-01,  3.7819e-05,
        -1.0242e-01,  1.1856e-01, -1.5687e-02, -1.1584e-01, -2.4596e-02,
         3.8016e-02, -1.6523e-01,  3.6685e-02,  1.6608e-01, -5.1568e-02,
         1.3035e-02, -1.4406e-01,  1.1263e-01, -2.7726e-02, -4.0337e-02,
         4.1218e-02,  5.6965e-02,  7.7103e-02,  7.9503e-02,  6.6653e-02,
        -1.3610e-01,  1.3808e-01,  1.6340e-01, -5.3977e-02, -5.7345e-02,
        -1.4078e-01,  1.4409e-01, -1.0057e-01, -4.4481e-02,  7.7810e-02,
         7.3624e-02,  1.4181e-01,  1.3192e-01, -9.5340e-02, -5.5135e-02,
        -1.6586e-01,  1.1747e-01, -1.8557e-02, -2.7176e-02, -1.1872e-01,
        -4.0508e-02,  2.8995e-02,  1.1685e-01, -1.5301e-01,  6.6408e-02,
        -8.7288e-02,  1.3674e-01,  4.4924e-02, -3.0401e-02, -8.6894e-02,
         1.2826e-01,  5.0924e-02,  5.8778e-02, -8.6073e-02, -5.4620e-02,
        -1.2071e-01,  8.5441e-02, -3.0348e-02, -1.5633e-01, -6.1341e-02,
         2.7353e-02,  1.3611e-01, -9.8336e-02,  6.6594e-02,  2.4345e-02,
        -1.1449e-01, -1.3986e-01, -4.8373e-02,  1.4687e-01, -2.6862e-02,
        -5.7545e-02,  1.1104e-01, -1.1474e-01, -3.6264e-02,  2.3232e-02,
        -1.5021e-01, -7.4886e-02, -6.0192e-02,  1.5537e-01,  1.0116e-01,
        -1.6464e-01, -1.1402e-01, -3.2038e-02, -1.9949e-02,  3.0703e-02,
         8.6188e-02, -9.7397e-03,  8.1598e-02], device='cuda:0')), ('recurrent_blocks.1.weight_ih_l0_reverse', tensor([[-0.1419, -0.1684, -0.1722,  ...,  0.0237, -0.0420,  0.0162],
        [-0.1055, -0.0274, -0.0964,  ...,  0.1288,  0.0641, -0.1375],
        [ 0.0825, -0.1467,  0.0656,  ..., -0.1490, -0.0404, -0.0439],
        ...,
        [ 0.1551, -0.1527, -0.1179,  ...,  0.0233, -0.1755, -0.0891],
        [-0.1260,  0.1707, -0.0873,  ...,  0.0967,  0.1578, -0.1143],
        [ 0.1193, -0.0794,  0.1381,  ..., -0.0199, -0.0287,  0.0653]],
       device='cuda:0')), ('recurrent_blocks.1.weight_hh_l0_reverse', tensor([[-0.0373, -0.0512,  0.1627,  ..., -0.0878,  0.0428,  0.0251],
        [-0.0269, -0.1593,  0.1630,  ...,  0.0516,  0.1607, -0.0147],
        [-0.1651,  0.0361, -0.0082,  ..., -0.0063,  0.1468, -0.1408],
        ...,
        [ 0.1454, -0.0575,  0.1670,  ...,  0.0174,  0.1485,  0.0631],
        [-0.0082, -0.0414, -0.0500,  ...,  0.1560, -0.1690, -0.1469],
        [-0.0557,  0.0392, -0.1011,  ..., -0.1470,  0.0478,  0.0131]],
       device='cuda:0')), ('recurrent_blocks.1.bias_ih_l0_reverse', tensor([-4.1537e-02, -1.2144e-02,  9.0624e-02,  1.4873e-02, -8.9552e-02,
        -1.2299e-01, -1.7120e-01,  1.4325e-01, -1.3274e-01, -1.0252e-01,
        -3.3755e-02, -1.2111e-02,  5.4649e-03,  7.6924e-02,  1.7952e-01,
        -1.4906e-01, -1.3173e-01,  7.6949e-02, -5.8730e-02, -1.3281e-01,
        -4.2301e-02,  9.8776e-02, -1.7484e-01, -1.0481e-01,  1.3423e-01,
         1.0689e-01, -4.1973e-02, -1.6467e-01,  6.8878e-02, -5.2753e-02,
         1.1182e-01,  2.2885e-02, -7.3759e-02,  2.3746e-03,  4.8707e-03,
        -7.2222e-02, -1.9950e-02,  2.2171e-02,  1.0488e-01,  1.0030e-01,
        -1.0537e-01,  1.8470e-01, -1.8059e-03,  2.8306e-02,  8.4120e-03,
        -1.6362e-01,  1.6236e-02, -3.7492e-03, -1.0233e-01,  1.1711e-01,
        -7.8478e-02,  2.9550e-02, -4.9415e-02, -1.1267e-01, -1.1527e-01,
         1.4956e-03, -1.1792e-01, -6.8085e-03,  1.1557e-02,  3.1447e-02,
        -3.0261e-02,  1.3697e-01, -2.1450e-02,  8.0478e-02,  6.6626e-02,
         1.8874e-02,  8.6458e-02,  1.2624e-01, -8.4412e-02,  1.4065e-01,
         1.9005e-03,  2.1173e-02, -1.6175e-01,  1.0238e-01,  1.2940e-01,
         6.2183e-03,  1.5531e-01, -1.3939e-01, -2.6805e-02, -1.6440e-03,
        -2.0365e-02, -1.4938e-01, -3.6492e-02, -7.1669e-02,  8.3272e-02,
         4.1932e-02,  9.0994e-02, -1.2384e-01,  1.6605e-01,  2.5740e-02,
        -1.0950e-01, -1.3400e-01, -3.1200e-02,  1.2652e-01, -1.5565e-01,
        -1.2499e-01, -2.9243e-02,  1.2290e-01,  1.2719e-01,  8.5448e-03,
        -1.2074e-01, -3.6660e-02,  1.2485e-01,  4.4747e-02, -4.0747e-02,
        -4.1392e-03, -5.3203e-03,  1.3936e-01,  9.5325e-02,  2.5456e-02,
         1.1548e-04, -9.5436e-02, -9.7760e-02, -1.6012e-01,  1.0765e-01,
         1.1420e-03,  4.8667e-02,  4.9110e-02,  9.0020e-02,  5.8513e-02,
        -6.1142e-02,  1.4516e-01,  1.5302e-01, -5.7279e-02, -2.8333e-02,
         1.6919e-01, -8.5226e-02,  7.2316e-02], device='cuda:0')), ('recurrent_blocks.1.bias_hh_l0_reverse', tensor([ 0.0592,  0.1200,  0.0129, -0.1435, -0.0375, -0.1390, -0.0295, -0.1001,
         0.1251,  0.0757, -0.1220,  0.1563, -0.1575,  0.1428, -0.1541,  0.0225,
         0.0979,  0.0217,  0.1754, -0.1227, -0.0156, -0.1334, -0.0570, -0.0763,
         0.1637,  0.1043,  0.0225,  0.0330, -0.0829, -0.1169, -0.0882, -0.0232,
         0.0356,  0.1547, -0.1238,  0.1498,  0.0723,  0.1179, -0.0582, -0.0666,
        -0.1643, -0.1556,  0.1315,  0.1115,  0.0889,  0.0759,  0.0088,  0.0915,
        -0.1799, -0.0518,  0.1124,  0.1842, -0.1354, -0.1763,  0.0378, -0.0022,
        -0.0134, -0.0642, -0.0684,  0.0887,  0.1217,  0.1256,  0.0324, -0.1445,
        -0.0041, -0.0370, -0.1037, -0.0550, -0.0820, -0.1002,  0.0172, -0.0570,
         0.0070,  0.0459, -0.0786,  0.0556, -0.1425,  0.1252, -0.0868,  0.0906,
         0.0766,  0.1315, -0.0811, -0.0425,  0.1239,  0.0033,  0.0565,  0.0835,
         0.1153, -0.1328,  0.1250, -0.1337,  0.1306,  0.1615,  0.0900, -0.0819,
         0.0317,  0.1595, -0.1250, -0.0702,  0.0220, -0.0038, -0.1661,  0.1261,
         0.1756, -0.0627,  0.0308, -0.1515,  0.0854,  0.0681, -0.0943,  0.1619,
         0.1553,  0.0029, -0.0738, -0.1075,  0.1478, -0.1772,  0.0448,  0.1513,
        -0.0070,  0.1639,  0.0364, -0.0134, -0.1030,  0.1484,  0.0397, -0.0454],
       device='cuda:0')), ('recurrent_blocks.2.weight_ih_l0', tensor([[-0.1659,  0.0647, -0.1457,  ..., -0.1585, -0.0664, -0.0117],
        [ 0.1040, -0.0097, -0.0246,  ..., -0.0253,  0.0556,  0.1340],
        [-0.1081, -0.1724, -0.0901,  ...,  0.0153, -0.0066, -0.1154],
        ...,
        [-0.1625, -0.0863, -0.1773,  ...,  0.1177,  0.0957, -0.1703],
        [-0.0256, -0.0703,  0.1562,  ...,  0.1630,  0.0690, -0.1593],
        [ 0.1115,  0.1585, -0.0851,  ...,  0.0124, -0.1521,  0.0287]],
       device='cuda:0')), ('recurrent_blocks.2.weight_hh_l0', tensor([[ 0.1491,  0.0355,  0.0675,  ...,  0.1441,  0.1496, -0.0409],
        [ 0.1408, -0.0639, -0.0363,  ...,  0.0805, -0.1185,  0.0192],
        [ 0.0178,  0.1699, -0.1826,  ..., -0.1479, -0.0267,  0.0392],
        ...,
        [ 0.1206, -0.1016,  0.1780,  ...,  0.1426,  0.1289, -0.0691],
        [ 0.1111,  0.1491, -0.1288,  ...,  0.0211, -0.1844, -0.1620],
        [ 0.1485,  0.1017, -0.0090,  ..., -0.0081, -0.0284, -0.1488]],
       device='cuda:0')), ('recurrent_blocks.2.bias_ih_l0', tensor([ 0.1218,  0.1493, -0.0892,  0.1733,  0.0004,  0.1745,  0.0215,  0.1096,
        -0.1242, -0.0849,  0.0348, -0.0058, -0.1277, -0.1605, -0.0264, -0.0840,
         0.1602, -0.0092,  0.0082, -0.1186, -0.1682,  0.1395, -0.1640,  0.0990,
        -0.0245,  0.0732,  0.0393,  0.0850,  0.0071,  0.0807, -0.0124, -0.1443,
         0.1265,  0.1726,  0.0129,  0.1269, -0.1427,  0.0021,  0.0047, -0.1331,
         0.0436, -0.1455, -0.0224, -0.1273,  0.0779, -0.0152,  0.0100,  0.0547,
        -0.1854,  0.0098, -0.0701, -0.1841, -0.1532,  0.0763,  0.0523,  0.0227,
         0.1649, -0.1618,  0.1324,  0.1417, -0.0665, -0.0094,  0.1553,  0.0736,
         0.0337, -0.0773, -0.0030,  0.0079, -0.1488, -0.0038, -0.1700, -0.0784,
        -0.0455,  0.0495,  0.0431, -0.1471,  0.1445, -0.0590,  0.1029, -0.1086,
         0.0325, -0.0339,  0.1196, -0.1218, -0.1566, -0.0076,  0.0197, -0.1731,
         0.0535,  0.0484, -0.0959,  0.0807,  0.1599,  0.1194, -0.1035, -0.0782,
         0.1230, -0.0149,  0.1337, -0.0281,  0.0099,  0.1565,  0.1056, -0.1201,
         0.0963, -0.0255, -0.0277,  0.0858,  0.1334, -0.1377, -0.0043,  0.1426,
         0.1182, -0.0087, -0.1819,  0.0553, -0.0002, -0.0560, -0.1258,  0.0112,
        -0.1589,  0.0858, -0.0443, -0.0590, -0.1075, -0.1297, -0.1253,  0.0085],
       device='cuda:0')), ('recurrent_blocks.2.bias_hh_l0', tensor([-0.0672,  0.1111, -0.1525, -0.0615, -0.0935, -0.0255, -0.0512, -0.1284,
        -0.0439, -0.1574,  0.0598,  0.1371, -0.1735,  0.0960, -0.0357, -0.1598,
         0.1473,  0.1509, -0.0232,  0.1094, -0.0888,  0.0916,  0.1330,  0.0129,
        -0.0628,  0.1393,  0.0484,  0.1156, -0.0759, -0.0563, -0.1158,  0.0655,
         0.1789, -0.1075,  0.0116, -0.0619,  0.0912,  0.0402, -0.1603,  0.0741,
         0.0015,  0.1126,  0.0351, -0.0726,  0.1727,  0.0099, -0.0084,  0.0332,
         0.0178,  0.0560, -0.1776, -0.0116, -0.0955, -0.1364, -0.0897,  0.1536,
        -0.1592, -0.1228, -0.1778,  0.0648,  0.1671,  0.1069, -0.0919,  0.0325,
        -0.0355,  0.0774,  0.1060, -0.1811, -0.1318,  0.1318,  0.0759,  0.0269,
        -0.0013, -0.0828, -0.1149,  0.1565, -0.0889, -0.0104,  0.1522,  0.1221,
        -0.0180, -0.0553,  0.0216,  0.1021, -0.0747, -0.1153,  0.0966, -0.0803,
         0.0380, -0.0242, -0.0773, -0.1511, -0.1068,  0.0040, -0.1395,  0.0372,
         0.1412, -0.1631,  0.0998, -0.0202,  0.0886,  0.1601, -0.0097, -0.0454,
         0.0419, -0.0387, -0.0673, -0.1596, -0.0706,  0.1659, -0.1089, -0.0686,
        -0.0928,  0.0183, -0.0273,  0.0453, -0.1666,  0.0249,  0.0028, -0.1468,
        -0.1331,  0.1009, -0.1779,  0.1044, -0.0823, -0.0730, -0.1638,  0.0230],
       device='cuda:0')), ('recurrent_blocks.2.weight_ih_l0_reverse', tensor([[-0.1532, -0.0213,  0.1235,  ..., -0.1552, -0.0415,  0.1148],
        [ 0.0349,  0.0997,  0.1273,  ...,  0.0238,  0.0307,  0.1686],
        [ 0.0872, -0.0691, -0.0419,  ..., -0.0736,  0.0743, -0.1363],
        ...,
        [-0.1015, -0.0137,  0.0966,  ..., -0.0274, -0.0127, -0.1673],
        [ 0.0060,  0.0757, -0.1096,  ...,  0.1079, -0.0607,  0.0584],
        [-0.1150, -0.0362, -0.0222,  ..., -0.1100,  0.1267, -0.0163]],
       device='cuda:0')), ('recurrent_blocks.2.weight_hh_l0_reverse', tensor([[ 0.0927, -0.0217,  0.0565,  ..., -0.0122,  0.1369,  0.0721],
        [ 0.1443,  0.0555,  0.1146,  ..., -0.0170,  0.0102, -0.0814],
        [ 0.1363,  0.0955,  0.1650,  ...,  0.1237, -0.0066,  0.1023],
        ...,
        [-0.1336, -0.1703, -0.1262,  ...,  0.1203, -0.0389,  0.0285],
        [-0.0997, -0.1044, -0.0375,  ..., -0.0563,  0.0656, -0.1037],
        [-0.0958, -0.1773,  0.0684,  ..., -0.0738,  0.0252,  0.0099]],
       device='cuda:0')), ('recurrent_blocks.2.bias_ih_l0_reverse', tensor([-0.1338,  0.1153,  0.0302, -0.1293,  0.0923,  0.0458,  0.1181,  0.0368,
         0.1331,  0.0745,  0.0051, -0.0976,  0.1135,  0.0985,  0.1305,  0.1427,
         0.1750, -0.0601,  0.1175, -0.0074,  0.0899,  0.0393, -0.0230, -0.0682,
         0.0441, -0.1612,  0.1490, -0.1007,  0.1393,  0.0137,  0.0177, -0.0910,
         0.1118, -0.1347, -0.0165, -0.0632,  0.1590,  0.1082, -0.1301,  0.0171,
        -0.0498,  0.1651, -0.0157, -0.1296,  0.0002, -0.1647,  0.0504, -0.0094,
         0.0242,  0.1212,  0.0291, -0.1093, -0.0232, -0.0083, -0.1037,  0.1549,
        -0.0623,  0.0507,  0.0502,  0.0209,  0.1083, -0.1742,  0.0205,  0.0219,
         0.0187,  0.1328, -0.0460, -0.0203,  0.0388,  0.1019, -0.1502,  0.1117,
         0.1223,  0.1716, -0.1513, -0.1534,  0.1423, -0.1676, -0.0549, -0.0949,
        -0.0285, -0.1055, -0.0089, -0.1328,  0.0447, -0.1023,  0.1799,  0.1084,
         0.1254,  0.0999, -0.0316,  0.0461, -0.1571, -0.1228, -0.1177, -0.1109,
         0.0790, -0.1193, -0.0870, -0.1407,  0.0337, -0.1821, -0.0396, -0.0345,
         0.0374, -0.0705,  0.1131,  0.0936, -0.0810,  0.0290, -0.1758,  0.1569,
         0.0747,  0.0301, -0.0481, -0.1120,  0.0500,  0.0787,  0.1348,  0.1698,
        -0.1087, -0.0922, -0.1201, -0.0446, -0.1680,  0.0731, -0.0490,  0.0590],
       device='cuda:0')), ('recurrent_blocks.2.bias_hh_l0_reverse', tensor([-0.1480, -0.1195, -0.1389,  0.0102, -0.1321,  0.0376, -0.0865, -0.1609,
        -0.0267, -0.1354, -0.0322, -0.0805,  0.0362,  0.0141, -0.0956,  0.1831,
         0.1126, -0.0110, -0.1051, -0.1110,  0.1163,  0.0280,  0.0911, -0.1303,
        -0.1414,  0.0786,  0.1091,  0.1343, -0.0104,  0.0648,  0.1374,  0.0441,
         0.1729,  0.0319,  0.0150,  0.1336, -0.0019, -0.1278,  0.1675, -0.1723,
         0.0143,  0.0059,  0.0184,  0.1352, -0.0825,  0.1358, -0.0093, -0.0806,
         0.1630,  0.1635, -0.0139,  0.0937,  0.0370, -0.0460,  0.1166,  0.1860,
         0.0854, -0.1606, -0.0924, -0.1358, -0.0287, -0.1676,  0.0878,  0.1055,
         0.1265,  0.0463, -0.1374,  0.0630,  0.0381,  0.0298,  0.1083,  0.0662,
        -0.1512,  0.0501, -0.1503,  0.0068,  0.0220,  0.1118, -0.0382, -0.0958,
        -0.1221, -0.1850,  0.0721,  0.0026, -0.0646,  0.1158,  0.0914,  0.1356,
        -0.1255,  0.0820, -0.0249,  0.0210,  0.1160,  0.1382,  0.0857,  0.1071,
        -0.0410,  0.1533, -0.0646, -0.0290,  0.0627, -0.0245, -0.0236, -0.0563,
         0.0439,  0.0297,  0.1349, -0.1630, -0.1357, -0.1552, -0.0443,  0.1050,
        -0.0644, -0.1645, -0.1127,  0.1131, -0.0213, -0.0567,  0.0716,  0.0013,
         0.0716,  0.0526,  0.1478,  0.1252, -0.0515,  0.1285,  0.0639, -0.1814],
       device='cuda:0')), ('recurrent_blocks.3.weight_ih_l0', tensor([[-0.1457, -0.1312, -0.0509,  ...,  0.0579, -0.0093, -0.0995],
        [-0.0378, -0.0751, -0.0889,  ...,  0.1067, -0.1299, -0.1510],
        [ 0.1361, -0.0349,  0.1861,  ...,  0.1263, -0.1250, -0.0041],
        ...,
        [ 0.1283,  0.1086, -0.1368,  ...,  0.0616,  0.0383,  0.0826],
        [-0.1573,  0.0797, -0.1806,  ...,  0.0189, -0.1434, -0.1626],
        [ 0.1191, -0.0665,  0.1844,  ...,  0.0650,  0.0693, -0.0159]],
       device='cuda:0')), ('recurrent_blocks.3.weight_hh_l0', tensor([[ 0.0887,  0.0510, -0.0410,  ...,  0.0475, -0.1209, -0.1756],
        [ 0.1520, -0.0289,  0.1139,  ...,  0.0247,  0.0488,  0.0320],
        [-0.1243,  0.0805, -0.1492,  ..., -0.1602, -0.1562, -0.0288],
        ...,
        [-0.0634, -0.0145, -0.0795,  ...,  0.1136, -0.1288,  0.1379],
        [-0.1223,  0.0651,  0.1010,  ..., -0.0074, -0.1432, -0.0943],
        [ 0.0122, -0.0812, -0.0598,  ...,  0.1710,  0.1787,  0.0422]],
       device='cuda:0')), ('recurrent_blocks.3.bias_ih_l0', tensor([ 0.1227,  0.0531, -0.0072, -0.0597, -0.0330,  0.0927,  0.1437,  0.0396,
         0.0871,  0.0329, -0.0877,  0.0860,  0.0862, -0.1020, -0.0929, -0.0349,
         0.0225, -0.0490,  0.1342, -0.0654,  0.0835,  0.0758, -0.1475,  0.0408,
         0.1034,  0.1417, -0.1522,  0.1396,  0.1614,  0.0757, -0.0483,  0.0354,
         0.0165,  0.1130,  0.1153, -0.0712, -0.1728, -0.0506,  0.1502, -0.1467,
         0.0876,  0.1520, -0.0545, -0.1543,  0.0800, -0.0324,  0.0282, -0.1648,
        -0.0220, -0.0671, -0.1744,  0.0531,  0.1005, -0.0490, -0.0175,  0.0288,
        -0.0133, -0.1445, -0.1041, -0.0184,  0.1469, -0.1119, -0.1795,  0.0543,
        -0.1715, -0.0553, -0.0653, -0.0755,  0.1363,  0.1585, -0.0187, -0.0822,
        -0.1060, -0.0370,  0.0790,  0.0695, -0.1236,  0.1320,  0.1462, -0.1002,
        -0.1268, -0.1765, -0.0452,  0.1822,  0.1496,  0.0500, -0.0323, -0.1638,
        -0.0345, -0.0478, -0.0478, -0.0662, -0.0174, -0.1368, -0.0980,  0.1658,
         0.0408, -0.1074, -0.1831, -0.0627,  0.1385,  0.1116, -0.0716,  0.1259,
        -0.0855,  0.1479,  0.0370, -0.0067, -0.0748,  0.0564, -0.0633, -0.0401,
        -0.0674,  0.1103,  0.1003,  0.0857, -0.0110, -0.0688, -0.0917,  0.0277,
        -0.0668,  0.1246,  0.1019, -0.0573,  0.0250, -0.0231, -0.0190,  0.1817],
       device='cuda:0')), ('recurrent_blocks.3.bias_hh_l0', tensor([-0.0665,  0.1842,  0.0799, -0.1266,  0.1043,  0.0687,  0.0625,  0.1630,
        -0.0124,  0.0653,  0.0297, -0.0485,  0.1320, -0.1466,  0.0980, -0.1520,
        -0.0071,  0.1760,  0.0841, -0.0549,  0.1256,  0.1075,  0.0608,  0.1071,
         0.0506, -0.1232, -0.0349,  0.1035,  0.1508, -0.1818, -0.0781, -0.1453,
         0.0960,  0.1308,  0.0753, -0.1122, -0.0408,  0.1181,  0.0112,  0.0234,
        -0.0320,  0.0230,  0.1145, -0.0893, -0.1074, -0.1093,  0.1712,  0.1621,
         0.0713, -0.0939,  0.0825, -0.1504, -0.1023,  0.1190, -0.0453,  0.0525,
         0.0512, -0.1205, -0.1144, -0.1381, -0.1319,  0.0727, -0.0469, -0.0663,
         0.0706,  0.1308,  0.0469, -0.1225, -0.1710, -0.0256, -0.1056,  0.1030,
         0.1099,  0.0509,  0.0172, -0.0685, -0.0440,  0.1285, -0.1834, -0.0888,
         0.0308, -0.0541, -0.0027,  0.0430, -0.0203,  0.0298, -0.0641, -0.0288,
         0.0852,  0.0898, -0.1640,  0.1203, -0.1439,  0.0700,  0.1367,  0.0956,
        -0.1413,  0.0198, -0.0466, -0.1495, -0.1476, -0.1075, -0.1639,  0.0255,
         0.0024, -0.0567,  0.0279,  0.0075, -0.0655,  0.0379,  0.1508,  0.0769,
        -0.0557, -0.1392, -0.0617, -0.0136, -0.1404, -0.1574, -0.1642, -0.0161,
        -0.1092, -0.0126, -0.0496, -0.0108, -0.0809, -0.1645, -0.1314, -0.0604],
       device='cuda:0')), ('recurrent_blocks.3.weight_ih_l0_reverse', tensor([[ 0.1064, -0.0043,  0.1116,  ..., -0.0811,  0.0061,  0.0496],
        [-0.0343,  0.1422,  0.1559,  ...,  0.1397,  0.0530,  0.1214],
        [ 0.1583, -0.0823, -0.0642,  ..., -0.0655,  0.1276, -0.0800],
        ...,
        [-0.1347,  0.0118, -0.0341,  ...,  0.0766, -0.0596, -0.0102],
        [ 0.0919,  0.0312,  0.0823,  ...,  0.1606, -0.0160,  0.1611],
        [-0.0726, -0.1479,  0.0366,  ..., -0.0282, -0.1470,  0.0875]],
       device='cuda:0')), ('recurrent_blocks.3.weight_hh_l0_reverse', tensor([[ 0.0575, -0.0313,  0.0039,  ..., -0.1124, -0.1401,  0.0459],
        [ 0.0275,  0.0867, -0.1251,  ...,  0.0831, -0.0092, -0.1130],
        [-0.0593, -0.0949,  0.0068,  ...,  0.0041,  0.1109, -0.0385],
        ...,
        [ 0.0635, -0.0108,  0.1551,  ...,  0.0689,  0.1012, -0.0701],
        [ 0.0170, -0.1808, -0.0417,  ..., -0.1540, -0.0314,  0.1220],
        [-0.1814, -0.0465, -0.1649,  ...,  0.1081,  0.0926, -0.0994]],
       device='cuda:0')), ('recurrent_blocks.3.bias_ih_l0_reverse', tensor([-0.0501,  0.1738,  0.1451, -0.1227, -0.0683,  0.1087,  0.0107, -0.1852,
         0.1079,  0.1177,  0.0324,  0.0405,  0.1269, -0.0121,  0.1605,  0.0867,
         0.0644, -0.1628,  0.0898, -0.1589,  0.1435, -0.1482,  0.0872, -0.0123,
         0.0211,  0.1167, -0.0124, -0.0140, -0.0007,  0.0299, -0.0172, -0.1419,
        -0.0679, -0.1565,  0.1175,  0.0618, -0.1155, -0.0134, -0.0317,  0.1435,
        -0.1124, -0.0525,  0.1408, -0.1505,  0.0109,  0.0773, -0.0823,  0.1063,
         0.1066, -0.0582, -0.1216,  0.1270,  0.0995,  0.1144, -0.0726,  0.0419,
         0.0760, -0.0975,  0.0509,  0.1243,  0.0351,  0.1845,  0.0260,  0.0963,
         0.0544, -0.0670, -0.1436,  0.0818,  0.1338, -0.0921,  0.0269,  0.1468,
        -0.0052, -0.1125,  0.0753,  0.1202, -0.0280,  0.0671,  0.0100,  0.0520,
        -0.0531, -0.0013,  0.1377, -0.1822,  0.1829,  0.1072,  0.0118, -0.1303,
         0.1209,  0.0464, -0.1572, -0.1569, -0.1181,  0.1278,  0.0925,  0.0913,
        -0.1102,  0.0624,  0.0981, -0.1105,  0.0225,  0.0007, -0.1647,  0.0220,
         0.1136,  0.0419, -0.0171,  0.1658, -0.0545, -0.0216, -0.0754, -0.1007,
        -0.0863,  0.1390, -0.0223,  0.1388,  0.0048,  0.1509, -0.0425, -0.0279,
        -0.0195, -0.1227, -0.0290,  0.0676, -0.0577, -0.0767,  0.0535,  0.1709],
       device='cuda:0')), ('recurrent_blocks.3.bias_hh_l0_reverse', tensor([ 0.1066, -0.0216,  0.1381, -0.0216, -0.0583, -0.0682, -0.0081,  0.0646,
        -0.0155, -0.1604,  0.1027, -0.1380, -0.1269, -0.0804, -0.1184,  0.0007,
        -0.1596,  0.0961,  0.0953,  0.0020, -0.1094, -0.0121,  0.0896, -0.0675,
        -0.1244,  0.0446, -0.1428,  0.0437,  0.0798,  0.0794, -0.0341,  0.0682,
        -0.0620,  0.0691, -0.1603,  0.0561,  0.1198,  0.1772,  0.0684, -0.1289,
         0.0173, -0.0512,  0.1643, -0.1637, -0.0172, -0.0179,  0.1776, -0.1574,
         0.0843, -0.0554, -0.0775, -0.1612,  0.1028, -0.0384, -0.1499,  0.1596,
        -0.0767, -0.1299,  0.1125,  0.0602,  0.1151,  0.0434, -0.1049,  0.1825,
         0.0089, -0.1313, -0.1465,  0.0937, -0.0094,  0.0484, -0.1302,  0.0485,
         0.0822, -0.1099,  0.0993,  0.1860,  0.1471,  0.0987,  0.0246,  0.0749,
         0.0694, -0.1485, -0.1368,  0.0152, -0.0869, -0.1409, -0.0068, -0.0296,
         0.1521, -0.0878, -0.1127, -0.0239, -0.0298,  0.0212, -0.0606, -0.0223,
         0.0306,  0.0494, -0.0150,  0.0810,  0.1163,  0.1837,  0.0785,  0.0747,
         0.0565, -0.1042,  0.0889,  0.0990, -0.1633, -0.1073,  0.1309,  0.1138,
         0.0452,  0.0260,  0.0177, -0.0659,  0.0339,  0.1165, -0.0392,  0.0411,
         0.1639,  0.0995,  0.0920, -0.0547,  0.1611,  0.0929,  0.1624, -0.1482],
       device='cuda:0')), ('fc_blocks.0.0.weight', tensor([[-0.0144, -0.0278, -0.0430,  ..., -0.0433, -0.0526, -0.1019],
        [ 0.1068, -0.0862,  0.1073,  ...,  0.1220, -0.0251, -0.0117],
        [ 0.0328, -0.1334,  0.0298,  ..., -0.1070, -0.0208,  0.0126],
        ...,
        [ 0.0198,  0.0745,  0.0930,  ...,  0.0174,  0.1344, -0.0859],
        [-0.0704, -0.1009,  0.1320,  ..., -0.1109,  0.0110,  0.0539],
        [ 0.1201, -0.0510,  0.0989,  ...,  0.1053, -0.1082,  0.0867]],
       device='cuda:0')), ('fc_blocks.0.0.bias', tensor([ 0.0926, -0.0052, -0.0405,  0.0911,  0.0373, -0.1010, -0.0588,  0.1091,
        -0.0615, -0.0853,  0.0870, -0.0118,  0.0227, -0.1047, -0.0678, -0.1227,
         0.1057,  0.0245,  0.0554, -0.0688,  0.1216,  0.0588, -0.0467,  0.1044,
         0.0305,  0.0525, -0.1127, -0.0459, -0.0794, -0.1082,  0.0090,  0.0765],
       device='cuda:0')), ('fc_blocks.1.0.weight', tensor([[ 7.4940e-02, -1.1973e-02, -7.2658e-02, -8.9293e-02, -7.1128e-02,
          1.2138e-01, -9.4025e-02,  7.6471e-02, -1.2518e-01,  6.9203e-02,
         -9.8314e-02, -1.7145e-01,  5.8122e-02, -1.7704e-02,  1.6705e-01,
          1.0831e-01,  5.6659e-02,  1.4369e-01,  9.6620e-02, -6.7750e-03,
          9.7001e-02, -1.4462e-01, -5.3854e-02,  1.7315e-01, -2.9985e-02,
          1.8479e-01, -1.2279e-01, -1.0121e-01,  6.2364e-02, -1.0256e-01,
         -6.6441e-02, -9.4433e-02],
        [ 3.0687e-02, -2.1953e-02,  2.4800e-02, -1.5646e-01, -9.4429e-02,
          9.4711e-02,  3.6784e-02, -1.8462e-02,  2.9998e-03,  5.6712e-02,
          6.6291e-02,  1.1871e-01,  3.6185e-02,  1.7030e-01,  5.5513e-02,
         -1.1101e-01, -5.1120e-02, -1.3036e-01,  1.8987e-02,  1.1659e-01,
         -1.3272e-01,  4.1938e-02, -8.8358e-02, -1.7304e-02,  7.7810e-02,
          7.1749e-02, -3.5899e-02,  1.0299e-01,  3.8359e-02,  1.2490e-01,
         -4.4046e-03, -1.8606e-01],
        [ 5.1774e-02,  1.4663e-01, -1.7501e-01, -1.3503e-01,  8.0959e-02,
          8.4006e-02,  8.5815e-02,  2.9361e-02, -1.2037e-01,  1.5604e-01,
         -1.5629e-01,  1.6161e-01,  7.8833e-02,  1.7920e-01,  7.6415e-02,
          6.3224e-03, -1.5712e-01, -1.4085e-02, -1.6373e-01,  1.1811e-01,
          2.0363e-02,  9.5296e-02,  7.0319e-02, -1.0353e-01,  1.6460e-01,
          1.7927e-01, -5.9118e-02, -1.0777e-01, -6.8412e-02,  1.1294e-01,
         -1.4856e-01, -4.2697e-02],
        [-1.5918e-01, -1.0058e-01, -1.4685e-01, -1.1180e-01,  2.1671e-02,
         -1.1257e-02,  1.1718e-01, -1.5432e-01,  1.2549e-01, -1.1313e-01,
         -4.0676e-02,  4.9296e-02, -1.5102e-01, -2.9358e-02, -1.4727e-01,
          1.2828e-01,  1.6467e-01,  1.6784e-01,  5.4342e-02, -5.9660e-02,
          5.6267e-02,  8.8431e-02,  8.7006e-02, -5.1118e-02,  2.5331e-02,
         -3.6765e-02,  9.8510e-02,  1.6493e-01,  7.2023e-02, -1.0579e-01,
         -1.7672e-01,  1.2791e-01],
        [ 1.5593e-01,  1.2766e-01, -7.6674e-02, -1.3406e-02,  1.2187e-01,
         -7.0427e-02,  3.8867e-02,  2.5323e-02, -2.7849e-02, -1.1095e-01,
          9.4998e-02, -4.8447e-02, -1.6661e-01,  4.3260e-02,  1.6184e-01,
          4.9764e-02,  1.5126e-01, -7.5803e-02,  1.2044e-01,  1.1370e-01,
          1.6238e-01,  1.5547e-01,  4.7893e-02,  1.5931e-01, -7.3928e-02,
         -7.0262e-02,  7.3229e-02,  1.1706e-01,  1.5230e-01, -4.1609e-02,
          9.1086e-02, -2.5990e-02],
        [-2.4530e-02, -6.0902e-02, -2.2079e-02,  1.4355e-01,  1.1983e-01,
          8.2580e-02,  9.3273e-02, -1.4420e-01,  1.5473e-01, -6.4088e-02,
          8.2657e-02,  8.9586e-02,  1.4205e-01, -1.4012e-01, -1.1312e-01,
         -8.5925e-02,  1.2598e-01, -1.4289e-01,  1.5763e-02,  5.8797e-02,
          1.5471e-01,  1.7476e-01,  2.4847e-04, -6.8974e-02, -5.9147e-02,
         -1.2431e-01, -1.1102e-01,  1.0569e-01, -1.2235e-01, -5.5816e-02,
         -3.5596e-02,  1.1582e-02],
        [ 6.8064e-02, -4.4529e-02,  4.7083e-02,  3.3968e-02,  8.6364e-02,
          6.5770e-02,  1.1166e-01,  1.1976e-01,  4.6148e-02, -1.2007e-01,
          4.8848e-02, -5.4131e-02, -6.4089e-02, -4.3278e-02,  5.7613e-03,
         -8.3387e-02,  1.0211e-01,  3.1680e-02, -8.9572e-02,  1.5583e-01,
         -1.5600e-01, -8.7281e-02,  1.6042e-01,  3.7122e-02,  6.7428e-03,
         -9.8703e-02, -1.5761e-01,  3.2680e-02,  1.9240e-02,  1.3718e-01,
          6.9629e-02,  1.4617e-01],
        [ 1.5340e-01, -1.3787e-01,  6.6466e-02, -5.7942e-02,  6.4325e-02,
          1.1291e-01,  3.8351e-02,  1.0064e-01, -3.8170e-02,  6.1734e-02,
         -1.7551e-01,  1.2557e-01, -1.6370e-01,  1.2449e-01,  3.1260e-02,
         -1.5264e-01, -1.3945e-01, -1.5031e-01, -1.6810e-01,  6.4765e-02,
          4.5981e-03,  8.8263e-02, -4.8940e-02,  3.9149e-02, -4.2901e-02,
         -6.8333e-02,  3.7684e-02,  5.5495e-02, -5.2888e-02, -2.8540e-02,
         -1.2913e-01,  4.2662e-02],
        [-1.3928e-01, -2.1356e-02,  8.6923e-02, -6.6128e-02,  9.9783e-02,
          5.6248e-02,  1.2733e-01,  1.2563e-01, -8.7524e-03,  1.3513e-01,
         -4.2385e-03, -9.9619e-02, -1.2964e-01,  8.1445e-02, -8.2085e-02,
         -8.8018e-02,  1.6457e-01, -1.4195e-01, -8.3116e-03, -1.6336e-01,
         -5.0634e-02,  7.2838e-02,  1.6115e-01, -1.4515e-01, -1.7679e-01,
          7.0622e-02, -1.3597e-01,  1.5302e-01, -6.7226e-02, -1.4212e-01,
         -1.6803e-02, -9.9069e-02],
        [ 1.7260e-01,  1.3209e-01, -9.2758e-02,  3.1181e-03, -1.5189e-01,
          1.5613e-02, -1.0970e-01,  6.8216e-02, -1.0105e-01, -6.1497e-02,
          1.7762e-01,  4.4211e-03,  1.4063e-01,  1.5226e-01,  3.3042e-02,
         -8.7723e-02, -1.2205e-01,  1.6837e-01, -6.5664e-03,  1.5586e-01,
          1.7127e-01, -5.8744e-02,  7.8797e-02,  1.7692e-01,  6.7398e-02,
          1.8539e-01,  2.9006e-02, -1.6261e-01,  6.8567e-02,  1.7026e-03,
         -1.0692e-01, -7.0690e-03],
        [-1.1255e-01,  1.7997e-01, -4.0037e-02, -4.6015e-03, -5.4342e-02,
         -2.6358e-02, -5.8870e-02,  1.7616e-01,  1.6328e-01, -1.1137e-01,
          1.2592e-01, -3.9411e-02, -1.4026e-01,  5.4330e-02, -1.3532e-01,
         -7.7987e-02, -1.6182e-02, -1.2097e-01,  1.2803e-01,  3.0770e-02,
          1.5219e-01,  6.8816e-03, -1.0138e-01,  3.8982e-02, -3.1637e-02,
          1.3144e-01, -1.7814e-01,  5.1443e-02, -1.0797e-01, -7.4428e-02,
          1.3960e-01, -1.1257e-01],
        [-4.3627e-05, -1.1944e-01,  1.5689e-01,  1.4093e-01,  1.1055e-01,
         -2.8139e-02, -1.6362e-01,  7.7058e-02, -4.9827e-02,  7.9967e-02,
         -5.9137e-02, -5.7098e-02, -6.4143e-02,  5.5867e-02, -6.3084e-02,
         -1.3109e-02, -2.3244e-02,  7.2362e-02, -6.4390e-02, -9.1219e-03,
         -4.1279e-03,  4.2469e-02,  1.5433e-01, -5.2959e-02,  1.4254e-01,
          7.0447e-02,  1.5021e-01, -1.1953e-01,  1.7479e-01, -7.8671e-02,
         -1.1130e-01, -5.4310e-02],
        [ 1.2590e-01,  1.4517e-01, -1.8178e-01, -6.9585e-02, -9.5540e-02,
         -1.5803e-01,  1.2190e-01, -7.0501e-02,  1.7645e-01,  1.0502e-01,
          1.5339e-01,  4.5168e-02, -9.8560e-02,  8.9866e-02,  1.5688e-01,
         -5.0805e-02, -1.5071e-01,  7.8206e-02, -7.6028e-02,  8.9824e-02,
          1.4522e-01,  1.8083e-01, -8.6401e-02, -6.8717e-02, -1.3892e-01,
         -7.0291e-03, -8.7266e-02,  7.4986e-02, -3.2483e-02,  2.3828e-02,
         -6.0871e-02,  1.2302e-03],
        [-9.7393e-02,  1.5243e-01,  5.6355e-03,  1.1075e-01, -1.5373e-01,
          2.6731e-03,  1.2724e-01, -7.0928e-02, -2.3538e-02,  9.9733e-02,
         -1.6193e-01,  2.6109e-02, -8.7287e-02,  6.8418e-02,  7.1662e-03,
          1.5719e-02,  1.6589e-01, -5.1137e-02,  3.9743e-02, -7.3028e-02,
          5.5085e-02, -1.2640e-01,  1.2655e-01, -8.2416e-02, -6.5576e-02,
         -1.3797e-02,  8.1945e-02, -1.5515e-02,  1.1265e-01, -5.0447e-02,
          4.8024e-02,  1.5852e-01],
        [ 1.6428e-01,  9.3044e-02, -1.4467e-01,  1.0173e-03,  2.5807e-02,
          5.2380e-02, -2.2707e-02, -5.3340e-02, -8.4950e-02, -1.4050e-03,
          1.0764e-01,  1.3446e-02, -8.5746e-02,  1.2843e-01, -1.3290e-01,
          4.8204e-02,  3.1571e-02,  3.9084e-02,  1.3399e-01, -1.4896e-01,
          8.8399e-02, -7.9459e-02, -1.6554e-02,  1.1040e-01,  1.0551e-02,
         -8.7316e-02,  5.7646e-02,  9.9461e-02, -2.0160e-02,  1.2171e-01,
         -6.2430e-02, -6.4107e-02],
        [-3.0641e-02,  7.1417e-04,  7.3510e-02, -1.2069e-01,  3.8405e-02,
          1.4121e-01,  3.7901e-02,  6.4816e-02, -8.3175e-02,  1.5587e-01,
         -1.3513e-01, -1.6484e-01, -1.4909e-01,  5.3113e-02,  1.5440e-02,
          1.6670e-01, -1.0054e-01, -1.5554e-01,  1.6347e-01,  1.1811e-01,
          5.0630e-02, -1.5808e-02,  9.9572e-03,  9.3357e-04, -6.0468e-02,
          9.9218e-02,  1.1566e-01, -1.0953e-01, -7.5823e-02,  7.8773e-02,
          1.0794e-01,  1.1220e-01]], device='cuda:0')), ('fc_blocks.1.0.bias', tensor([-0.0137,  0.0869, -0.1158,  0.1481, -0.0489, -0.0933,  0.1525,  0.1343,
        -0.0887,  0.0768,  0.1797, -0.0140, -0.0316,  0.0283, -0.1303,  0.0990],
       device='cuda:0')), ('fc_blocks.2.0.weight', tensor([[ 0.2574,  0.0179, -0.0907, -0.0894, -0.0990,  0.1481, -0.1861, -0.1956,
         -0.2336,  0.1295, -0.0823,  0.2109,  0.0746,  0.2110,  0.0437,  0.1622],
        [ 0.1356,  0.0507,  0.1823,  0.0845,  0.2257, -0.0905, -0.0648,  0.1691,
          0.1056,  0.0145, -0.1264, -0.1996,  0.1239, -0.0205,  0.0759,  0.2308],
        [ 0.2449, -0.2150,  0.0662, -0.0953, -0.1432,  0.0786, -0.2194,  0.1898,
          0.0379,  0.1373, -0.0808,  0.1402,  0.1116, -0.2110,  0.2324,  0.0170],
        [-0.0048, -0.1170,  0.0802,  0.0070,  0.0909,  0.0272,  0.0146, -0.2208,
         -0.0940, -0.0027, -0.0132,  0.2407,  0.2238, -0.1933, -0.1154,  0.2206],
        [ 0.0923,  0.0850,  0.0838,  0.2232, -0.1544, -0.2569, -0.0754,  0.0577,
         -0.1998,  0.0426,  0.1876,  0.0268, -0.1792,  0.0050,  0.1209,  0.2242],
        [-0.0689, -0.2314, -0.2481,  0.2581, -0.2314, -0.0051,  0.1808, -0.0546,
          0.2353,  0.1049,  0.2004, -0.0266,  0.2267, -0.1672, -0.0802,  0.0261],
        [-0.0205,  0.0728, -0.1623,  0.2225,  0.1904,  0.0096, -0.1743,  0.1337,
          0.1930, -0.2000,  0.0403, -0.2034,  0.0545, -0.1467, -0.1966, -0.0409],
        [-0.1970, -0.0962, -0.0738, -0.2575, -0.2146,  0.0647,  0.2149,  0.0581,
          0.1896, -0.2356,  0.1900,  0.0120,  0.0702,  0.0860,  0.1021,  0.0669]],
       device='cuda:0')), ('fc_blocks.2.0.bias', tensor([-0.1767, -0.1574, -0.1592, -0.0238, -0.2028,  0.1259, -0.1790, -0.2100],
       device='cuda:0')), ('fc_blocks.3.0.weight', tensor([[-0.0167, -0.1600,  0.1388,  0.0894,  0.2627,  0.2513,  0.2435, -0.1657],
        [ 0.2592,  0.0835, -0.0255,  0.3031,  0.2045,  0.0543, -0.0230,  0.3199],
        [-0.0368,  0.3441, -0.2347,  0.0606, -0.1157, -0.0167,  0.1876,  0.1435],
        [-0.0629, -0.0747,  0.3162,  0.1533,  0.0454, -0.1010,  0.0088,  0.0679]],
       device='cuda:0')), ('fc_blocks.3.0.bias', tensor([-0.2079,  0.0009,  0.1947, -0.1646], device='cuda:0')), ('fc_blocks.4.0.weight', tensor([[-0.1992,  0.1181,  0.1705,  0.4343],
        [-0.0421, -0.0080, -0.3514,  0.0762]], device='cuda:0')), ('fc_blocks.4.0.bias', tensor([-0.2585, -0.4295], device='cuda:0'))])
