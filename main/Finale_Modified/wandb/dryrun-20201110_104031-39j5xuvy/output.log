==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 29.86it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 29.78it/s]
===============================Dataset shape===============================
Mixed : (6426,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 74.93it/s]
===============================Dataset shape===============================
Mixed : (1029,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 674, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 674, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 674, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 675, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 691, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 732, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 732, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 733, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 691, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 691, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 691, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 670, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 670, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 670, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 671, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 665, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 665, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 666, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 688, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 688, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 689, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 664, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 664, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 665, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 712, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 712, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 712, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 703, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 703, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 703, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 663, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 663, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 663, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 664, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 657, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 657, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 657, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 658, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 604, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 604, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 604, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 605, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 681, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 681, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 682, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 704, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 704, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 704, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 707, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 707, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 722, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 722, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 715, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 715, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 716, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 655, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 655, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 655, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 656, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 651, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 651, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 651, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 652, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 680, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 680, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 680, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 681, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 644, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 644, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 644, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 645, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 788, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 788, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 698, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 700, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 700, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 701, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 675, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 675, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 675, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 676, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 699, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 699, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 700, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 728, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 728, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 752, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 642, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 642, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 642, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 643, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 697, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 697, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 697, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 718, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 718, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 718, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 721, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 721, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 721, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 722, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 673, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 673, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 673, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 674, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
[BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
), BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)]
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - flag #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/50].........Traceback (most recent call last):
  File "train_ball_trajectory_depth.py", line 342, in <module>
    cam_params_dict=cam_params_dict, visualization_path=args.visualization_path)
  File "train_ball_trajectory_depth.py", line 120, in train
    train_loss_dict, train_loss = utils_model.calculate_loss(recon_list_train, gt_dict=gt_train_dict, cam_params_dict=cam_params_dict, pred_list=pred_list_train) # Calculate the loss
NameError: name 'recon_list_train' is not defined
