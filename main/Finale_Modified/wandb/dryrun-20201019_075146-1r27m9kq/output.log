==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.18it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.69it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.27it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 771, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 771, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 771, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 821, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 821, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 726, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 726, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 726, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 772, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 772, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 772, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 719, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 719, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 719, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 720, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 782, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 782, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 759, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 759, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 714, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 714, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 894, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 856, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 739, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 739, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 740, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 798, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 798, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 799, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 707, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 707, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 707, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 708, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 660, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 660, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 660, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 661, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 693, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 693, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 734, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 734, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 734, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 759, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 759, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 726, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 726, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 726, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 779, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 787, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 787, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 695, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 695, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 695, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 696, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 778, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 778, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 778, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........IDX = 0 :  tensor([[[ 0.0347, -0.2214,  0.4523,  ..., -0.0981,  0.1080, -0.3540],
         [-0.6972, -0.5232, -0.2440,  ...,  0.5184,  1.0137,  1.0374],
         [ 0.3672, -2.1909, -0.8404,  ..., -0.7631, -0.4568,  0.1054],
         ...,
         [-1.1202,  0.2287,  0.5972,  ..., -0.9832,  2.8249,  0.5132],
         [-1.4606,  0.6327, -1.6626,  ..., -0.3952,  0.0643,  1.7464],
         [ 0.1689, -0.3977, -0.7702,  ...,  0.0787,  1.7064,  0.0822]],

        [[ 0.0350, -0.7490,  1.0244,  ..., -0.3623, -0.4842, -0.8207],
         [ 0.9765,  0.7481,  1.3215,  ..., -0.2248,  1.2582, -0.9690],
         [ 0.5009, -0.2547, -0.8081,  ...,  1.4759, -0.5004, -0.0210],
         ...,
         [ 0.0294,  0.3316,  0.0882,  ..., -0.8955,  1.0074, -0.6040],
         [-1.0176, -0.4929, -0.2238,  ..., -0.4971,  1.9755, -0.4980],
         [-0.1424,  0.7684, -1.0360,  ..., -1.1732, -0.8799, -1.2023]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.5155,  2.2910,  0.3438,  ..., -0.7300, -0.5025,  0.5840],
         [-1.0096, -0.0436,  0.3888,  ...,  0.0792, -0.7630,  1.0689],
         [ 0.2378, -0.3145,  0.5785,  ...,  0.7311,  0.1621, -0.6471],
         ...,
         [-0.6879,  0.3874, -0.8848,  ..., -1.1665, -1.2768,  1.8542],
         [-0.7127, -0.8828, -0.0761,  ..., -0.4384, -1.4581,  0.2879],
         [ 1.0322, -0.7043, -1.1503,  ..., -0.2238, -0.2879, -1.6330]],

        [[-0.0528, -0.8381,  0.6007,  ...,  0.2734,  0.9900,  0.1806],
         [-1.8857,  1.6545,  0.1411,  ..., -0.3108, -0.9895,  0.1140],
         [-0.4563,  1.5600,  0.2751,  ...,  0.1788, -0.5672,  0.7037],
         ...,
         [-1.4075, -1.6708,  0.1564,  ...,  1.1520, -0.8768,  0.2999],
         [-0.5577,  0.2691,  0.7403,  ..., -0.3545,  2.8093, -0.0288],
         [ 0.7994, -0.4501, -0.1747,  ...,  0.8878,  0.3854, -1.0106]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[-5.0804e-01,  2.2823e+00,  3.3420e-01,  ..., -7.3926e-01,
           -4.9306e-01,  5.9341e-01],
          [-1.0005e+00, -3.5120e-02,  3.8226e-01,  ...,  7.0635e-02,
           -7.5399e-01,  1.0644e+00],
          [ 2.4370e-01, -3.2231e-01,  5.7045e-01,  ...,  7.2377e-01,
            1.6864e-01, -6.4549e-01],
          ...,
          [-6.9620e-01,  3.7857e-01, -8.9289e-01,  ..., -1.1581e+00,
           -1.2816e+00,  1.8623e+00],
          [-7.1820e-01, -8.7356e-01, -8.5174e-02,  ..., -4.2884e-01,
           -1.4654e+00,  2.9709e-01],
          [ 1.0232e+00, -7.1370e-01, -1.1449e+00,  ..., -2.3249e-01,
           -2.7857e-01, -1.6416e+00]],

         [[-6.1330e-02, -8.2868e-01,  5.9161e-01,  ...,  2.8272e-01,
            9.9953e-01,  1.7113e-01],
          [-1.8773e+00,  1.6633e+00,  1.4596e-01,  ..., -3.0212e-01,
           -9.9724e-01,  1.0905e-01],
          [-4.5901e-01,  1.5671e+00,  2.7800e-01,  ...,  1.8690e-01,
           -5.6085e-01,  6.9620e-01],
          ...,
          [-1.4029e+00, -1.6617e+00,  1.6263e-01,  ...,  1.1607e+00,
           -8.6772e-01,  2.9075e-01],
          [-5.6612e-01,  2.7860e-01,  7.4980e-01,  ..., -3.4574e-01,
            2.8013e+00, -3.8360e-02],
          [ 8.0643e-01, -4.4074e-01, -1.6550e-01,  ...,  8.9668e-01,
            3.7666e-01, -1.0196e+00]]],


        [[[ 1.0404e+00, -1.2333e+00, -2.9954e-01,  ..., -5.1797e-01,
            1.7263e+00, -4.5708e-01],
          [-1.9271e+00,  1.1477e+00, -2.7569e-01,  ...,  1.9988e+00,
            1.8659e+00,  2.0660e+00],
          [-6.1308e-02,  1.8159e+00, -1.3563e-02,  ..., -1.0240e+00,
            2.8545e-01, -9.3013e-01],
          ...,
          [-3.1590e-01, -3.3297e-02, -1.4072e-01,  ..., -3.0228e-02,
           -6.8014e-01, -1.1610e-01],
          [-1.5047e+00,  1.8618e+00,  2.0098e+00,  ..., -1.3874e-01,
           -6.0619e-01, -1.0610e+00],
          [ 7.7889e-02, -1.4734e+00, -6.9192e-01,  ..., -2.7396e-01,
           -6.7522e-01,  2.7982e-01]],

         [[ 1.2756e+00, -5.3477e-01, -4.4179e-01,  ...,  6.7403e-02,
           -4.1272e-01,  3.2441e-01],
          [-6.8193e-02,  5.6100e-01, -1.2461e+00,  ...,  1.9363e+00,
           -7.5823e-01,  5.5559e-01],
          [-3.2348e-01,  1.1439e-01,  4.2452e-02,  ...,  8.9702e-01,
           -1.0695e-01,  9.5432e-01],
          ...,
          [-1.0917e+00, -8.7168e-01, -6.2050e-01,  ...,  1.6779e-01,
            1.4136e+00, -1.5053e+00],
          [-4.4299e-01, -3.5829e-02, -7.3024e-01,  ...,  6.7909e-01,
            6.5384e-01,  9.6574e-01],
          [ 4.2703e-01, -3.2117e-01,  6.2175e-02,  ..., -1.5656e-01,
           -7.1157e-01,  9.4121e-01]]],


        [[[-9.0134e-01, -5.5016e-01,  7.7780e-01,  ...,  3.3848e-01,
           -1.8878e+00, -9.6127e-01],
          [-1.7488e+00, -8.3824e-01, -2.6919e-01,  ...,  9.6389e-01,
           -4.7365e-01,  1.2782e+00],
          [-1.1492e+00, -6.5455e-01,  1.5958e-01,  ..., -1.2248e+00,
           -1.8410e-01,  1.2276e+00],
          ...,
          [ 3.4067e-01, -7.1197e-01, -1.5823e+00,  ...,  7.5256e-02,
            1.3017e+00, -4.2818e-01],
          [ 1.2359e-01,  4.7672e-01,  4.7420e-01,  ...,  1.1729e+00,
           -2.1534e-01, -3.0535e-01],
          [-1.7007e-01,  1.1411e+00, -3.1071e-01,  ..., -1.6856e+00,
            6.7545e-01, -3.9705e-02]],

         [[ 2.5567e+00, -2.5485e-01,  3.1809e-01,  ..., -3.8663e-01,
            2.4585e+00,  6.7746e-01],
          [-3.8566e-01,  2.6592e-01, -3.7843e-01,  ...,  6.2095e-01,
           -1.7548e+00,  2.6050e+00],
          [-1.8987e+00,  4.7537e-01,  2.1003e+00,  ..., -3.7753e-01,
            1.3217e+00,  6.8546e-01],
          ...,
          [-3.5887e-01,  5.2238e-02, -8.8822e-01,  ..., -1.5373e+00,
           -4.6827e-01,  1.1077e+00],
          [-7.2394e-01,  2.6041e-04,  7.5702e-01,  ..., -2.2545e+00,
           -7.2215e-01,  2.5057e-01],
          [ 8.3138e-01, -4.0428e-01, -1.6073e-01,  ..., -1.8865e-01,
           -1.3224e-02, -3.5684e-01]]],


        [[[ 2.5719e-01,  3.1957e-01, -7.3401e-01,  ...,  1.4053e-01,
            1.5136e-02,  1.7931e-01],
          [-4.5562e-01,  1.6493e+00,  4.7078e-01,  ...,  8.2686e-01,
           -1.7589e-01,  6.5896e-01],
          [-4.9583e-01,  5.3673e-01, -5.4482e-01,  ...,  2.4732e+00,
            5.7480e-01,  3.2854e-01],
          ...,
          [-8.9214e-01,  1.2378e+00, -2.9779e-01,  ...,  5.4606e-01,
           -3.7755e-01,  6.5364e-01],
          [ 1.8327e-01,  7.8377e-01,  9.7013e-01,  ...,  7.4329e-01,
            9.5202e-01,  2.8417e-01],
          [-4.2164e-01, -6.5991e-01,  3.4845e-01,  ...,  1.0998e+00,
            3.3741e-02, -1.0988e+00]],

         [[-6.4815e-01, -6.9364e-01, -8.5349e-01,  ...,  2.7531e-01,
            4.6046e-01,  1.5210e+00],
          [ 6.9685e-01, -2.5137e-01,  8.5291e-01,  ...,  8.9760e-01,
            6.8577e-01, -5.2375e-01],
          [ 1.4158e+00,  6.5694e-01, -2.7498e-01,  ..., -3.5880e-02,
           -8.9838e-01, -1.0922e+00],
          ...,
          [ 3.6082e-01,  9.2816e-03,  1.0769e+00,  ...,  6.0555e-01,
            1.6248e+00, -5.7546e-01],
          [ 8.4676e-01, -6.7669e-01,  1.0969e+00,  ...,  1.3928e+00,
           -2.4782e+00, -8.1276e-01],
          [-9.9248e-01, -1.0192e+00, -2.6460e-02,  ...,  1.8834e+00,
            6.7767e-02,  7.8852e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 0.6068, -1.8997,  1.2540,  ...,  0.6474, -0.4969, -1.5078],
          [-1.5404, -0.3931,  0.4166,  ..., -0.2995, -0.6358,  0.6502],
          [ 0.0539, -0.3235,  0.5488,  ..., -0.8338,  0.4365,  0.8833],
          ...,
          [ 0.7918, -0.5609,  1.5165,  ...,  0.5279, -1.1608,  1.2200],
          [-0.8070, -1.3097,  1.9046,  ...,  1.0137, -1.5104, -0.7907],
          [-0.3858, -0.4999,  0.7516,  ...,  2.8262, -1.2978, -1.1232]],

         [[ 0.5593, -0.0158, -0.8191,  ..., -0.1722,  0.1512, -0.3765],
          [ 0.6435, -1.9196,  0.9541,  ...,  1.4636,  0.3407,  0.8657],
          [ 1.1194,  0.6973, -0.5551,  ...,  0.9363,  2.1687,  1.2182],
          ...,
          [-0.5945,  1.6502,  0.2339,  ..., -0.0113, -1.4590, -0.4590],
          [-0.6372, -0.2228, -0.1971,  ...,  0.9770,  0.3169,  2.8926],
          [-0.1945,  0.4871,  0.9316,  ..., -0.5427, -0.2251,  1.1216]]],


        [[[ 0.4930,  1.4328,  0.0721,  ...,  1.0958, -0.2207, -0.7150],
          [ 0.3322, -0.8588,  0.3737,  ...,  2.1724,  1.0851,  0.0943],
          [ 1.1169, -0.3228, -0.9129,  ...,  1.4957,  0.4311,  0.2862],
          ...,
          [ 0.1158, -0.5137,  0.8091,  ...,  0.3612, -0.2324, -1.3038],
          [ 1.2267, -0.3628,  0.6185,  ...,  0.8640, -0.4454, -0.0797],
          [ 1.2413,  0.9659,  0.1452,  ...,  0.6096,  0.7737, -1.3864]],

         [[-0.6363, -0.6938, -1.3969,  ..., -0.2280,  0.9354, -1.6161],
          [ 1.0400,  0.5351, -1.0453,  ..., -1.8771,  1.0010, -1.6643],
          [ 0.3030,  0.4314, -0.3931,  ...,  0.9649, -0.4803,  0.3888],
          ...,
          [-1.3765,  2.4589,  0.2310,  ...,  1.4970,  2.9922,  0.7427],
          [-0.8141,  0.5371,  0.5742,  ..., -0.3091, -0.0896,  0.9939],
          [ 0.3397, -0.4215,  0.6703,  ...,  2.9595, -1.8205,  0.7140]]],


        [[[-0.7439, -0.0437, -0.5830,  ..., -0.0756,  1.3578, -1.2939],
          [ 0.9668,  1.2375, -0.0859,  ...,  0.3782, -1.1815, -0.5279],
          [ 0.3546, -1.1091,  1.0081,  ..., -0.6326,  0.6291, -1.5609],
          ...,
          [ 0.5861, -1.3895, -0.0743,  ..., -2.4577, -0.6627,  0.3436],
          [-0.9426,  0.4970,  0.1615,  ...,  0.2982,  0.3929, -1.0287],
          [ 0.2484,  0.5835,  0.0967,  ..., -0.3973, -0.0180,  2.6304]],

         [[ 1.2184, -0.9889,  0.5445,  ...,  0.2162, -0.2664,  0.3425],
          [-1.1912,  3.3210, -1.6855,  ...,  2.4650, -1.4116,  0.6115],
          [-0.6827,  0.9894, -1.8989,  ..., -1.4016, -0.2781,  0.4677],
          ...,
          [ 0.7451, -1.2146,  2.5843,  ...,  0.8350,  1.4769,  0.6673],
          [ 0.9209,  0.6629, -0.6971,  ...,  1.2924,  0.2098,  0.7090],
          [ 0.8117, -0.2542, -0.7311,  ..., -0.4175, -0.1963, -0.4408]]],


        [[[-0.2121, -1.5180,  1.3877,  ..., -0.1558, -0.5398,  0.5443],
          [ 0.4611, -0.1232,  0.7724,  ...,  1.0576, -0.6377,  1.3207],
          [-0.6521,  0.4160, -0.0953,  ...,  2.6769, -0.9756,  0.0498],
          ...,
          [ 1.2706, -1.0012,  1.9219,  ...,  0.9183,  0.8016, -0.1741],
          [-0.8352, -0.5013, -0.7909,  ...,  1.7834, -0.0328, -0.0918],
          [ 1.7122,  1.0582, -1.5639,  ...,  0.8594,  0.4032,  1.2670]],

         [[ 0.6794, -1.4918,  0.7715,  ..., -0.4748,  1.1067, -0.3154],
          [ 1.4157, -0.7515, -0.4269,  ...,  0.1736,  0.7786, -0.2351],
          [-0.2667,  0.2468, -0.0738,  ..., -1.0294, -0.8017,  1.5421],
          ...,
          [-0.0179, -0.4281,  0.6430,  ...,  0.6070,  0.3282, -0.9328],
          [-0.7773, -0.1580, -1.3143,  ...,  0.0161,  0.7999,  0.0696],
          [ 0.2969, -0.1645,  1.0936,  ..., -0.2290, -0.1132, -0.0292]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
IDX = 0 :  tensor([[[ 0.0268, -0.2131,  0.4621,  ..., -0.0886,  0.1178, -0.3443],
         [-0.7069, -0.5146, -0.2351,  ...,  0.5279,  1.0233,  1.0293],
         [ 0.3762, -2.1815, -0.8483,  ..., -0.7534, -0.4569,  0.1148],
         ...,
         [-1.1299,  0.2383,  0.5884,  ..., -0.9741,  2.8347,  0.5034],
         [-1.4513,  0.6418, -1.6531,  ..., -0.3853,  0.0741,  1.7381],
         [ 0.1785, -0.3878, -0.7603,  ...,  0.0885,  1.7161,  0.0919]],

        [[ 0.0250, -0.7590,  1.0344,  ..., -0.3723, -0.4742, -0.8107],
         [ 0.9665,  0.7381,  1.3315,  ..., -0.2347,  1.2682, -0.9590],
         [ 0.4910, -0.2447, -0.7982,  ...,  1.4659, -0.4904, -0.0310],
         ...,
         [ 0.0194,  0.3217,  0.0982,  ..., -0.8858,  1.0174, -0.5940],
         [-1.0276, -0.5029, -0.2337,  ..., -0.5071,  1.9655, -0.5080],
         [-0.1524,  0.7584, -1.0460,  ..., -1.1632, -0.8699, -1.1923]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.5080,  2.2823,  0.3342,  ..., -0.7393, -0.4931,  0.5934],
         [-1.0005, -0.0351,  0.3823,  ...,  0.0706, -0.7540,  1.0644],
         [ 0.2437, -0.3223,  0.5704,  ...,  0.7238,  0.1686, -0.6455],
         ...,
         [-0.6962,  0.3786, -0.8929,  ..., -1.1581, -1.2816,  1.8623],
         [-0.7182, -0.8736, -0.0852,  ..., -0.4288, -1.4654,  0.2971],
         [ 1.0232, -0.7137, -1.1449,  ..., -0.2325, -0.2786, -1.6416]],

        [[-0.0613, -0.8287,  0.5916,  ...,  0.2827,  0.9995,  0.1711],
         [-1.8773,  1.6633,  0.1460,  ..., -0.3021, -0.9972,  0.1090],
         [-0.4590,  1.5671,  0.2780,  ...,  0.1869, -0.5609,  0.6962],
         ...,
         [-1.4029, -1.6617,  0.1626,  ...,  1.1607, -0.8677,  0.2907],
         [-0.5661,  0.2786,  0.7498,  ..., -0.3457,  2.8013, -0.0384],
         [ 0.8064, -0.4407, -0.1655,  ...,  0.8967,  0.3767, -1.0196]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 1199.556, Val Loss : 4498.943
======> Trajectory Loss : 905.228, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.376, BelowGroundPenalize Loss : 156.686
Opening in existing browser session.
[1019/145154.158474:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/145154.458142:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/129].........IDX = 0 :  tensor([[[ 0.0268, -0.2131,  0.4621,  ..., -0.0886,  0.1178, -0.3443],
         [-0.7069, -0.5146, -0.2351,  ...,  0.5279,  1.0233,  1.0293],
         [ 0.3762, -2.1815, -0.8483,  ..., -0.7534, -0.4569,  0.1148],
         ...,
         [-1.1299,  0.2383,  0.5884,  ..., -0.9741,  2.8347,  0.5034],
         [-1.4513,  0.6418, -1.6531,  ..., -0.3853,  0.0741,  1.7381],
         [ 0.1785, -0.3878, -0.7603,  ...,  0.0885,  1.7161,  0.0919]],

        [[ 0.0250, -0.7590,  1.0344,  ..., -0.3723, -0.4742, -0.8107],
         [ 0.9665,  0.7381,  1.3315,  ..., -0.2347,  1.2682, -0.9590],
         [ 0.4910, -0.2447, -0.7982,  ...,  1.4659, -0.4904, -0.0310],
         ...,
         [ 0.0194,  0.3217,  0.0982,  ..., -0.8858,  1.0174, -0.5940],
         [-1.0276, -0.5029, -0.2337,  ..., -0.5071,  1.9655, -0.5080],
         [-0.1524,  0.7584, -1.0460,  ..., -1.1632, -0.8699, -1.1923]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Opening in existing browser session.
[1019/145154.758066:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
IDX = 0 :  tensor([[[-0.5080,  2.2823,  0.3342,  ..., -0.7393, -0.4931,  0.5934],
         [-1.0005, -0.0351,  0.3823,  ...,  0.0706, -0.7540,  1.0644],
         [ 0.2437, -0.3223,  0.5704,  ...,  0.7238,  0.1686, -0.6455],
         ...,
         [-0.6962,  0.3786, -0.8929,  ..., -1.1581, -1.2816,  1.8623],
         [-0.7182, -0.8736, -0.0852,  ..., -0.4288, -1.4654,  0.2971],
         [ 1.0232, -0.7137, -1.1449,  ..., -0.2325, -0.2786, -1.6416]],

        [[-0.0613, -0.8287,  0.5916,  ...,  0.2827,  0.9995,  0.1711],
         [-1.8773,  1.6633,  0.1460,  ..., -0.3021, -0.9972,  0.1090],
         [-0.4590,  1.5671,  0.2780,  ...,  0.1869, -0.5609,  0.6962],
         ...,
         [-1.4029, -1.6617,  0.1626,  ...,  1.1607, -0.8677,  0.2907],
         [-0.5661,  0.2786,  0.7498,  ..., -0.3457,  2.8013, -0.0384],
         [ 0.8064, -0.4407, -0.1655,  ...,  0.8967,  0.3767, -1.0196]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[-0.5047,  2.2769,  0.3284,  ..., -0.7444, -0.4872,  0.5982],
          [-0.9954, -0.0307,  0.3802,  ...,  0.0653, -0.7455,  1.0588],
          [ 0.2402, -0.3303,  0.5660,  ...,  0.7240,  0.1740, -0.6517],
          ...,
          [-0.7045,  0.3696, -0.8865,  ..., -1.1537, -1.2889,  1.8573],
          [-0.7244, -0.8662, -0.0913,  ..., -0.4220, -1.4728,  0.3027],
          [ 1.0170, -0.7220, -1.1379,  ..., -0.2391, -0.2724, -1.6503]],

         [[-0.0669, -0.8225,  0.5845,  ...,  0.2892,  1.0067,  0.1640],
          [-1.8729,  1.6715,  0.1430,  ..., -0.2944, -1.0038,  0.1020],
          [-0.4551,  1.5676,  0.2714,  ...,  0.1939, -0.5534,  0.6884],
          ...,
          [-1.3958, -1.6527,  0.1559,  ...,  1.1690, -0.8593,  0.2822],
          [-0.5714,  0.2854,  0.7561,  ..., -0.3402,  2.7976, -0.0461],
          [ 0.8100, -0.4334, -0.1620,  ...,  0.9048,  0.3763, -1.0278]]],


        [[[ 1.0346, -1.2359, -0.2924,  ..., -0.5255,  1.7293, -0.4640],
          [-1.9247,  1.1538, -0.2721,  ...,  2.0065,  1.8719,  2.0736],
          [-0.0693,  1.8224, -0.0078,  ..., -1.0177,  0.2903, -0.9283],
          ...,
          [-0.3116, -0.0247, -0.1323,  ..., -0.0215, -0.6713, -0.1077],
          [-1.5074,  1.8672,  2.0036,  ..., -0.1451, -0.5993, -1.0650],
          [ 0.0774, -1.4789, -0.6984,  ..., -0.2662, -0.6724,  0.2866]],

         [[ 1.2826, -0.5407, -0.4483,  ...,  0.0612, -0.4183,  0.3288],
          [-0.0687,  0.5528, -1.2411,  ...,  1.9413, -0.7595,  0.5491],
          [-0.3305,  0.1201,  0.0487,  ...,  0.9012, -0.1135,  0.9476],
          ...,
          [-1.0882, -0.8642, -0.6134,  ...,  0.1685,  1.4210, -1.5141],
          [-0.4372, -0.0424, -0.7244,  ...,  0.6731,  0.6600,  0.9700],
          [ 0.4198, -0.3222,  0.0647,  ..., -0.1557, -0.7115,  0.9349]]],


        [[[-0.9084, -0.5449,  0.7712,  ...,  0.3445, -1.8939, -0.9566],
          [-1.7541, -0.8404, -0.2622,  ...,  0.9710, -0.4685,  1.2769],
          [-1.1577, -0.6631,  0.1542,  ..., -1.2171, -0.1766,  1.2251],
          ...,
          [ 0.3342, -0.7075, -1.5872,  ...,  0.0848,  1.3069, -0.4225],
          [ 0.1196,  0.4824,  0.4805,  ...,  1.1764, -0.2078, -0.2985],
          [-0.1776,  1.1338, -0.3053,  ..., -1.6896,  0.6764, -0.0458]],

         [[ 2.5498, -0.2579,  0.3116,  ..., -0.3931,  2.4647,  0.6753],
          [-0.3924,  0.2726, -0.3813,  ...,  0.6258, -1.7523,  2.6135],
          [-1.9068,  0.4826,  2.0933,  ..., -0.3844,  1.3295,  0.6860],
          ...,
          [-0.3681,  0.0589, -0.8800,  ..., -1.5457, -0.4667,  1.1152],
          [-0.7309,  0.0061,  0.7512,  ..., -2.2613, -0.7151,  0.2568],
          [ 0.8236, -0.4120, -0.1667,  ..., -0.1956, -0.0211, -0.3497]]],


        [[[ 0.2635,  0.3255, -0.7285,  ...,  0.1445,  0.0100,  0.1721],
          [-0.4499,  1.6543,  0.4755,  ...,  0.8337, -0.1755,  0.6567],
          [-0.4883,  0.5340, -0.5362,  ...,  2.4747,  0.5720,  0.3240],
          ...,
          [-0.8998,  1.2351, -0.2923,  ...,  0.5540, -0.3754,  0.6456],
          [ 0.1904,  0.7896,  0.9644,  ...,  0.7442,  0.9460,  0.2768],
          [-0.4284, -0.6528,  0.3558,  ...,  1.1075,  0.0415, -1.1034]],

         [[-0.6428, -0.6877, -0.8510,  ...,  0.2704,  0.4542,  1.5142],
          [ 0.7043, -0.2542,  0.8484,  ...,  0.8981,  0.6800, -0.5195],
          [ 1.4238,  0.6503, -0.2826,  ..., -0.0294, -0.9030, -1.0992],
          ...,
          [ 0.3691,  0.0048,  1.0686,  ...,  0.6136,  1.6211, -0.5727],
          [ 0.8539, -0.6706,  1.1022,  ...,  1.3988, -2.4737, -0.8065],
          [-0.9982, -1.0239, -0.0342,  ...,  1.8883,  0.0609,  0.7889]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 6.1330e-01, -1.9074e+00,  1.2481e+00,  ...,  6.4867e-01,
           -4.8988e-01, -1.5031e+00],
          [-1.5356e+00, -4.0249e-01,  4.2331e-01,  ..., -2.9059e-01,
           -6.3166e-01,  6.5382e-01],
          [ 6.1463e-02, -3.3193e-01,  5.5200e-01,  ..., -8.2844e-01,
            4.4386e-01,  8.7615e-01],
          ...,
          [ 7.9348e-01, -5.7056e-01,  1.5145e+00,  ...,  5.3763e-01,
           -1.1549e+00,  1.2218e+00],
          [-8.1243e-01, -1.3172e+00,  1.8981e+00,  ...,  1.0206e+00,
           -1.5049e+00, -7.9943e-01],
          [-3.8037e-01, -5.0904e-01,  7.6027e-01,  ...,  2.8278e+00,
           -1.3041e+00, -1.1313e+00]],

         [[ 5.6562e-01, -2.2683e-02, -8.2642e-01,  ..., -1.6523e-01,
            1.5155e-01, -3.8136e-01],
          [ 6.4815e-01, -1.9284e+00,  9.4578e-01,  ...,  1.4682e+00,
            3.4869e-01,  8.6259e-01],
          [ 1.1115e+00,  6.8989e-01, -5.6266e-01,  ...,  9.4469e-01,
            2.1685e+00,  1.2235e+00],
          ...,
          [-5.9185e-01,  1.6430e+00,  2.2585e-01,  ..., -2.6849e-03,
           -1.4540e+00, -4.5230e-01],
          [-6.3090e-01, -2.3006e-01, -1.9237e-01,  ...,  9.8274e-01,
            3.2396e-01,  2.8865e+00],
          [-2.0227e-01,  4.7797e-01,  9.3178e-01,  ..., -5.4239e-01,
           -2.2786e-01,  1.1147e+00]]],


        [[[ 5.0000e-01,  1.4260e+00,  6.5886e-02,  ...,  1.1035e+00,
           -2.1286e-01, -7.1160e-01],
          [ 3.3937e-01, -8.6744e-01,  3.7476e-01,  ...,  2.1815e+00,
            1.0911e+00,  1.0186e-01],
          [ 1.1254e+00, -3.3154e-01, -9.0761e-01,  ...,  1.5015e+00,
            4.3797e-01,  2.7773e-01],
          ...,
          [ 1.2478e-01, -5.2314e-01,  8.0419e-01,  ...,  3.7098e-01,
           -2.2384e-01, -1.2964e+00],
          [ 1.2306e+00, -3.7023e-01,  6.1274e-01,  ...,  8.7139e-01,
           -4.3844e-01, -8.7181e-02],
          [ 1.2490e+00,  9.5722e-01,  1.5286e-01,  ...,  6.1520e-01,
            7.6777e-01, -1.3907e+00]],

         [[-6.3104e-01, -6.9886e-01, -1.4037e+00,  ..., -2.2017e-01,
            9.4254e-01, -1.6107e+00],
          [ 1.0341e+00,  5.2647e-01, -1.0475e+00,  ..., -1.8729e+00,
            1.0083e+00, -1.6609e+00],
          [ 2.9441e-01,  4.2399e-01, -4.0126e-01,  ...,  9.7273e-01,
           -4.7791e-01,  3.9585e-01],
          ...,
          [-1.3775e+00,  2.4545e+00,  2.2229e-01,  ...,  1.5048e+00,
            2.9968e+00,  7.5194e-01],
          [-8.1609e-01,  5.2949e-01,  5.6981e-01,  ..., -3.0232e-01,
           -8.2718e-02,  9.9932e-01],
          [ 3.3157e-01, -4.3087e-01,  6.7104e-01,  ...,  2.9634e+00,
           -1.8172e+00,  7.1164e-01]]],


        [[[-7.3837e-01, -5.1232e-02, -5.8937e-01,  ..., -6.7942e-02,
            1.3648e+00, -1.2911e+00],
          [ 9.6146e-01,  1.2292e+00, -7.9572e-02,  ...,  3.8728e-01,
           -1.1736e+00, -5.3109e-01],
          [ 3.6377e-01, -1.1174e+00,  1.0031e+00,  ..., -6.2777e-01,
            6.3777e-01, -1.5685e+00],
          ...,
          [ 5.8337e-01, -1.3992e+00, -8.1810e-02,  ..., -2.4482e+00,
           -6.5319e-01,  3.4931e-01],
          [-9.4959e-01,  4.9032e-01,  1.5566e-01,  ...,  3.0530e-01,
            3.9994e-01, -1.0354e+00],
          [ 2.5533e-01,  5.7482e-01,  1.0369e-01,  ..., -3.9633e-01,
           -2.3171e-02,  2.6241e+00]],

         [[ 1.2120e+00, -9.8460e-01,  5.3755e-01,  ...,  2.2335e-01,
           -2.6295e-01,  3.4695e-01],
          [-1.1994e+00,  3.3149e+00, -1.6904e+00,  ...,  2.4717e+00,
           -1.4037e+00,  6.1360e-01],
          [-6.9077e-01,  9.8352e-01, -1.9068e+00,  ..., -1.3932e+00,
           -2.7078e-01,  4.7497e-01],
          ...,
          [ 7.3849e-01, -1.2111e+00,  2.5756e+00,  ...,  8.4433e-01,
            1.4802e+00,  6.7580e-01],
          [ 9.1597e-01,  6.5677e-01, -7.0280e-01,  ...,  1.2990e+00,
            2.1717e-01,  7.0961e-01],
          [ 8.0410e-01, -2.6255e-01, -7.2841e-01,  ..., -4.1018e-01,
           -1.9078e-01, -4.4533e-01]]],


        [[[-2.0588e-01, -1.5244e+00,  1.3816e+00,  ..., -1.4762e-01,
           -5.3263e-01,  5.4378e-01],
          [ 4.5629e-01, -1.3163e-01,  7.7788e-01,  ...,  1.0665e+00,
           -6.2944e-01,  1.3159e+00],
          [-6.4376e-01,  4.0791e-01, -9.0943e-02,  ...,  2.6807e+00,
           -9.6659e-01,  4.1438e-02],
          ...,
          [ 1.2697e+00, -1.0094e+00,  1.9206e+00,  ...,  9.2797e-01,
            8.1116e-01, -1.7188e-01],
          [-8.3033e-01, -5.0881e-01, -7.9722e-01,  ...,  1.7906e+00,
           -2.5732e-02, -9.9219e-02],
          [ 1.7192e+00,  1.0490e+00, -1.5559e+00,  ...,  8.5711e-01,
            4.0910e-01,  1.2604e+00]],

         [[ 6.8563e-01, -1.4868e+00,  7.6525e-01,  ..., -4.6690e-01,
            1.1124e+00, -3.1032e-01],
          [ 1.4218e+00, -7.5976e-01, -4.3115e-01,  ...,  1.8204e-01,
            7.8461e-01, -2.3150e-01],
          [-2.7478e-01,  2.4025e-01, -8.1941e-02,  ..., -1.0212e+00,
           -7.9353e-01,  1.5489e+00],
          ...,
          [-1.3185e-02, -4.2885e-01,  6.3552e-01,  ...,  6.1594e-01,
            3.3718e-01, -9.2379e-01],
          [-7.6930e-01, -1.6507e-01, -1.3127e+00,  ...,  2.3653e-02,
            8.0670e-01,  7.4939e-02],
          [ 2.9031e-01, -1.7395e-01,  1.0973e+00,  ..., -2.1971e-01,
           -1.0729e-01, -3.2698e-02]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
IDX = 0 :  tensor([[[ 0.0330, -0.2198,  0.4675,  ..., -0.0907,  0.1277, -0.3347],
         [-0.7167, -0.5086, -0.2270,  ...,  0.5375,  1.0309,  1.0320],
         [ 0.3809, -2.1798, -0.8426,  ..., -0.7440, -0.4641,  0.1090],
         ...,
         [-1.1394,  0.2434,  0.5922,  ..., -0.9802,  2.8430,  0.4942],
         [-1.4528,  0.6425, -1.6478,  ..., -0.3781,  0.0837,  1.7295],
         [ 0.1804, -0.3829, -0.7505,  ...,  0.0983,  1.7256,  0.0902]],

        [[ 0.0321, -0.7689,  1.0435,  ..., -0.3712, -0.4649, -0.8158],
         [ 0.9566,  0.7284,  1.3391,  ..., -0.2427,  1.2775, -0.9491],
         [ 0.4849, -0.2498, -0.7905,  ...,  1.4581, -0.4893, -0.0392],
         ...,
         [ 0.0094,  0.3118,  0.0977,  ..., -0.8783,  1.0249, -0.5846],
         [-1.0371, -0.5114, -0.2417,  ..., -0.5171,  1.9725, -0.5180],
         [-0.1615,  0.7499, -1.0511,  ..., -1.1540, -0.8619, -1.1948]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.5047,  2.2769,  0.3284,  ..., -0.7444, -0.4872,  0.5982],
         [-0.9954, -0.0307,  0.3802,  ...,  0.0653, -0.7455,  1.0588],
         [ 0.2402, -0.3303,  0.5660,  ...,  0.7240,  0.1740, -0.6517],
         ...,
         [-0.7045,  0.3696, -0.8865,  ..., -1.1537, -1.2889,  1.8573],
         [-0.7244, -0.8662, -0.0913,  ..., -0.4220, -1.4728,  0.3027],
         [ 1.0170, -0.7220, -1.1379,  ..., -0.2391, -0.2724, -1.6503]],

        [[-0.0669, -0.8225,  0.5845,  ...,  0.2892,  1.0067,  0.1640],
         [-1.8729,  1.6715,  0.1430,  ..., -0.2944, -1.0038,  0.1020],
         [-0.4551,  1.5676,  0.2714,  ...,  0.1939, -0.5534,  0.6884],
         ...,
         [-1.3958, -1.6527,  0.1559,  ...,  1.1690, -0.8593,  0.2822],
         [-0.5714,  0.2854,  0.7561,  ..., -0.3402,  2.7976, -0.0461],
         [ 0.8100, -0.4334, -0.1620,  ...,  0.9048,  0.3763, -1.0278]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 985.655, Val Loss : 3604.769
======> Trajectory Loss : 733.300, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.374, BelowGroundPenalize Loss : 114.986
===> [Minibatch 3/129].........IDX = 0 :  tensor([[[ 0.0330, -0.2198,  0.4675,  ..., -0.0907,  0.1277, -0.3347],
         [-0.7167, -0.5086, -0.2270,  ...,  0.5375,  1.0309,  1.0320],
         [ 0.3809, -2.1798, -0.8426,  ..., -0.7440, -0.4641,  0.1090],
         ...,
         [-1.1394,  0.2434,  0.5922,  ..., -0.9802,  2.8430,  0.4942],
         [-1.4528,  0.6425, -1.6478,  ..., -0.3781,  0.0837,  1.7295],
         [ 0.1804, -0.3829, -0.7505,  ...,  0.0983,  1.7256,  0.0902]],

        [[ 0.0321, -0.7689,  1.0435,  ..., -0.3712, -0.4649, -0.8158],
         [ 0.9566,  0.7284,  1.3391,  ..., -0.2427,  1.2775, -0.9491],
         [ 0.4849, -0.2498, -0.7905,  ...,  1.4581, -0.4893, -0.0392],
         ...,
         [ 0.0094,  0.3118,  0.0977,  ..., -0.8783,  1.0249, -0.5846],
         [-1.0371, -0.5114, -0.2417,  ..., -0.5171,  1.9725, -0.5180],
         [-0.1615,  0.7499, -1.0511,  ..., -1.1540, -0.8619, -1.1948]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.5047,  2.2769,  0.3284,  ..., -0.7444, -0.4872,  0.5982],
         [-0.9954, -0.0307,  0.3802,  ...,  0.0653, -0.7455,  1.0588],
         [ 0.2402, -0.3303,  0.5660,  ...,  0.7240,  0.1740, -0.6517],
         ...,
         [-0.7045,  0.3696, -0.8865,  ..., -1.1537, -1.2889,  1.8573],
         [-0.7244, -0.8662, -0.0913,  ..., -0.4220, -1.4728,  0.3027],
         [ 1.0170, -0.7220, -1.1379,  ..., -0.2391, -0.2724, -1.6503]],

        [[-0.0669, -0.8225,  0.5845,  ...,  0.2892,  1.0067,  0.1640],
         [-1.8729,  1.6715,  0.1430,  ..., -0.2944, -1.0038,  0.1020],
         [-0.4551,  1.5676,  0.2714,  ...,  0.1939, -0.5534,  0.6884],
         ...,
         [-1.3958, -1.6527,  0.1559,  ...,  1.1690, -0.8593,  0.2822],
         [-0.5714,  0.2854,  0.7561,  ..., -0.3402,  2.7976, -0.0461],
         [ 0.8100, -0.4334, -0.1620,  ...,  0.9048,  0.3763, -1.0278]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[-5.0051e-01,  2.2699e+00,  3.2210e-01,  ..., -7.4643e-01,
           -4.8722e-01,  6.0348e-01],
          [-9.8844e-01, -2.4659e-02,  3.7438e-01,  ...,  6.2697e-02,
           -7.3713e-01,  1.0526e+00],
          [ 2.4406e-01, -3.3863e-01,  5.5950e-01,  ...,  7.1818e-01,
            1.6812e-01, -6.4703e-01],
          ...,
          [-7.1173e-01,  3.6148e-01, -8.8331e-01,  ..., -1.1485e+00,
           -1.2961e+00,  1.8590e+00],
          [-7.1896e-01, -8.6204e-01, -9.8567e-02,  ..., -4.1404e-01,
           -1.4799e+00,  3.0997e-01],
          [ 1.0177e+00, -7.2890e-01, -1.1333e+00,  ..., -2.4674e-01,
           -2.7380e-01, -1.6587e+00]],

         [[-7.3940e-02, -8.1862e-01,  5.7693e-01,  ...,  2.9478e-01,
            1.0150e+00,  1.5694e-01],
          [-1.8702e+00,  1.6799e+00,  1.3673e-01,  ..., -2.8666e-01,
           -1.0108e+00,  9.4307e-02],
          [-4.6025e-01,  1.5617e+00,  2.6403e-01,  ...,  1.9349e-01,
           -5.4537e-01,  6.7986e-01],
          ...,
          [-1.3901e+00, -1.6451e+00,  1.4854e-01,  ...,  1.1697e+00,
           -8.5140e-01,  2.7503e-01],
          [-5.7014e-01,  2.8973e-01,  7.5415e-01,  ..., -3.3306e-01,
            2.8020e+00, -5.4649e-02],
          [ 8.0647e-01, -4.2845e-01, -1.6390e-01,  ...,  9.1231e-01,
            3.7866e-01, -1.0350e+00]]],


        [[[ 1.0288e+00, -1.2337e+00, -2.8453e-01,  ..., -5.3358e-01,
            1.7354e+00, -4.7183e-01],
          [-1.9287e+00,  1.1608e+00, -2.6594e-01,  ...,  2.0145e+00,
            1.8793e+00,  2.0818e+00],
          [-7.5422e-02,  1.8299e+00, -1.0889e-03,  ..., -1.0107e+00,
            2.9726e-01, -9.2214e-01],
          ...,
          [-3.0840e-01, -1.6188e-02, -1.2394e-01,  ..., -1.4460e-02,
           -6.6281e-01, -9.9000e-02],
          [-1.5027e+00,  1.8714e+00,  1.9979e+00,  ..., -1.5263e-01,
           -5.9135e-01, -1.0617e+00],
          [ 8.0307e-02, -1.4805e+00, -6.9991e-01,  ..., -2.5803e-01,
           -6.6625e-01,  2.9397e-01]],

         [[ 1.2896e+00, -5.4728e-01, -4.5582e-01,  ...,  5.7897e-02,
           -4.1623e-01,  3.2498e-01],
          [-6.4611e-02,  5.4462e-01, -1.2426e+00,  ...,  1.9480e+00,
           -7.5431e-01,  5.4231e-01],
          [-3.3763e-01,  1.2701e-01,  5.5802e-02,  ...,  9.0766e-01,
           -1.1986e-01,  9.4057e-01],
          ...,
          [-1.0871e+00, -8.5707e-01, -6.0789e-01,  ...,  1.7333e-01,
            1.4286e+00, -1.5226e+00],
          [-4.3140e-01, -4.6153e-02, -7.1774e-01,  ...,  6.6983e-01,
            6.6723e-01,  9.6926e-01],
          [ 4.1239e-01, -3.1975e-01,  7.0647e-02,  ..., -1.5036e-01,
           -7.0813e-01,  9.2798e-01]]],


        [[[-9.1622e-01, -5.4386e-01,  7.6429e-01,  ...,  3.4875e-01,
           -1.9004e+00, -9.5582e-01],
          [-1.7606e+00, -8.4660e-01, -2.5487e-01,  ...,  9.7552e-01,
           -4.6151e-01,  1.2713e+00],
          [-1.1655e+00, -6.7070e-01,  1.5846e-01,  ..., -1.2099e+00,
           -1.6891e-01,  1.2283e+00],
          ...,
          [ 3.2691e-01, -7.0898e-01, -1.5903e+00,  ...,  9.3813e-02,
            1.3128e+00, -4.1575e-01],
          [ 1.1324e-01,  4.8323e-01,  4.8517e-01,  ...,  1.1826e+00,
           -1.9949e-01, -2.9070e-01],
          [-1.8511e-01,  1.1259e+00, -3.0364e-01,  ..., -1.6930e+00,
            6.7969e-01, -5.1953e-02]],

         [[ 2.5423e+00, -2.5870e-01,  3.0523e-01,  ..., -4.0087e-01,
            2.4688e+00,  6.7988e-01],
          [-4.0003e-01,  2.7961e-01, -3.8616e-01,  ...,  6.3199e-01,
           -1.7561e+00,  2.6215e+00],
          [-1.9142e+00,  4.8996e-01,  2.0855e+00,  ..., -3.9222e-01,
            1.3346e+00,  6.9108e-01],
          ...,
          [-3.7668e-01,  6.5002e-02, -8.7227e-01,  ..., -1.5539e+00,
           -4.6580e-01,  1.1231e+00],
          [-7.3891e-01,  1.2525e-02,  7.4448e-01,  ..., -2.2689e+00,
           -7.1314e-01,  2.6391e-01],
          [ 8.1532e-01, -4.1978e-01, -1.6995e-01,  ..., -2.0260e-01,
           -2.9391e-02, -3.4187e-01]]],


        [[[ 2.6614e-01,  3.2827e-01, -7.2200e-01,  ...,  1.5034e-01,
            9.1340e-03,  1.6453e-01],
          [-4.5181e-01,  1.6493e+00,  4.8147e-01,  ...,  8.3456e-01,
           -1.6965e-01,  6.5994e-01],
          [-4.8020e-01,  5.2813e-01, -5.2829e-01,  ...,  2.4693e+00,
            5.7559e-01,  3.1738e-01],
          ...,
          [-9.0655e-01,  1.2319e+00, -2.8697e-01,  ...,  5.6065e-01,
           -3.7308e-01,  6.3929e-01],
          [ 1.9658e-01,  7.8931e-01,  9.6577e-01,  ...,  7.3901e-01,
            9.4340e-01,  2.6857e-01],
          [-4.3364e-01, -6.4753e-01,  3.6278e-01,  ...,  1.1146e+00,
            4.9735e-02, -1.1066e+00]],

         [[-6.4381e-01, -6.8750e-01, -8.5368e-01,  ...,  2.6932e-01,
            4.4829e-01,  1.5068e+00],
          [ 7.0539e-01, -2.6037e-01,  8.4226e-01,  ...,  9.0311e-01,
            6.8305e-01, -5.1393e-01],
          [ 1.4314e+00,  6.4283e-01, -2.9090e-01,  ..., -2.1908e-02,
           -9.0979e-01, -1.1072e+00],
          ...,
          [ 3.7567e-01, -3.0960e-04,  1.0612e+00,  ...,  6.2132e-01,
            1.6178e+00, -5.7098e-01],
          [ 8.6047e-01, -6.6684e-01,  1.1088e+00,  ...,  1.4056e+00,
           -2.4678e+00, -8.0472e-01],
          [-1.0049e+00, -1.0304e+00, -4.2137e-02,  ...,  1.8945e+00,
            5.4520e-02,  7.8661e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 0.6183, -1.9149,  1.2419,  ...,  0.6467, -0.4854, -1.5031],
          [-1.5362, -0.4110,  0.4308,  ..., -0.2818, -0.6256,  0.6551],
          [ 0.0690, -0.3399,  0.5485,  ..., -0.8232,  0.4405,  0.8686],
          ...,
          [ 0.7919, -0.5797,  1.5112,  ...,  0.5451, -1.1517,  1.2189],
          [-0.8119, -1.3254,  1.8903,  ...,  1.0279, -1.5031, -0.8084],
          [-0.3740, -0.5185,  0.7667,  ...,  2.8282, -1.3094, -1.1360]],

         [[ 0.5623, -0.0305, -0.8342,  ..., -0.1578,  0.1555, -0.3772],
          [ 0.6427, -1.9363,  0.9388,  ...,  1.4742,  0.3569,  0.8675],
          [ 1.1044,  0.6825, -0.5702,  ...,  0.9534,  2.1729,  1.2301],
          ...,
          [-0.5949,  1.6349,  0.2172,  ...,  0.0037, -1.4485, -0.4445],
          [-0.6360, -0.2382, -0.1977,  ...,  0.9875,  0.3310,  2.8905],
          [-0.2106,  0.4687,  0.9262,  ..., -0.5394, -0.2264,  1.1138]]],


        [[[ 0.5072,  1.4181,  0.0634,  ...,  1.1111, -0.2043, -0.7162],
          [ 0.3474, -0.8764,  0.3744,  ...,  2.1907,  1.0981,  0.1097],
          [ 1.1335, -0.3398, -0.9009,  ...,  1.5089,  0.4454,  0.2689],
          ...,
          [ 0.1328, -0.5327,  0.8023,  ...,  0.3789, -0.2159, -1.2912],
          [ 1.2366, -0.3786,  0.6082,  ...,  0.8793, -0.4309, -0.0956],
          [ 1.2569,  0.9481,  0.1606,  ...,  0.6221,  0.7660, -1.3900]],

         [[-0.6363, -0.7055, -1.4110,  ..., -0.2117,  0.9500, -1.6037],
          [ 1.0274,  0.5179, -1.0536,  ..., -1.8667,  1.0159, -1.6545],
          [ 0.2872,  0.4163, -0.4096,  ...,  0.9803, -0.4777,  0.4033],
          ...,
          [-1.3816,  2.4485,  0.2139,  ...,  1.5126,  3.0023,  0.7608],
          [-0.8223,  0.5210,  0.5634,  ..., -0.2943, -0.0770,  1.0060],
          [ 0.3230, -0.4401,  0.6656,  ...,  2.9694, -1.8129,  0.7162]]],


        [[[-0.7359, -0.0585, -0.5966,  ..., -0.0607,  1.3723, -1.2948],
          [ 0.9544,  1.2205, -0.0841,  ...,  0.3960, -1.1654, -0.5281],
          [ 0.3728, -1.1254,  0.9967,  ..., -0.6210,  0.6457, -1.5766],
          ...,
          [ 0.5779, -1.4084, -0.0883,  ..., -2.4399, -0.6438,  0.3533],
          [-0.9573,  0.4824,  0.1486,  ...,  0.3124,  0.4080, -1.0431],
          [ 0.2610,  0.5658,  0.1077,  ..., -0.3929, -0.0194,  2.6198]],

         [[ 1.2042, -0.9894,  0.5302,  ...,  0.2311, -0.2667,  0.3533],
          [-1.2072,  3.3084, -1.6970,  ...,  2.4793, -1.4055,  0.6199],
          [-0.6983,  0.9768, -1.9152,  ..., -1.3849, -0.2754,  0.4822],
          ...,
          [ 0.7308, -1.2126,  2.5677,  ...,  0.8526,  1.4803,  0.6846],
          [ 0.9092,  0.6494, -0.7097,  ...,  1.3063,  0.2202,  0.7157],
          [ 0.7958, -0.2706, -0.7323,  ..., -0.4025, -0.1949, -0.4420]]],


        [[[-0.2021, -1.5317,  1.3745,  ..., -0.1398, -0.5257,  0.5379],
          [ 0.4494, -0.1399,  0.7733,  ...,  1.0716, -0.6214,  1.3150],
          [-0.6358,  0.3994, -0.0961,  ...,  2.6820, -0.9580,  0.0329],
          ...,
          [ 1.2667, -1.0179,  1.9183,  ...,  0.9356,  0.8193, -0.1727],
          [-0.8325, -0.5173, -0.8046,  ...,  1.7968, -0.0178, -0.1073],
          [ 1.7239,  1.0396, -1.5510,  ...,  0.8520,  0.4158,  1.2540]],

         [[ 0.6811, -1.4899,  0.7586,  ..., -0.4583,  1.1136, -0.3037],
          [ 1.4166, -0.7678, -0.4374,  ...,  0.1898,  0.7882, -0.2249],
          [-0.2818,  0.2328, -0.0902,  ..., -1.0130, -0.7921,  1.5561],
          ...,
          [-0.0121, -0.4344,  0.6292,  ...,  0.6244,  0.3437, -0.9151],
          [-0.7734, -0.1720, -1.3147,  ...,  0.0322,  0.8110,  0.0818],
          [ 0.2826, -0.1834,  1.0947,  ..., -0.2108, -0.1032, -0.0290]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
IDX = 0 :  tensor([[[ 0.0366, -0.2271,  0.4724,  ..., -0.0946,  0.1375, -0.3291],
         [-0.7253, -0.5015, -0.2221,  ...,  0.5373,  1.0366,  1.0354],
         [ 0.3879, -2.1822, -0.8365,  ..., -0.7344, -0.4661,  0.1030],
         ...,
         [-1.1417,  0.2465,  0.5909,  ..., -0.9846,  2.8511,  0.4858],
         [-1.4474,  0.6366, -1.6443,  ..., -0.3705,  0.0929,  1.7294],
         [ 0.1839, -0.3785, -0.7410,  ...,  0.1082,  1.7351,  0.0866]],

        [[ 0.0405, -0.7783,  1.0523,  ..., -0.3654, -0.4650, -0.8208],
         [ 0.9470,  0.7188,  1.3473,  ..., -0.2506,  1.2870, -0.9410],
         [ 0.4877, -0.2568, -0.7824,  ...,  1.4496, -0.4925, -0.0475],
         ...,
         [ 0.0032,  0.3153,  0.1038,  ..., -0.8699,  1.0330, -0.5836],
         [-1.0468, -0.5174, -0.2503,  ..., -0.5265,  1.9807, -0.5278],
         [-0.1703,  0.7487, -1.0582,  ..., -1.1575, -0.8533, -1.2014]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.5005,  2.2699,  0.3221,  ..., -0.7464, -0.4872,  0.6035],
         [-0.9884, -0.0247,  0.3744,  ...,  0.0627, -0.7371,  1.0526],
         [ 0.2441, -0.3386,  0.5595,  ...,  0.7182,  0.1681, -0.6470],
         ...,
         [-0.7117,  0.3615, -0.8833,  ..., -1.1485, -1.2961,  1.8590],
         [-0.7190, -0.8620, -0.0986,  ..., -0.4140, -1.4799,  0.3100],
         [ 1.0177, -0.7289, -1.1333,  ..., -0.2467, -0.2738, -1.6587]],

        [[-0.0739, -0.8186,  0.5769,  ...,  0.2948,  1.0150,  0.1569],
         [-1.8702,  1.6799,  0.1367,  ..., -0.2867, -1.0108,  0.0943],
         [-0.4603,  1.5617,  0.2640,  ...,  0.1935, -0.5454,  0.6799],
         ...,
         [-1.3901, -1.6451,  0.1485,  ...,  1.1697, -0.8514,  0.2750],
         [-0.5701,  0.2897,  0.7541,  ..., -0.3331,  2.8020, -0.0546],
         [ 0.8065, -0.4285, -0.1639,  ...,  0.9123,  0.3787, -1.0350]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 812.880, Val Loss : 2832.262
======> Trajectory Loss : 579.904, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.369, BelowGroundPenalize Loss : 96.114
===> [Minibatch 4/129].........IDX = 0 :  tensor([[[ 0.0366, -0.2271,  0.4724,  ..., -0.0946,  0.1375, -0.3291],
         [-0.7253, -0.5015, -0.2221,  ...,  0.5373,  1.0366,  1.0354],
         [ 0.3879, -2.1822, -0.8365,  ..., -0.7344, -0.4661,  0.1030],
         ...,
         [-1.1417,  0.2465,  0.5909,  ..., -0.9846,  2.8511,  0.4858],
         [-1.4474,  0.6366, -1.6443,  ..., -0.3705,  0.0929,  1.7294],
         [ 0.1839, -0.3785, -0.7410,  ...,  0.1082,  1.7351,  0.0866]],

        [[ 0.0405, -0.7783,  1.0523,  ..., -0.3654, -0.4650, -0.8208],
         [ 0.9470,  0.7188,  1.3473,  ..., -0.2506,  1.2870, -0.9410],
         [ 0.4877, -0.2568, -0.7824,  ...,  1.4496, -0.4925, -0.0475],
         ...,
         [ 0.0032,  0.3153,  0.1038,  ..., -0.8699,  1.0330, -0.5836],
         [-1.0468, -0.5174, -0.2503,  ..., -0.5265,  1.9807, -0.5278],
         [-0.1703,  0.7487, -1.0582,  ..., -1.1575, -0.8533, -1.2014]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.5005,  2.2699,  0.3221,  ..., -0.7464, -0.4872,  0.6035],
         [-0.9884, -0.0247,  0.3744,  ...,  0.0627, -0.7371,  1.0526],
         [ 0.2441, -0.3386,  0.5595,  ...,  0.7182,  0.1681, -0.6470],
         ...,
         [-0.7117,  0.3615, -0.8833,  ..., -1.1485, -1.2961,  1.8590],
         [-0.7190, -0.8620, -0.0986,  ..., -0.4140, -1.4799,  0.3100],
         [ 1.0177, -0.7289, -1.1333,  ..., -0.2467, -0.2738, -1.6587]],

        [[-0.0739, -0.8186,  0.5769,  ...,  0.2948,  1.0150,  0.1569],
         [-1.8702,  1.6799,  0.1367,  ..., -0.2867, -1.0108,  0.0943],
         [-0.4603,  1.5617,  0.2640,  ...,  0.1935, -0.5454,  0.6799],
         ...,
         [-1.3901, -1.6451,  0.1485,  ...,  1.1697, -0.8514,  0.2750],
         [-0.5701,  0.2897,  0.7541,  ..., -0.3331,  2.8020, -0.0546],
         [ 0.8065, -0.4285, -0.1639,  ...,  0.9123,  0.3787, -1.0350]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[-0.4970,  2.2639,  0.3168,  ..., -0.7481, -0.4873,  0.6079],
          [-0.9806, -0.0204,  0.3675,  ...,  0.0584, -0.7290,  1.0474],
          [ 0.2504, -0.3469,  0.5542,  ...,  0.7115,  0.1609, -0.6404],
          ...,
          [-0.7174,  0.3548, -0.8807,  ..., -1.1444, -1.3020,  1.8605],
          [-0.7138, -0.8592, -0.1049,  ..., -0.4072, -1.4865,  0.3165],
          [ 1.0230, -0.7365, -1.1349,  ..., -0.2510, -0.2789, -1.6567]],

         [[-0.0816, -0.8173,  0.5686,  ...,  0.2992,  1.0238,  0.1507],
          [-1.8731,  1.6879,  0.1298,  ..., -0.2855, -1.0179,  0.0861],
          [-0.4662,  1.5549,  0.2559,  ...,  0.1889, -0.5370,  0.6718],
          ...,
          [-1.3861, -1.6383,  0.1411,  ...,  1.1674, -0.8439,  0.2693],
          [-0.5698,  0.2933,  0.7522,  ..., -0.3273,  2.8055, -0.0621],
          [ 0.8004, -0.4300, -0.1695,  ...,  0.9123,  0.3844, -1.0420]]],


        [[[ 1.0241, -1.2320, -0.2781,  ..., -0.5403,  1.7403, -0.4783],
          [-1.9313,  1.1684, -0.2596,  ...,  2.0216,  1.8853,  2.0892],
          [-0.0826,  1.8380,  0.0066,  ..., -1.0042,  0.3050, -0.9146],
          ...,
          [-0.3058, -0.0092, -0.1171,  ..., -0.0088, -0.6559, -0.0919],
          [-1.4979,  1.8751,  1.9932,  ..., -0.1587, -0.5846, -1.0582],
          [ 0.0863, -1.4769, -0.6959,  ..., -0.2504, -0.6588,  0.3020]],

         [[ 1.2965, -0.5548, -0.4640,  ...,  0.0575, -0.4109,  0.3197],
          [-0.0620,  0.5362, -1.2460,  ...,  1.9556, -0.7476,  0.5348],
          [-0.3456,  0.1310,  0.0634,  ...,  0.9152, -0.1211,  0.9330],
          ...,
          [-1.0872, -0.8510, -0.6045,  ...,  0.1797,  1.4367, -1.5307],
          [-0.4269, -0.0493, -0.7121,  ...,  0.6683,  0.6741,  0.9682],
          [ 0.4067, -0.3145,  0.0775,  ..., -0.1437, -0.7023,  0.9210]]],


        [[[-0.9227, -0.5431,  0.7586,  ...,  0.3523, -1.9056, -0.9553],
          [-1.7676, -0.8526, -0.2472,  ...,  0.9808, -0.4551,  1.2659],
          [-1.1732, -0.6790,  0.1623,  ..., -1.2021, -0.1616,  1.2253],
          ...,
          [ 0.3210, -0.7103, -1.5928,  ...,  0.1011,  1.3175, -0.4104],
          [ 0.1072,  0.4838,  0.4891,  ...,  1.1886, -0.1923, -0.2839],
          [-0.1929,  1.1174, -0.2984,  ..., -1.6902,  0.6854, -0.0580]],

         [[ 2.5347, -0.2610,  0.2995,  ..., -0.4092,  2.4706,  0.6863],
          [-0.4076,  0.2875, -0.3890,  ...,  0.6389, -1.7619,  2.6301],
          [-1.9222,  0.4976,  2.0774,  ..., -0.4002,  1.3378,  0.6970],
          ...,
          [-0.3848,  0.0702, -0.8649,  ..., -1.5617, -0.4654,  1.1312],
          [-0.7461,  0.0180,  0.7392,  ..., -2.2759, -0.7119,  0.2704],
          [ 0.8074, -0.4282, -0.1670,  ..., -0.2099, -0.0379, -0.3341]]],


        [[[ 0.2682,  0.3305, -0.7167,  ...,  0.1551,  0.0086,  0.1584],
          [-0.4525,  1.6436,  0.4858,  ...,  0.8340, -0.1635,  0.6629],
          [-0.4727,  0.5213, -0.5199,  ...,  2.4625,  0.5815,  0.3103],
          ...,
          [-0.9120,  1.2292, -0.2826,  ...,  0.5660, -0.3712,  0.6344],
          [ 0.2016,  0.7886,  0.9672,  ...,  0.7346,  0.9409,  0.2614],
          [-0.4395, -0.6415,  0.3695,  ...,  1.1223,  0.0577, -1.1117]],

         [[-0.6476, -0.6903, -0.8588,  ...,  0.2701,  0.4413,  1.4991],
          [ 0.7037, -0.2673,  0.8351,  ...,  0.9089,  0.6877, -0.5072],
          [ 1.4381,  0.6348, -0.2995,  ..., -0.0139, -0.9174, -1.1137],
          ...,
          [ 0.3806, -0.0056,  1.0541,  ...,  0.6287,  1.6146, -0.5685],
          [ 0.8659, -0.6638,  1.1142,  ...,  1.4118, -2.4627, -0.8036],
          [-1.0117, -1.0371, -0.0494,  ...,  1.9011,  0.0475,  0.7846]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 0.6224, -1.9212,  1.2367,  ...,  0.6449, -0.4819, -1.5032],
          [-1.5373, -0.4187,  0.4363,  ..., -0.2746, -0.6200,  0.6548],
          [ 0.0675, -0.3481,  0.5451,  ..., -0.8228,  0.4354,  0.8691],
          ...,
          [ 0.7906, -0.5873,  1.5084,  ...,  0.5511, -1.1493,  1.2165],
          [-0.8125, -1.3325,  1.8838,  ...,  1.0337, -1.5018, -0.8161],
          [-0.3675, -0.5276,  0.7729,  ...,  2.8274, -1.3142, -1.1399]],

         [[ 0.5565, -0.0390, -0.8427,  ..., -0.1499,  0.1609, -0.3708],
          [ 0.6361, -1.9448,  0.9313,  ...,  1.4809,  0.3650,  0.8743],
          [ 1.0969,  0.6743, -0.5783,  ...,  0.9623,  2.1789,  1.2378],
          ...,
          [-0.5996,  1.6268,  0.2087,  ...,  0.0094, -1.4427, -0.4361],
          [-0.6408, -0.2456, -0.2026,  ...,  0.9922,  0.3372,  2.8946],
          [-0.2182,  0.4604,  0.9189,  ..., -0.5337, -0.2212,  1.1185]]],


        [[[ 0.5131,  1.4116,  0.0616,  ...,  1.1173, -0.1973, -0.7199],
          [ 0.3558, -0.8852,  0.3718,  ...,  2.1982,  1.1047,  0.1154],
          [ 1.1394, -0.3487, -0.9000,  ...,  1.5151,  0.4536,  0.2622],
          ...,
          [ 0.1394, -0.5405,  0.8008,  ...,  0.3854, -0.2094, -1.2869],
          [ 1.2415, -0.3857,  0.6045,  ...,  0.8857, -0.4243, -0.1028],
          [ 1.2652,  0.9387,  0.1661,  ...,  0.6283,  0.7664, -1.3915]],

         [[-0.6433, -0.7129, -1.4186,  ..., -0.2028,  0.9577, -1.5959],
          [ 1.0202,  0.5090, -1.0601,  ..., -1.8601,  1.0231, -1.6473],
          [ 0.2794,  0.4079, -0.4182,  ...,  0.9885, -0.4738,  0.4116],
          ...,
          [-1.3868,  2.4417,  0.2058,  ...,  1.5202,  3.0079,  0.7696],
          [-0.8282,  0.5131,  0.5572,  ..., -0.2870, -0.0720,  1.0121],
          [ 0.3150, -0.4484,  0.6587,  ...,  2.9766, -1.8073,  0.7228]]],


        [[[-0.7342, -0.0647, -0.6026,  ..., -0.0547,  1.3784, -1.2979],
          [ 0.9494,  1.2122, -0.0890,  ...,  0.4032, -1.1572, -0.5272],
          [ 0.3711, -1.1336,  0.9893,  ..., -0.6166,  0.6541, -1.5836],
          ...,
          [ 0.5735, -1.4159, -0.0936,  ..., -2.4330, -0.6362,  0.3566],
          [-0.9638,  0.4756,  0.1425,  ...,  0.3181,  0.4148, -1.0495],
          [ 0.2670,  0.5566,  0.1061,  ..., -0.3943, -0.0131,  2.6139]],

         [[ 1.1959, -0.9961,  0.5229,  ...,  0.2395, -0.2717,  0.3610],
          [-1.2154,  3.3017, -1.7036,  ...,  2.4876, -1.4080,  0.6273],
          [-0.7062,  0.9694, -1.9235,  ..., -1.3765, -0.2803,  0.4902],
          ...,
          [ 0.7228, -1.2160,  2.5610,  ...,  0.8606,  1.4799,  0.6936],
          [ 0.9029,  0.6427, -0.7158,  ...,  1.3129,  0.2227,  0.7215],
          [ 0.7875, -0.2791, -0.7385,  ..., -0.3956, -0.2004, -0.4358]]],


        [[[-0.1992, -1.5377,  1.3688,  ..., -0.1336, -0.5199,  0.5330],
          [ 0.4436, -0.1479,  0.7679,  ...,  1.0738, -0.6138,  1.3132],
          [-0.6363,  0.3905, -0.1031,  ...,  2.6772, -0.9491,  0.0258],
          ...,
          [ 1.2642, -1.0247,  1.9166,  ...,  0.9418,  0.8259, -0.1733],
          [-0.8350, -0.5247, -0.8106,  ...,  1.8018, -0.0112, -0.1142],
          [ 1.7280,  1.0304, -1.5494,  ...,  0.8453,  0.4235,  1.2472]],

         [[ 0.6747, -1.4953,  0.7525,  ..., -0.4494,  1.1109, -0.2960],
          [ 1.4105, -0.7764, -0.4434,  ...,  0.1981,  0.7902, -0.2173],
          [-0.2893,  0.2248, -0.0984,  ..., -1.0045, -0.7920,  1.5641],
          ...,
          [-0.0126, -0.4412,  0.6240,  ...,  0.6325,  0.3488, -0.9066],
          [-0.7775, -0.1785, -1.3165,  ...,  0.0399,  0.8144,  0.0883],
          [ 0.2749, -0.1924,  1.0889,  ..., -0.2029, -0.1004, -0.0227]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
IDX = 0 :  tensor([[[ 0.0343, -0.2334,  0.4788,  ..., -0.0929,  0.1450, -0.3251],
         [-0.7341, -0.4940, -0.2156,  ...,  0.5350,  1.0375,  1.0415],
         [ 0.3958, -2.1779, -0.8290,  ..., -0.7251, -0.4704,  0.1003],
         ...,
         [-1.1393,  0.2475,  0.5941,  ..., -0.9842,  2.8566,  0.4793],
         [-1.4402,  0.6377, -1.6379,  ..., -0.3628,  0.0999,  1.7243],
         [ 0.1864, -0.3719, -0.7312,  ...,  0.1181,  1.7421,  0.0802]],

        [[ 0.0495, -0.7851,  1.0606,  ..., -0.3579, -0.4689, -0.8269],
         [ 0.9378,  0.7106,  1.3561,  ..., -0.2588,  1.2962, -0.9331],
         [ 0.4924, -0.2607, -0.7736,  ...,  1.4423, -0.4958, -0.0564],
         ...,
         [-0.0044,  0.3112,  0.1108,  ..., -0.8615,  1.0416, -0.5881],
         [-1.0558, -0.5200, -0.2587,  ..., -0.5361,  1.9887, -0.5371],
         [-0.1789,  0.7529, -1.0649,  ..., -1.1639, -0.8442, -1.2090]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.4970,  2.2639,  0.3168,  ..., -0.7481, -0.4873,  0.6079],
         [-0.9806, -0.0204,  0.3675,  ...,  0.0584, -0.7290,  1.0474],
         [ 0.2504, -0.3469,  0.5542,  ...,  0.7115,  0.1609, -0.6404],
         ...,
         [-0.7174,  0.3548, -0.8807,  ..., -1.1444, -1.3020,  1.8605],
         [-0.7138, -0.8592, -0.1049,  ..., -0.4072, -1.4865,  0.3165],
         [ 1.0230, -0.7365, -1.1349,  ..., -0.2510, -0.2789, -1.6567]],

        [[-0.0816, -0.8173,  0.5686,  ...,  0.2992,  1.0238,  0.1507],
         [-1.8731,  1.6879,  0.1298,  ..., -0.2855, -1.0179,  0.0861],
         [-0.4662,  1.5549,  0.2559,  ...,  0.1889, -0.5370,  0.6718],
         ...,
         [-1.3861, -1.6383,  0.1411,  ...,  1.1674, -0.8439,  0.2693],
         [-0.5698,  0.2933,  0.7522,  ..., -0.3273,  2.8055, -0.0621],
         [ 0.8004, -0.4300, -0.1695,  ...,  0.9123,  0.3844, -1.0420]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 676.544, Val Loss : 2354.689
======> Trajectory Loss : 456.243, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.363, BelowGroundPenalize Loss : 83.992
===> [Minibatch 5/129].........IDX = 0 :  tensor([[[ 0.0343, -0.2334,  0.4788,  ..., -0.0929,  0.1450, -0.3251],
         [-0.7341, -0.4940, -0.2156,  ...,  0.5350,  1.0375,  1.0415],
         [ 0.3958, -2.1779, -0.8290,  ..., -0.7251, -0.4704,  0.1003],
         ...,
         [-1.1393,  0.2475,  0.5941,  ..., -0.9842,  2.8566,  0.4793],
         [-1.4402,  0.6377, -1.6379,  ..., -0.3628,  0.0999,  1.7243],
         [ 0.1864, -0.3719, -0.7312,  ...,  0.1181,  1.7421,  0.0802]],

        [[ 0.0495, -0.7851,  1.0606,  ..., -0.3579, -0.4689, -0.8269],
         [ 0.9378,  0.7106,  1.3561,  ..., -0.2588,  1.2962, -0.9331],
         [ 0.4924, -0.2607, -0.7736,  ...,  1.4423, -0.4958, -0.0564],
         ...,
         [-0.0044,  0.3112,  0.1108,  ..., -0.8615,  1.0416, -0.5881],
         [-1.0558, -0.5200, -0.2587,  ..., -0.5361,  1.9887, -0.5371],
         [-0.1789,  0.7529, -1.0649,  ..., -1.1639, -0.8442, -1.2090]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.4970,  2.2639,  0.3168,  ..., -0.7481, -0.4873,  0.6079],
         [-0.9806, -0.0204,  0.3675,  ...,  0.0584, -0.7290,  1.0474],
         [ 0.2504, -0.3469,  0.5542,  ...,  0.7115,  0.1609, -0.6404],
         ...,
         [-0.7174,  0.3548, -0.8807,  ..., -1.1444, -1.3020,  1.8605],
         [-0.7138, -0.8592, -0.1049,  ..., -0.4072, -1.4865,  0.3165],
         [ 1.0230, -0.7365, -1.1349,  ..., -0.2510, -0.2789, -1.6567]],

        [[-0.0816, -0.8173,  0.5686,  ...,  0.2992,  1.0238,  0.1507],
         [-1.8731,  1.6879,  0.1298,  ..., -0.2855, -1.0179,  0.0861],
         [-0.4662,  1.5549,  0.2559,  ...,  0.1889, -0.5370,  0.6718],
         ...,
         [-1.3861, -1.6383,  0.1411,  ...,  1.1674, -0.8439,  0.2693],
         [-0.5698,  0.2933,  0.7522,  ..., -0.3273,  2.8055, -0.0621],
         [ 0.8004, -0.4300, -0.1695,  ...,  0.9123,  0.3844, -1.0420]]],
       device='cuda:0', grad_fn=<SelectBackward>)
h tensor([[[[-4.9298e-01,  2.2572e+00,  3.1190e-01,  ..., -7.4962e-01,
           -4.8831e-01,  6.1296e-01],
          [-9.7365e-01, -1.6968e-02,  3.6149e-01,  ...,  5.4226e-02,
           -7.2206e-01,  1.0439e+00],
          [ 2.5555e-01, -3.5395e-01,  5.4968e-01,  ...,  7.0577e-01,
            1.5468e-01, -6.3458e-01],
          ...,
          [-7.2169e-01,  3.4795e-01, -8.7853e-01,  ..., -1.1403e+00,
           -1.3076e+00,  1.8629e+00],
          [-7.0910e-01, -8.5766e-01, -1.1059e-01,  ..., -4.0127e-01,
           -1.4923e+00,  3.2253e-01],
          [ 1.0276e+00, -7.4345e-01, -1.1355e+00,  ..., -2.5446e-01,
           -2.8343e-01, -1.6547e+00]],

         [[-8.7940e-02, -8.1629e-01,  5.6144e-01,  ...,  3.0287e-01,
            1.0312e+00,  1.4554e-01],
          [-1.8755e+00,  1.6946e+00,  1.2397e-01,  ..., -2.8461e-01,
           -1.0237e+00,  7.9310e-02],
          [-4.7119e-01,  1.5491e+00,  2.4908e-01,  ...,  1.8512e-01,
           -5.2991e-01,  6.6497e-01],
          ...,
          [-1.3827e+00, -1.6326e+00,  1.3478e-01,  ...,  1.1654e+00,
           -8.3762e-01,  2.6443e-01],
          [-5.6951e-01,  2.9630e-01,  7.5048e-01,  ..., -3.2247e-01,
            2.8085e+00, -6.8438e-02],
          [ 7.9523e-01, -4.3140e-01, -1.7415e-01,  ...,  9.1219e-01,
            3.8925e-01, -1.0478e+00]]],


        [[[ 1.0206e+00, -1.2301e+00, -2.7193e-01,  ..., -5.4624e-01,
            1.7447e+00, -4.8402e-01],
          [-1.9335e+00,  1.1748e+00, -2.5389e-01,  ...,  2.0276e+00,
            1.8904e+00,  2.0954e+00],
          [-8.8565e-02,  1.8449e+00,  1.3086e-02,  ..., -9.9861e-01,
            3.1165e-01, -9.0811e-01],
          ...,
          [-3.0263e-01, -2.5093e-03, -1.1104e-01,  ..., -3.1937e-03,
           -6.4990e-01, -8.4827e-02],
          [-1.4936e+00,  1.8782e+00,  1.9896e+00,  ..., -1.6379e-01,
           -5.7880e-01, -1.0550e+00],
          [ 9.1720e-02, -1.4736e+00, -6.9205e-01,  ..., -2.4346e-01,
           -6.5241e-01,  3.0948e-01]],

         [[ 1.3022e+00, -5.6123e-01, -4.7101e-01,  ...,  5.7311e-02,
           -4.0626e-01,  3.1534e-01],
          [-5.9985e-02,  5.2922e-01, -1.2489e+00,  ...,  1.9620e+00,
           -7.4188e-01,  5.2845e-01],
          [-3.5224e-01,  1.3429e-01,  6.9768e-02,  ...,  9.2146e-01,
           -1.2204e-01,  9.2672e-01],
          ...,
          [-1.0875e+00, -8.4592e-01, -6.0168e-01,  ...,  1.8510e-01,
            1.4436e+00, -1.5375e+00],
          [-4.2317e-01, -5.1890e-02, -7.0755e-01,  ...,  6.6705e-01,
            6.7991e-01,  9.6743e-01],
          [ 4.0172e-01, -3.1013e-01,  8.3341e-02,  ..., -1.3815e-01,
           -6.9734e-01,  9.1521e-01]]],


        [[[-9.2901e-01, -5.4340e-01,  7.5325e-01,  ...,  3.5597e-01,
           -1.9090e+00, -9.5526e-01],
          [-1.7741e+00, -8.5792e-01, -2.4055e-01,  ...,  9.8541e-01,
           -4.4928e-01,  1.2614e+00],
          [-1.1797e+00, -6.8610e-01,  1.6552e-01,  ..., -1.1955e+00,
           -1.5544e-01,  1.2230e+00],
          ...,
          [ 3.1523e-01, -7.1232e-01, -1.5954e+00,  ...,  1.0761e-01,
            1.3219e+00, -4.0570e-01],
          [ 1.0178e-01,  4.8414e-01,  4.9221e-01,  ...,  1.1938e+00,
           -1.8604e-01, -2.7824e-01],
          [-1.9948e-01,  1.1101e+00, -2.9432e-01,  ..., -1.6876e+00,
            6.9016e-01, -6.3015e-02]],

         [[ 2.5283e+00, -2.6295e-01,  2.9476e-01,  ..., -4.1622e-01,
            2.4722e+00,  6.9178e-01],
          [-4.1398e-01,  2.9407e-01, -3.9117e-01,  ...,  6.4468e-01,
           -1.7668e+00,  2.6373e+00],
          [-1.9289e+00,  5.0402e-01,  2.0707e+00,  ..., -4.0699e-01,
            1.3405e+00,  7.0187e-01],
          ...,
          [-3.9159e-01,  7.4535e-02, -8.5872e-01,  ..., -1.5683e+00,
           -4.6506e-01,  1.1380e+00],
          [-7.5223e-01,  2.2515e-02,  7.3493e-01,  ..., -2.2818e+00,
           -7.1081e-01,  2.7576e-01],
          [ 8.0077e-01, -4.3519e-01, -1.6452e-01,  ..., -2.1611e-01,
           -4.4963e-02, -3.2755e-01]]],


        [[[ 2.6951e-01,  3.3192e-01, -7.1196e-01,  ...,  1.5897e-01,
            9.6461e-03,  1.5333e-01],
          [-4.5324e-01,  1.6387e+00,  4.8951e-01,  ...,  8.3348e-01,
           -1.5818e-01,  6.6532e-01],
          [-4.6646e-01,  5.1544e-01, -5.1275e-01,  ...,  2.4567e+00,
            5.8670e-01,  3.0443e-01],
          ...,
          [-9.1687e-01,  1.2266e+00, -2.7866e-01,  ...,  5.7040e-01,
           -3.6932e-01,  6.3106e-01],
          [ 2.0569e-01,  7.8780e-01,  9.6851e-01,  ...,  7.3103e-01,
            9.3930e-01,  2.5541e-01],
          [-4.4431e-01, -6.3731e-01,  3.7525e-01,  ...,  1.1290e+00,
            6.4676e-02, -1.1153e+00]],

         [[-6.5070e-01, -6.9277e-01, -8.6301e-01,  ...,  2.7081e-01,
            4.3547e-01,  1.4928e+00],
          [ 7.0229e-01, -2.7308e-01,  8.2913e-01,  ...,  9.1370e-01,
            6.9164e-01, -5.0163e-01],
          [ 1.4437e+00,  6.2810e-01, -3.0669e-01,  ..., -7.1037e-03,
           -9.2390e-01, -1.1192e+00],
          ...,
          [ 3.8483e-01, -1.0024e-02,  1.0482e+00,  ...,  6.3482e-01,
            1.6120e+00, -5.6643e-01],
          [ 8.7044e-01, -6.6124e-01,  1.1186e+00,  ...,  1.4170e+00,
           -2.4587e+00, -8.0262e-01],
          [-1.0174e+00, -1.0427e+00, -5.5508e-02,  ...,  1.9066e+00,
            4.1708e-02,  7.8304e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[ 0.6257, -1.9275,  1.2318,  ...,  0.6415, -0.4798, -1.5029],
          [-1.5387, -0.4254,  0.4409,  ..., -0.2686, -0.6157,  0.6552],
          [ 0.0662, -0.3552,  0.5422,  ..., -0.8227,  0.4309,  0.8696],
          ...,
          [ 0.7882, -0.5940,  1.5060,  ...,  0.5561, -1.1482,  1.2158],
          [-0.8129, -1.3387,  1.8780,  ...,  1.0385, -1.5009, -0.8223],
          [-0.3628, -0.5357,  0.7785,  ...,  2.8266, -1.3187, -1.1421]],

         [[ 0.5516, -0.0463, -0.8500,  ..., -0.1433,  0.1654, -0.3654],
          [ 0.6305, -1.9519,  0.9249,  ...,  1.4865,  0.3717,  0.8800],
          [ 1.0905,  0.6674, -0.5851,  ...,  0.9698,  2.1838,  1.2444],
          ...,
          [-0.6036,  1.6198,  0.2014,  ...,  0.0143, -1.4379, -0.4290],
          [-0.6449, -0.2519, -0.2068,  ...,  0.9960,  0.3424,  2.8981],
          [-0.2246,  0.4533,  0.9128,  ..., -0.5289, -0.2168,  1.1226]]],


        [[[ 0.5183,  1.4056,  0.0601,  ...,  1.1226, -0.1912, -0.7229],
          [ 0.3631, -0.8929,  0.3698,  ...,  2.2046,  1.1104,  0.1203],
          [ 1.1444, -0.3563, -0.8993,  ...,  1.5205,  0.4605,  0.2567],
          ...,
          [ 0.1451, -0.5476,  0.7996,  ...,  0.3910, -0.2038, -1.2828],
          [ 1.2457, -0.3918,  0.6012,  ...,  0.8911, -0.4188, -0.1088],
          [ 1.2723,  0.9305,  0.1708,  ...,  0.6339,  0.7669, -1.3920]],

         [[-0.6492, -0.7191, -1.4251,  ..., -0.1953,  0.9643, -1.5893],
          [ 1.0142,  0.5015, -1.0655,  ..., -1.8545,  1.0291, -1.6412],
          [ 0.2728,  0.4008, -0.4255,  ...,  0.9954, -0.4706,  0.4185],
          ...,
          [-1.3911,  2.4360,  0.1990,  ...,  1.5267,  3.0125,  0.7770],
          [-0.8331,  0.5064,  0.5520,  ..., -0.2808, -0.0678,  1.0172],
          [ 0.3083, -0.4554,  0.6530,  ...,  2.9827, -1.8025,  0.7284]]],


        [[[-0.7330, -0.0710, -0.6084,  ..., -0.0497,  1.3836, -1.3008],
          [ 0.9447,  1.2050, -0.0934,  ...,  0.4092, -1.1501, -0.5265],
          [ 0.3695, -1.1405,  0.9829,  ..., -0.6129,  0.6612, -1.5895],
          ...,
          [ 0.5689, -1.4225, -0.0982,  ..., -2.4272, -0.6295,  0.3595],
          [-0.9694,  0.4697,  0.1371,  ...,  0.3229,  0.4206, -1.0549],
          [ 0.2717,  0.5487,  0.1044,  ..., -0.3952, -0.0076,  2.6091]],

         [[ 1.1889, -1.0018,  0.5166,  ...,  0.2465, -0.2756,  0.3674],
          [-1.2224,  3.2962, -1.7091,  ...,  2.4945, -1.4101,  0.6335],
          [-0.7127,  0.9632, -1.9305,  ..., -1.3694, -0.2844,  0.4970],
          ...,
          [ 0.7161, -1.2189,  2.5555,  ...,  0.8673,  1.4797,  0.7011],
          [ 0.8976,  0.6370, -0.7208,  ...,  1.3184,  0.2249,  0.7263],
          [ 0.7805, -0.2863, -0.7437,  ..., -0.3899, -0.2050, -0.4305]]],


        [[[-0.1972, -1.5431,  1.3639,  ..., -0.1292, -0.5149,  0.5286],
          [ 0.4385, -0.1548,  0.7632,  ...,  1.0751, -0.6072,  1.3117],
          [-0.6369,  0.3829, -0.1091,  ...,  2.6730, -0.9415,  0.0198],
          ...,
          [ 1.2610, -1.0307,  1.9151,  ...,  0.9468,  0.8316, -0.1739],
          [-0.8371, -0.5310, -0.8157,  ...,  1.8060, -0.0055, -0.1200],
          [ 1.7306,  1.0222, -1.5481,  ...,  0.8392,  0.4302,  1.2415]],

         [[ 0.6693, -1.4999,  0.7473,  ..., -0.4417,  1.1087, -0.2896],
          [ 1.4053, -0.7836, -0.4483,  ...,  0.2051,  0.7917, -0.2109],
          [-0.2956,  0.2180, -0.1052,  ..., -0.9974, -0.7919,  1.5707],
          ...,
          [-0.0131, -0.4470,  0.6196,  ...,  0.6393,  0.3531, -0.8995],
          [-0.7810, -0.1839, -1.3180,  ...,  0.0464,  0.8173,  0.0937],
          [ 0.2684, -0.2001,  1.0841,  ..., -0.1962, -0.0981, -0.0174]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
IDX = 0 :  tensor([[[ 0.0294, -0.2336,  0.4846,  ..., -0.0877,  0.1492, -0.3202],
         [-0.7425, -0.4857, -0.2080,  ...,  0.5324,  1.0327,  1.0478],
         [ 0.4041, -2.1714, -0.8213,  ..., -0.7159, -0.4757,  0.0991],
         ...,
         [-1.1345,  0.2450,  0.6001,  ..., -0.9809,  2.8577,  0.4747],
         [-1.4321,  0.6422, -1.6307,  ..., -0.3553,  0.1062,  1.7229],
         [ 0.1878, -0.3643, -0.7216,  ...,  0.1270,  1.7407,  0.0726]],

        [[ 0.0586, -0.7871,  1.0685,  ..., -0.3512, -0.4741, -0.8337],
         [ 0.9297,  0.7042,  1.3652,  ..., -0.2674,  1.3054, -0.9320],
         [ 0.4988, -0.2642, -0.7654,  ...,  1.4360, -0.5019, -0.0652],
         ...,
         [-0.0038,  0.3111,  0.1184,  ..., -0.8531,  1.0488, -0.5920],
         [-1.0649, -0.5217, -0.2674,  ..., -0.5454,  1.9974, -0.5463],
         [-0.1877,  0.7592, -1.0725,  ..., -1.1716, -0.8442, -1.2167]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.4930,  2.2572,  0.3119,  ..., -0.7496, -0.4883,  0.6130],
         [-0.9736, -0.0170,  0.3615,  ...,  0.0542, -0.7221,  1.0439],
         [ 0.2556, -0.3540,  0.5497,  ...,  0.7058,  0.1547, -0.6346],
         ...,
         [-0.7217,  0.3480, -0.8785,  ..., -1.1403, -1.3076,  1.8629],
         [-0.7091, -0.8577, -0.1106,  ..., -0.4013, -1.4923,  0.3225],
         [ 1.0276, -0.7434, -1.1355,  ..., -0.2545, -0.2834, -1.6547]],

        [[-0.0879, -0.8163,  0.5614,  ...,  0.3029,  1.0312,  0.1455],
         [-1.8755,  1.6946,  0.1240,  ..., -0.2846, -1.0237,  0.0793],
         [-0.4712,  1.5491,  0.2491,  ...,  0.1851, -0.5299,  0.6650],
         ...,
         [-1.3827, -1.6326,  0.1348,  ...,  1.1654, -0.8376,  0.2644],
         [-0.5695,  0.2963,  0.7505,  ..., -0.3225,  2.8085, -0.0684],
         [ 0.7952, -0.4314, -0.1742,  ...,  0.9122,  0.3892, -1.0478]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 592.767, Val Loss : 1931.960
======> Trajectory Loss : 391.888, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.352, BelowGroundPenalize Loss : 65.643
===> [Minibatch 6/129].........IDX = 0 :  tensor([[[ 0.0294, -0.2336,  0.4846,  ..., -0.0877,  0.1492, -0.3202],
         [-0.7425, -0.4857, -0.2080,  ...,  0.5324,  1.0327,  1.0478],
         [ 0.4041, -2.1714, -0.8213,  ..., -0.7159, -0.4757,  0.0991],
         ...,
         [-1.1345,  0.2450,  0.6001,  ..., -0.9809,  2.8577,  0.4747],
         [-1.4321,  0.6422, -1.6307,  ..., -0.3553,  0.1062,  1.7229],
         [ 0.1878, -0.3643, -0.7216,  ...,  0.1270,  1.7407,  0.0726]],

        [[ 0.0586, -0.7871,  1.0685,  ..., -0.3512, -0.4741, -0.8337],
         [ 0.9297,  0.7042,  1.3652,  ..., -0.2674,  1.3054, -0.9320],
         [ 0.4988, -0.2642, -0.7654,  ...,  1.4360, -0.5019, -0.0652],
         ...,
         [-0.0038,  0.3111,  0.1184,  ..., -0.8531,  1.0488, -0.5920],
         [-1.0649, -0.5217, -0.2674,  ..., -0.5454,  1.9974, -0.5463],
         [-0.1877,  0.7592, -1.0725,  ..., -1.1716, -0.8442, -1.2167]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[-0.4930,  2.2572,  0.3119,  ..., -0.7496, -0.4883,  0.6130],
         [-0.9736, -0.0170,  0.3615,  ...,  0.0542, -0.7221,  1.0439],
         [ 0.2556, -0.3540,  0.5497,  ...,  0.7058,  0.1547, -0.6346],
         ...,
         [-0.7217,  0.3480, -0.8785,  ..., -1.1403, -1.3076,  1.8629],
         [-0.7091, -0.8577, -0.1106,  ..., -0.4013, -1.4923,  0.3225],
         [ 1.0276, -0.7434, -1.1355,  ..., -0.2545, -0.2834, -1.6547]],

        [[-0.0879, -0.8163,  0.5614,  ...,  0.3029,  1.0312,  0.1455],
         [-1.8755,  1.6946,  0.1240,  ..., -0.2846, -1.0237,  0.0793],
         [-0.4712,  1.5491,  0.2491,  ...,  0.1851, -0.5299,  0.6650],
         ...,
         [-1.3827, -1.6326,  0.1348,  ...,  1.1654, -0.8376,  0.2644],
         [-0.5695,  0.2963,  0.7505,  ..., -0.3225,  2.8085, -0.0684],
         [ 0.7952, -0.4314, -0.1742,  ...,  0.9122,  0.3892, -1.0478]]],
       device='cuda:0', grad_fn=<SelectBackward>)
