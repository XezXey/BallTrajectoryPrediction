==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 42.57it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.83it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
torch.Size([4, 2, 1, 32])
torch.Size([4, 2, 1, 32])
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[-0.7020, -2.8953, -0.0844,  1.0618,  0.5194, -1.0457,  0.0628, -0.3053,
          1.0975,  0.4773,  1.6012, -1.2087, -0.1042, -2.3301,  0.0439,  1.2027,
         -1.4591,  0.5514, -1.4880,  1.3353, -0.0804,  0.8914,  1.2289,  0.9612,
          1.4885,  1.2145, -1.8820,  1.1746, -1.3830,  0.9238,  1.1800,  2.1105]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3014,  2.1135, -0.1832, -0.7978,  0.0696,  0.3346,  0.1270, -1.2930,
         -1.5465,  1.8545, -0.2004, -0.1157, -0.3570, -0.6298,  0.2135,  0.9648,
         -2.4361,  1.5779,  1.0642,  2.2542,  1.0137,  0.7060, -1.2845,  0.3785,
         -0.8344, -0.4881, -1.1359, -0.1044, -0.2504, -0.0055,  0.6588,  0.7117]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[-0.6921, -2.8854, -0.0744,  1.0718,  0.5283, -1.0358,  0.0529, -0.2954,
          1.1075,  0.4677,  1.6108, -1.2186, -0.1141, -2.3202,  0.0339,  1.1927,
         -1.4690,  0.5614, -1.4780,  1.3253, -0.0900,  0.9013,  1.2389,  0.9528,
          1.4984,  1.2245, -1.8919,  1.1845, -1.3730,  0.9337,  1.1899,  2.1204]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3114,  2.1228, -0.1932, -0.7878,  0.0596,  0.3246,  0.1171, -1.3029,
         -1.5554,  1.8645, -0.2103, -0.1057, -0.3470, -0.6199,  0.2035,  0.9550,
         -2.4460,  1.5879,  1.0741,  2.2442,  1.0038,  0.6960, -1.2745,  0.3885,
         -0.8443, -0.4781, -1.1459, -0.0945, -0.2405, -0.0155,  0.6687,  0.7017]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 3187.492, Val Loss : 2600.345
======> Trajectory Loss : 3049.680, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.378, BelowGroundPenalize Loss : 0.000
===> [Minibatch 2/5].........BEFORE UPDATE
h tensor([[-0.6921, -2.8854, -0.0744,  1.0718,  0.5283, -1.0358,  0.0529, -0.2954,
          1.1075,  0.4677,  1.6108, -1.2186, -0.1141, -2.3202,  0.0339,  1.1927,
         -1.4690,  0.5614, -1.4780,  1.3253, -0.0900,  0.9013,  1.2389,  0.9528,
          1.4984,  1.2245, -1.8919,  1.1845, -1.3730,  0.9337,  1.1899,  2.1204]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3114,  2.1228, -0.1932, -0.7878,  0.0596,  0.3246,  0.1171, -1.3029,
         -1.5554,  1.8645, -0.2103, -0.1057, -0.3470, -0.6199,  0.2035,  0.9550,
         -2.4460,  1.5879,  1.0741,  2.2442,  1.0038,  0.6960, -1.2745,  0.3885,
         -0.8443, -0.4781, -1.1459, -0.0945, -0.2405, -0.0155,  0.6687,  0.7017]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[-0.6822, -2.8809, -0.0645,  1.0814,  0.5362, -1.0377,  0.0555, -0.2870,
          1.1172,  0.4725,  1.6188, -1.2281, -0.1129, -2.3102,  0.0240,  1.1828,
         -1.4748,  0.5685, -1.4690,  1.3170, -0.0990,  0.9100,  1.2487,  0.9452,
          1.5029,  1.2329, -1.9018,  1.1917, -1.3631,  0.9416,  1.1999,  2.1295]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3199,  2.1307, -0.2029, -0.7795,  0.0497,  0.3146,  0.1074, -1.3126,
         -1.5629,  1.8745, -0.2161, -0.0963, -0.3371, -0.6101,  0.1950,  0.9464,
         -2.4546,  1.5978,  1.0827,  2.2356,  1.0069,  0.6878, -1.2649,  0.3980,
         -0.8521, -0.4695, -1.1553, -0.0869, -0.2313, -0.0234,  0.6783,  0.6971]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 2359.768, Val Loss : 1687.099
======> Trajectory Loss : 2222.312, Gravity Loss : 0.001, EndOfTrajectory Loss : 1.375, BelowGroundPenalize Loss : 0.000
===> [Minibatch 3/5].........BEFORE UPDATE
h tensor([[-0.6822, -2.8809, -0.0645,  1.0814,  0.5362, -1.0377,  0.0555, -0.2870,
          1.1172,  0.4725,  1.6188, -1.2281, -0.1129, -2.3102,  0.0240,  1.1828,
         -1.4748,  0.5685, -1.4690,  1.3170, -0.0990,  0.9100,  1.2487,  0.9452,
          1.5029,  1.2329, -1.9018,  1.1917, -1.3631,  0.9416,  1.1999,  2.1295]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3199,  2.1307, -0.2029, -0.7795,  0.0497,  0.3146,  0.1074, -1.3126,
         -1.5629,  1.8745, -0.2161, -0.0963, -0.3371, -0.6101,  0.1950,  0.9464,
         -2.4546,  1.5978,  1.0827,  2.2356,  1.0069,  0.6878, -1.2649,  0.3980,
         -0.8521, -0.4695, -1.1553, -0.0869, -0.2313, -0.0234,  0.6783,  0.6971]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[-0.6722, -2.8771, -0.0638,  1.0902,  0.5447, -1.0443,  0.0568, -0.2798,
          1.1265,  0.4754,  1.6234, -1.2377, -0.1067, -2.3003,  0.0148,  1.1730,
         -1.4819,  0.5747, -1.4616,  1.3109, -0.1078,  0.9176,  1.2559,  0.9432,
          1.5010,  1.2349, -1.9106,  1.1946, -1.3543,  0.9402,  1.2072,  2.1284]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3258,  2.1388, -0.2124, -0.7721,  0.0402,  0.3046,  0.1123, -1.3128,
         -1.5713,  1.8844, -0.2200, -0.0877, -0.3289, -0.6021,  0.1883,  0.9373,
         -2.4630,  1.6076,  1.0919,  2.2276,  1.0131,  0.6927, -1.2575,  0.4076,
         -0.8521, -0.4639, -1.1642, -0.0895, -0.2261, -0.0311,  0.6878,  0.6936]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
Train Loss : 1307.973, Val Loss : 1147.281
======> Trajectory Loss : 1170.620, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.374, BelowGroundPenalize Loss : 0.000
===> [Minibatch 4/5].........BEFORE UPDATE
h tensor([[-0.6722, -2.8771, -0.0638,  1.0902,  0.5447, -1.0443,  0.0568, -0.2798,
          1.1265,  0.4754,  1.6234, -1.2377, -0.1067, -2.3003,  0.0148,  1.1730,
         -1.4819,  0.5747, -1.4616,  1.3109, -0.1078,  0.9176,  1.2559,  0.9432,
          1.5010,  1.2349, -1.9106,  1.1946, -1.3543,  0.9402,  1.2072,  2.1284]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3258,  2.1388, -0.2124, -0.7721,  0.0402,  0.3046,  0.1123, -1.3128,
         -1.5713,  1.8844, -0.2200, -0.0877, -0.3289, -0.6021,  0.1883,  0.9373,
         -2.4630,  1.6076,  1.0919,  2.2276,  1.0131,  0.6927, -1.2575,  0.4076,
         -0.8521, -0.4639, -1.1642, -0.0895, -0.2261, -0.0311,  0.6878,  0.6936]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
After UPDATE
h tensor([[-0.6647, -2.8734, -0.0641,  1.0969,  0.5520, -1.0508,  0.0570, -0.2741,
          1.1330,  0.4805,  1.6263, -1.2471, -0.1000, -2.2920,  0.0090,  1.1649,
         -1.4890,  0.5794, -1.4577,  1.3055, -0.1163,  0.9256,  1.2616,  0.9455,
          1.5002,  1.2366, -1.9170,  1.1978, -1.3470,  0.9362,  1.2135,  2.1251]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
c tensor([[-0.3295,  2.1456, -0.2207, -0.7657,  0.0324,  0.2962,  0.1158, -1.3090,
         -1.5782,  1.8931, -0.2238, -0.0802, -0.3217, -0.5967,  0.1826,  0.9285,
         -2.4698,  1.6165,  1.0999,  2.2205,  1.0176,  0.6988, -1.2513,  0.4164,
         -0.8508, -0.4606, -1.1732, -0.0935, -0.2241, -0.0373,  0.6964,  0.6919]],
       device='cuda:0') torch.Size([4, 2, 1, 32])
