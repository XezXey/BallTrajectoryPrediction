==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 43.47it/s]
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 22.88it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1754, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1754, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1754, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1755, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........torch.Size([1370])
torch.Size([1381])
torch.Size([165])
torch.Size([1130])
torch.Size([908])
torch.Size([130])
torch.Size([1648])
torch.Size([291])
torch.Size([1350])
torch.Size([484])
torch.Size([110])
torch.Size([1067])
torch.Size([412])
torch.Size([430])
torch.Size([508])
torch.Size([1028])
torch.Size([945])
torch.Size([148])
torch.Size([172])
torch.Size([835])
torch.Size([367])
torch.Size([477])
torch.Size([750])
torch.Size([541])
torch.Size([815])
torch.Size([708])
torch.Size([1128])
torch.Size([775])
torch.Size([482])
torch.Size([565])
torch.Size([456])
torch.Size([139])
torch.Size([821])
torch.Size([793])
torch.Size([1208])
torch.Size([709])
torch.Size([362])
torch.Size([1514])
torch.Size([183])
torch.Size([278])
torch.Size([186])
torch.Size([178])
torch.Size([703])
torch.Size([1039])
torch.Size([712])
torch.Size([1574])
torch.Size([86])
torch.Size([1349])
torch.Size([343])
torch.Size([1062])
torch.Size([514])
torch.Size([434])
torch.Size([340])
torch.Size([773])
torch.Size([230])
torch.Size([912])
torch.Size([489])
torch.Size([880])
torch.Size([260])
torch.Size([937])
torch.Size([1032])
torch.Size([1162])
torch.Size([1063])
torch.Size([1270])
torch.Size([679])
torch.Size([685])
torch.Size([1089])
torch.Size([899])
torch.Size([1123])
torch.Size([661])
torch.Size([665])
torch.Size([906])
torch.Size([479])
torch.Size([324])
torch.Size([505])
torch.Size([118])
torch.Size([590])
torch.Size([515])
torch.Size([1165])
torch.Size([1386])
torch.Size([341])
torch.Size([431])
torch.Size([631])
torch.Size([133])
torch.Size([665])
torch.Size([232])
torch.Size([623])
torch.Size([1147])
torch.Size([1040])
torch.Size([1103])
torch.Size([556])
torch.Size([115])
torch.Size([1219])
torch.Size([948])
torch.Size([493])
torch.Size([124])
torch.Size([899])
torch.Size([64])
torch.Size([15])
torch.Size([1131])
torch.Size([711])
torch.Size([617])
torch.Size([285])
torch.Size([1169])
torch.Size([1120])
torch.Size([1446])
torch.Size([1036])
torch.Size([1174])
torch.Size([923])
torch.Size([1345])
torch.Size([1359])
torch.Size([943])
torch.Size([930])
torch.Size([629])
torch.Size([1564])
torch.Size([244])
torch.Size([476])
torch.Size([506])
torch.Size([513])
torch.Size([241])
torch.Size([1017])
torch.Size([335])
torch.Size([280])
torch.Size([1210])
torch.Size([1022])
torch.Size([1185])
torch.Size([115])
torch.Size([1498])
torch.Size([128, 1648, 3])
tensor([[10.0000],
        [ 9.9934],
        [ 9.9869],
        ...,
        [ 1.0131],
        [ 1.0066],
        [ 1.0000]], device='cuda:0')
tensor([[True],
        [True],
        [True],
        ...,
        [True],
        [True],
        [True]], device='cuda:0')
