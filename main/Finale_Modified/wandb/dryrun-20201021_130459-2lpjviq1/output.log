==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 50.15it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.16it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1576, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1576, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1576, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1577, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1740, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1740, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1740, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1741, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Parameter containing:
tensor([[[[ 0.4736,  1.2822, -2.1682, -0.8314, -0.0853, -0.1278,  0.5648,
           -0.8232,  0.2580, -1.8526,  0.2007, -2.4278,  1.0017,  0.4282,
            2.5261, -0.3359, -0.5091, -1.3422, -1.9494,  1.9331, -0.7990,
            1.5670, -0.2118, -0.9640, -0.4716, -0.9701, -0.0356, -1.8205,
           -0.9010, -0.7396, -1.5184,  0.1576]],

         [[ 0.9769,  0.9297, -1.4511,  0.7945,  0.0479,  0.1698,  2.4652,
           -0.2632, -0.7447, -1.0097,  0.2506,  1.2643, -0.0766,  0.2769,
           -0.2410, -0.4586,  0.1886, -1.3510,  1.5386, -1.6850, -1.4601,
            0.7280, -2.0910, -1.0125,  1.3216,  0.1672,  0.3892, -0.0280,
           -0.5110,  2.5608,  0.3531,  0.7051]]],


        [[[ 0.4896,  1.2163, -1.8003,  1.8341, -0.5120,  1.0779, -0.5150,
           -1.2657, -1.3543, -0.2508,  1.3243,  0.1892, -0.1007, -0.9500,
            0.4588,  0.2357,  1.5315, -0.9387, -0.1425, -0.0238, -0.7256,
           -1.1583,  0.0255,  0.4809, -1.1493, -0.3753, -0.4749, -0.2959,
           -0.3875, -1.7862, -0.4641,  0.5618]],

         [[-0.0891, -1.3436,  0.0219, -0.2326,  1.4060, -1.2038, -1.3827,
            0.3781,  0.2044,  1.3449, -0.6937,  0.5846, -0.0891, -0.8245,
           -1.4811, -0.1587,  1.0100, -0.2427, -1.7485,  0.5430,  1.7347,
           -0.3470,  0.4813, -0.5065, -1.1969, -0.7898,  1.3696, -0.5513,
            0.5755,  1.7156,  2.1408, -0.2944]]],


        [[[-1.2071, -0.8092, -0.5489, -1.8863,  0.1047, -0.1765, -0.9734,
            0.1425,  0.2868, -0.1932, -0.3968,  1.4155, -0.2148,  0.6925,
           -0.9085,  2.7103, -1.0363, -1.0349, -0.9920,  0.6314,  0.5381,
           -0.9779, -0.0164, -0.4662,  0.2772, -0.3339, -1.1803,  1.0618,
            0.9249,  0.7231, -1.3588, -0.2298]],

         [[-1.1333, -1.2801,  0.8984,  1.6317, -0.1700,  0.9030, -1.5762,
            0.8820,  0.0440, -0.1160, -1.3254,  0.8384, -1.7901,  0.5838,
            1.8446,  0.8601,  2.7106,  0.4804, -0.3359,  0.7766,  0.5228,
            1.0315, -0.5904, -2.5533, -1.4267,  0.4729,  0.6698, -1.7772,
           -0.7200, -0.7994,  1.5113,  0.8482]]],


        [[[ 0.0347,  0.6211, -0.5111,  1.7184,  0.4771,  0.5205,  1.1406,
            1.5377,  0.8082,  0.2819, -0.1837, -1.4357, -0.2463,  1.2870,
            0.6099, -0.3218, -0.5090, -0.1566,  0.5013, -1.2167, -0.5334,
            0.1870, -0.1550,  0.3111, -0.5527,  0.1222, -0.0214, -1.1779,
            1.4636,  0.7657,  0.5993,  1.3078]],

         [[ 1.7268, -0.9591,  1.6196,  0.5100, -0.0790, -0.3917, -0.4196,
           -0.1988, -0.2480,  0.7379, -0.7106, -0.2798, -0.3905,  0.9531,
            0.5100, -0.0498, -1.0374, -2.0758, -0.2081, -0.5362, -0.7615,
            0.3125, -0.9533,  0.9953, -0.8290,  0.3301,  2.3070, -0.2650,
            0.3706, -0.4425,  0.8757, -0.3549]]]], device='cuda:0',
       requires_grad=True)
Parameter containing:
tensor([[[[ 1.8861e+00,  1.9791e-01,  2.0677e-01, -7.5510e-01,  3.3657e-01,
            1.6107e+00, -5.2106e-01, -8.3333e-01, -1.5614e-01,  8.3271e-01,
           -1.1707e+00, -7.5984e-01,  5.6772e-01, -2.9225e-01, -4.8946e-01,
            1.6522e-01, -5.3020e-01, -8.9702e-02, -1.0220e+00,  5.4692e-01,
           -4.5688e-02,  2.0711e+00, -1.4881e+00,  5.3470e-01,  1.0036e+00,
            6.4699e-01,  9.5314e-01,  1.6974e-01, -1.1282e+00,  1.0048e+00,
            5.0394e-01, -3.4825e-01]],

         [[ 1.2425e-01, -2.1160e+00,  5.3042e-01,  6.2422e-01,  1.5198e+00,
           -5.5274e-01, -6.0711e-01,  1.8348e+00, -1.2218e-01,  7.8860e-01,
            6.2764e-01,  9.7093e-01, -1.5346e+00, -3.0433e-01, -1.4940e+00,
           -8.2685e-01,  2.0592e+00, -7.6078e-01, -1.6660e+00, -2.6883e-01,
           -1.6667e+00, -1.2774e+00, -3.7317e-01,  3.3276e-01,  1.8900e-01,
            2.4065e+00,  6.9937e-01, -2.9604e-01, -1.6032e+00, -8.5248e-01,
           -8.1912e-01, -9.3779e-01]]],


        [[[ 8.9964e-02, -7.1812e-01,  6.9886e-01, -3.5290e-01, -1.6454e+00,
           -4.9104e-01,  1.3368e+00,  1.0340e+00, -8.2610e-01,  1.5106e+00,
            1.8751e+00,  1.6783e+00, -9.1784e-01,  1.6178e+00, -7.8909e-01,
            5.7964e-01, -8.0897e-01,  1.5710e+00, -2.2846e-01, -1.4388e+00,
            7.8525e-01, -1.4446e+00,  4.9865e-01, -8.0342e-02, -3.4148e-02,
            5.0800e-01, -8.0867e-01,  2.4511e-02,  6.6167e-01,  2.3672e-01,
            6.6454e-01,  1.4705e+00]],

         [[-1.3702e+00, -3.0533e-01,  8.7569e-01,  1.7730e+00, -1.2212e+00,
            6.1775e-02,  1.3295e+00,  3.9210e-01,  4.4953e-01, -6.1261e-01,
            1.4109e+00, -9.1638e-01, -2.4686e-01, -4.3567e-01, -1.9152e+00,
           -1.3201e+00, -1.1448e+00, -2.2000e+00, -1.8909e+00,  1.2694e+00,
           -5.7999e-02,  3.3206e-01, -7.3667e-01,  1.1790e-01, -1.3426e-01,
            1.7564e-01,  4.7756e-01,  4.0205e-01,  4.7591e-01,  9.3049e-01,
           -1.6413e-01,  3.4549e-01]]],


        [[[-1.2902e+00,  1.6553e-01, -1.7304e+00, -1.8215e+00,  1.3722e+00,
           -2.4494e+00,  1.0290e+00, -1.4449e-01,  2.2953e+00,  1.6340e+00,
            1.4668e+00,  1.3705e+00, -2.2364e+00,  2.3989e-01, -8.0218e-01,
           -6.0714e-01,  1.7961e-01, -2.3121e-01, -8.1435e-02,  4.5598e-02,
            1.5252e+00, -1.6030e+00, -7.0480e-01,  2.6589e-01,  3.1218e-01,
            1.7541e+00, -1.5559e+00, -1.0121e+00,  9.7705e-01, -2.2419e-02,
            2.9490e-01, -4.5387e-01]],

         [[-8.3344e-01, -3.4927e-01, -3.4762e-01,  9.0040e-01,  2.1920e-01,
            1.2837e-01,  1.8872e-01,  4.5458e-01, -1.1110e+00, -3.3783e-01,
            4.9676e-01,  3.3040e-01,  3.3622e-01,  5.4179e-01, -1.1100e-01,
            8.9867e-01, -1.9611e-01, -1.0407e-01, -8.2960e-01, -5.2964e-01,
           -8.2761e-01, -1.2785e+00,  1.6559e+00, -7.6338e-01, -4.1950e-01,
           -1.1178e+00,  1.3491e-01,  1.0996e-01, -7.4846e-01, -1.0030e+00,
            6.0772e-01,  2.2060e-01]]],


        [[[-1.0713e-03,  1.0237e+00, -1.5154e+00, -1.0086e+00, -8.0075e-01,
           -7.6926e-01, -5.7522e-01, -1.0611e+00, -4.0599e-01, -1.6906e+00,
            2.3208e-01, -4.7930e-01,  1.5669e+00,  6.1626e-01, -1.9323e-01,
           -6.1201e-01, -7.8559e-01,  6.0954e-01, -5.1607e-01, -6.7226e-01,
            1.1259e+00,  1.5695e+00, -2.5996e+00,  2.1151e-01,  3.0193e-02,
           -1.1915e+00,  1.0902e-01, -3.2242e-01, -4.5363e-01,  9.6572e-01,
            5.4187e-02, -8.0809e-01]],

         [[-3.6524e-01, -8.2008e-01, -1.6140e-01, -1.2745e+00, -1.4125e-01,
            4.3498e-01, -8.1692e-01,  1.0336e+00, -8.2034e-01, -2.1552e-01,
           -4.5114e-03,  9.0239e-01,  4.7412e-01,  2.1524e+00,  2.4749e+00,
           -1.3416e-01,  6.0953e-02,  1.9092e+00, -4.6725e-01, -7.3449e-01,
            6.3648e-01, -7.0130e-01,  1.1430e-01,  1.3630e-02, -3.5507e-01,
           -1.5493e+00,  5.2658e-01,  4.9504e-01, -2.4150e-01,  1.2811e+00,
            7.9459e-02, -6.2005e-01]]]], device='cuda:0', requires_grad=True)
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Parameter containing:
tensor([[[[ 0.4736,  1.2822, -2.1682, -0.8314, -0.0853, -0.1278,  0.5648,
           -0.8232,  0.2580, -1.8526,  0.2007, -2.4278,  1.0017,  0.4282,
            2.5261, -0.3359, -0.5091, -1.3422, -1.9494,  1.9331, -0.7990,
            1.5670, -0.2118, -0.9640, -0.4716, -0.9701, -0.0356, -1.8205,
           -0.9010, -0.7396, -1.5184,  0.1576]],

         [[ 0.9769,  0.9297, -1.4511,  0.7945,  0.0479,  0.1698,  2.4652,
           -0.2632, -0.7447, -1.0097,  0.2506,  1.2643, -0.0766,  0.2769,
           -0.2410, -0.4586,  0.1886, -1.3510,  1.5386, -1.6850, -1.4601,
            0.7280, -2.0910, -1.0125,  1.3216,  0.1672,  0.3892, -0.0280,
           -0.5110,  2.5608,  0.3531,  0.7051]]],


        [[[ 0.4896,  1.2163, -1.8003,  1.8341, -0.5120,  1.0779, -0.5150,
           -1.2657, -1.3543, -0.2508,  1.3243,  0.1892, -0.1007, -0.9500,
            0.4588,  0.2357,  1.5315, -0.9387, -0.1425, -0.0238, -0.7256,
           -1.1583,  0.0255,  0.4809, -1.1493, -0.3753, -0.4749, -0.2959,
           -0.3875, -1.7862, -0.4641,  0.5618]],

         [[-0.0891, -1.3436,  0.0219, -0.2326,  1.4060, -1.2038, -1.3827,
            0.3781,  0.2044,  1.3449, -0.6937,  0.5846, -0.0891, -0.8245,
           -1.4811, -0.1587,  1.0100, -0.2427, -1.7485,  0.5430,  1.7347,
           -0.3470,  0.4813, -0.5065, -1.1969, -0.7898,  1.3696, -0.5513,
            0.5755,  1.7156,  2.1408, -0.2944]]],


        [[[-1.2071, -0.8092, -0.5489, -1.8863,  0.1047, -0.1765, -0.9734,
            0.1425,  0.2868, -0.1932, -0.3968,  1.4155, -0.2148,  0.6925,
           -0.9085,  2.7103, -1.0363, -1.0349, -0.9920,  0.6314,  0.5381,
           -0.9779, -0.0164, -0.4662,  0.2772, -0.3339, -1.1803,  1.0618,
            0.9249,  0.7231, -1.3588, -0.2298]],

         [[-1.1333, -1.2801,  0.8984,  1.6317, -0.1700,  0.9030, -1.5762,
            0.8820,  0.0440, -0.1160, -1.3254,  0.8384, -1.7901,  0.5838,
            1.8446,  0.8601,  2.7106,  0.4804, -0.3359,  0.7766,  0.5228,
            1.0315, -0.5904, -2.5533, -1.4267,  0.4729,  0.6698, -1.7772,
           -0.7200, -0.7994,  1.5113,  0.8482]]],


        [[[ 0.0347,  0.6211, -0.5111,  1.7184,  0.4771,  0.5205,  1.1406,
            1.5377,  0.8082,  0.2819, -0.1837, -1.4357, -0.2463,  1.2870,
            0.6099, -0.3218, -0.5090, -0.1566,  0.5013, -1.2167, -0.5334,
            0.1870, -0.1550,  0.3111, -0.5527,  0.1222, -0.0214, -1.1779,
            1.4636,  0.7657,  0.5993,  1.3078]],

         [[ 1.7268, -0.9591,  1.6196,  0.5100, -0.0790, -0.3917, -0.4196,
           -0.1988, -0.2480,  0.7379, -0.7106, -0.2798, -0.3905,  0.9531,
            0.5100, -0.0498, -1.0374, -2.0758, -0.2081, -0.5362, -0.7615,
            0.3125, -0.9533,  0.9953, -0.8290,  0.3301,  2.3070, -0.2650,
            0.3706, -0.4425,  0.8757, -0.3549]]]], device='cuda:0',
       requires_grad=True)
