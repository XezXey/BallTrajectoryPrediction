==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 45.49it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.09it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1740, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1740, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1740, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1741, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1621, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1621, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1621, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1622, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
LEARNABLE
LEARNABLE
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........BEFORE UPDATE
h tensor([[[[-0.9757, -0.0533,  0.2924,  ...,  0.6116,  0.0174, -0.2688],
          [ 0.1556,  1.9589,  0.2490,  ..., -2.6714, -1.5238, -0.7495],
          [ 0.6792, -1.3455, -0.8093,  ...,  0.0230,  0.7940,  0.6833],
          ...,
          [-0.9531,  0.3007,  0.9779,  ..., -0.2545, -1.3499, -0.6727],
          [ 1.4022,  0.3945, -0.8038,  ...,  0.5314,  0.4362, -0.7391],
          [ 1.1091,  0.6300, -0.4811,  ..., -0.4055, -1.1856, -0.7211]],

         [[ 1.0764,  0.9355, -0.7907,  ...,  1.1504, -1.5903, -1.1459],
          [ 0.5433,  0.1871, -1.2186,  ...,  0.8134, -0.7961, -0.4579],
          [-0.8411, -0.7198, -0.2479,  ...,  0.0222,  0.2843, -0.0357],
          ...,
          [-1.3310,  1.0479,  0.0479,  ...,  0.7459, -1.0264,  0.8410],
          [ 0.1396, -0.0221, -1.5386,  ...,  0.3288,  1.6159, -0.7207],
          [ 0.1656,  0.1471,  0.1389,  ..., -0.9733,  0.0226, -2.1919]]],


        [[[-1.3077,  1.5052, -0.2793,  ...,  0.7739, -0.7985,  1.2658],
          [-0.6665, -0.1567,  0.9980,  ...,  1.3583, -0.8811, -0.6291],
          [ 0.4932,  0.1008,  0.7798,  ..., -0.0269,  0.5701,  0.4545],
          ...,
          [-0.8689, -1.9631,  0.8979,  ...,  0.9115,  1.2667,  0.0500],
          [ 0.4308,  1.1627,  1.3383,  ...,  0.0979, -3.5894,  1.0332],
          [-0.5824,  0.2346, -1.0373,  ...,  0.8351, -0.5653, -0.5564]],

         [[-0.7587, -0.9013, -0.7502,  ..., -0.2893, -0.3696,  0.1781],
          [-0.9968, -1.0464, -0.2339,  ..., -1.3070,  1.0027,  2.0286],
          [ 0.0302, -0.9715,  1.5098,  ...,  2.8433,  1.1458, -0.7253],
          ...,
          [ 0.7162,  0.2268,  1.8810,  ...,  0.1168,  0.2208, -0.0362],
          [-0.7704,  0.6012,  0.5158,  ...,  0.6514,  0.9279,  0.5764],
          [-0.5250,  0.5390,  0.0655,  ..., -2.2976,  0.3241, -1.3671]]],


        [[[ 1.2595,  1.0405, -1.9781,  ...,  0.9773, -2.8368,  2.9703],
          [-0.1695, -0.3058, -2.8557,  ...,  0.5492, -0.2024, -2.0155],
          [ 0.4438,  0.6626, -0.8660,  ..., -0.4091, -0.2124, -0.7738],
          ...,
          [ 0.3229, -1.0893,  0.7127,  ..., -0.1359, -0.4692,  0.2718],
          [ 1.3168,  1.5086,  0.5076,  ...,  0.5155, -0.0351, -0.3452],
          [ 0.4113,  0.8056, -0.2705,  ...,  0.3096,  1.1723,  0.5517]],

         [[-1.7455,  0.4272,  0.4547,  ...,  0.8002,  0.4119, -1.1067],
          [ 0.4480,  0.6783,  1.2745,  ...,  0.8834,  0.4973,  1.0512],
          [ 1.5289,  0.7930,  1.4600,  ..., -0.3586, -1.9788,  0.0263],
          ...,
          [ 0.1712, -0.4610, -1.2565,  ...,  0.6939, -2.0884, -0.6308],
          [ 1.3486, -1.5384, -1.0400,  ..., -0.4071,  1.2639, -0.6296],
          [-0.1587,  0.8573,  1.9356,  ..., -1.7462, -0.7617, -0.6527]]],


        [[[-0.5314,  0.2381, -2.5016,  ..., -0.2868,  0.1082, -1.1591],
          [-1.0736, -0.7692, -1.2356,  ...,  1.0675, -1.2719, -0.2318],
          [ 0.0201,  0.7105,  0.3623,  ...,  0.5886, -0.3473,  0.1512],
          ...,
          [-1.8857, -0.7654,  1.5723,  ...,  0.2311,  0.2279, -0.3442],
          [-0.8162, -0.1208,  1.6808,  ...,  0.2849,  0.9160, -0.7893],
          [ 1.8649,  0.7323,  0.4347,  ...,  0.8388, -0.5489, -0.6147]],

         [[ 0.0108,  0.0927,  1.0424,  ...,  0.7755, -0.2592, -0.9666],
          [-0.5224,  0.6858, -0.8582,  ..., -0.3359,  0.3028, -1.7501],
          [ 1.3278, -0.2936,  1.7422,  ..., -0.1249,  1.7296,  0.5649],
          ...,
          [ 1.2082, -1.5466, -0.0440,  ..., -1.7050, -0.2448,  0.7948],
          [-0.0944,  0.8608, -0.3470,  ...,  0.6595,  0.0159, -0.0916],
          [ 0.2139,  0.4590,  0.8918,  ..., -0.4533, -0.8043,  0.4569]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
c tensor([[[[-0.5878, -0.7878,  0.5714,  ...,  0.0685, -1.0997, -0.8867],
          [-0.4687, -0.8803,  0.9233,  ..., -1.4141,  1.1370,  0.3154],
          [ 0.8764,  0.0283,  2.0833,  ...,  0.2947, -0.1937,  0.6153],
          ...,
          [-1.2615,  0.9133, -1.7684,  ...,  0.1300, -0.6530,  0.5061],
          [-0.2084, -0.7615,  0.0311,  ...,  2.3396, -0.4469,  0.6994],
          [ 0.0992,  0.0635,  1.3439,  ...,  1.2877, -0.1591,  0.1247]],

         [[-0.8980,  0.9539, -0.4527,  ...,  0.0509, -1.0257, -0.2122],
          [ 0.1033,  0.3333, -0.9186,  ..., -0.9151, -1.0976,  0.1065],
          [ 1.7306,  0.8740, -1.5827,  ..., -0.6229,  0.3031,  1.7466],
          ...,
          [-0.0530,  0.0105,  0.6929,  ..., -0.4823,  0.8344, -2.0901],
          [-1.0235, -0.9607,  0.3859,  ..., -0.4165,  0.3225, -0.1711],
          [ 2.1980,  0.4990, -0.7948,  ..., -0.4493, -0.4946,  0.1188]]],


        [[[-1.6621,  1.1693, -1.3001,  ..., -0.4267,  1.7020,  0.1680],
          [-0.2504,  0.0593,  0.6211,  ...,  1.9546, -0.3309,  0.2283],
          [ 1.4474,  1.5804, -0.7727,  ...,  0.7003, -0.5155, -1.5394],
          ...,
          [-1.8310,  0.5710,  1.9797,  ..., -0.2154, -0.4106,  0.7745],
          [ 0.2207, -1.0798,  0.7342,  ..., -1.2513,  1.2128, -0.0214],
          [ 1.3934,  0.1465, -1.3336,  ..., -0.9041, -0.2504,  2.7119]],

         [[-1.4202,  0.0696,  0.9215,  ...,  0.2083,  0.3298,  0.5259],
          [ 0.4898, -1.7103,  0.1461,  ..., -0.9497,  0.4915,  0.3495],
          [ 0.9542,  1.7717, -0.4249,  ..., -0.3362, -1.5945,  0.7790],
          ...,
          [-0.0187,  0.1404,  0.1325,  ..., -0.7707, -1.2456, -2.2970],
          [ 0.6791, -0.4528,  0.7526,  ...,  0.5599,  1.8873,  0.8532],
          [-1.7179, -1.9261, -1.4480,  ...,  0.1914, -1.2467,  1.1560]]],


        [[[ 1.5811,  1.1701, -0.1603,  ...,  0.2580, -0.2325, -0.0829],
          [-1.4530,  0.3838, -0.2495,  ...,  0.4792, -0.3351,  0.3538],
          [ 0.5124,  1.3879,  0.4867,  ..., -0.6704,  0.9610, -1.2066],
          ...,
          [-1.3251, -0.6222,  1.9721,  ...,  0.4688, -1.6097, -0.1644],
          [-1.4684, -0.6830, -1.4169,  ...,  0.4441, -1.1737,  1.2843],
          [ 1.6893, -0.7766,  0.5939,  ...,  1.4380,  2.1620,  0.6186]],

         [[ 0.2524, -0.1291, -0.7492,  ..., -0.4579, -0.2037,  0.3020],
          [ 0.2196,  1.1982,  1.4143,  ...,  2.2185, -0.6837, -0.1099],
          [-0.2461,  0.7525, -1.1752,  ..., -0.0174,  0.6713, -0.8028],
          ...,
          [-0.6674, -1.7212,  1.4001,  ...,  0.0686, -0.9923,  0.2513],
          [-1.0274, -0.8239,  0.4275,  ..., -0.3436, -1.3243,  0.0327],
          [-2.1538, -0.1763, -0.4380,  ...,  0.1470, -0.9492, -0.0080]]],


        [[[ 0.6517, -0.7964, -1.9509,  ..., -0.2159,  0.3773, -1.4940],
          [ 1.8835,  1.4762, -0.1471,  ...,  0.0515,  0.0073, -0.7979],
          [ 0.0510, -0.6601,  0.7494,  ..., -0.2964,  0.6353,  0.1671],
          ...,
          [ 1.0890, -1.0911, -0.7710,  ..., -0.9481, -0.3727, -0.6503],
          [-0.5725,  0.8901, -0.4633,  ...,  0.1298, -1.8616,  0.6817],
          [-0.4812, -0.7178,  0.6987,  ..., -1.0295,  0.6454,  1.1296]],

         [[-1.4922,  0.5412,  1.2347,  ...,  0.4410, -0.8522, -0.1049],
          [ 0.9804,  2.2973, -0.8364,  ...,  1.3779,  0.7679,  0.6498],
          [ 0.2256,  0.4607,  0.0924,  ..., -0.1913,  1.7097, -1.1829],
          ...,
          [-1.0866, -1.7552, -0.2893,  ..., -1.8015, -0.7050,  0.0816],
          [-0.2749, -0.1109, -2.1134,  ...,  1.7091, -2.0449, -0.8760],
          [ 0.4038, -0.0730, -0.1879,  ...,  0.8734,  1.1496,  0.1886]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
Train Loss : 10313.811, Val Loss : 11274.581
======> Trajectory Loss : 10173.898, Gravity Loss : 0.002, EndOfTrajectory Loss : 1.399, BelowGroundPenalize Loss : 0.000
