==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 49.78it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.17it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1667, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1667, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1667, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1668, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1649, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1649, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1649, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1650, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1810, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1810, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1810, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1811, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........torch.Size([623])
torch.Size([1197])
torch.Size([1296])
torch.Size([1049])
torch.Size([745])
torch.Size([512])
torch.Size([265])
torch.Size([642])
torch.Size([506])
torch.Size([1066])
torch.Size([1099])
torch.Size([112])
torch.Size([1028])
torch.Size([612])
torch.Size([1022])
torch.Size([688])
torch.Size([1757])
torch.Size([1260])
torch.Size([284])
torch.Size([990])
torch.Size([1019])
torch.Size([1544])
torch.Size([115])
torch.Size([310])
torch.Size([306])
torch.Size([1577])
torch.Size([1174])
torch.Size([762])
torch.Size([230])
torch.Size([269])
torch.Size([872])
torch.Size([1162])
torch.Size([202])
torch.Size([698])
torch.Size([750])
torch.Size([172])
torch.Size([231])
torch.Size([502])
torch.Size([908])
torch.Size([1222])
torch.Size([513])
torch.Size([1060])
torch.Size([1323])
torch.Size([554])
torch.Size([409])
torch.Size([340])
torch.Size([697])
torch.Size([144])
torch.Size([257])
torch.Size([1607])
torch.Size([619])
torch.Size([781])
torch.Size([899])
torch.Size([120])
torch.Size([341])
torch.Size([709])
torch.Size([439])
torch.Size([1032])
torch.Size([154])
torch.Size([1700])
torch.Size([1013])
torch.Size([402])
torch.Size([163])
torch.Size([1821])
torch.Size([923])
torch.Size([709])
torch.Size([104])
torch.Size([463])
torch.Size([868])
torch.Size([506])
torch.Size([285])
torch.Size([1196])
torch.Size([1099])
torch.Size([640])
torch.Size([665])
torch.Size([1036])
torch.Size([103])
torch.Size([1370])
torch.Size([401])
torch.Size([213])
torch.Size([1192])
torch.Size([327])
torch.Size([1600])
torch.Size([402])
torch.Size([150])
torch.Size([457])
torch.Size([449])
torch.Size([476])
torch.Size([1038])
torch.Size([97])
torch.Size([590])
torch.Size([1558])
torch.Size([1239])
torch.Size([445])
torch.Size([1020])
torch.Size([1359])
torch.Size([1815])
torch.Size([812])
torch.Size([149])
torch.Size([679])
torch.Size([470])
torch.Size([230])
torch.Size([948])
torch.Size([962])
torch.Size([1031])
torch.Size([1122])
torch.Size([82])
torch.Size([166])
torch.Size([468])
torch.Size([124])
torch.Size([237])
torch.Size([842])
torch.Size([621])
torch.Size([773])
torch.Size([1622])
torch.Size([143])
torch.Size([133])
torch.Size([1088])
torch.Size([580])
torch.Size([23])
torch.Size([340])
torch.Size([906])
torch.Size([1319])
torch.Size([493])
torch.Size([507])
torch.Size([238])
torch.Size([793])
torch.Size([585])
torch.Size([128, 1821, 3])
tensor([[[10.0000, 10.0000, 10.0000],
         [ 9.9855,  9.9855,  9.9855],
         [ 9.9711,  9.9711,  9.9711],
         ...,
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000]],

        [[10.0000, 10.0000, 10.0000],
         [ 9.9925,  9.9925,  9.9925],
         [ 9.9850,  9.9850,  9.9850],
         ...,
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000]],

        [[10.0000, 10.0000, 10.0000],
         [ 9.9931,  9.9931,  9.9931],
         [ 9.9861,  9.9861,  9.9861],
         ...,
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000]],

        ...,

        [[10.0000, 10.0000, 10.0000],
         [ 9.9620,  9.9620,  9.9620],
         [ 9.9241,  9.9241,  9.9241],
         ...,
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000]],

        [[10.0000, 10.0000, 10.0000],
         [ 9.9886,  9.9886,  9.9886],
         [ 9.9773,  9.9773,  9.9773],
         ...,
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000]],

        [[10.0000, 10.0000, 10.0000],
         [ 9.9846,  9.9846,  9.9846],
         [ 9.9692,  9.9692,  9.9692],
         ...,
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000]]], device='cuda:0')
