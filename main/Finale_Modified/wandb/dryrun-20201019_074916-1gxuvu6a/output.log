==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed:  67%|███████████████████████████████████████▎                   | 2/3 [00:00<00:00, 13.43it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.92it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.05it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 724, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 724, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 725, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 749, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 749, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 761, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 761, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 742, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 742, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 743, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 833, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 800, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 800, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 800, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 794, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 828, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 727, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 727, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 727, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 856, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 768, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 768, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 692, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 692, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 692, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 693, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 748, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 748, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 748, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 649, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 649, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 649, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 650, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 795, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 797, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 797, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 755, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 755, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 756, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 728, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 728, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 728, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 729, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 813, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 813, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 813, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 741, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 741, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 741, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 741, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 741, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 741, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........IDX = 0 :  tensor([[[ 1.6392,  0.1784,  0.1522,  ..., -0.7106, -0.7825, -0.6693],
         [-0.6070, -1.6511,  0.6343,  ...,  0.2268, -1.2121, -0.5392],
         [ 0.3904,  0.1516,  0.6630,  ..., -0.9895,  0.1000,  0.1242],
         ...,
         [ 0.9120, -1.3585, -0.9705,  ..., -0.9846, -0.6762, -0.8635],
         [-1.1346, -1.0094,  0.4264,  ..., -1.1337,  2.6539,  0.2860],
         [-0.5796, -2.1570,  1.1745,  ..., -0.4534,  1.4298, -0.0398]],

        [[ 1.6555,  0.7617,  0.5697,  ..., -0.4092, -0.6979,  1.4627],
         [ 0.0976,  0.6688, -0.0583,  ...,  1.5767,  1.4691,  0.8261],
         [-2.4824, -0.4823,  0.0238,  ...,  2.3490,  1.1267, -1.1596],
         ...,
         [-0.6741,  0.4759, -0.1732,  ...,  0.0835, -1.4500,  0.7261],
         [ 0.4302, -0.0789, -0.7731,  ...,  0.2877, -0.9835, -0.8502],
         [-0.8785,  0.0671,  1.1005,  ..., -0.1008,  0.7825,  0.6572]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 9.5888e-02, -2.3224e-02, -5.0570e-01,  ...,  3.8836e-02,
           4.0047e-01,  5.0459e-01],
         [ 3.1041e-01,  2.2313e+00,  1.0492e+00,  ...,  7.3441e-01,
           5.2484e-01, -1.6929e+00],
         [ 1.1234e-03, -1.6566e-01,  4.5154e-02,  ..., -3.5189e-01,
           1.3414e+00, -1.3273e-01],
         ...,
         [ 1.4015e+00, -1.2429e+00, -9.3784e-01,  ..., -3.5624e-01,
           2.5631e-01, -5.5150e-01],
         [-1.2197e+00,  5.7287e-01, -6.6440e-01,  ...,  8.2401e-01,
          -8.8768e-01, -1.5358e+00],
         [-1.2980e+00, -1.2745e-01,  3.8806e-01,  ...,  7.5901e-01,
          -8.7084e-01,  1.1395e+00]],

        [[ 1.5271e+00,  8.0388e-01, -7.8261e-01,  ..., -9.1155e-01,
           5.7766e-01, -8.1222e-01],
         [ 5.3216e-01,  7.1916e-01, -6.1954e-01,  ...,  1.4859e+00,
          -7.3194e-01,  5.7541e-01],
         [-1.5525e+00, -3.5897e-01,  1.5208e-01,  ..., -1.3913e-01,
           2.4132e+00,  2.0718e+00],
         ...,
         [-1.1969e+00, -9.1466e-01,  7.6560e-01,  ...,  7.0921e-01,
          -6.3615e-01,  2.2198e-01],
         [-7.8098e-01,  6.1406e-02, -7.9816e-01,  ...,  4.3458e-01,
           1.0428e+00, -4.8460e-01],
         [ 1.3428e+00,  6.5218e-01, -1.5424e+00,  ...,  3.0895e-01,
           1.9876e-01,  1.2506e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.6487,  0.1776,  0.1597,  ..., -0.7200, -0.7819, -0.6784],
         [-0.6167, -1.6413,  0.6247,  ...,  0.2175, -1.2023, -0.5296],
         [ 0.3828,  0.1610,  0.6721,  ..., -0.9991,  0.0906,  0.1150],
         ...,
         [ 0.9030, -1.3680, -0.9608,  ..., -0.9943, -0.6846, -0.8714],
         [-1.1249, -1.0005,  0.4174,  ..., -1.1430,  2.6624,  0.2954],
         [-0.5706, -2.1472,  1.1844,  ..., -0.4437,  1.4367, -0.0495]],

        [[ 1.6455,  0.7517,  0.5797,  ..., -0.4191, -0.6879,  1.4727],
         [ 0.0877,  0.6588, -0.0683,  ...,  1.5667,  1.4591,  0.8161],
         [-2.4924, -0.4723,  0.0338,  ...,  2.3390,  1.1167, -1.1696],
         ...,
         [-0.6642,  0.4659, -0.1633,  ...,  0.0935, -1.4401,  0.7161],
         [ 0.4402, -0.0690, -0.7632,  ...,  0.2977, -0.9735, -0.8402],
         [-0.8884,  0.0771,  1.1105,  ..., -0.0908,  0.7925,  0.6472]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0860, -0.0311, -0.5153,  ...,  0.0487,  0.3910,  0.4947],
         [ 0.3202,  2.2412,  1.0395,  ...,  0.7247,  0.5150, -1.6977],
         [-0.0081, -0.1583,  0.0358,  ..., -0.3423,  1.3327, -0.1425],
         ...,
         [ 1.4065, -1.2395, -0.9397,  ..., -0.3623,  0.2627, -0.5502],
         [-1.2117,  0.5631, -0.6741,  ...,  0.8268, -0.8975, -1.5456],
         [-1.2933, -0.1361,  0.3800,  ...,  0.7672, -0.8624,  1.1466]],

        [[ 1.5183,  0.7980, -0.7741,  ..., -0.9209,  0.5678, -0.8218],
         [ 0.5243,  0.7288, -0.6235,  ...,  1.4771, -0.7417,  0.5663],
         [-1.5443, -0.3501,  0.1434,  ..., -0.1376,  2.4103,  2.0795],
         ...,
         [-1.1935, -0.9109,  0.7611,  ...,  0.7058, -0.6428,  0.2166],
         [-0.7721,  0.0708, -0.8016,  ...,  0.4442,  1.0336, -0.4754],
         [ 1.3473,  0.6579, -1.5368,  ...,  0.3144,  0.1900,  1.2450]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 2123.328, Val Loss : 6448.753
======> Trajectory Loss : 1676.717, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.425, BelowGroundPenalize Loss : 304.075
Opening in existing browser session.
[1019/144923.618626:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/144923.939566:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/129].........IDX = 0 :  tensor([[[ 1.6487,  0.1776,  0.1597,  ..., -0.7200, -0.7819, -0.6784],
         [-0.6167, -1.6413,  0.6247,  ...,  0.2175, -1.2023, -0.5296],
         [ 0.3828,  0.1610,  0.6721,  ..., -0.9991,  0.0906,  0.1150],
         ...,
         [ 0.9030, -1.3680, -0.9608,  ..., -0.9943, -0.6846, -0.8714],
         [-1.1249, -1.0005,  0.4174,  ..., -1.1430,  2.6624,  0.2954],
         [-0.5706, -2.1472,  1.1844,  ..., -0.4437,  1.4367, -0.0495]],

        [[ 1.6455,  0.7517,  0.5797,  ..., -0.4191, -0.6879,  1.4727],
         [ 0.0877,  0.6588, -0.0683,  ...,  1.5667,  1.4591,  0.8161],
         [-2.4924, -0.4723,  0.0338,  ...,  2.3390,  1.1167, -1.1696],
         ...,
         [-0.6642,  0.4659, -0.1633,  ...,  0.0935, -1.4401,  0.7161],
         [ 0.4402, -0.0690, -0.7632,  ...,  0.2977, -0.9735, -0.8402],
         [-0.8884,  0.0771,  1.1105,  ..., -0.0908,  0.7925,  0.6472]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Opening in existing browser session.
[1019/144924.220449:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
IDX = 0 :  tensor([[[ 0.0860, -0.0311, -0.5153,  ...,  0.0487,  0.3910,  0.4947],
         [ 0.3202,  2.2412,  1.0395,  ...,  0.7247,  0.5150, -1.6977],
         [-0.0081, -0.1583,  0.0358,  ..., -0.3423,  1.3327, -0.1425],
         ...,
         [ 1.4065, -1.2395, -0.9397,  ..., -0.3623,  0.2627, -0.5502],
         [-1.2117,  0.5631, -0.6741,  ...,  0.8268, -0.8975, -1.5456],
         [-1.2933, -0.1361,  0.3800,  ...,  0.7672, -0.8624,  1.1466]],

        [[ 1.5183,  0.7980, -0.7741,  ..., -0.9209,  0.5678, -0.8218],
         [ 0.5243,  0.7288, -0.6235,  ...,  1.4771, -0.7417,  0.5663],
         [-1.5443, -0.3501,  0.1434,  ..., -0.1376,  2.4103,  2.0795],
         ...,
         [-1.1935, -0.9109,  0.7611,  ...,  0.7058, -0.6428,  0.2166],
         [-0.7721,  0.0708, -0.8016,  ...,  0.4442,  1.0336, -0.4754],
         [ 1.3473,  0.6579, -1.5368,  ...,  0.3144,  0.1900,  1.2450]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.6581,  0.1847,  0.1533,  ..., -0.7294, -0.7877, -0.6767],
         [-0.6218, -1.6314,  0.6155,  ...,  0.2202, -1.2003, -0.5242],
         [ 0.3885,  0.1701,  0.6672,  ..., -1.0068,  0.0814,  0.1056],
         ...,
         [ 0.9095, -1.3627, -0.9649,  ..., -1.0038, -0.6926, -0.8758],
         [-1.1158, -0.9923,  0.4084,  ..., -1.1516,  2.6569,  0.3049],
         [-0.5622, -2.1376,  1.1882,  ..., -0.4388,  1.4298, -0.0544]],

        [[ 1.6390,  0.7442,  0.5897,  ..., -0.4166, -0.6781,  1.4814],
         [ 0.0787,  0.6493, -0.0777,  ...,  1.5624,  1.4640,  0.8220],
         [-2.5020, -0.4623,  0.0421,  ...,  2.3384,  1.1121, -1.1672],
         ...,
         [-0.6557,  0.4561, -0.1612,  ...,  0.1032, -1.4462,  0.7062],
         [ 0.4499, -0.0676, -0.7694,  ...,  0.3063, -0.9635, -0.8308],
         [-0.8878,  0.0818,  1.1157,  ..., -0.0819,  0.8016,  0.6378]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0801, -0.0389, -0.5203,  ...,  0.0561,  0.3828,  0.4881],
         [ 0.3295,  2.2444,  1.0361,  ...,  0.7153,  0.5051, -1.6920],
         [-0.0056, -0.1508,  0.0293,  ..., -0.3348,  1.3243, -0.1506],
         ...,
         [ 1.4127, -1.2386, -0.9376,  ..., -0.3683,  0.2637, -0.5458],
         [-1.2036,  0.5560, -0.6793,  ...,  0.8328, -0.9052, -1.5517],
         [-1.2863, -0.1443,  0.3850,  ...,  0.7756, -0.8668,  1.1502]],

        [[ 1.5114,  0.7924, -0.7689,  ..., -0.9266,  0.5610, -0.8289],
         [ 0.5164,  0.7353, -0.6258,  ...,  1.4684, -0.7514,  0.5680],
         [-1.5412, -0.3411,  0.1348,  ..., -0.1316,  2.4170,  2.0874],
         ...,
         [-1.1974, -0.9089,  0.7581,  ...,  0.7083, -0.6501,  0.2140],
         [-0.7702,  0.0767, -0.8077,  ...,  0.4530,  1.0281, -0.4680],
         [ 1.3525,  0.6537, -1.5297,  ...,  0.3210,  0.1812,  1.2384]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 1730.927, Val Loss : 2665.991
======> Trajectory Loss : 1351.263, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.419, BelowGroundPenalize Loss : 237.758
===> [Minibatch 3/129].........IDX = 0 :  tensor([[[ 1.6581,  0.1847,  0.1533,  ..., -0.7294, -0.7877, -0.6767],
         [-0.6218, -1.6314,  0.6155,  ...,  0.2202, -1.2003, -0.5242],
         [ 0.3885,  0.1701,  0.6672,  ..., -1.0068,  0.0814,  0.1056],
         ...,
         [ 0.9095, -1.3627, -0.9649,  ..., -1.0038, -0.6926, -0.8758],
         [-1.1158, -0.9923,  0.4084,  ..., -1.1516,  2.6569,  0.3049],
         [-0.5622, -2.1376,  1.1882,  ..., -0.4388,  1.4298, -0.0544]],

        [[ 1.6390,  0.7442,  0.5897,  ..., -0.4166, -0.6781,  1.4814],
         [ 0.0787,  0.6493, -0.0777,  ...,  1.5624,  1.4640,  0.8220],
         [-2.5020, -0.4623,  0.0421,  ...,  2.3384,  1.1121, -1.1672],
         ...,
         [-0.6557,  0.4561, -0.1612,  ...,  0.1032, -1.4462,  0.7062],
         [ 0.4499, -0.0676, -0.7694,  ...,  0.3063, -0.9635, -0.8308],
         [-0.8878,  0.0818,  1.1157,  ..., -0.0819,  0.8016,  0.6378]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0801, -0.0389, -0.5203,  ...,  0.0561,  0.3828,  0.4881],
         [ 0.3295,  2.2444,  1.0361,  ...,  0.7153,  0.5051, -1.6920],
         [-0.0056, -0.1508,  0.0293,  ..., -0.3348,  1.3243, -0.1506],
         ...,
         [ 1.4127, -1.2386, -0.9376,  ..., -0.3683,  0.2637, -0.5458],
         [-1.2036,  0.5560, -0.6793,  ...,  0.8328, -0.9052, -1.5517],
         [-1.2863, -0.1443,  0.3850,  ...,  0.7756, -0.8668,  1.1502]],

        [[ 1.5114,  0.7924, -0.7689,  ..., -0.9266,  0.5610, -0.8289],
         [ 0.5164,  0.7353, -0.6258,  ...,  1.4684, -0.7514,  0.5680],
         [-1.5412, -0.3411,  0.1348,  ..., -0.1316,  2.4170,  2.0874],
         ...,
         [-1.1974, -0.9089,  0.7581,  ...,  0.7083, -0.6501,  0.2140],
         [-0.7702,  0.0767, -0.8077,  ...,  0.4530,  1.0281, -0.4680],
         [ 1.3525,  0.6537, -1.5297,  ...,  0.3210,  0.1812,  1.2384]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.6603,  0.1920,  0.1455,  ..., -0.7282, -0.7823, -0.6704],
         [-0.6281, -1.6236,  0.6062,  ...,  0.2260, -1.1972, -0.5171],
         [ 0.3838,  0.1698,  0.6599,  ..., -1.0060,  0.0840,  0.1078],
         ...,
         [ 0.9171, -1.3577, -0.9711,  ..., -1.0134, -0.6961, -0.8737],
         [-1.1088, -0.9835,  0.3998,  ..., -1.1498,  2.6580,  0.3145],
         [-0.5545, -2.1280,  1.1895,  ..., -0.4391,  1.4230, -0.0534]],

        [[ 1.6336,  0.7368,  0.5911,  ..., -0.4106, -0.6686,  1.4881],
         [ 0.0695,  0.6446, -0.0872,  ...,  1.5604,  1.4714,  0.8299],
         [-2.5118, -0.4534,  0.0496,  ...,  2.3390,  1.1130, -1.1611],
         ...,
         [-0.6466,  0.4569, -0.1555,  ...,  0.1130, -1.4518,  0.6962],
         [ 0.4576, -0.0733, -0.7772,  ...,  0.3142, -0.9539, -0.8226],
         [-0.8878,  0.0890,  1.1191,  ..., -0.0726,  0.8107,  0.6281]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 8.0238e-02, -4.6762e-02, -5.1874e-01,  ...,  6.4041e-02,
           3.7544e-01,  4.8001e-01],
         [ 3.3876e-01,  2.2434e+00,  1.0390e+00,  ...,  7.0738e-01,
           4.9516e-01, -1.6852e+00],
         [-1.2978e-03, -1.4599e-01,  2.3147e-02,  ..., -3.3061e-01,
           1.3159e+00, -1.5625e-01],
         ...,
         [ 1.4193e+00, -1.2442e+00, -9.4298e-01,  ..., -3.7492e-01,
           2.5803e-01, -5.3947e-01],
         [-1.1949e+00,  5.5057e-01, -6.8291e-01,  ...,  8.3985e-01,
          -9.1213e-01, -1.5567e+00],
         [-1.2785e+00, -1.5251e-01,  3.9049e-01,  ...,  7.7783e-01,
          -8.7374e-01,  1.1487e+00]],

        [[ 1.5087e+00,  7.8595e-01, -7.7260e-01,  ..., -9.2299e-01,
           5.5299e-01, -8.3667e-01],
         [ 5.1088e-01,  7.4318e-01, -6.2279e-01,  ...,  1.4596e+00,
          -7.6098e-01,  5.7421e-01],
         [-1.5391e+00, -3.3316e-01,  1.2754e-01,  ..., -1.2562e-01,
           2.4231e+00,  2.0948e+00],
         ...,
         [-1.1972e+00, -9.0410e-01,  7.6120e-01,  ...,  7.1411e-01,
          -6.5727e-01,  2.0881e-01],
         [-7.7033e-01,  8.0582e-02, -8.1321e-01,  ...,  4.6109e-01,
           1.0221e+00, -4.6119e-01],
         [ 1.3589e+00,  6.5002e-01, -1.5225e+00,  ...,  3.2746e-01,
           1.7216e-01,  1.2313e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
Train Loss : 649.653, Val Loss : 173.555
======> Trajectory Loss : 427.717, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.414, BelowGroundPenalize Loss : 80.574
===> [Minibatch 4/129].........IDX = 0 :  tensor([[[ 1.6603,  0.1920,  0.1455,  ..., -0.7282, -0.7823, -0.6704],
         [-0.6281, -1.6236,  0.6062,  ...,  0.2260, -1.1972, -0.5171],
         [ 0.3838,  0.1698,  0.6599,  ..., -1.0060,  0.0840,  0.1078],
         ...,
         [ 0.9171, -1.3577, -0.9711,  ..., -1.0134, -0.6961, -0.8737],
         [-1.1088, -0.9835,  0.3998,  ..., -1.1498,  2.6580,  0.3145],
         [-0.5545, -2.1280,  1.1895,  ..., -0.4391,  1.4230, -0.0534]],

        [[ 1.6336,  0.7368,  0.5911,  ..., -0.4106, -0.6686,  1.4881],
         [ 0.0695,  0.6446, -0.0872,  ...,  1.5604,  1.4714,  0.8299],
         [-2.5118, -0.4534,  0.0496,  ...,  2.3390,  1.1130, -1.1611],
         ...,
         [-0.6466,  0.4569, -0.1555,  ...,  0.1130, -1.4518,  0.6962],
         [ 0.4576, -0.0733, -0.7772,  ...,  0.3142, -0.9539, -0.8226],
         [-0.8878,  0.0890,  1.1191,  ..., -0.0726,  0.8107,  0.6281]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 8.0238e-02, -4.6762e-02, -5.1874e-01,  ...,  6.4041e-02,
           3.7544e-01,  4.8001e-01],
         [ 3.3876e-01,  2.2434e+00,  1.0390e+00,  ...,  7.0738e-01,
           4.9516e-01, -1.6852e+00],
         [-1.2978e-03, -1.4599e-01,  2.3147e-02,  ..., -3.3061e-01,
           1.3159e+00, -1.5625e-01],
         ...,
         [ 1.4193e+00, -1.2442e+00, -9.4298e-01,  ..., -3.7492e-01,
           2.5803e-01, -5.3947e-01],
         [-1.1949e+00,  5.5057e-01, -6.8291e-01,  ...,  8.3985e-01,
          -9.1213e-01, -1.5567e+00],
         [-1.2785e+00, -1.5251e-01,  3.9049e-01,  ...,  7.7783e-01,
          -8.7374e-01,  1.1487e+00]],

        [[ 1.5087e+00,  7.8595e-01, -7.7260e-01,  ..., -9.2299e-01,
           5.5299e-01, -8.3667e-01],
         [ 5.1088e-01,  7.4318e-01, -6.2279e-01,  ...,  1.4596e+00,
          -7.6098e-01,  5.7421e-01],
         [-1.5391e+00, -3.3316e-01,  1.2754e-01,  ..., -1.2562e-01,
           2.4231e+00,  2.0948e+00],
         ...,
         [-1.1972e+00, -9.0410e-01,  7.6120e-01,  ...,  7.1411e-01,
          -6.5727e-01,  2.0881e-01],
         [-7.7033e-01,  8.0582e-02, -8.1321e-01,  ...,  4.6109e-01,
           1.0221e+00, -4.6119e-01],
         [ 1.3589e+00,  6.5002e-01, -1.5225e+00,  ...,  3.2746e-01,
           1.7216e-01,  1.2313e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.6620,  0.1978,  0.1385,  ..., -0.7275, -0.7777, -0.6648],
         [-0.6336, -1.6173,  0.5981,  ...,  0.2312, -1.1949, -0.5110],
         [ 0.3801,  0.1696,  0.6536,  ..., -1.0055,  0.0861,  0.1096],
         ...,
         [ 0.9234, -1.3534, -0.9764,  ..., -1.0214, -0.6991, -0.8713],
         [-1.1032, -0.9762,  0.3924,  ..., -1.1477,  2.6590,  0.3226],
         [-0.5481, -2.1201,  1.1901,  ..., -0.4392,  1.4175, -0.0521]],

        [[ 1.6283,  0.7372,  0.5959,  ..., -0.4033, -0.6596,  1.4951],
         [ 0.0609,  0.6484, -0.0960,  ...,  1.5634,  1.4797,  0.8385],
         [-2.5216, -0.4440,  0.0580,  ...,  2.3417,  1.1174, -1.1541],
         ...,
         [-0.6374,  0.4597, -0.1485,  ...,  0.1227, -1.4512,  0.6862],
         [ 0.4647, -0.0756, -0.7765,  ...,  0.3221, -0.9449, -0.8242],
         [-0.8894,  0.0964,  1.1250,  ..., -0.0632,  0.8197,  0.6196]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0835, -0.0530, -0.5129,  ...,  0.0715,  0.3676,  0.4729],
         [ 0.3467,  2.2376,  1.0452,  ...,  0.7123,  0.4874, -1.6787],
         [-0.0068, -0.1401,  0.0163,  ..., -0.3347,  1.3210, -0.1634],
         ...,
         [ 1.4253, -1.2501, -0.9488,  ..., -0.3809,  0.2521, -0.5336],
         [-1.2003,  0.5544, -0.6893,  ...,  0.8360, -0.9083, -1.5545],
         [-1.2725, -0.1587,  0.3966,  ...,  0.7837, -0.8798,  1.1542]],

        [[ 1.5032,  0.7826, -0.7766,  ..., -0.9187,  0.5446, -0.8449],
         [ 0.5115,  0.7504, -0.6279,  ...,  1.4515, -0.7706,  0.5804],
         [-1.5411, -0.3340,  0.1197,  ..., -0.1188,  2.4303,  2.1017],
         ...,
         [-1.1915, -0.8987,  0.7558,  ...,  0.7129, -0.6640,  0.2029],
         [-0.7750,  0.0808, -0.8091,  ...,  0.4616,  1.0266, -0.4652],
         [ 1.3649,  0.6547, -1.5277,  ...,  0.3345,  0.1657,  1.2253]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 154.209, Val Loss : 3450.375
======> Trajectory Loss : 12.570, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.407, BelowGroundPenalize Loss : 0.906
===> [Minibatch 5/129].........IDX = 0 :  tensor([[[ 1.6620,  0.1978,  0.1385,  ..., -0.7275, -0.7777, -0.6648],
         [-0.6336, -1.6173,  0.5981,  ...,  0.2312, -1.1949, -0.5110],
         [ 0.3801,  0.1696,  0.6536,  ..., -1.0055,  0.0861,  0.1096],
         ...,
         [ 0.9234, -1.3534, -0.9764,  ..., -1.0214, -0.6991, -0.8713],
         [-1.1032, -0.9762,  0.3924,  ..., -1.1477,  2.6590,  0.3226],
         [-0.5481, -2.1201,  1.1901,  ..., -0.4392,  1.4175, -0.0521]],

        [[ 1.6283,  0.7372,  0.5959,  ..., -0.4033, -0.6596,  1.4951],
         [ 0.0609,  0.6484, -0.0960,  ...,  1.5634,  1.4797,  0.8385],
         [-2.5216, -0.4440,  0.0580,  ...,  2.3417,  1.1174, -1.1541],
         ...,
         [-0.6374,  0.4597, -0.1485,  ...,  0.1227, -1.4512,  0.6862],
         [ 0.4647, -0.0756, -0.7765,  ...,  0.3221, -0.9449, -0.8242],
         [-0.8894,  0.0964,  1.1250,  ..., -0.0632,  0.8197,  0.6196]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0835, -0.0530, -0.5129,  ...,  0.0715,  0.3676,  0.4729],
         [ 0.3467,  2.2376,  1.0452,  ...,  0.7123,  0.4874, -1.6787],
         [-0.0068, -0.1401,  0.0163,  ..., -0.3347,  1.3210, -0.1634],
         ...,
         [ 1.4253, -1.2501, -0.9488,  ..., -0.3809,  0.2521, -0.5336],
         [-1.2003,  0.5544, -0.6893,  ...,  0.8360, -0.9083, -1.5545],
         [-1.2725, -0.1587,  0.3966,  ...,  0.7837, -0.8798,  1.1542]],

        [[ 1.5032,  0.7826, -0.7766,  ..., -0.9187,  0.5446, -0.8449],
         [ 0.5115,  0.7504, -0.6279,  ...,  1.4515, -0.7706,  0.5804],
         [-1.5411, -0.3340,  0.1197,  ..., -0.1188,  2.4303,  2.1017],
         ...,
         [-1.1915, -0.8987,  0.7558,  ...,  0.7129, -0.6640,  0.2029],
         [-0.7750,  0.0808, -0.8091,  ...,  0.4616,  1.0266, -0.4652],
         [ 1.3649,  0.6547, -1.5277,  ...,  0.3345,  0.1657,  1.2253]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.6633,  0.2027,  0.1323,  ..., -0.7270, -0.7737, -0.6598],
         [-0.6387, -1.6121,  0.5903,  ...,  0.2359, -1.1930, -0.5051],
         [ 0.3773,  0.1696,  0.6478,  ..., -1.0050,  0.0875,  0.1109],
         ...,
         [ 0.9290, -1.3495, -0.9811,  ..., -1.0279, -0.7014, -0.8684],
         [-1.0987, -0.9700,  0.3859,  ..., -1.1455,  2.6601,  0.3296],
         [-0.5427, -2.1135,  1.1903,  ..., -0.4392,  1.4131, -0.0503]],

        [[ 1.6224,  0.7385,  0.6017,  ..., -0.3951, -0.6503,  1.5023],
         [ 0.0530,  0.6531, -0.1034,  ...,  1.5681,  1.4880,  0.8467],
         [-2.5311, -0.4349,  0.0665,  ...,  2.3456,  1.1228, -1.1473],
         ...,
         [-0.6299,  0.4612, -0.1406,  ...,  0.1320, -1.4513,  0.6764],
         [ 0.4709, -0.0727, -0.7729,  ...,  0.3307, -0.9356, -0.8280],
         [-0.8916,  0.1013,  1.1308,  ..., -0.0536,  0.8290,  0.6131]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0865, -0.0567, -0.5092,  ...,  0.0767,  0.3624,  0.4672],
         [ 0.3526,  2.2354,  1.0489,  ...,  0.7137,  0.4821, -1.6745],
         [-0.0123, -0.1335,  0.0178,  ..., -0.3410,  1.3274, -0.1712],
         ...,
         [ 1.4300, -1.2544, -0.9534,  ..., -0.3855,  0.2476, -0.5292],
         [-1.2056,  0.5599, -0.6935,  ...,  0.8299, -0.9026, -1.5535],
         [-1.2678, -0.1631,  0.4023,  ...,  0.7889, -0.8843,  1.1536]],

        [[ 1.4991,  0.7798, -0.7796,  ..., -0.9149,  0.5377, -0.8515],
         [ 0.5100,  0.7562, -0.6314,  ...,  1.4452, -0.7785,  0.5859],
         [-1.5461, -0.3361,  0.1118,  ..., -0.1112,  2.4382,  2.1093],
         ...,
         [-1.1873, -0.8953,  0.7520,  ...,  0.7139, -0.6695,  0.1985],
         [-0.7803,  0.0803, -0.8058,  ...,  0.4620,  1.0309, -0.4692],
         [ 1.3698,  0.6583, -1.5318,  ...,  0.3416,  0.1604,  1.2205]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 719.065, Val Loss : 3350.335
======> Trajectory Loss : 578.993, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.401, BelowGroundPenalize Loss : 0.000
===> [Minibatch 6/129].........IDX = 0 :  tensor([[[ 1.6633,  0.2027,  0.1323,  ..., -0.7270, -0.7737, -0.6598],
         [-0.6387, -1.6121,  0.5903,  ...,  0.2359, -1.1930, -0.5051],
         [ 0.3773,  0.1696,  0.6478,  ..., -1.0050,  0.0875,  0.1109],
         ...,
         [ 0.9290, -1.3495, -0.9811,  ..., -1.0279, -0.7014, -0.8684],
         [-1.0987, -0.9700,  0.3859,  ..., -1.1455,  2.6601,  0.3296],
         [-0.5427, -2.1135,  1.1903,  ..., -0.4392,  1.4131, -0.0503]],

        [[ 1.6224,  0.7385,  0.6017,  ..., -0.3951, -0.6503,  1.5023],
         [ 0.0530,  0.6531, -0.1034,  ...,  1.5681,  1.4880,  0.8467],
         [-2.5311, -0.4349,  0.0665,  ...,  2.3456,  1.1228, -1.1473],
         ...,
         [-0.6299,  0.4612, -0.1406,  ...,  0.1320, -1.4513,  0.6764],
         [ 0.4709, -0.0727, -0.7729,  ...,  0.3307, -0.9356, -0.8280],
         [-0.8916,  0.1013,  1.1308,  ..., -0.0536,  0.8290,  0.6131]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0865, -0.0567, -0.5092,  ...,  0.0767,  0.3624,  0.4672],
         [ 0.3526,  2.2354,  1.0489,  ...,  0.7137,  0.4821, -1.6745],
         [-0.0123, -0.1335,  0.0178,  ..., -0.3410,  1.3274, -0.1712],
         ...,
         [ 1.4300, -1.2544, -0.9534,  ..., -0.3855,  0.2476, -0.5292],
         [-1.2056,  0.5599, -0.6935,  ...,  0.8299, -0.9026, -1.5535],
         [-1.2678, -0.1631,  0.4023,  ...,  0.7889, -0.8843,  1.1536]],

        [[ 1.4991,  0.7798, -0.7796,  ..., -0.9149,  0.5377, -0.8515],
         [ 0.5100,  0.7562, -0.6314,  ...,  1.4452, -0.7785,  0.5859],
         [-1.5461, -0.3361,  0.1118,  ..., -0.1112,  2.4382,  2.1093],
         ...,
         [-1.1873, -0.8953,  0.7520,  ...,  0.7139, -0.6695,  0.1985],
         [-0.7803,  0.0803, -0.8058,  ...,  0.4620,  1.0309, -0.4692],
         [ 1.3698,  0.6583, -1.5318,  ...,  0.3416,  0.1604,  1.2205]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 1.6644,  0.2068,  0.1266,  ..., -0.7269, -0.7702, -0.6553],
         [-0.6440, -1.6079,  0.5829,  ...,  0.2406, -1.1912, -0.4991],
         [ 0.3750,  0.1695,  0.6420,  ..., -1.0043,  0.0891,  0.1124],
         ...,
         [ 0.9341, -1.3459, -0.9856,  ..., -1.0326, -0.7023, -0.8635],
         [-1.0951, -0.9648,  0.3799,  ..., -1.1433,  2.6613,  0.3359],
         [-0.5375, -2.1080,  1.1895,  ..., -0.4383,  1.4105, -0.0469]],

        [[ 1.6156,  0.7400,  0.6085,  ..., -0.3866, -0.6408,  1.5098],
         [ 0.0456,  0.6584, -0.1089,  ...,  1.5740,  1.4959,  0.8544],
         [-2.5408, -0.4260,  0.0755,  ...,  2.3511,  1.1290, -1.1405],
         ...,
         [-0.6246,  0.4604, -0.1321,  ...,  0.1412, -1.4510,  0.6674],
         [ 0.4760, -0.0670, -0.7669,  ...,  0.3387, -0.9262, -0.8340],
         [-0.8970,  0.1043,  1.1378,  ..., -0.0443,  0.8381,  0.6089]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0907, -0.0584, -0.5072,  ...,  0.0800,  0.3592,  0.4623],
         [ 0.3594,  2.2345,  1.0517,  ...,  0.7142,  0.4784, -1.6720],
         [-0.0182, -0.1260,  0.0188,  ..., -0.3472,  1.3347, -0.1797],
         ...,
         [ 1.4340, -1.2575, -0.9568,  ..., -0.3887,  0.2445, -0.5267],
         [-1.2101,  0.5661, -0.6953,  ...,  0.8240, -0.8964, -1.5545],
         [-1.2642, -0.1646,  0.4071,  ...,  0.7944, -0.8862,  1.1488]],

        [[ 1.4960,  0.7774, -0.7818,  ..., -0.9113,  0.5319, -0.8570],
         [ 0.5075,  0.7613, -0.6346,  ...,  1.4403, -0.7853,  0.5909],
         [-1.5520, -0.3375,  0.1038,  ..., -0.1030,  2.4453,  2.1173],
         ...,
         [-1.1844, -0.8917,  0.7495,  ...,  0.7176, -0.6743,  0.1957],
         [-0.7855,  0.0796, -0.8032,  ...,  0.4625,  1.0346, -0.4729],
         [ 1.3736,  0.6604, -1.5348,  ...,  0.3488,  0.1557,  1.2170]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 691.238, Val Loss : 866.137
======> Trajectory Loss : 552.018, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.392, BelowGroundPenalize Loss : 0.000
===> [Minibatch 7/129].........IDX = 0 :  tensor([[[ 1.6644,  0.2068,  0.1266,  ..., -0.7269, -0.7702, -0.6553],
         [-0.6440, -1.6079,  0.5829,  ...,  0.2406, -1.1912, -0.4991],
         [ 0.3750,  0.1695,  0.6420,  ..., -1.0043,  0.0891,  0.1124],
         ...,
         [ 0.9341, -1.3459, -0.9856,  ..., -1.0326, -0.7023, -0.8635],
         [-1.0951, -0.9648,  0.3799,  ..., -1.1433,  2.6613,  0.3359],
         [-0.5375, -2.1080,  1.1895,  ..., -0.4383,  1.4105, -0.0469]],

        [[ 1.6156,  0.7400,  0.6085,  ..., -0.3866, -0.6408,  1.5098],
         [ 0.0456,  0.6584, -0.1089,  ...,  1.5740,  1.4959,  0.8544],
         [-2.5408, -0.4260,  0.0755,  ...,  2.3511,  1.1290, -1.1405],
         ...,
         [-0.6246,  0.4604, -0.1321,  ...,  0.1412, -1.4510,  0.6674],
         [ 0.4760, -0.0670, -0.7669,  ...,  0.3387, -0.9262, -0.8340],
         [-0.8970,  0.1043,  1.1378,  ..., -0.0443,  0.8381,  0.6089]]],
       device='cuda:0', grad_fn=<SelectBackward>)
IDX = 0 :  tensor([[[ 0.0907, -0.0584, -0.5072,  ...,  0.0800,  0.3592,  0.4623],
         [ 0.3594,  2.2345,  1.0517,  ...,  0.7142,  0.4784, -1.6720],
         [-0.0182, -0.1260,  0.0188,  ..., -0.3472,  1.3347, -0.1797],
         ...,
         [ 1.4340, -1.2575, -0.9568,  ..., -0.3887,  0.2445, -0.5267],
         [-1.2101,  0.5661, -0.6953,  ...,  0.8240, -0.8964, -1.5545],
         [-1.2642, -0.1646,  0.4071,  ...,  0.7944, -0.8862,  1.1488]],

        [[ 1.4960,  0.7774, -0.7818,  ..., -0.9113,  0.5319, -0.8570],
         [ 0.5075,  0.7613, -0.6346,  ...,  1.4403, -0.7853,  0.5909],
         [-1.5520, -0.3375,  0.1038,  ..., -0.1030,  2.4453,  2.1173],
         ...,
         [-1.1844, -0.8917,  0.7495,  ...,  0.7176, -0.6743,  0.1957],
         [-0.7855,  0.0796, -0.8032,  ...,  0.4625,  1.0346, -0.4729],
         [ 1.3736,  0.6604, -1.5348,  ...,  0.3488,  0.1557,  1.2170]]],
       device='cuda:0', grad_fn=<SelectBackward>)
