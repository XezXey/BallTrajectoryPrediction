==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.17it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.45it/s]
===============================Dataset shape===============================
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 22.75it/s]
===============================Dataset shape===============================
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 755, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 755, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 756, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 749, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 749, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 750, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 758, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 758, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 758, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 785, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 785, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 786, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 786, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 798, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 798, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 799, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 781, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 781, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 805, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 805, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 806, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 764, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 764, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 911, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 709, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 709, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 709, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 710, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 751, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 751, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 751, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 778, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 778, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 778, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 804, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 804, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 804, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 738, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 738, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 738, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 802, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 739, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 739, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 739, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 740, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 767, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 767, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 767, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 768, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 687, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 687, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 688, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 922, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 976, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 976, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 976, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 977, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 760, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 760, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 761, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 897, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 897, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 864, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 864, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 808, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 808, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 796, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 796, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 948, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 853, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 686, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 686, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 686, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 687, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 694, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 694, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 695, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 741, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 741, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 741, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 742, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........OrderedDict([('h', tensor([[[[ 0.3776, -1.0538, -0.4473,  ...,  0.4381, -0.5739,  1.2612],
          [-1.0918,  1.5276,  0.5683,  ...,  2.1963,  0.5395,  1.5464],
          [ 0.2342, -0.1192, -0.0901,  ...,  0.9079,  0.6140,  0.5061],
          ...,
          [-0.4549, -1.4950,  0.9512,  ..., -1.0645,  1.2147, -0.5274],
          [-0.5738,  0.0429, -0.2313,  ..., -1.1547, -0.2716,  0.0524],
          [-1.8828,  1.6712,  0.3125,  ...,  1.4935,  0.5505, -0.4467]],

         [[ 0.0452, -0.0107, -1.3564,  ..., -0.5257, -1.5783, -1.0539],
          [ 0.3375,  0.4760,  1.3031,  ...,  1.0926,  0.7338, -0.6964],
          [-0.3979, -0.1521,  1.2592,  ...,  0.9980,  0.5160,  0.8988],
          ...,
          [-1.9797, -2.1503, -0.3813,  ..., -0.4200, -0.2276, -0.0947],
          [-1.1253,  0.6364, -1.5654,  ...,  1.7858,  0.5209, -0.9798],
          [ 1.2200, -1.2301, -0.9172,  ...,  0.3963,  1.3658,  0.2217]]],


        [[[ 1.3088, -0.0188, -0.4194,  ...,  0.7132,  0.4079,  0.2051],
          [ 1.6509,  1.9168, -0.7353,  ..., -1.3090,  1.7798,  0.3743],
          [-0.5864,  0.7092, -0.5926,  ...,  0.4789,  0.0547, -0.7492],
          ...,
          [-0.5739,  2.5389, -0.0550,  ...,  0.2194, -0.8190,  2.2785],
          [ 0.4729,  0.2744, -0.5324,  ...,  1.0434, -0.4266,  0.2858],
          [ 1.0890, -0.0873, -0.7447,  ...,  0.9385,  1.3032, -0.7791]],

         [[-1.8631, -1.1970, -0.1682,  ...,  0.8618, -0.1462,  0.6990],
          [-1.1140,  0.6826, -0.0837,  ...,  1.1056, -0.4120, -0.9496],
          [ 0.6619,  0.8779, -1.2652,  ...,  1.1802,  0.3136, -0.9068],
          ...,
          [ 0.8504, -1.1409,  0.6583,  ...,  1.2899,  0.7585, -0.4880],
          [ 1.4213,  0.6301,  0.5049,  ...,  0.3363,  1.7171, -0.8458],
          [-2.1557,  0.1051,  0.0276,  ..., -0.9168,  0.3846,  0.5513]]],


        [[[ 0.8629,  0.6096, -0.2423,  ..., -0.3785,  0.1705,  0.5365],
          [ 1.5116,  1.1014,  0.5791,  ...,  0.2241,  0.2105, -0.4947],
          [ 1.8269,  0.2967, -1.3620,  ..., -1.3207, -1.5692,  0.0968],
          ...,
          [-1.0887,  1.8256, -0.2336,  ...,  0.0145,  0.3847, -1.4964],
          [-1.2910, -0.3755,  0.5065,  ...,  0.3820, -0.3526, -1.0573],
          [-0.5498, -0.5838, -1.3352,  ...,  0.0797, -0.0498, -0.4556]],

         [[ 1.5612,  1.5613, -0.0421,  ..., -0.6123, -1.9590, -0.3523],
          [-0.9751,  0.5322, -0.7673,  ..., -1.1484,  0.4266,  1.0900],
          [ 0.4182,  0.3772,  0.3247,  ..., -0.7253, -0.7799, -1.1929],
          ...,
          [ 0.9532, -0.3434,  1.0053,  ...,  0.8339, -1.3758,  1.1913],
          [-0.9533,  2.8269,  0.7510,  ...,  0.1296, -0.9620,  0.6767],
          [-1.9736, -1.0328, -0.2996,  ..., -0.8438,  1.7073, -0.9689]]],


        [[[ 0.7605,  0.3332, -1.4790,  ..., -0.1653,  0.5526,  0.7502],
          [-1.4199, -0.8575,  2.2977,  ..., -0.2944, -1.0419, -3.2495],
          [ 0.6460,  0.1233, -0.7808,  ...,  0.0885, -0.4061,  0.3059],
          ...,
          [-0.8366,  0.1772, -2.6410,  ..., -0.3498, -0.2784,  0.6659],
          [-1.9012, -1.5392,  1.0742,  ..., -0.5079,  0.6790, -2.5436],
          [-0.2891,  1.3729, -0.3620,  ..., -2.1673,  0.7407,  0.2820]],

         [[-0.6622, -0.0856, -1.6110,  ..., -1.0269,  0.0179,  0.2195],
          [-0.0359, -1.1526, -1.3507,  ..., -0.6733,  0.5785, -0.9902],
          [-1.3324,  0.5492, -1.1017,  ...,  0.3701, -0.7022, -1.9346],
          ...,
          [-0.2766,  0.3839,  1.0947,  ..., -0.7686, -1.6550,  0.3265],
          [ 0.4259,  0.3582,  0.4414,  ..., -0.2854, -1.6930, -0.6895],
          [-0.2569, -1.6849, -0.5669,  ..., -0.6759,  1.3885,  0.1114]]]],
       device='cuda:0')), ('c', tensor([[[[ 5.4871e-01,  9.4476e-01, -1.4790e+00,  ..., -1.3092e+00,
           -5.4461e-01,  8.6665e-01],
          [ 3.0750e+00,  1.5160e+00,  5.5152e-01,  ...,  9.2705e-01,
            1.2510e-01, -9.9188e-01],
          [ 4.5860e-01, -8.2383e-01, -4.7470e-01,  ..., -1.3403e-01,
           -1.9312e-02,  1.4580e-01],
          ...,
          [ 2.3083e-01, -7.9742e-01,  6.7189e-02,  ...,  4.8744e-01,
           -1.5103e-01, -1.2190e+00],
          [-1.1743e+00, -4.5043e-01,  1.0715e+00,  ..., -1.1320e+00,
           -4.7020e-01, -5.0596e-01],
          [-6.2153e-01, -3.7155e-01,  5.7622e-01,  ..., -1.0715e+00,
           -2.9857e-01,  4.3832e-01]],

         [[-1.7974e+00,  3.7538e-01, -2.1555e-01,  ..., -1.2067e+00,
            3.9007e-01,  5.9656e-01],
          [-8.1799e-01, -1.0026e+00,  5.9365e-01,  ..., -4.7008e-01,
           -1.7578e+00,  9.5616e-01],
          [-6.8577e-01,  1.4034e+00,  4.8927e-01,  ..., -7.5453e-01,
           -5.6243e-01, -5.9640e-01],
          ...,
          [ 3.1930e-01,  3.5384e-01, -2.0685e+00,  ...,  1.3385e+00,
            1.2836e+00,  3.8605e-01],
          [-6.9442e-01, -1.7214e+00, -1.6120e-01,  ..., -9.0863e-01,
            2.2287e+00, -9.4235e-01],
          [ 1.4826e+00,  1.8897e+00,  1.4632e+00,  ..., -6.1867e-01,
           -1.8408e+00,  8.7702e-02]]],


        [[[ 9.1968e-01,  5.1087e-01,  3.9270e-01,  ...,  2.2975e+00,
           -8.1577e-01, -8.2450e-01],
          [ 9.1083e-01,  2.1539e+00,  1.5025e-01,  ...,  1.4406e-01,
           -7.6843e-01,  5.2048e-01],
          [ 2.4047e-01, -7.4989e-01,  2.0255e-01,  ...,  6.2399e-01,
            2.9158e-01,  1.0822e+00],
          ...,
          [-1.4045e-01, -7.4562e-01, -1.6113e-01,  ..., -5.5418e-01,
            5.5849e-04,  7.7847e-01],
          [ 4.7576e-01,  2.3721e-01, -3.1419e-01,  ..., -1.5574e+00,
           -1.0441e+00, -2.7916e-01],
          [ 1.2518e+00,  2.4071e-01,  9.4722e-01,  ...,  1.8536e+00,
           -1.3143e+00,  1.5194e+00]],

         [[-1.5023e+00, -6.5248e-01, -2.0987e+00,  ...,  1.6815e-01,
            2.7908e+00,  1.2207e+00],
          [-2.0790e+00,  5.8721e-01,  4.4823e-01,  ...,  2.5046e-01,
            6.6457e-01, -2.9205e-02],
          [-9.2424e-01,  1.8162e+00, -6.0123e-01,  ...,  2.5131e+00,
           -1.2068e-02, -2.2210e-01],
          ...,
          [ 8.2340e-01,  1.3903e-01,  7.7259e-01,  ..., -1.0868e+00,
           -6.4493e-01,  6.7380e-02],
          [ 1.1394e-01, -7.8480e-01,  2.6491e+00,  ...,  6.4491e-01,
            1.4505e+00,  7.6494e-01],
          [ 6.3319e-01, -8.1343e-01,  1.5035e+00,  ...,  5.0519e-01,
            1.2323e+00,  2.9171e-01]]],


        [[[ 9.8100e-01, -6.4178e-01, -5.9604e-01,  ...,  1.4145e+00,
           -1.0751e+00, -4.4509e-01],
          [ 1.5574e+00, -5.3037e-02,  6.3473e-01,  ...,  6.0633e-01,
           -7.5510e-01, -4.2554e-02],
          [-4.7659e-01,  2.7478e+00, -3.0962e-01,  ..., -3.6334e-01,
           -9.0945e-01,  1.5756e-01],
          ...,
          [-4.3723e-01,  3.1234e-01,  8.3840e-01,  ..., -1.0370e+00,
            1.2855e+00,  2.1895e+00],
          [-1.7230e+00, -9.7144e-01,  6.1538e-01,  ...,  1.6335e-01,
            2.1663e+00, -4.7748e-01],
          [-5.0325e-01,  4.8175e-01, -1.4613e-01,  ...,  8.7625e-01,
           -7.4810e-01,  7.1921e-01]],

         [[-5.3542e-01, -1.2422e+00,  1.7355e+00,  ...,  9.5662e-02,
            9.9977e-01,  4.6261e-01],
          [ 3.2053e-01,  1.2118e+00, -3.9740e-01,  ..., -6.5492e-01,
            1.7836e+00,  1.2337e-01],
          [ 4.0564e-01, -5.1870e-01, -7.0828e-01,  ...,  9.1769e-01,
            7.0916e-01, -9.2251e-01],
          ...,
          [ 1.1994e+00,  1.1968e+00, -1.4125e-01,  ...,  4.4304e-01,
           -5.7169e-01,  4.6434e-01],
          [ 6.8058e-01,  1.6764e-01,  2.7690e-01,  ...,  8.0481e-01,
           -1.5219e-01, -8.0934e-01],
          [-8.2411e-01, -1.3832e-01, -8.5991e-01,  ...,  7.1440e-01,
            1.4395e+00,  8.8809e-01]]],


        [[[-7.2732e-01,  6.6942e-01,  1.9499e-01,  ...,  1.5493e+00,
            6.9622e-01,  8.1728e-01],
          [-2.7644e-01, -4.7632e-01, -1.0959e+00,  ...,  2.8394e-01,
           -1.3779e+00,  2.5684e-01],
          [ 9.4027e-01, -4.6273e-01,  2.3917e+00,  ..., -1.3539e+00,
           -1.0763e+00, -1.6824e+00],
          ...,
          [-1.0657e+00, -5.3602e-01,  1.1749e+00,  ...,  5.4502e-01,
           -1.7367e+00, -8.0226e-01],
          [-1.2390e+00, -1.9469e-01, -2.6260e-01,  ..., -1.0308e+00,
           -2.2689e+00, -8.2636e-01],
          [ 1.8370e+00, -3.3788e-01,  1.5529e+00,  ...,  9.8293e-01,
            1.1537e+00,  1.3247e+00]],

         [[ 9.7736e-01, -9.1235e-01,  1.2015e+00,  ...,  1.4835e+00,
            7.5438e-01,  3.0029e+00],
          [ 5.7877e-01,  1.8556e-01,  8.6395e-01,  ..., -6.3601e-02,
            1.2999e-01, -2.8230e-01],
          [ 5.2007e-03,  4.6282e-01,  1.9649e-01,  ...,  9.7476e-01,
           -7.5229e-01, -1.5338e-01],
          ...,
          [ 9.1695e-02,  6.1303e-01,  8.7499e-02,  ...,  2.4583e-01,
           -4.0767e-01,  2.8509e+00],
          [ 4.5582e-01, -1.3412e+00, -6.1336e-01,  ...,  2.9803e+00,
           -1.2086e+00,  5.2769e-01],
          [-2.1311e+00, -1.1589e+00, -2.9846e-01,  ...,  6.4017e-01,
           -1.7087e-01,  1.3494e-01]]]], device='cuda:0')), ('recurrent_blocks.0.weight_ih_l0', tensor([[-0.1210,  0.0665, -0.1534],
        [ 0.0032,  0.0857, -0.0670],
        [ 0.1366, -0.1598, -0.1248],
        [-0.0156, -0.1591,  0.1597],
        [-0.0084,  0.1416,  0.0552],
        [-0.0397, -0.1675, -0.0100],
        [ 0.0963,  0.0853,  0.1537],
        [-0.1746,  0.1104,  0.0618],
        [-0.1072,  0.0064, -0.0628],
        [ 0.0158,  0.1102, -0.1584],
        [ 0.1713, -0.1366,  0.1583],
        [-0.1105, -0.0394,  0.0645],
        [-0.0505, -0.0348, -0.1221],
        [-0.0917, -0.1554,  0.1126],
        [ 0.0352,  0.0353,  0.0003],
        [ 0.0456, -0.0712,  0.1348],
        [ 0.1043,  0.0961, -0.0751],
        [ 0.1580, -0.1321, -0.0732],
        [-0.0546,  0.0264,  0.1610],
        [ 0.1595, -0.0367,  0.1847],
        [ 0.0521, -0.1391,  0.1568],
        [-0.0413, -0.1102,  0.0921],
        [ 0.0499, -0.1425, -0.0090],
        [ 0.0178, -0.1164,  0.1274],
        [-0.0793, -0.0143,  0.0393],
        [ 0.0598, -0.1028, -0.0919],
        [-0.1492, -0.1319,  0.0603],
        [ 0.0506,  0.1593, -0.0089],
        [ 0.0556, -0.0705,  0.0430],
        [-0.0839, -0.0100,  0.1123],
        [-0.1101, -0.0224,  0.0991],
        [-0.1232, -0.0386, -0.1137],
        [ 0.0089, -0.0902,  0.1007],
        [ 0.0077,  0.1244,  0.0709],
        [-0.1328,  0.0764,  0.0082],
        [ 0.1690,  0.1256, -0.0257],
        [ 0.1098,  0.1173, -0.0965],
        [ 0.0618, -0.1195, -0.1047],
        [ 0.1807,  0.1321, -0.0210],
        [ 0.0831,  0.0637, -0.0388],
        [ 0.0400, -0.0072, -0.0228],
        [-0.1242,  0.0410,  0.0136],
        [-0.0405,  0.1303,  0.1152],
        [-0.0936, -0.0117,  0.1194],
        [ 0.1642, -0.1555, -0.1443],
        [ 0.0390, -0.1216, -0.1624],
        [-0.0721, -0.0118,  0.1768],
        [-0.0267, -0.1803,  0.0326],
        [ 0.1216,  0.1135, -0.0411],
        [-0.0538, -0.1176, -0.0853],
        [-0.0994, -0.0832,  0.0717],
        [-0.1457, -0.1217, -0.0785],
        [-0.0223, -0.1077, -0.1500],
        [ 0.1564, -0.0540,  0.0731],
        [-0.1512, -0.0043,  0.0200],
        [ 0.1043, -0.0384, -0.0373],
        [-0.0190,  0.1407,  0.0187],
        [ 0.0109, -0.0800, -0.1813],
        [ 0.1006,  0.1703,  0.0411],
        [ 0.0068,  0.1357,  0.0089],
        [-0.1780,  0.1297,  0.0442],
        [-0.0333,  0.0212,  0.1558],
        [ 0.1179,  0.1441, -0.0069],
        [ 0.1862,  0.1295,  0.0786],
        [-0.1216, -0.0835, -0.0009],
        [-0.1855,  0.0611, -0.0561],
        [-0.1589,  0.0449,  0.0294],
        [ 0.1703,  0.0776,  0.0039],
        [-0.1542,  0.1079,  0.1193],
        [-0.0052,  0.0997, -0.1443],
        [-0.0473,  0.1650, -0.0401],
        [ 0.1250,  0.1626, -0.1129],
        [ 0.0287,  0.0983,  0.0525],
        [ 0.1646,  0.0521, -0.1118],
        [ 0.1193,  0.0841, -0.0777],
        [-0.0951, -0.0225,  0.0119],
        [ 0.0251, -0.0167, -0.0130],
        [ 0.0994, -0.1305,  0.0276],
        [-0.1293, -0.1194, -0.0662],
        [ 0.0814, -0.0705, -0.0500],
        [ 0.1466,  0.0904,  0.1711],
        [-0.1614, -0.0587,  0.1321],
        [-0.1446,  0.0040,  0.1612],
        [ 0.1488,  0.0706,  0.0766],
        [ 0.1304, -0.0205,  0.0914],
        [-0.0170, -0.1472,  0.0437],
        [ 0.1689,  0.0699, -0.1353],
        [ 0.0925, -0.1681, -0.0874],
        [-0.0472, -0.1405, -0.0510],
        [ 0.0507,  0.0061,  0.1483],
        [ 0.0679, -0.0556, -0.1542],
        [-0.0915,  0.0305, -0.0188],
        [ 0.0203,  0.0395,  0.0648],
        [ 0.0570, -0.1514, -0.1674],
        [-0.0329,  0.0844,  0.0327],
        [ 0.0752, -0.1310, -0.0421],
        [-0.0260,  0.1188, -0.0718],
        [ 0.0409,  0.0623,  0.0043],
        [-0.0402, -0.0367, -0.0199],
        [ 0.0083, -0.1528,  0.0225],
        [ 0.0369,  0.1487,  0.0696],
        [-0.0065, -0.1489, -0.0330],
        [-0.0668, -0.0073,  0.0288],
        [ 0.0616, -0.0118,  0.0588],
        [ 0.0367,  0.1052,  0.0829],
        [ 0.1636,  0.0841, -0.0315],
        [ 0.0310,  0.1274,  0.0448],
        [-0.0635, -0.0818,  0.0114],
        [-0.1766,  0.0530, -0.1470],
        [-0.1467, -0.1120, -0.0121],
        [ 0.1071,  0.1017,  0.1587],
        [-0.0043, -0.0294, -0.0345],
        [ 0.0727, -0.1541, -0.0181],
        [ 0.1824, -0.1282, -0.0136],
        [-0.0896,  0.0552,  0.0441],
        [-0.1472,  0.0044, -0.0581],
        [ 0.0142, -0.0790,  0.1390],
        [-0.0414, -0.1430, -0.0772],
        [ 0.0688,  0.0384, -0.1484],
        [ 0.1607,  0.0101, -0.1073],
        [ 0.0362,  0.1152,  0.0653],
        [ 0.0867,  0.0455,  0.1300],
        [-0.1483, -0.0399,  0.0263],
        [ 0.1198, -0.0327, -0.1079],
        [ 0.0253,  0.1390, -0.0987],
        [-0.0415, -0.1018, -0.0406],
        [-0.0967, -0.0682, -0.1186],
        [ 0.0378,  0.0649, -0.0127]], device='cuda:0')), ('recurrent_blocks.0.weight_hh_l0', tensor([[ 0.1069, -0.1656, -0.0831,  ..., -0.0511, -0.1446,  0.0007],
        [ 0.1052, -0.0154, -0.1240,  ..., -0.1599, -0.0203, -0.0106],
        [-0.0173,  0.1604, -0.0267,  ..., -0.1477, -0.0135, -0.1633],
        ...,
        [ 0.1359, -0.0506,  0.0746,  ..., -0.0974,  0.0524, -0.0629],
        [ 0.0930, -0.0421, -0.0511,  ...,  0.1534, -0.0808,  0.0324],
        [-0.1355,  0.0131,  0.0283,  ..., -0.1345, -0.0080,  0.1389]],
       device='cuda:0')), ('recurrent_blocks.0.bias_ih_l0', tensor([ 0.1861, -0.0726, -0.1391,  0.1521, -0.1835, -0.1675, -0.1318, -0.1023,
         0.0510, -0.0367,  0.0678, -0.1619, -0.1044,  0.1075, -0.0658,  0.0618,
        -0.0187, -0.1195,  0.1572,  0.0687,  0.1559, -0.1660,  0.1341,  0.1359,
        -0.1200,  0.0541,  0.1385,  0.0526,  0.0632, -0.0352, -0.0612, -0.1567,
        -0.1325,  0.0889, -0.0873, -0.0550, -0.1693,  0.0504, -0.1387, -0.1542,
        -0.1233,  0.1608, -0.0862, -0.0981, -0.1042,  0.1127,  0.0717, -0.0557,
         0.1185,  0.0702,  0.0301, -0.0258,  0.0595,  0.0028,  0.0189, -0.1314,
        -0.0800, -0.1772,  0.0052,  0.1383, -0.1623,  0.0751,  0.1114, -0.0377,
        -0.0279, -0.0039,  0.0372,  0.1505,  0.0934,  0.0975, -0.0806, -0.1060,
         0.0485,  0.1229,  0.1352, -0.0163,  0.1417,  0.0419,  0.0229, -0.0978,
         0.1629,  0.1262, -0.0430, -0.0814,  0.1243,  0.0843,  0.0906, -0.0838,
        -0.0665,  0.1017,  0.1500,  0.0531, -0.0127,  0.0133,  0.0628,  0.1401,
        -0.1211, -0.0386,  0.1765,  0.0613,  0.1453,  0.0209,  0.1610,  0.0931,
         0.0750, -0.1245, -0.1014,  0.1437,  0.1370,  0.0433, -0.0756,  0.1529,
        -0.0995,  0.0456,  0.0218,  0.0032, -0.1106, -0.0759, -0.0557,  0.0970,
         0.0320,  0.0483, -0.1483, -0.0174,  0.0877, -0.1439, -0.0793, -0.0231],
       device='cuda:0')), ('recurrent_blocks.0.bias_hh_l0', tensor([-5.0912e-02, -1.5845e-01,  5.5998e-02, -3.6733e-02, -9.6504e-02,
         3.6368e-03,  1.6276e-01,  1.5809e-02, -1.2042e-01,  2.9099e-02,
        -1.5030e-01, -3.7133e-02, -6.2149e-02, -4.5488e-02,  9.8597e-02,
        -4.5353e-02,  1.3550e-01,  8.3496e-02, -4.2819e-02, -1.1368e-02,
        -4.2469e-02,  1.3460e-02, -7.3399e-02,  1.5716e-01, -3.1602e-02,
         1.0219e-01, -1.8137e-01,  7.4938e-02, -1.1154e-01,  4.7314e-02,
        -7.1150e-02,  1.5095e-01,  1.6031e-02, -8.2805e-02,  1.4486e-01,
         1.3671e-03,  8.6627e-02, -1.3686e-01,  9.6216e-02,  1.1091e-01,
         2.1828e-02, -5.6492e-02, -9.9755e-02, -1.2417e-01, -7.3285e-06,
        -1.6692e-01,  4.0164e-02, -1.9378e-02,  1.0601e-01, -1.1020e-01,
         7.5350e-02,  3.7781e-02,  4.5374e-02,  4.6085e-02,  4.1266e-02,
         1.1332e-01,  1.0168e-01, -1.3834e-01,  9.6048e-03, -1.1830e-01,
         1.8600e-02,  2.2568e-02,  1.0474e-02,  3.0539e-02,  9.8265e-02,
         3.9803e-02, -9.2249e-02, -1.2840e-01,  3.4897e-02,  3.7495e-02,
         1.5250e-01,  1.2606e-01,  5.5178e-02, -9.4051e-02,  5.3856e-02,
         6.5128e-02, -3.0569e-02, -5.3019e-02,  8.6357e-02, -5.7432e-02,
        -1.5356e-02,  2.6064e-02, -5.5110e-03,  6.5057e-02,  8.8965e-02,
         6.6310e-02, -3.5156e-02,  1.5627e-01,  2.6798e-02,  9.7744e-03,
         8.8654e-02,  8.6690e-02,  7.7344e-03,  8.7439e-02, -5.9075e-02,
         1.3633e-01, -1.5075e-03, -1.5533e-01,  1.6983e-01, -6.8530e-02,
        -6.8798e-02,  7.4944e-02, -1.1865e-01, -1.5286e-01, -1.8051e-01,
        -1.7826e-02,  4.4644e-02, -4.3959e-02, -1.7315e-01,  3.8534e-02,
        -1.2946e-01, -3.2065e-02,  1.2868e-01,  2.2189e-02,  1.4080e-01,
        -1.4380e-01,  1.5722e-01, -3.2363e-02,  1.0865e-02, -9.1327e-02,
        -8.5813e-02, -5.2507e-02, -1.7389e-01, -1.1231e-01, -1.4577e-01,
         2.7707e-03, -1.0852e-02,  3.0929e-02], device='cuda:0')), ('recurrent_blocks.0.weight_ih_l0_reverse', tensor([[ 0.0644, -0.0227,  0.0128],
        [ 0.0514,  0.1166,  0.0171],
        [-0.1624, -0.0686, -0.1504],
        [-0.1128, -0.1115, -0.1141],
        [ 0.1599, -0.0271, -0.0111],
        [-0.0678, -0.0658, -0.0310],
        [ 0.0534,  0.0130,  0.1527],
        [-0.1100,  0.1527, -0.1270],
        [ 0.1619, -0.0025, -0.0788],
        [ 0.0807, -0.1769,  0.1628],
        [ 0.1558, -0.1773,  0.0412],
        [-0.0019, -0.1000, -0.0549],
        [-0.0534, -0.1614, -0.1674],
        [ 0.1120,  0.1027,  0.0983],
        [ 0.1549,  0.1431,  0.1445],
        [-0.0506, -0.0229, -0.0368],
        [-0.0227,  0.0714, -0.1265],
        [-0.0821,  0.1109, -0.1498],
        [ 0.0044,  0.0589,  0.1191],
        [-0.1218, -0.1001, -0.1148],
        [ 0.1138, -0.1494,  0.0753],
        [-0.0535, -0.0748,  0.0362],
        [ 0.0976,  0.0798,  0.0575],
        [-0.0837,  0.1861,  0.0795],
        [ 0.1668, -0.1615, -0.1822],
        [ 0.0428,  0.0356, -0.1592],
        [ 0.0456,  0.1714, -0.0224],
        [ 0.0476,  0.0207,  0.1832],
        [-0.0623, -0.0562,  0.0010],
        [-0.0371, -0.0491, -0.1493],
        [ 0.1194,  0.1565,  0.0207],
        [ 0.0418, -0.0242,  0.0743],
        [-0.0972, -0.0063,  0.0376],
        [ 0.0476,  0.0398,  0.0270],
        [-0.1397,  0.0637, -0.0428],
        [-0.0258, -0.0330, -0.1656],
        [ 0.0447, -0.1771,  0.0078],
        [ 0.0035, -0.0812,  0.0021],
        [-0.0697,  0.1480,  0.0493],
        [-0.0093,  0.0564,  0.1487],
        [ 0.1070,  0.0631, -0.0283],
        [ 0.0490, -0.0053,  0.0431],
        [ 0.0597,  0.1188,  0.1022],
        [-0.1060, -0.0327, -0.0021],
        [-0.0744, -0.1633,  0.0525],
        [ 0.1523,  0.1698,  0.0240],
        [ 0.1048,  0.1322, -0.1420],
        [ 0.0878, -0.1191, -0.0771],
        [ 0.0207, -0.0856, -0.0373],
        [ 0.0785,  0.0311,  0.0018],
        [-0.0049,  0.1213, -0.1010],
        [ 0.1633, -0.1504, -0.0987],
        [-0.1357,  0.1437,  0.0085],
        [ 0.0773, -0.0684, -0.1483],
        [ 0.1419,  0.1497,  0.1660],
        [-0.1145, -0.0315, -0.1227],
        [ 0.0322, -0.0071, -0.0433],
        [-0.0498,  0.0226,  0.0394],
        [-0.1548,  0.1184,  0.1135],
        [-0.0330, -0.1586, -0.0635],
        [-0.1422, -0.1675, -0.1642],
        [ 0.0486,  0.0679, -0.0295],
        [-0.0405,  0.1824, -0.0541],
        [-0.0721, -0.0181,  0.1569],
        [-0.1751, -0.0604,  0.0633],
        [ 0.1656,  0.1463,  0.0462],
        [ 0.0182,  0.0041, -0.1135],
        [ 0.1271,  0.0407,  0.0667],
        [-0.1568, -0.1547,  0.1260],
        [ 0.0056, -0.1371,  0.0642],
        [-0.0172,  0.0856,  0.0376],
        [ 0.0187, -0.0227,  0.0785],
        [-0.0079, -0.0344, -0.1757],
        [-0.0193, -0.0754,  0.0497],
        [-0.0320, -0.0392, -0.0322],
        [ 0.0701,  0.0289,  0.1639],
        [-0.0258,  0.0178, -0.1575],
        [-0.1594,  0.1819, -0.1190],
        [-0.1443, -0.1257, -0.0543],
        [-0.1511,  0.1323,  0.1087],
        [-0.1576, -0.0064,  0.0697],
        [-0.0634, -0.0863, -0.0980],
        [-0.1123,  0.1110, -0.0971],
        [ 0.0098, -0.0710, -0.0958],
        [ 0.1330, -0.1489,  0.1068],
        [-0.0721, -0.0283, -0.1244],
        [ 0.1539,  0.0876,  0.1456],
        [-0.1451,  0.0318, -0.1328],
        [ 0.0089, -0.1025,  0.1799],
        [ 0.1528, -0.0322,  0.0369],
        [ 0.1614, -0.0115, -0.0165],
        [-0.1584,  0.0710, -0.1376],
        [-0.1520,  0.1513, -0.0813],
        [-0.1637, -0.1797, -0.1843],
        [ 0.0325, -0.0838, -0.0446],
        [-0.1319, -0.0264,  0.1496],
        [-0.0511, -0.1215,  0.0407],
        [-0.0852, -0.1435, -0.1022],
        [ 0.0242, -0.1622,  0.0230],
        [-0.1402,  0.1112, -0.0290],
        [-0.0725, -0.0006,  0.1549],
        [ 0.1123, -0.1394, -0.0816],
        [ 0.0176,  0.0835, -0.0102],
        [ 0.1338, -0.0526,  0.0779],
        [ 0.1437, -0.0888, -0.1303],
        [-0.0588,  0.1035, -0.1828],
        [-0.1445,  0.1158,  0.1497],
        [ 0.1474, -0.1359,  0.0303],
        [ 0.1105,  0.1408, -0.0595],
        [-0.0181,  0.1027,  0.1733],
        [ 0.1145,  0.1237, -0.1522],
        [-0.0699, -0.0336,  0.1029],
        [ 0.0488,  0.1637, -0.0484],
        [-0.0007,  0.0023,  0.1477],
        [ 0.1637, -0.1516,  0.1475],
        [-0.0618,  0.1277, -0.0475],
        [-0.1571, -0.0939, -0.0710],
        [-0.0365, -0.1819,  0.0534],
        [ 0.0041, -0.1150,  0.1153],
        [ 0.0769,  0.1026,  0.1767],
        [ 0.1451, -0.1274, -0.0996],
        [ 0.1180,  0.0206,  0.0438],
        [ 0.1625, -0.0980,  0.1413],
        [ 0.1439,  0.1008,  0.1313],
        [-0.0022,  0.0329, -0.1498],
        [ 0.0798, -0.0036,  0.0461],
        [ 0.0022, -0.1365,  0.0206],
        [ 0.0857, -0.1490,  0.1625]], device='cuda:0')), ('recurrent_blocks.0.weight_hh_l0_reverse', tensor([[ 0.1395, -0.1123,  0.0759,  ..., -0.0079,  0.0080,  0.1660],
        [-0.0597, -0.1408, -0.0719,  ..., -0.0315,  0.0337,  0.1681],
        [ 0.0699,  0.1185,  0.0202,  ..., -0.0832,  0.0890,  0.1168],
        ...,
        [ 0.1486, -0.0428, -0.1536,  ..., -0.1193, -0.1429,  0.1127],
        [ 0.1212,  0.0651, -0.1025,  ..., -0.1662,  0.0357, -0.1422],
        [ 0.1342,  0.1256,  0.0814,  ...,  0.0351,  0.0345,  0.1391]],
       device='cuda:0')), ('recurrent_blocks.0.bias_ih_l0_reverse', tensor([-0.0147, -0.1258,  0.0367,  0.0961,  0.1297,  0.0824,  0.1548, -0.1720,
        -0.0072,  0.0600, -0.0086,  0.1322,  0.1596,  0.0322, -0.0237, -0.0380,
         0.1147, -0.0728, -0.1303, -0.1367,  0.0075,  0.0023,  0.0660,  0.0978,
         0.0041, -0.0128, -0.1779, -0.1482,  0.1366,  0.0256,  0.1290, -0.1436,
        -0.1532, -0.1200, -0.1383,  0.0958,  0.1056,  0.0814, -0.1300,  0.0633,
         0.0119,  0.0486,  0.1148, -0.0690, -0.0461, -0.0397, -0.0155,  0.1633,
         0.0307, -0.0686,  0.0851, -0.0387, -0.1012, -0.1012, -0.1534,  0.1723,
         0.0977, -0.0480, -0.0051, -0.1577, -0.0699, -0.1147, -0.0373, -0.0950,
        -0.0741, -0.0199,  0.0788,  0.0489,  0.0759,  0.0476,  0.1243,  0.1199,
        -0.0496, -0.0925,  0.1182, -0.1169,  0.1188, -0.1178, -0.1172, -0.1621,
        -0.0201, -0.1438, -0.0262,  0.1133, -0.0150, -0.0113, -0.0811, -0.1597,
         0.0046,  0.1797, -0.0336, -0.1405,  0.1332,  0.0934, -0.0847,  0.0504,
         0.0988, -0.1035,  0.0186,  0.0706,  0.1606, -0.0360, -0.1272,  0.1449,
         0.0951,  0.1443,  0.0510, -0.1373,  0.0818,  0.0708,  0.1268, -0.0882,
         0.0415, -0.0398,  0.1127,  0.1214,  0.0922, -0.0899, -0.1392,  0.1210,
         0.0745,  0.0714,  0.0585,  0.0416,  0.0798, -0.1091,  0.0597,  0.0891],
       device='cuda:0')), ('recurrent_blocks.0.bias_hh_l0_reverse', tensor([ 0.1819,  0.1467,  0.0925, -0.0744,  0.0684, -0.1200,  0.1389, -0.0978,
        -0.0265,  0.0165, -0.0586,  0.0004, -0.1767, -0.0399, -0.0888,  0.1578,
        -0.0852, -0.0907,  0.1662, -0.0507,  0.0592,  0.0436, -0.0003, -0.1216,
        -0.0170, -0.0613, -0.0281,  0.1549,  0.0233, -0.0733,  0.1590, -0.1272,
        -0.1625,  0.1452,  0.1302,  0.1002, -0.0130,  0.0639,  0.0553, -0.0316,
        -0.0607,  0.1493,  0.1638,  0.1317, -0.0072,  0.1223,  0.0070, -0.0448,
         0.1399,  0.1418,  0.0492,  0.0944, -0.0569, -0.1859, -0.0567,  0.0491,
         0.0824,  0.0885, -0.1517, -0.0251,  0.1473, -0.0555, -0.0877,  0.0444,
        -0.0912, -0.0693, -0.1369,  0.0824, -0.0683, -0.1396,  0.0134, -0.0545,
        -0.0852,  0.1234,  0.0808,  0.0567,  0.0489,  0.0819, -0.1850, -0.0285,
        -0.0333, -0.0743,  0.0928, -0.1644,  0.0590,  0.0854, -0.0842, -0.0452,
        -0.0062, -0.0020, -0.1360,  0.0089,  0.1060,  0.1113,  0.0929, -0.0548,
         0.1390,  0.0113, -0.0834, -0.0178, -0.1362,  0.1669,  0.0639, -0.1797,
        -0.0955, -0.0981, -0.0745,  0.0914,  0.0538,  0.0263,  0.0918, -0.0016,
        -0.1623, -0.0181, -0.1589,  0.0143,  0.0453,  0.0082, -0.0160,  0.1550,
         0.1085,  0.1208, -0.1132,  0.1231, -0.1796,  0.1612, -0.0246, -0.0074],
       device='cuda:0')), ('recurrent_blocks.1.weight_ih_l0', tensor([[ 0.0558,  0.0887, -0.0567,  ...,  0.1475,  0.1137, -0.0856],
        [ 0.0407,  0.0642,  0.0039,  ...,  0.1624,  0.1612,  0.0034],
        [-0.1414,  0.1183, -0.1544,  ..., -0.1234,  0.1047,  0.0398],
        ...,
        [ 0.0987, -0.1211, -0.1658,  ...,  0.0988,  0.0445, -0.1410],
        [-0.0720, -0.1353, -0.1215,  ...,  0.0324, -0.1521,  0.0505],
        [ 0.1393,  0.1469, -0.1083,  ..., -0.1745,  0.0113, -0.0852]],
       device='cuda:0')), ('recurrent_blocks.1.weight_hh_l0', tensor([[ 0.0422, -0.0696,  0.0383,  ..., -0.1610, -0.0925, -0.0136],
        [-0.0733,  0.0516, -0.0207,  ...,  0.0804, -0.0826, -0.1647],
        [-0.1756, -0.0336,  0.1424,  ...,  0.0489, -0.0118,  0.0173],
        ...,
        [ 0.0113,  0.0643, -0.0474,  ...,  0.0556,  0.0915, -0.1316],
        [-0.0814, -0.1449,  0.0648,  ...,  0.0309, -0.0326,  0.0697],
        [ 0.0746,  0.0919,  0.0907,  ..., -0.1414,  0.1276,  0.1358]],
       device='cuda:0')), ('recurrent_blocks.1.bias_ih_l0', tensor([-0.0035,  0.1464,  0.1004, -0.0196, -0.1531, -0.0182,  0.1299, -0.1622,
         0.0674, -0.0244, -0.0591, -0.1856, -0.1689, -0.0597,  0.0744,  0.0639,
        -0.1327,  0.1635, -0.1608,  0.0470, -0.1272, -0.0904, -0.1804, -0.0419,
         0.0030, -0.0783, -0.0535, -0.0351, -0.1071,  0.1182, -0.1272, -0.1170,
         0.0551,  0.0021,  0.1138,  0.0542, -0.0875,  0.0914,  0.0303, -0.1144,
         0.0028, -0.0200, -0.1260, -0.0333, -0.1365, -0.0334,  0.1505,  0.1119,
         0.0300,  0.0718,  0.0728, -0.1484,  0.0950,  0.0374,  0.0979, -0.0606,
         0.0655,  0.1006,  0.1516, -0.1631, -0.1538, -0.1394, -0.0702,  0.1269,
         0.1754, -0.0809,  0.0374,  0.1392,  0.1044,  0.1288,  0.0065, -0.0352,
         0.1358,  0.1022,  0.1390,  0.0635, -0.1177,  0.0918,  0.0131,  0.1542,
         0.0231,  0.1463,  0.1050, -0.1432, -0.0411, -0.0853, -0.0976, -0.0550,
        -0.0286, -0.1210,  0.0692,  0.0201,  0.0671, -0.1226, -0.0284,  0.1608,
         0.0614, -0.1081, -0.1857,  0.0416, -0.1042, -0.1686, -0.1268,  0.1327,
         0.1821, -0.1420, -0.0892, -0.0807,  0.1658, -0.1434,  0.0287, -0.1560,
         0.1346, -0.0618, -0.0687,  0.1474,  0.1376,  0.0052,  0.0802,  0.0238,
         0.1376, -0.1134,  0.1346,  0.0863, -0.0121,  0.0903, -0.1531, -0.1577],
       device='cuda:0')), ('recurrent_blocks.1.bias_hh_l0', tensor([ 0.1636, -0.0612,  0.0909,  0.1355,  0.0840, -0.0587,  0.0532, -0.1667,
        -0.0429,  0.0509,  0.0134, -0.1650, -0.0888,  0.1144,  0.1858,  0.0033,
         0.0955, -0.0142,  0.1015,  0.1613,  0.0135, -0.0328, -0.0112, -0.1401,
         0.1472,  0.0269, -0.1011, -0.0811,  0.0827, -0.1190, -0.0759, -0.0752,
         0.0042, -0.1522, -0.1407,  0.0513,  0.0039, -0.0616, -0.1121,  0.1785,
         0.0999, -0.1835, -0.1342,  0.0479,  0.0498, -0.0954,  0.0445, -0.1508,
         0.1583,  0.1782,  0.0485,  0.1136,  0.0523, -0.0902,  0.0653,  0.1661,
        -0.0289,  0.0299,  0.0378, -0.1646, -0.0661, -0.0797,  0.0346, -0.0727,
        -0.0415, -0.0857,  0.1256,  0.1774,  0.1483, -0.1389, -0.0190,  0.0949,
        -0.0089,  0.0838, -0.1108, -0.0468, -0.0272,  0.1373, -0.1197,  0.1304,
        -0.1117,  0.1124, -0.1081,  0.0427,  0.0831, -0.1142, -0.1072,  0.0682,
        -0.1464,  0.0470, -0.1411,  0.1196,  0.0707,  0.0045, -0.0804,  0.1645,
         0.1512, -0.0229,  0.1478,  0.0529,  0.0419,  0.0710,  0.1793,  0.1833,
        -0.0464, -0.0512,  0.0278,  0.0090,  0.1256,  0.0463, -0.1048,  0.1672,
         0.0494,  0.0352,  0.1556, -0.1050, -0.0552, -0.0850, -0.1800,  0.1246,
        -0.0704, -0.1454,  0.0467,  0.1046, -0.1814,  0.1216,  0.1520, -0.1063],
       device='cuda:0')), ('recurrent_blocks.1.weight_ih_l0_reverse', tensor([[ 0.1572, -0.1547, -0.0224,  ..., -0.1061,  0.1342,  0.0722],
        [ 0.0476,  0.0520, -0.0803,  ..., -0.0637,  0.0503,  0.1364],
        [ 0.0091,  0.0434,  0.1211,  ..., -0.0091, -0.1842, -0.0960],
        ...,
        [-0.0057, -0.0129, -0.0022,  ...,  0.0187,  0.0291,  0.0109],
        [-0.1048,  0.1659, -0.1666,  ..., -0.0504,  0.1660,  0.1134],
        [ 0.0623,  0.1142,  0.1072,  ..., -0.0863, -0.1453,  0.1719]],
       device='cuda:0')), ('recurrent_blocks.1.weight_hh_l0_reverse', tensor([[ 0.0473, -0.0473,  0.1838,  ..., -0.0615, -0.1092,  0.1200],
        [-0.1607, -0.1455, -0.0858,  ...,  0.1628,  0.1542,  0.1362],
        [-0.0017, -0.0838, -0.1581,  ...,  0.1461,  0.1090,  0.1631],
        ...,
        [ 0.1034,  0.0035,  0.0849,  ..., -0.0251,  0.0077, -0.0491],
        [-0.0543, -0.1084,  0.0447,  ...,  0.1289, -0.0812, -0.0274],
        [-0.0039, -0.0332,  0.1101,  ..., -0.0377,  0.1582, -0.1002]],
       device='cuda:0')), ('recurrent_blocks.1.bias_ih_l0_reverse', tensor([ 0.0622,  0.1121,  0.1298,  0.0657, -0.0272,  0.1498,  0.1362,  0.1258,
        -0.1416, -0.1064, -0.0008,  0.0748,  0.1616, -0.0355,  0.0193,  0.0948,
         0.1260,  0.0637, -0.0701, -0.1460,  0.1098, -0.1454,  0.0311, -0.0287,
        -0.1038, -0.1546, -0.1473,  0.1395,  0.0987,  0.0940,  0.0844,  0.0964,
         0.0893, -0.1691,  0.1759, -0.0778,  0.0074, -0.1647,  0.0012,  0.1820,
        -0.1577,  0.0359, -0.1222, -0.1156, -0.0493, -0.0837, -0.1030,  0.1355,
        -0.1083, -0.1661, -0.1282, -0.0894, -0.0914,  0.1375,  0.1663, -0.0695,
        -0.0930, -0.1770,  0.1760,  0.0390,  0.0824,  0.0061, -0.0503,  0.0226,
         0.0615,  0.1146,  0.1099,  0.1318, -0.1741,  0.1420,  0.1552, -0.1270,
        -0.0927, -0.1005,  0.0902,  0.0078, -0.1220, -0.1372,  0.0839, -0.1250,
         0.0221,  0.1414, -0.1195,  0.1606, -0.0900,  0.0578,  0.1402,  0.0852,
        -0.0956, -0.0995, -0.0796,  0.0143, -0.0157, -0.1770, -0.0464, -0.0493,
         0.0635,  0.0514, -0.0599,  0.1041,  0.0416,  0.0292,  0.0841, -0.0346,
        -0.1155, -0.0795, -0.0313,  0.1158,  0.0473, -0.1530,  0.1210,  0.0226,
        -0.0771,  0.0617, -0.1233,  0.0845, -0.0591,  0.1200, -0.1153,  0.1702,
         0.0901, -0.0926,  0.1656, -0.1176, -0.0652, -0.0643, -0.0827, -0.1223],
       device='cuda:0')), ('recurrent_blocks.1.bias_hh_l0_reverse', tensor([ 0.0707,  0.0072, -0.0259, -0.0036, -0.0315, -0.0938,  0.0523,  0.1348,
         0.1220,  0.1217, -0.0649,  0.0789, -0.0114,  0.0209,  0.1486,  0.1067,
        -0.1294, -0.0530,  0.1548, -0.0229, -0.0185,  0.1381, -0.1085, -0.1618,
        -0.0152,  0.0804, -0.0405,  0.0405, -0.0770,  0.1441,  0.0284,  0.1001,
        -0.0227,  0.0038,  0.1260, -0.1299, -0.0253, -0.1575, -0.1181, -0.0438,
         0.1267,  0.0590,  0.1564,  0.1020, -0.1539,  0.0881, -0.1250, -0.1213,
         0.0622,  0.0778,  0.1741,  0.0050, -0.1179,  0.0571,  0.1353, -0.0174,
        -0.1749,  0.0338,  0.1462, -0.0352,  0.0570,  0.1382, -0.1499,  0.0865,
        -0.1508, -0.0543,  0.0486, -0.0596,  0.0768, -0.0713, -0.0863, -0.0384,
        -0.0279, -0.0869,  0.0522,  0.0272,  0.1496,  0.0230,  0.1450, -0.1605,
        -0.0197, -0.0931,  0.0803,  0.1495, -0.0497, -0.0802, -0.0580, -0.1541,
        -0.1606, -0.1066, -0.1529, -0.1021,  0.1118,  0.0471,  0.0985, -0.1226,
        -0.1622, -0.0411,  0.0696, -0.1226, -0.0561,  0.1156,  0.1483,  0.0780,
         0.1551, -0.1248,  0.1244,  0.0850,  0.1354,  0.0654, -0.0664, -0.0113,
        -0.0128,  0.0579,  0.1439,  0.0461,  0.0371, -0.0475,  0.0589, -0.0818,
        -0.0025, -0.0866, -0.1442,  0.1000, -0.1212, -0.0607,  0.1403,  0.0650],
       device='cuda:0')), ('recurrent_blocks.2.weight_ih_l0', tensor([[-0.0773, -0.0959,  0.0157,  ..., -0.0319, -0.0909,  0.0060],
        [ 0.0294,  0.1505, -0.0650,  ..., -0.0044, -0.0160, -0.1090],
        [ 0.1478,  0.1819,  0.1382,  ..., -0.0179,  0.1561, -0.1224],
        ...,
        [-0.1168, -0.1864, -0.0952,  ...,  0.0324,  0.1390,  0.0278],
        [-0.0631, -0.0068, -0.0545,  ..., -0.1297,  0.0500, -0.0334],
        [ 0.0996, -0.0774,  0.1484,  ..., -0.0113,  0.1683, -0.1211]],
       device='cuda:0')), ('recurrent_blocks.2.weight_hh_l0', tensor([[-0.0042,  0.1248,  0.1731,  ...,  0.1266, -0.0910, -0.1113],
        [-0.1047, -0.0214,  0.0082,  ...,  0.0844, -0.1381, -0.1644],
        [ 0.0066,  0.1242,  0.1510,  ...,  0.1251,  0.0688, -0.1495],
        ...,
        [-0.0628, -0.0382,  0.1124,  ...,  0.0559,  0.0484,  0.1764],
        [-0.0646,  0.0638,  0.0735,  ...,  0.0313,  0.0182,  0.0967],
        [ 0.1115,  0.1272,  0.0840,  ...,  0.0377,  0.0836, -0.0776]],
       device='cuda:0')), ('recurrent_blocks.2.bias_ih_l0', tensor([-0.1452,  0.0102,  0.0289, -0.0655, -0.1461,  0.1334,  0.1204, -0.0077,
         0.1566,  0.1063,  0.0065, -0.1197, -0.1221, -0.0732,  0.1076,  0.1232,
        -0.0811,  0.0245,  0.1774, -0.0373, -0.1620, -0.0435,  0.0688, -0.0221,
        -0.0047, -0.0145,  0.1267, -0.1265,  0.1779,  0.0817, -0.0211, -0.0409,
         0.0707,  0.1001,  0.0086,  0.1063, -0.1196, -0.0591,  0.0235, -0.1052,
        -0.0814,  0.0974,  0.1364,  0.0208,  0.0349, -0.0318,  0.0514,  0.0384,
         0.0586, -0.0290, -0.0319,  0.0445,  0.0845,  0.0674,  0.1677,  0.0349,
        -0.0287, -0.0471, -0.0788, -0.0059, -0.0690, -0.0622, -0.0257, -0.1597,
        -0.1217, -0.0431,  0.0988,  0.1461,  0.0462, -0.0878,  0.1151, -0.0219,
         0.1655, -0.0018, -0.0797, -0.0630, -0.0570,  0.1130,  0.0297, -0.1200,
        -0.1524, -0.0736, -0.1415,  0.1681, -0.0696,  0.0476,  0.0943, -0.1418,
        -0.0485, -0.0506, -0.1179, -0.1646, -0.0853,  0.1773, -0.1004,  0.0732,
        -0.1104, -0.1497,  0.0680, -0.0005, -0.1065,  0.0917, -0.0625,  0.0219,
         0.1532, -0.0403, -0.0058, -0.1845, -0.0653,  0.1457,  0.0121,  0.0923,
        -0.0677, -0.1437, -0.0861, -0.0930, -0.0379, -0.0183, -0.1418, -0.1357,
        -0.1430,  0.0927,  0.1238, -0.0574,  0.0813, -0.0259,  0.1371,  0.0670],
       device='cuda:0')), ('recurrent_blocks.2.bias_hh_l0', tensor([-0.0929, -0.0990, -0.1708,  0.0382, -0.1845,  0.0427,  0.0005,  0.1200,
        -0.0300,  0.1270, -0.0211, -0.1247,  0.0761,  0.0269, -0.0419, -0.0714,
         0.1005, -0.0085, -0.0066,  0.0703, -0.1097,  0.0443,  0.0511, -0.0019,
        -0.0693, -0.0829, -0.1622, -0.0769,  0.1652,  0.1374, -0.0153, -0.0422,
         0.1688,  0.0703, -0.1522, -0.0338,  0.0202,  0.0748, -0.1409, -0.0570,
         0.1298,  0.0350,  0.1633,  0.1079,  0.1357, -0.0924,  0.1588,  0.0796,
        -0.1465,  0.1265,  0.1467,  0.0488, -0.0481,  0.0272, -0.1084,  0.0350,
         0.0396,  0.0055,  0.0448,  0.0681,  0.0601, -0.0131,  0.1153, -0.1541,
         0.0830, -0.1393, -0.0282,  0.0488, -0.1182,  0.1214,  0.1669,  0.0312,
        -0.1648, -0.1010, -0.1379,  0.0834,  0.0974, -0.0772, -0.0459, -0.0978,
         0.0175, -0.0266, -0.0930, -0.0413, -0.0518, -0.1138,  0.0864,  0.1650,
        -0.0659,  0.0002,  0.1654,  0.1389,  0.1552,  0.0438, -0.0758,  0.0010,
         0.0116, -0.0779, -0.1230, -0.0174, -0.0227,  0.0845,  0.0048, -0.1704,
         0.1072, -0.0258, -0.0136,  0.0147, -0.0602,  0.0870, -0.0703, -0.0581,
        -0.1267, -0.0700, -0.1146,  0.1063, -0.0162,  0.0027, -0.1259, -0.1518,
         0.1656, -0.0908,  0.0440,  0.0825,  0.1318,  0.1571, -0.0527,  0.0579],
       device='cuda:0')), ('recurrent_blocks.2.weight_ih_l0_reverse', tensor([[-0.0822, -0.1725,  0.0865,  ...,  0.1027,  0.0154, -0.1308],
        [ 0.1265, -0.0715, -0.1407,  ...,  0.0846, -0.1550,  0.0440],
        [-0.0819,  0.1367,  0.0004,  ...,  0.1008, -0.1844,  0.0197],
        ...,
        [-0.1151, -0.0476,  0.0818,  ...,  0.1334,  0.1415, -0.0921],
        [-0.0570, -0.0171,  0.1653,  ..., -0.0929, -0.1623,  0.0410],
        [ 0.1071, -0.0080, -0.0842,  ...,  0.0458, -0.1428, -0.0904]],
       device='cuda:0')), ('recurrent_blocks.2.weight_hh_l0_reverse', tensor([[-0.0944, -0.1543,  0.1320,  ..., -0.1500,  0.0881,  0.1547],
        [-0.1462, -0.0800,  0.1259,  ...,  0.1580, -0.0760,  0.0883],
        [-0.0213,  0.1393, -0.0686,  ..., -0.1398,  0.1706, -0.1493],
        ...,
        [ 0.1142, -0.1842,  0.1837,  ..., -0.1426, -0.0200, -0.0818],
        [ 0.0541,  0.1568,  0.1759,  ..., -0.0614,  0.0988,  0.0664],
        [ 0.0364, -0.1423, -0.0613,  ..., -0.1166, -0.0305,  0.1784]],
       device='cuda:0')), ('recurrent_blocks.2.bias_ih_l0_reverse', tensor([ 0.0592, -0.0895,  0.1301, -0.0754,  0.1453,  0.0524,  0.1661,  0.1143,
        -0.0852,  0.0972, -0.0850, -0.1074,  0.1291,  0.1201, -0.1539,  0.1462,
         0.0628,  0.0840,  0.0414,  0.1712, -0.0727,  0.0567,  0.0273, -0.0147,
        -0.1550, -0.0580,  0.1249,  0.0909, -0.0361,  0.1671,  0.0288, -0.0591,
         0.1511, -0.0670, -0.0265,  0.1619,  0.0550, -0.1693, -0.0106, -0.1279,
         0.1330, -0.0149,  0.1441,  0.0721,  0.1460, -0.1058,  0.0276, -0.0576,
        -0.0015,  0.0973, -0.0036, -0.0997,  0.0172, -0.1412, -0.1581, -0.1420,
         0.0550, -0.0709, -0.0431,  0.1578,  0.0190,  0.0200, -0.1175,  0.0888,
         0.0633, -0.1068, -0.0773, -0.0136,  0.0330,  0.0678, -0.0022, -0.0555,
        -0.1144,  0.1600,  0.1598, -0.0915, -0.1705, -0.0066, -0.1453, -0.1858,
         0.0021, -0.0938, -0.1252,  0.1164,  0.0271,  0.1383, -0.1217,  0.0352,
         0.0209, -0.0124,  0.1277,  0.0064,  0.0027,  0.1011, -0.1733,  0.0451,
         0.0483,  0.1629,  0.1087,  0.1356, -0.1024, -0.1625, -0.1450,  0.1433,
         0.0559, -0.0373,  0.0321,  0.1380,  0.1318,  0.0677, -0.0086, -0.0833,
        -0.1055,  0.1508,  0.0557,  0.0267, -0.0531, -0.1312,  0.0832,  0.0583,
        -0.1568,  0.0418, -0.0763,  0.0289, -0.0606,  0.0919,  0.0279,  0.0468],
       device='cuda:0')), ('recurrent_blocks.2.bias_hh_l0_reverse', tensor([-0.1058,  0.0404,  0.1051,  0.0396, -0.0539,  0.0640, -0.1351, -0.0532,
        -0.0438,  0.0879,  0.1347,  0.1261,  0.0746,  0.0186,  0.0376, -0.1461,
        -0.1382, -0.0635, -0.0249,  0.0838,  0.0443,  0.1567,  0.1646, -0.1088,
        -0.1175,  0.1127,  0.0185,  0.1399, -0.0447, -0.0672,  0.1697,  0.1059,
         0.1012, -0.1113, -0.0144,  0.0658,  0.0765, -0.0480, -0.0601,  0.0961,
         0.1079, -0.1014,  0.0838,  0.0597, -0.0008,  0.1594,  0.1115, -0.0554,
         0.0440,  0.0496,  0.1009, -0.0141, -0.1402,  0.0840,  0.0349, -0.1416,
         0.0823,  0.1605, -0.0212,  0.0154,  0.1001,  0.0569, -0.0243, -0.0676,
        -0.1290,  0.0403, -0.1539,  0.0269,  0.1518,  0.0470,  0.0541, -0.0529,
         0.0401, -0.1007, -0.0107,  0.1140,  0.0390, -0.1805, -0.0227, -0.0031,
         0.1640,  0.1721,  0.0264,  0.0468, -0.1276,  0.0597,  0.0025, -0.1555,
        -0.0548, -0.0710, -0.0897, -0.1664,  0.0678, -0.1065,  0.0825,  0.1364,
         0.0082,  0.0770, -0.1655, -0.0955, -0.1609, -0.0661, -0.1257, -0.0993,
        -0.1277, -0.1757,  0.1696,  0.1088, -0.1621,  0.1399,  0.1286, -0.1184,
         0.0835,  0.1677, -0.0220, -0.0534,  0.0355, -0.1322,  0.1495,  0.1339,
        -0.0763, -0.0984,  0.0075,  0.1405, -0.0596,  0.0167,  0.1136, -0.1655],
       device='cuda:0')), ('recurrent_blocks.3.weight_ih_l0', tensor([[-0.1609,  0.1573, -0.0505,  ...,  0.0389,  0.1622,  0.1323],
        [-0.1175, -0.1008,  0.0846,  ..., -0.1034,  0.1402,  0.0449],
        [-0.0487,  0.0556,  0.1300,  ...,  0.1290, -0.0858, -0.1511],
        ...,
        [-0.1586,  0.0081, -0.0388,  ..., -0.1624, -0.0173, -0.0886],
        [ 0.0633,  0.0077,  0.1404,  ...,  0.0548,  0.1704,  0.0675],
        [ 0.0861, -0.0691, -0.0902,  ..., -0.1518,  0.0830,  0.0274]],
       device='cuda:0')), ('recurrent_blocks.3.weight_hh_l0', tensor([[ 0.0005, -0.0187,  0.1296,  ...,  0.0898,  0.0897, -0.1511],
        [-0.1342, -0.1018, -0.0547,  ...,  0.1089,  0.1754,  0.1535],
        [-0.0042, -0.1362, -0.0929,  ..., -0.0478, -0.0743, -0.1420],
        ...,
        [ 0.0200, -0.0341, -0.1552,  ...,  0.1169, -0.1637,  0.0978],
        [ 0.1039,  0.1232,  0.1477,  ..., -0.0983,  0.0449,  0.1038],
        [-0.0066, -0.1005,  0.0432,  ..., -0.0276,  0.0351,  0.1457]],
       device='cuda:0')), ('recurrent_blocks.3.bias_ih_l0', tensor([-6.5365e-02,  8.0735e-02, -2.3202e-02,  2.0493e-02, -4.9440e-02,
        -3.1153e-02, -5.5743e-04, -1.3853e-02, -8.9720e-02, -8.3696e-02,
         1.0347e-02, -8.4678e-02,  6.8879e-02, -1.8925e-02, -9.5198e-02,
        -1.2578e-01, -1.3090e-01, -1.6015e-01, -2.4915e-02,  9.2166e-02,
        -8.6275e-02,  5.6309e-02, -1.7152e-02, -1.2703e-01, -2.4314e-02,
        -2.2421e-02,  1.4807e-01, -1.2536e-01,  1.9375e-02, -1.5443e-01,
        -6.6938e-02, -1.1697e-01, -8.3039e-02,  1.1061e-01, -1.5644e-01,
        -8.7159e-02,  8.7306e-02, -6.8951e-02,  1.4079e-01,  2.9439e-02,
         4.8418e-02,  1.8604e-01,  6.4181e-02,  2.4323e-02,  1.7821e-01,
        -1.8013e-02,  1.2076e-01,  9.5486e-03,  1.3974e-01, -7.8397e-02,
         1.3118e-01,  1.1486e-01,  9.0402e-02, -6.4277e-02,  4.6117e-02,
         6.2331e-02,  7.4589e-02,  1.6384e-01,  6.9818e-02,  1.0182e-01,
        -2.7298e-03,  1.3898e-01, -5.4717e-03,  3.4088e-02, -1.2227e-01,
        -4.0107e-03,  3.7856e-02,  3.0396e-02, -4.5654e-02, -1.2720e-01,
         1.6690e-01,  7.4945e-02, -8.5603e-02,  1.7665e-01, -8.0495e-02,
        -1.1975e-01,  9.5817e-02,  1.4374e-01,  3.1831e-03,  1.7195e-01,
        -1.6532e-01,  8.0656e-03,  7.4036e-02,  1.1087e-02, -1.9925e-02,
        -1.3683e-01, -1.0606e-01, -1.3834e-01, -1.5741e-01,  1.3756e-01,
        -8.9262e-02,  1.5177e-01, -1.3080e-01,  1.0738e-01,  1.3782e-01,
        -1.1922e-01, -1.2551e-01,  1.0880e-02,  2.6963e-03,  7.7019e-02,
        -1.0799e-01, -9.8270e-02, -2.9041e-02,  1.1556e-01, -1.3213e-01,
        -1.0358e-01,  1.7227e-01, -8.9540e-02,  3.3149e-02,  1.2846e-01,
        -8.0896e-03, -9.5477e-02, -1.3484e-01, -9.8736e-02, -2.1531e-02,
        -1.6246e-01, -1.1843e-01, -9.0010e-02,  8.1478e-02,  1.2134e-01,
        -2.3285e-02, -7.9832e-02,  7.0439e-02, -2.0178e-02, -9.5305e-02,
        -4.5927e-02,  4.1537e-02,  4.5569e-05], device='cuda:0')), ('recurrent_blocks.3.bias_hh_l0', tensor([ 0.1239, -0.0452, -0.1090, -0.0913, -0.1393, -0.1261, -0.1562,  0.0651,
         0.0029,  0.1297, -0.1287, -0.0669, -0.0414,  0.1530,  0.1690, -0.1334,
        -0.1103, -0.0526,  0.1495, -0.0848,  0.1304,  0.1799, -0.0220,  0.0276,
         0.0748,  0.1195,  0.0540, -0.1353, -0.0865, -0.0931, -0.1408,  0.1775,
         0.1171, -0.0561,  0.0480, -0.0224,  0.0579, -0.0838,  0.1617,  0.0677,
        -0.0891, -0.1032, -0.0675, -0.0270, -0.0545, -0.0656, -0.1224,  0.0533,
        -0.1753,  0.0007,  0.0410,  0.0298,  0.1841, -0.0098,  0.1413, -0.0380,
         0.0296, -0.1319,  0.0846, -0.0808,  0.1576,  0.1725, -0.1527, -0.1065,
         0.0490, -0.1792, -0.0593, -0.0132,  0.0261,  0.0343, -0.1233, -0.0539,
         0.0683,  0.1738, -0.0105, -0.0919,  0.0354,  0.1708,  0.0111,  0.0962,
         0.0575, -0.0726,  0.1388,  0.1424, -0.1056,  0.0903,  0.1741,  0.1389,
        -0.0194,  0.1044, -0.0798, -0.1436,  0.1272, -0.1129, -0.1505,  0.1750,
        -0.0462, -0.1646,  0.1018, -0.0326,  0.0765,  0.0653, -0.0253, -0.1699,
         0.1556,  0.0471, -0.0566, -0.0193, -0.0902,  0.0052,  0.0976,  0.0881,
         0.0171,  0.0427,  0.0824, -0.1110, -0.0991, -0.1588,  0.1062,  0.1508,
         0.0221, -0.0107, -0.0049, -0.1463,  0.1732,  0.1547,  0.1276, -0.0990],
       device='cuda:0')), ('recurrent_blocks.3.weight_ih_l0_reverse', tensor([[-0.0248, -0.0190,  0.1366,  ..., -0.1329, -0.1155,  0.0786],
        [-0.0509, -0.1008,  0.0007,  ..., -0.1526, -0.1436, -0.0782],
        [-0.1033,  0.0590, -0.1258,  ...,  0.0011,  0.0186,  0.0349],
        ...,
        [-0.0795,  0.0817, -0.1843,  ...,  0.1723,  0.1608, -0.1262],
        [-0.0603, -0.1731, -0.1009,  ...,  0.1570,  0.0659,  0.1030],
        [-0.0004,  0.0373,  0.0672,  ...,  0.0759, -0.0087,  0.1513]],
       device='cuda:0')), ('recurrent_blocks.3.weight_hh_l0_reverse', tensor([[-0.0407,  0.1457,  0.1737,  ..., -0.0865,  0.0038, -0.0547],
        [-0.1214, -0.1113,  0.0811,  ..., -0.0204,  0.0271, -0.0074],
        [-0.0324,  0.0038, -0.0496,  ..., -0.1150, -0.0946, -0.1121],
        ...,
        [ 0.0196,  0.0188,  0.0975,  ..., -0.1365,  0.1350, -0.0308],
        [-0.0418, -0.0422,  0.1848,  ..., -0.0339, -0.0925,  0.0296],
        [-0.1309, -0.1312, -0.1276,  ..., -0.0998, -0.0545,  0.0279]],
       device='cuda:0')), ('recurrent_blocks.3.bias_ih_l0_reverse', tensor([ 0.1290,  0.0653, -0.0483, -0.1033,  0.0610, -0.1419,  0.0881,  0.0407,
        -0.1018,  0.1582,  0.1116, -0.1133, -0.0304, -0.0199, -0.0982,  0.0880,
        -0.0135, -0.1475,  0.0003, -0.1167,  0.0739,  0.0189,  0.1089,  0.1469,
         0.0421, -0.1604, -0.0318, -0.1484,  0.1061, -0.0432,  0.0217,  0.0771,
        -0.1551,  0.1328,  0.0740, -0.1550,  0.0043, -0.0010, -0.0079,  0.1249,
        -0.0301,  0.0630,  0.1339,  0.1110, -0.0394, -0.0103,  0.0078, -0.0764,
         0.0147, -0.1485,  0.1516,  0.1432, -0.0331, -0.0936, -0.0426,  0.1270,
         0.1180,  0.1635, -0.1273,  0.0459, -0.0250,  0.0802, -0.0999, -0.0501,
        -0.0486,  0.1072, -0.0932, -0.1452, -0.1350,  0.0329, -0.0464,  0.0417,
        -0.0700,  0.0062, -0.0618, -0.0754, -0.0711,  0.0124, -0.0848,  0.0004,
         0.0586,  0.0202,  0.0136,  0.1131, -0.0578,  0.1011, -0.0672, -0.1177,
         0.1299, -0.0104, -0.0636, -0.0097, -0.0007,  0.0585, -0.0641,  0.1580,
        -0.1407,  0.0292, -0.0820, -0.1639,  0.0970, -0.0455,  0.0146,  0.0575,
         0.0339,  0.0255,  0.0073,  0.0007,  0.1408, -0.0238,  0.1624, -0.0743,
         0.1361,  0.1342, -0.1289,  0.1278, -0.1416, -0.0975,  0.0993, -0.1301,
        -0.0229,  0.0282,  0.1006,  0.1555, -0.0189, -0.0056,  0.0345,  0.1306],
       device='cuda:0')), ('recurrent_blocks.3.bias_hh_l0_reverse', tensor([ 0.0699, -0.1625,  0.0252, -0.1521,  0.0505, -0.0728,  0.0834, -0.0124,
        -0.0323,  0.0287, -0.0630, -0.0499,  0.1461,  0.1235, -0.0985,  0.0649,
         0.0980,  0.1630, -0.0813, -0.1523, -0.1725,  0.1172,  0.1629,  0.1658,
        -0.1322,  0.1231,  0.0155,  0.1630, -0.0113, -0.1465, -0.0445, -0.0346,
         0.1414,  0.0225, -0.0977, -0.0955, -0.1181,  0.1277, -0.1246, -0.0499,
        -0.0619, -0.0765,  0.0373,  0.1379,  0.1586,  0.0773,  0.0648, -0.0563,
        -0.1411, -0.1397, -0.0386, -0.1836, -0.0389, -0.1734, -0.0336,  0.1254,
        -0.0646, -0.1253,  0.0339,  0.0224, -0.0821, -0.1500, -0.0975, -0.0550,
        -0.1172,  0.1251, -0.0556, -0.1402,  0.1559,  0.0803,  0.1728,  0.1211,
        -0.0576,  0.0925, -0.0308, -0.1163,  0.1508, -0.1591, -0.0344,  0.0535,
        -0.0465,  0.0914,  0.0883, -0.1029, -0.1116,  0.1124, -0.1422,  0.0007,
        -0.0076, -0.1432, -0.0862,  0.1103, -0.1201, -0.1771,  0.1545,  0.1050,
        -0.1106, -0.1656, -0.1460, -0.1746,  0.1639, -0.1622, -0.1458, -0.0195,
         0.0937, -0.0876,  0.1842,  0.0831, -0.1026,  0.0938, -0.1651,  0.0668,
        -0.1160,  0.0480, -0.0522, -0.0899, -0.0083, -0.0073, -0.1541,  0.0329,
         0.1071,  0.1105, -0.1320,  0.0067,  0.0608, -0.0010,  0.0006,  0.1151],
       device='cuda:0')), ('fc_blocks.0.0.weight', tensor([[-0.0265,  0.0044, -0.1084,  ..., -0.0100, -0.0554,  0.1291],
        [-0.1077,  0.0413, -0.0750,  ...,  0.1048,  0.0562,  0.0239],
        [-0.0631, -0.0765, -0.0731,  ..., -0.0639,  0.0849,  0.1065],
        ...,
        [-0.0279, -0.0434, -0.0516,  ..., -0.0935,  0.0926, -0.0587],
        [ 0.0103, -0.0339, -0.1117,  ...,  0.1202, -0.0119,  0.0804],
        [-0.0213,  0.0814, -0.0732,  ..., -0.0925, -0.0575,  0.0827]],
       device='cuda:0')), ('fc_blocks.0.0.bias', tensor([ 0.1229,  0.0858, -0.0413,  0.0424,  0.1017, -0.0561, -0.0776,  0.0064,
        -0.0340, -0.0713,  0.0708,  0.0292, -0.0754,  0.0115,  0.1158,  0.1177,
         0.0814,  0.0700,  0.0210,  0.0755,  0.0370,  0.0813, -0.1275, -0.0625,
        -0.0180,  0.0890,  0.0870, -0.0265,  0.0617,  0.0394, -0.0835, -0.1183],
       device='cuda:0')), ('fc_blocks.1.0.weight', tensor([[-5.0232e-02, -8.7036e-02, -3.0874e-02,  1.8562e-01,  1.5737e-01,
          1.4411e-01, -1.4113e-01,  1.5644e-01, -9.8675e-02, -4.1112e-03,
          1.6118e-01, -1.4157e-01,  1.3179e-01,  5.7997e-02, -1.5315e-01,
          1.7082e-01, -7.6560e-02, -9.5584e-02,  1.0574e-02, -1.5457e-01,
         -2.0483e-02,  1.1054e-01,  1.6440e-03, -1.0080e-01, -1.1939e-01,
          1.9470e-02,  1.4674e-01, -6.6371e-02,  8.5465e-02,  3.1703e-02,
         -1.0209e-01, -7.2080e-02],
        [-5.0484e-03, -4.0769e-02, -9.8173e-03, -1.4762e-02,  7.6711e-02,
         -3.0385e-02, -6.8331e-02, -6.6712e-02, -4.6333e-02, -5.0436e-02,
          1.2269e-01, -1.4036e-01, -5.5869e-02, -9.6555e-02, -1.6060e-01,
         -1.6865e-01, -1.4842e-01, -7.1112e-02,  1.0668e-01,  4.2195e-02,
         -1.9458e-02, -1.2230e-01, -1.0611e-01,  1.7556e-01,  3.0920e-02,
          1.1571e-01,  4.9845e-02,  3.7438e-02, -8.7180e-02,  4.8708e-02,
         -9.9879e-02,  7.8713e-02],
        [ 1.4116e-01,  1.0729e-01,  1.2962e-01,  1.2239e-02, -1.0413e-01,
         -1.5473e-01,  1.7166e-01, -1.1368e-01, -1.6277e-01,  6.3178e-02,
          1.3377e-01, -1.7651e-01,  1.8235e-01, -6.4059e-02,  6.0377e-02,
         -3.1701e-02, -1.1694e-01,  1.5644e-02,  1.4333e-01,  1.3103e-01,
         -1.0805e-01,  1.0521e-01, -3.5495e-03,  1.1639e-01,  1.1434e-01,
          6.7787e-02,  1.7006e-01, -2.2693e-02, -1.1972e-02,  1.3072e-01,
         -6.5564e-02, -1.5585e-01],
        [ 2.0751e-02,  8.6164e-02, -1.5610e-01,  1.4322e-02,  6.5191e-02,
          1.4129e-01,  5.0769e-02,  1.6759e-01, -1.0912e-01,  7.2713e-02,
         -9.7571e-02,  1.2525e-01, -1.8569e-01,  1.3418e-02,  1.1413e-02,
         -9.5386e-02,  1.4382e-01, -3.7752e-02,  5.5496e-03, -7.2728e-02,
          7.7359e-02,  5.1666e-02, -8.5976e-02, -3.3523e-02, -7.7107e-02,
          1.3848e-02,  2.1538e-02,  3.5249e-02, -4.5127e-03, -1.0139e-01,
         -8.7558e-02,  1.6788e-02],
        [-8.0751e-02, -1.8444e-01, -8.2280e-02,  1.4685e-01, -7.8886e-02,
          1.6222e-01,  8.4001e-02, -1.5792e-01,  1.4924e-01,  8.5769e-02,
         -8.2683e-02, -1.7943e-01, -2.1781e-02, -1.6528e-01,  9.8492e-02,
         -1.5202e-01,  1.7067e-01, -1.1357e-03, -3.6996e-02, -3.7000e-02,
          6.9246e-02,  1.3201e-01,  7.1501e-02, -1.1170e-02, -1.6487e-01,
          1.0902e-01, -1.1448e-01, -1.2623e-01,  6.5291e-02, -1.5343e-01,
         -5.1976e-02,  1.1260e-02],
        [-2.4330e-02, -1.6133e-01, -1.3662e-01, -1.1514e-01,  7.9005e-02,
         -1.4168e-01,  1.4768e-01, -1.6135e-01,  1.6493e-02,  1.5743e-01,
         -1.1953e-01,  2.8435e-03, -9.1280e-02, -1.7770e-01,  7.6132e-02,
         -1.4449e-02,  8.8068e-02,  4.0837e-02,  6.0400e-02, -5.4842e-02,
         -1.6070e-01, -1.4342e-01, -4.2506e-03, -7.5776e-02, -4.0091e-03,
          1.4613e-02, -4.4752e-02,  1.0931e-01,  1.4687e-01, -3.0521e-03,
         -9.3895e-02,  5.0708e-02],
        [-3.5570e-02,  1.7159e-01, -7.4382e-02,  1.5166e-01,  8.4519e-02,
         -1.6368e-01,  6.9331e-03, -1.6420e-01, -1.2586e-02, -1.5977e-01,
         -1.0396e-01,  1.1589e-02,  1.4609e-01,  9.4995e-02, -4.8565e-03,
         -7.9901e-03, -7.9245e-02,  1.2818e-01,  3.1713e-02,  2.9394e-02,
         -6.4848e-02,  4.7582e-02, -1.0175e-01, -1.0265e-01, -1.6872e-01,
          1.8490e-01, -5.1497e-02,  1.2945e-01,  1.2946e-02,  3.2687e-03,
         -1.3224e-01,  1.3615e-01],
        [-1.4638e-01, -4.5686e-03,  1.0625e-01,  3.3160e-02,  9.5405e-02,
          1.6510e-01, -1.2142e-01,  5.6409e-02,  1.3869e-01, -4.4227e-03,
          4.8948e-02, -3.9148e-03, -1.7052e-01,  1.1052e-01,  1.0297e-01,
          7.5457e-02,  7.2483e-02,  5.8346e-02, -2.7504e-02,  9.7094e-02,
         -6.3025e-02,  1.4407e-01, -1.3573e-01,  1.3934e-01, -1.5934e-01,
         -1.0617e-01,  6.0030e-02, -1.5281e-01,  4.6785e-02,  8.6285e-02,
         -4.3974e-02, -8.5044e-02],
        [ 1.3719e-01, -1.7513e-01,  1.6927e-01, -1.2363e-01,  1.1615e-01,
          1.2703e-02,  1.7286e-01,  9.2779e-02,  7.2196e-02, -6.8369e-02,
         -1.3365e-01,  1.7776e-01, -9.5842e-02,  1.5324e-01, -4.1646e-02,
         -3.3682e-02,  1.0651e-02,  1.0206e-01, -6.0990e-02,  1.1284e-01,
         -1.3950e-01,  1.1527e-01, -2.7012e-02, -4.6831e-02, -1.0227e-01,
         -3.4509e-02,  1.0567e-01,  2.3114e-02, -7.9924e-02,  1.0278e-01,
          2.7662e-02, -7.9185e-03],
        [ 1.1263e-01, -9.1755e-02,  6.3024e-02,  1.8270e-01,  1.2181e-01,
         -3.7897e-02,  1.2691e-01,  3.5396e-02,  1.5547e-01,  1.6873e-01,
         -1.2903e-01, -1.4553e-01,  1.6448e-01,  6.0586e-02,  1.8376e-01,
         -1.3369e-01,  1.6364e-01, -1.3613e-01, -2.2703e-02, -1.0340e-01,
          1.9720e-02, -1.5748e-01, -1.0249e-01, -1.4785e-01, -1.6324e-01,
          7.6531e-02, -3.6473e-02, -3.5807e-02, -8.9863e-02, -8.7062e-02,
          1.1409e-01, -1.0410e-02],
        [-5.6602e-02,  5.4770e-02, -3.9030e-02, -4.3119e-02,  1.7846e-02,
          2.8837e-02,  7.1629e-02, -2.8157e-02,  1.8052e-01, -1.2931e-01,
         -6.3882e-02, -8.3656e-03, -5.7108e-02,  1.2400e-01, -3.9199e-02,
         -5.6430e-02, -1.0406e-02, -9.5715e-02,  2.2988e-02,  1.8551e-02,
         -4.0937e-03,  1.3475e-01,  6.0503e-02,  5.2112e-02, -1.5919e-01,
         -2.0109e-03,  9.2236e-03,  7.3976e-02, -9.7305e-02,  1.6296e-01,
         -1.0801e-01,  5.9516e-02],
        [-2.6034e-02, -1.6011e-01, -2.5807e-02, -8.4967e-02,  4.1708e-02,
          1.8724e-02, -9.0794e-02,  1.6513e-01,  3.1387e-02,  5.6974e-02,
         -1.2342e-01, -1.1024e-01,  6.5567e-02, -1.4152e-01, -1.4626e-01,
         -1.1615e-01,  5.0016e-02, -1.5288e-01,  1.1522e-01,  5.2021e-02,
         -1.3676e-01, -1.2774e-01,  1.3800e-01,  6.1812e-02,  3.2946e-02,
         -1.1774e-01,  8.4965e-02,  1.2235e-02,  1.4920e-01,  5.9992e-02,
         -8.1614e-02,  1.4255e-01],
        [ 1.5408e-01,  1.1417e-01, -8.5418e-02, -9.0653e-03, -9.5872e-02,
         -1.9278e-02,  9.4565e-02,  5.2600e-02,  1.0699e-01, -4.8433e-03,
         -1.6339e-01, -6.0761e-02,  4.0741e-02,  2.0300e-02,  2.0449e-02,
         -1.1595e-01, -5.4743e-02, -1.2109e-01, -1.6928e-02,  5.6796e-02,
          1.8985e-02,  5.8009e-02, -2.5566e-03,  7.3173e-02,  1.3819e-01,
         -5.2061e-02,  1.1452e-01,  6.1581e-02, -1.8349e-01, -3.1886e-02,
          6.3608e-02,  8.5854e-02],
        [ 1.2289e-01,  9.3662e-02, -1.7892e-01, -1.3667e-01,  1.5541e-01,
         -1.1215e-01, -3.8478e-02, -1.5368e-01, -9.7532e-02,  1.6202e-01,
          1.0235e-01, -1.2499e-01, -4.4024e-02, -2.3631e-02, -1.1739e-01,
         -6.8409e-02,  1.0215e-02, -3.3374e-03,  6.8862e-02, -1.1601e-01,
          1.2104e-01,  8.4335e-02, -9.6269e-02,  1.3538e-01,  6.7487e-02,
         -6.7975e-02, -1.8357e-01,  1.2957e-01,  5.2856e-05, -2.8580e-02,
          9.8790e-02, -1.7787e-03],
        [-1.6072e-01, -4.9186e-02,  3.3703e-02,  5.0073e-02,  1.0088e-01,
         -1.1525e-01, -6.5285e-02,  4.6960e-02, -8.3252e-02,  1.2201e-01,
         -5.0747e-02,  1.9622e-02, -8.4991e-02,  7.0986e-02,  1.2864e-01,
         -1.0532e-01,  5.0941e-02, -9.9259e-02,  7.7943e-02, -1.4257e-02,
         -5.4384e-02, -5.3692e-02,  6.6057e-02,  1.0799e-01,  1.6501e-01,
         -1.0065e-01,  1.1103e-01,  1.4721e-01,  1.1974e-01, -1.5333e-01,
          1.6570e-01, -1.3601e-01],
        [-1.5328e-01,  1.1181e-01, -2.8266e-02,  5.8168e-02, -3.8186e-02,
         -1.7953e-02,  1.0420e-01, -9.3644e-02,  1.1855e-01,  6.9985e-02,
          1.1282e-02,  1.2106e-01,  6.0991e-02, -2.9650e-02, -1.6782e-01,
          5.3143e-02, -8.5049e-02, -5.3770e-02,  1.3556e-02,  7.8911e-02,
         -1.2035e-01, -7.0030e-02,  1.7932e-02,  5.4250e-02, -1.4054e-02,
         -3.1753e-02, -1.2841e-01,  3.4193e-02,  2.0050e-03,  1.2039e-01,
          1.7538e-01, -5.5613e-02]], device='cuda:0')), ('fc_blocks.1.0.bias', tensor([ 0.1611,  0.1231,  0.1434,  0.1643,  0.1366, -0.1551,  0.0080,  0.1199,
        -0.0846,  0.1690,  0.0182,  0.0789, -0.1777, -0.1345,  0.1323, -0.0537],
       device='cuda:0')), ('fc_blocks.2.0.weight', tensor([[-1.4749e-01, -1.5953e-01,  1.0972e-01,  1.4829e-01,  8.3760e-02,
         -4.7804e-02,  1.7132e-01, -6.9022e-02,  2.5825e-01, -2.2929e-01,
         -1.0507e-01, -2.1470e-01,  2.2732e-01,  1.1017e-01, -1.5780e-01,
          1.6093e-01],
        [-5.4678e-02,  3.0995e-02, -2.3964e-01,  9.1020e-02, -9.0471e-02,
          2.5388e-01, -9.5476e-02, -2.2321e-02, -1.3967e-01, -2.2230e-01,
          1.5169e-01,  1.4181e-01,  1.6515e-01,  4.3473e-02,  1.2643e-01,
         -1.0200e-01],
        [-2.5919e-01, -1.8812e-01,  4.7033e-02,  2.5544e-02, -2.1997e-01,
          7.3501e-02,  1.7552e-01,  1.2007e-01,  5.0554e-02, -1.5305e-01,
         -2.5188e-01, -3.6578e-02, -1.6330e-01,  7.2228e-02, -2.3056e-04,
          1.3354e-01],
        [ 2.5228e-01, -2.7600e-02, -1.3421e-01, -1.9290e-01,  2.2425e-01,
          9.5276e-02, -1.8917e-01,  3.5963e-02, -1.8351e-01, -1.6218e-01,
         -1.6472e-02, -2.3902e-01, -1.2379e-01, -1.8121e-01,  2.1571e-01,
          3.4057e-02],
        [-2.3185e-01, -2.9185e-02, -2.3628e-01,  5.6486e-02,  1.7282e-01,
          2.5566e-01, -2.1196e-01,  1.5738e-01, -1.6970e-01, -2.2620e-01,
         -2.1827e-02, -1.9380e-01, -5.2367e-03, -1.2991e-01,  1.4675e-01,
          1.4181e-01],
        [ 5.2382e-02,  1.0389e-01,  2.1879e-01, -4.4824e-02, -4.4234e-03,
          8.5456e-02,  1.2119e-01,  1.0517e-01,  2.3643e-01,  2.3518e-01,
          1.7394e-01, -8.9272e-02,  1.2418e-01, -4.2174e-02, -1.0282e-01,
         -2.5261e-01],
        [ 1.2323e-01, -2.3284e-01, -2.1756e-01, -2.5948e-01,  1.9801e-01,
          1.8863e-02, -2.8394e-02,  1.8242e-01, -1.9193e-01, -1.3357e-01,
         -1.0930e-01,  1.8489e-03,  2.2431e-01,  1.0149e-02, -1.5684e-01,
          2.4596e-01],
        [-5.3295e-02,  1.9207e-01,  9.0478e-02,  1.2194e-01,  8.5596e-02,
          1.0571e-01, -1.5046e-02, -1.3731e-01,  1.1023e-01,  5.1888e-02,
          6.8635e-02, -7.3136e-02,  5.6843e-02,  1.3438e-01, -5.3551e-02,
          2.3203e-01]], device='cuda:0')), ('fc_blocks.2.0.bias', tensor([-0.1375,  0.2389,  0.0838, -0.2202,  0.2341, -0.0275, -0.0094,  0.2014],
       device='cuda:0')), ('fc_blocks.3.0.weight', tensor([[ 0.0392, -0.2949, -0.0891, -0.0141,  0.1959,  0.1056, -0.2117, -0.1416],
        [ 0.0590,  0.0184, -0.0153, -0.2272,  0.0960, -0.1984, -0.2383,  0.1953],
        [-0.1360,  0.1512,  0.0439, -0.0442,  0.2921,  0.0061,  0.0723, -0.0158],
        [-0.1147,  0.0629, -0.0345,  0.1672, -0.0954, -0.1857, -0.0108, -0.1883]],
       device='cuda:0')), ('fc_blocks.3.0.bias', tensor([ 0.1306, -0.0831,  0.2514,  0.0578], device='cuda:0')), ('fc_blocks.4.0.weight', tensor([[ 0.0103,  0.3104, -0.4212,  0.4163],
        [ 0.2151,  0.2061,  0.2984, -0.3580]], device='cuda:0')), ('fc_blocks.4.0.bias', tensor([-0.2686, -0.0795], device='cuda:0'))])
