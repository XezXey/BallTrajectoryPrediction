==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 46.33it/s]
===============================Dataset shape===============================
Mixed : (724,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.10it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1997, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1997, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 1997, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1998, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 1814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 1814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 1820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 1820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 1756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 1756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 1806, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1806, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 1806, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1807, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/5].........torch.Size([128, 1811, 3])
0 tensor([1648], device='cuda:0')
1 tensor([468], device='cuda:0')
2 tensor([711], device='cuda:0')
3 tensor([985], device='cuda:0')
4 tensor([408], device='cuda:0')
5 tensor([1185], device='cuda:0')
6 tensor([1313], device='cuda:0')
7 tensor([459], device='cuda:0')
8 tensor([277], device='cuda:0')
9 tensor([664], device='cuda:0')
10 tensor([287], device='cuda:0')
11 tensor([1099], device='cuda:0')
12 tensor([467], device='cuda:0')
13 tensor([931], device='cuda:0')
14 tensor([584], device='cuda:0')
15 tensor([849], device='cuda:0')
16 tensor([1217], device='cuda:0')
17 tensor([150], device='cuda:0')
18 tensor([1030], device='cuda:0')
19 tensor([318], device='cuda:0')
20 tensor([115], device='cuda:0')
21 tensor([1811], device='cuda:0')
22 tensor([378], device='cuda:0')
23 tensor([447], device='cuda:0')
24 tensor([778], device='cuda:0')
25 tensor([1099], device='cuda:0')
26 tensor([879], device='cuda:0')
27 tensor([316], device='cuda:0')
28 tensor([477], device='cuda:0')
29 tensor([685], device='cuda:0')
30 tensor([110], device='cuda:0')
31 tensor([406], device='cuda:0')
32 tensor([307], device='cuda:0')
33 tensor([1218], device='cuda:0')
34 tensor([133], device='cuda:0')
35 tensor([1321], device='cuda:0')
36 tensor([315], device='cuda:0')
37 tensor([1209], device='cuda:0')
38 tensor([773], device='cuda:0')
39 tensor([228], device='cuda:0')
40 tensor([937], device='cuda:0')
41 tensor([1249], device='cuda:0')
42 tensor([1050], device='cuda:0')
43 tensor([1130], device='cuda:0')
44 tensor([64], device='cuda:0')
45 tensor([420], device='cuda:0')
46 tensor([929], device='cuda:0')
47 tensor([237], device='cuda:0')
48 tensor([804], device='cuda:0')
49 tensor([1028], device='cuda:0')
50 tensor([585], device='cuda:0')
51 tensor([569], device='cuda:0')
52 tensor([708], device='cuda:0')
53 tensor([463], device='cuda:0')
54 tensor([521], device='cuda:0')
55 tensor([930], device='cuda:0')
56 tensor([372], device='cuda:0')
57 tensor([325], device='cuda:0')
58 tensor([409], device='cuda:0')
59 tensor([543], device='cuda:0')
60 tensor([421], device='cuda:0')
61 tensor([716], device='cuda:0')
62 tensor([1018], device='cuda:0')
63 tensor([493], device='cuda:0')
64 tensor([147], device='cuda:0')
65 tensor([1301], device='cuda:0')
66 tensor([117], device='cuda:0')
67 tensor([510], device='cuda:0')
68 tensor([709], device='cuda:0')
69 tensor([688], device='cuda:0')
70 tensor([1122], device='cuda:0')
71 tensor([163], device='cuda:0')
72 tensor([1172], device='cuda:0')
73 tensor([277], device='cuda:0')
74 tensor([1128], device='cuda:0')
75 tensor([910], device='cuda:0')
76 tensor([1325], device='cuda:0')
77 tensor([815], device='cuda:0')
78 tensor([402], device='cuda:0')
79 tensor([1123], device='cuda:0')
80 tensor([438], device='cuda:0')
81 tensor([306], device='cuda:0')
82 tensor([1040], device='cuda:0')
83 tensor([594], device='cuda:0')
84 tensor([899], device='cuda:0')
85 tensor([659], device='cuda:0')
86 tensor([685], device='cuda:0')
87 tensor([386], device='cuda:0')
88 tensor([396], device='cuda:0')
89 tensor([698], device='cuda:0')
90 tensor([402], device='cuda:0')
91 tensor([482], device='cuda:0')
92 tensor([810], device='cuda:0')
93 tensor([1386], device='cuda:0')
94 tensor([580], device='cuda:0')
95 tensor([303], device='cuda:0')
96 tensor([487], device='cuda:0')
97 tensor([889], device='cuda:0')
98 tensor([419], device='cuda:0')
99 tensor([1038], device='cuda:0')
100 tensor([929], device='cuda:0')
101 tensor([335], device='cuda:0')
102 tensor([1148], device='cuda:0')
103 tensor([816], device='cuda:0')
104 tensor([300], device='cuda:0')
105 tensor([885], device='cuda:0')
106 tensor([749], device='cuda:0')
107 tensor([304], device='cuda:0')
108 tensor([343], device='cuda:0')
109 tensor([394], device='cuda:0')
110 tensor([222], device='cuda:0')
111 tensor([506], device='cuda:0')
112 tensor([1537], device='cuda:0')
113 tensor([271], device='cuda:0')
114 tensor([836], device='cuda:0')
115 tensor([378], device='cuda:0')
116 tensor([1345], device='cuda:0')
117 tensor([1370], device='cuda:0')
118 tensor([594], device='cuda:0')
119 tensor([1124], device='cuda:0')
120 tensor([237], device='cuda:0')
121 tensor([479], device='cuda:0')
122 tensor([1377], device='cuda:0')
123 tensor([251], device='cuda:0')
124 tensor([287], device='cuda:0')
125 tensor([149], device='cuda:0')
126 tensor([341], device='cuda:0')
127 tensor([434], device='cuda:0')
torch.Size([128, 1870, 3])
0 tensor([499], device='cuda:0')
1 tensor([663], device='cuda:0')
2 tensor([129], device='cuda:0')
3 tensor([172], device='cuda:0')
4 tensor([125], device='cuda:0')
5 tensor([390], device='cuda:0')
6 tensor([153], device='cuda:0')
7 tensor([168], device='cuda:0')
8 tensor([762], device='cuda:0')
9 tensor([973], device='cuda:0')
10 tensor([643], device='cuda:0')
11 tensor([1200], device='cuda:0')
12 tensor([679], device='cuda:0')
13 tensor([217], device='cuda:0')
14 tensor([418], device='cuda:0')
15 tensor([610], device='cuda:0')
16 tensor([328], device='cuda:0')
17 tensor([521], device='cuda:0')
18 tensor([452], device='cuda:0')
19 tensor([554], device='cuda:0')
20 tensor([118], device='cuda:0')
21 tensor([653], device='cuda:0')
22 tensor([1371], device='cuda:0')
23 tensor([727], device='cuda:0')
24 tensor([1145], device='cuda:0')
25 tensor([120], device='cuda:0')
26 tensor([113], device='cuda:0')
27 tensor([1853], device='cuda:0')
28 tensor([192], device='cuda:0')
29 tensor([1493], device='cuda:0')
30 tensor([1187], device='cuda:0')
31 tensor([167], device='cuda:0')
32 tensor([404], device='cuda:0')
33 tensor([1034], device='cuda:0')
34 tensor([687], device='cuda:0')
35 tensor([559], device='cuda:0')
36 tensor([331], device='cuda:0')
37 tensor([909], device='cuda:0')
38 tensor([777], device='cuda:0')
39 tensor([484], device='cuda:0')
40 tensor([159], device='cuda:0')
41 tensor([849], device='cuda:0')
42 tensor([136], device='cuda:0')
43 tensor([654], device='cuda:0')
44 tensor([516], device='cuda:0')
45 tensor([360], device='cuda:0')
46 tensor([994], device='cuda:0')
47 tensor([1398], device='cuda:0')
48 tensor([1243], device='cuda:0')
49 tensor([114], device='cuda:0')
50 tensor([891], device='cuda:0')
51 tensor([1870], device='cuda:0')
52 tensor([426], device='cuda:0')
53 tensor([156], device='cuda:0')
54 tensor([1048], device='cuda:0')
55 tensor([1077], device='cuda:0')
56 tensor([915], device='cuda:0')
57 tensor([787], device='cuda:0')
58 tensor([920], device='cuda:0')
59 tensor([1032], device='cuda:0')
60 tensor([815], device='cuda:0')
61 tensor([506], device='cuda:0')
62 tensor([708], device='cuda:0')
63 tensor([1583], device='cuda:0')
64 tensor([94], device='cuda:0')
65 tensor([1190], device='cuda:0')
66 tensor([1432], device='cuda:0')
67 tensor([547], device='cuda:0')
68 tensor([1003], device='cuda:0')
69 tensor([150], device='cuda:0')
70 tensor([402], device='cuda:0')
71 tensor([1318], device='cuda:0')
72 tensor([563], device='cuda:0')
73 tensor([738], device='cuda:0')
74 tensor([1535], device='cuda:0')
75 tensor([981], device='cuda:0')
76 tensor([1582], device='cuda:0')
77 tensor([521], device='cuda:0')
78 tensor([1060], device='cuda:0')
79 tensor([95], device='cuda:0')
80 tensor([723], device='cuda:0')
81 tensor([907], device='cuda:0')
82 tensor([152], device='cuda:0')
83 tensor([86], device='cuda:0')
84 tensor([89], device='cuda:0')
85 tensor([579], device='cuda:0')
86 tensor([710], device='cuda:0')
87 tensor([313], device='cuda:0')
88 tensor([830], device='cuda:0')
89 tensor([1214], device='cuda:0')
90 tensor([94], device='cuda:0')
91 tensor([1091], device='cuda:0')
92 tensor([1643], device='cuda:0')
93 tensor([298], device='cuda:0')
94 tensor([454], device='cuda:0')
95 tensor([111], device='cuda:0')
96 tensor([582], device='cuda:0')
97 tensor([1446], device='cuda:0')
98 tensor([247], device='cuda:0')
99 tensor([1291], device='cuda:0')
100 tensor([66], device='cuda:0')
101 tensor([1546], device='cuda:0')
102 tensor([854], device='cuda:0')
103 tensor([634], device='cuda:0')
104 tensor([497], device='cuda:0')
105 tensor([293], device='cuda:0')
106 tensor([141], device='cuda:0')
107 tensor([987], device='cuda:0')
108 tensor([1349], device='cuda:0')
109 tensor([1416], device='cuda:0')
110 tensor([578], device='cuda:0')
111 tensor([464], device='cuda:0')
112 tensor([306], device='cuda:0')
113 tensor([1433], device='cuda:0')
114 tensor([324], device='cuda:0')
115 tensor([687], device='cuda:0')
116 tensor([100], device='cuda:0')
117 tensor([86], device='cuda:0')
118 tensor([1370], device='cuda:0')
119 tensor([1032], device='cuda:0')
120 tensor([539], device='cuda:0')
121 tensor([464], device='cuda:0')
122 tensor([980], device='cuda:0')
123 tensor([968], device='cuda:0')
124 tensor([429], device='cuda:0')
125 tensor([899], device='cuda:0')
126 tensor([920], device='cuda:0')
127 tensor([463], device='cuda:0')
Train Loss : 944.022, Val Loss : 407.991
======> Trajectory Loss : 806.306, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.377, BelowGroundPenalize Loss : 0.000
torch.Size([1811, 3])
0 tensor(3, device='cuda:0')
Traceback (most recent call last):
  File "train_ball_trajectory_depth.py", line 400, in <module>
    cam_params_dict=cam_params_dict, visualization_path=args.visualization_path)
  File "train_ball_trajectory_depth.py", line 234, in train
    utils_func.make_visualize(input_train_dict=input_train_dict, gt_train_dict=gt_train_dict, input_val_dict=input_val_dict, gt_val_dict=gt_val_dict, pred_train_dict=pred_train_dict, pred_val_dict=pred_val_dict, visualization_path=visualization_path, pred='depth')
  File "/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/utils/utils_func.py", line 140, in make_visualize
    visualize_trajectory(pred=pt.mul(pred_train_dict['xyz'], gt_train_dict['mask'][..., [0, 1, 2]]), gt=gt_train_dict['xyz'][..., [0, 1, 2]], lengths=gt_train_dict['lengths'], mask=gt_train_dict['mask'][..., [0, 1, 2]], fig=fig_traj, flag='Train', n_vis=n_vis, vis_idx=train_vis_idx)
  File "/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/utils/utils_func.py", line 199, in visualize_trajectory
    fig.add_trace(go.Scatter3d(x=pred[i][:lengths[i], 0], y=pred[i][:lengths[i], 1], z=pred[i][:lengths[i], 2], mode='markers+lines', marker=marker_dict_pred, name="{}-Estimated Trajectory [{}], MSE = {:.3f}".format(flag, i, loss.TrajectoryLoss(pt.tensor(pred[i]).to(device), pt.tensor(gt[i]).to(device), mask=mask[i]))), row=idx+1, col=col)
  File "/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py", line 67, in TrajectoryLoss
    weight_loss = create_weight_loss(mask)
  File "/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py", line 78, in create_weight_loss
    weight_loss[idx][:length[0], [0, 1, 2]] = pt.linspace(10, 1, length[0]).view(-1, 1).to(device)
IndexError: invalid index of a 0-dim tensor. Use tensor.item() to convert a 0-dim tensor to a Python number
