==============================================Features==============================================
Prediction = depth, Environment = unity
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'f_sin-9', 'f_cos-10', 'g-11']
Selected features :  [6]
1. input_col =  [3, 4, 6]
2. input_startpos_col =  [3, 4, 5, 6]
3. gt_col =  [5, 6]
4. gt_startpos_col =  [0, 1, 2, 6]
5. gt_xyz_col =  [0, 1, 2, 6]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.25it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.72it/s]
Mixed : (16533,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 24.57it/s]
Mixed : (1841,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [0] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [1] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [2] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 828, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 3]), initial position=torch.Size([128, 1, 4])
gt batch [3] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 755, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 755, 3]), initial position=torch.Size([128, 1, 4])
gt batch [4] : batch=torch.Size([128, 755, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 756, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [5] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 906, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 3]), initial position=torch.Size([128, 1, 4])
gt batch [6] : batch=torch.Size([128, 906, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 797, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 3]), initial position=torch.Size([128, 1, 4])
gt batch [7] : batch=torch.Size([128, 797, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 3]), initial position=torch.Size([128, 1, 4])
gt batch [8] : batch=torch.Size([128, 969, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [9] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 694, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 694, 3]), initial position=torch.Size([128, 1, 4])
gt batch [10] : batch=torch.Size([128, 694, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 695, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [11] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 698, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 698, 3]), initial position=torch.Size([128, 1, 4])
gt batch [12] : batch=torch.Size([128, 698, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 699, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [13] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 705, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 705, 3]), initial position=torch.Size([128, 1, 4])
gt batch [14] : batch=torch.Size([128, 705, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 706, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [15] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [16] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 713, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 713, 3]), initial position=torch.Size([128, 1, 4])
gt batch [17] : batch=torch.Size([128, 713, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 807, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 807, 3]), initial position=torch.Size([128, 1, 4])
gt batch [18] : batch=torch.Size([128, 807, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 808, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 895, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 3]), initial position=torch.Size([128, 1, 4])
gt batch [19] : batch=torch.Size([128, 895, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [20] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [21] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 790, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 3]), initial position=torch.Size([128, 1, 4])
gt batch [22] : batch=torch.Size([128, 790, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [23] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [24] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 3]), initial position=torch.Size([128, 1, 4])
gt batch [25] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 845, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 3]), initial position=torch.Size([128, 1, 4])
gt batch [26] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [27] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [28] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 3]), initial position=torch.Size([128, 1, 4])
gt batch [29] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 836, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 3]), initial position=torch.Size([128, 1, 4])
gt batch [30] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
gt batch [31] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 931, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 931, 3]), initial position=torch.Size([128, 1, 4])
gt batch [32] : batch=torch.Size([128, 931, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
gt batch [33] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 861, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 3]), initial position=torch.Size([128, 1, 4])
gt batch [34] : batch=torch.Size([128, 861, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
gt batch [35] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 963, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 3]), initial position=torch.Size([128, 1, 4])
gt batch [36] : batch=torch.Size([128, 963, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 964, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 830, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 3]), initial position=torch.Size([128, 1, 4])
gt batch [37] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
gt batch [38] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 956, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 3]), initial position=torch.Size([128, 1, 4])
gt batch [39] : batch=torch.Size([128, 956, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 957, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 730, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 730, 3]), initial position=torch.Size([128, 1, 4])
gt batch [40] : batch=torch.Size([128, 730, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 3]), initial position=torch.Size([128, 1, 4])
gt batch [41] : batch=torch.Size([128, 884, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
gt batch [42] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 784, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 784, 3]), initial position=torch.Size([128, 1, 4])
gt batch [43] : batch=torch.Size([128, 784, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 904, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 3]), initial position=torch.Size([128, 1, 4])
gt batch [44] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 825, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 3]), initial position=torch.Size([128, 1, 4])
gt batch [45] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 805, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 805, 3]), initial position=torch.Size([128, 1, 4])
gt batch [46] : batch=torch.Size([128, 805, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 806, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [47] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 780, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 3]), initial position=torch.Size([128, 1, 4])
gt batch [48] : batch=torch.Size([128, 780, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 935, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 935, 3]), initial position=torch.Size([128, 1, 4])
gt batch [49] : batch=torch.Size([128, 935, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 936, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
gt batch [50] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
gt batch [51] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [52] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 748, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 748, 3]), initial position=torch.Size([128, 1, 4])
gt batch [53] : batch=torch.Size([128, 748, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 749, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 769, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 769, 3]), initial position=torch.Size([128, 1, 4])
gt batch [54] : batch=torch.Size([128, 769, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 770, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
gt batch [55] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [56] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 791, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 791, 3]), initial position=torch.Size([128, 1, 4])
gt batch [57] : batch=torch.Size([128, 791, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 792, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([128, 820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 3]), initial position=torch.Size([128, 1, 4])
gt batch [58] : batch=torch.Size([128, 820, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
gt batch [59] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([128, 970, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 3]), initial position=torch.Size([128, 1, 4])
gt batch [60] : batch=torch.Size([128, 970, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 971, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([128, 776, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 3]), initial position=torch.Size([128, 1, 4])
gt batch [61] : batch=torch.Size([128, 776, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([128, 982, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 982, 3]), initial position=torch.Size([128, 1, 4])
gt batch [62] : batch=torch.Size([128, 982, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [63] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [64] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 3]), initial position=torch.Size([128, 1, 4])
gt batch [65] : batch=torch.Size([128, 839, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
gt batch [66] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [67] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 3]), initial position=torch.Size([128, 1, 4])
gt batch [68] : batch=torch.Size([128, 961, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 3]), initial position=torch.Size([128, 1, 4])
gt batch [69] : batch=torch.Size([128, 917, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([128, 860, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 3]), initial position=torch.Size([128, 1, 4])
gt batch [70] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
gt batch [71] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([128, 801, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 3]), initial position=torch.Size([128, 1, 4])
gt batch [72] : batch=torch.Size([128, 801, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([128, 735, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 735, 3]), initial position=torch.Size([128, 1, 4])
gt batch [73] : batch=torch.Size([128, 735, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 736, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
gt batch [74] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
gt batch [75] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 3]), initial position=torch.Size([128, 1, 4])
gt batch [76] : batch=torch.Size([128, 822, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [77] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [78] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
gt batch [79] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([128, 886, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 3]), initial position=torch.Size([128, 1, 4])
gt batch [80] : batch=torch.Size([128, 886, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 887, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([128, 823, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 3]), initial position=torch.Size([128, 1, 4])
gt batch [81] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [82] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [83] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([128, 966, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 3]), initial position=torch.Size([128, 1, 4])
gt batch [84] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([128, 903, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 903, 3]), initial position=torch.Size([128, 1, 4])
gt batch [85] : batch=torch.Size([128, 903, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [86] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([128, 759, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 759, 3]), initial position=torch.Size([128, 1, 4])
gt batch [87] : batch=torch.Size([128, 759, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 760, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([128, 785, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 785, 3]), initial position=torch.Size([128, 1, 4])
gt batch [88] : batch=torch.Size([128, 785, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([128, 1040, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1040, 3]), initial position=torch.Size([128, 1, 4])
gt batch [89] : batch=torch.Size([128, 1040, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1041, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [90] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
gt batch [91] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([128, 844, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 3]), initial position=torch.Size([128, 1, 4])
gt batch [92] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
gt batch [93] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([128, 943, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 3]), initial position=torch.Size([128, 1, 4])
gt batch [94] : batch=torch.Size([128, 943, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 944, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
gt batch [95] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([128, 955, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 955, 3]), initial position=torch.Size([128, 1, 4])
gt batch [96] : batch=torch.Size([128, 955, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 956, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([128, 763, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 3]), initial position=torch.Size([128, 1, 4])
gt batch [97] : batch=torch.Size([128, 763, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([128, 1023, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1023, 3]), initial position=torch.Size([128, 1, 4])
gt batch [98] : batch=torch.Size([128, 1023, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1024, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
gt batch [99] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([128, 814, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 814, 3]), initial position=torch.Size([128, 1, 4])
gt batch [100] : batch=torch.Size([128, 814, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([128, 843, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 3]), initial position=torch.Size([128, 1, 4])
gt batch [101] : batch=torch.Size([128, 843, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
gt batch [102] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 3]), initial position=torch.Size([128, 1, 4])
gt batch [103] : batch=torch.Size([128, 838, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([128, 908, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 3]), initial position=torch.Size([128, 1, 4])
gt batch [104] : batch=torch.Size([128, 908, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [105] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [106] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([128, 842, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 3]), initial position=torch.Size([128, 1, 4])
gt batch [107] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([128, 995, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 995, 3]), initial position=torch.Size([128, 1, 4])
gt batch [108] : batch=torch.Size([128, 995, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 996, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([128, 862, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 3]), initial position=torch.Size([128, 1, 4])
gt batch [109] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [110] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [111] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([128, 979, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 979, 3]), initial position=torch.Size([128, 1, 4])
gt batch [112] : batch=torch.Size([128, 979, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 980, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([128, 852, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 3]), initial position=torch.Size([128, 1, 4])
gt batch [113] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [114] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 3]), initial position=torch.Size([128, 1, 4])
gt batch [115] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([128, 756, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 756, 3]), initial position=torch.Size([128, 1, 4])
gt batch [116] : batch=torch.Size([128, 756, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 757, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([128, 731, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 731, 3]), initial position=torch.Size([128, 1, 4])
gt batch [117] : batch=torch.Size([128, 731, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 732, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([128, 840, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 3]), initial position=torch.Size([128, 1, 4])
gt batch [118] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 3]), initial position=torch.Size([128, 1, 4])
gt batch [119] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([128, 714, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 714, 3]), initial position=torch.Size([128, 1, 4])
gt batch [120] : batch=torch.Size([128, 714, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 715, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 3]), initial position=torch.Size([128, 1, 4])
gt batch [121] : batch=torch.Size([128, 945, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([128, 952, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 3]), initial position=torch.Size([128, 1, 4])
gt batch [122] : batch=torch.Size([128, 952, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([128, 762, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 3]), initial position=torch.Size([128, 1, 4])
gt batch [123] : batch=torch.Size([128, 762, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
gt batch [124] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([128, 915, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 3]), initial position=torch.Size([128, 1, 4])
gt batch [125] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
gt batch [126] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([128, 1000, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1000, 3]), initial position=torch.Size([128, 1, 4])
gt batch [127] : batch=torch.Size([128, 1000, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1001, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([128, 789, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 789, 3]), initial position=torch.Size([128, 1, 4])
gt batch [128] : batch=torch.Size([128, 789, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 790, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 1]}, 'depth': {'input_size': 3, 'output_size': 2, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [3, 32, 32, 32, 32], 'fc_size': [64, 32, 16, 8, 4, 2]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(2, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
      (1): Sigmoid()
    )
  )
)
####### Model - Depth #######
BiLSTMResidualTrainableInit(
  (recurrent_blocks): ModuleList(
    (0): LSTM(3, 32, batch_first=True, bidirectional=True)
    (1): LSTM(64, 32, batch_first=True, bidirectional=True)
    (2): LSTM(64, 32, batch_first=True, bidirectional=True)
    (3): LSTM(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): LeakyReLU(negative_slope=0.01)
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/129].........tensor([[[-0.7595, -0.3981, -0.0243,  ..., -0.6565, -0.2287, -0.5039],
         [ 0.9283, -0.0319,  1.1998,  ...,  0.5438, -0.8061, -0.9755],
         [ 0.8188,  0.3036,  0.3450,  ...,  1.3462, -0.0732, -0.5267],
         ...,
         [-1.3512,  1.9787,  0.1050,  ...,  0.0664, -0.3861,  0.2999],
         [-0.5950,  0.7311, -0.2680,  ..., -1.5376, -0.6707,  1.3966],
         [-0.0736,  0.6292,  2.1313,  ...,  0.6093,  0.2148, -0.4431]],

        [[-1.0514,  1.2850, -0.3554,  ...,  0.5260, -0.3237,  0.7425],
         [ 0.4460,  1.5627, -0.9891,  ...,  0.1200, -1.0543, -0.9763],
         [ 0.1974,  0.5867, -0.2439,  ...,  0.9094,  1.2168,  0.9114],
         ...,
         [ 0.3336, -0.8902, -0.1102,  ...,  0.2490, -0.0252,  0.5594],
         [ 0.3466, -0.6727, -0.3931,  ...,  0.0389, -0.0845, -0.1684],
         [ 0.1143,  1.0106,  0.3629,  ...,  0.6889,  1.5099, -1.5150]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4317,  1.6817,  0.9043,  ...,  0.4567, -0.1265,  1.8673],
         [ 2.0056,  0.8723,  0.4739,  ...,  0.1577,  0.4807, -0.6791],
         [-0.6519,  0.5297,  0.3072,  ..., -0.4307,  0.7946,  0.9559],
         ...,
         [ 0.1566,  0.1725, -1.3801,  ...,  2.0626,  1.4162,  0.5942],
         [ 1.6656, -0.4973,  1.1559,  ...,  0.7654, -1.6043,  0.8615],
         [-0.5971,  0.3991,  1.1724,  ..., -0.0693,  1.2045,  0.8168]],

        [[ 1.0785, -0.0739, -0.7520,  ...,  0.4039,  0.2053, -2.4457],
         [-0.6298, -1.1403, -0.1513,  ..., -0.9543, -0.3506,  0.3365],
         [-0.2638,  0.3407,  1.8368,  ..., -1.2014, -1.3744, -0.9667],
         ...,
         [-2.8979,  1.7758, -0.2859,  ...,  1.1854, -0.6715, -0.8742],
         [ 0.3408, -1.1100,  0.8254,  ...,  0.0141,  1.0304,  0.7885],
         [ 1.2636, -0.2647,  0.1761,  ...,  0.9136, -0.6203,  1.8563]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4317e+00,  1.6817e+00,  9.0431e-01,  ...,  4.5668e-01,
           -1.2647e-01,  1.8673e+00],
          [ 2.0056e+00,  8.7229e-01,  4.7393e-01,  ...,  1.5770e-01,
            4.8074e-01, -6.7914e-01],
          [-6.5187e-01,  5.2974e-01,  3.0718e-01,  ..., -4.3067e-01,
            7.9457e-01,  9.5590e-01],
          ...,
          [ 1.5660e-01,  1.7250e-01, -1.3801e+00,  ...,  2.0626e+00,
            1.4162e+00,  5.9415e-01],
          [ 1.6656e+00, -4.9732e-01,  1.1559e+00,  ...,  7.6540e-01,
           -1.6043e+00,  8.6155e-01],
          [-5.9715e-01,  3.9913e-01,  1.1724e+00,  ..., -6.9307e-02,
            1.2045e+00,  8.1684e-01]],

         [[ 1.0785e+00, -7.3887e-02, -7.5200e-01,  ...,  4.0392e-01,
            2.0533e-01, -2.4457e+00],
          [-6.2983e-01, -1.1403e+00, -1.5130e-01,  ..., -9.5434e-01,
           -3.5063e-01,  3.3654e-01],
          [-2.6376e-01,  3.4067e-01,  1.8368e+00,  ..., -1.2014e+00,
           -1.3744e+00, -9.6674e-01],
          ...,
          [-2.8979e+00,  1.7758e+00, -2.8589e-01,  ...,  1.1854e+00,
           -6.7148e-01, -8.7424e-01],
          [ 3.4084e-01, -1.1100e+00,  8.2538e-01,  ...,  1.4067e-02,
            1.0304e+00,  7.8853e-01],
          [ 1.2636e+00, -2.6467e-01,  1.7606e-01,  ...,  9.1359e-01,
           -6.2028e-01,  1.8563e+00]]],


        [[[-3.3562e-01,  1.6404e+00,  1.0910e+00,  ..., -2.0594e+00,
           -6.3864e-01,  3.6227e-01],
          [-3.7127e-02, -3.9677e-01,  1.1543e+00,  ..., -6.0719e-02,
            1.6400e-01,  1.1962e+00],
          [-1.1678e+00, -1.1191e+00,  4.0113e-02,  ...,  2.4707e-01,
            1.4160e+00,  5.4814e-01],
          ...,
          [ 2.7902e-01,  1.7132e+00, -1.1335e+00,  ...,  7.4764e-01,
            1.5686e+00, -2.2135e-01],
          [ 6.4834e-01, -1.9599e-01, -5.1755e-01,  ..., -1.5203e+00,
           -1.1185e-01, -5.0410e-01],
          [-8.0408e-01,  6.4759e-01, -5.3562e-01,  ..., -5.4705e-01,
            2.4123e+00, -4.9090e-01]],

         [[ 1.6702e-02, -8.9525e-01,  3.1627e-01,  ..., -1.4538e-01,
            8.2727e-01,  2.1717e+00],
          [-1.0430e+00,  1.8096e-01,  3.3533e-02,  ..., -1.5840e+00,
            4.1447e-01,  1.2628e+00],
          [-4.6319e-01,  3.5246e-01, -1.1045e-01,  ...,  5.4610e-01,
            2.9053e-03,  1.7679e+00],
          ...,
          [ 7.1947e-01, -2.3997e+00, -1.1454e+00,  ...,  2.7764e-01,
            6.9736e-01,  3.5886e-01],
          [-1.8250e+00,  7.3452e-01,  8.3895e-01,  ..., -6.2467e-01,
           -9.2573e-01, -9.6877e-02],
          [-6.5888e-01, -1.6709e-01,  2.6365e-01,  ...,  8.0083e-01,
           -4.4485e-01, -2.0102e-02]]],


        [[[ 1.3791e+00,  2.5411e-01,  6.3228e-01,  ..., -1.0093e+00,
            2.0387e+00, -4.6998e-01],
          [-1.1369e+00,  1.1075e+00, -7.3974e-01,  ..., -3.7582e-01,
            3.0121e-01,  2.9343e+00],
          [-5.2395e-01,  2.9444e-01,  1.1733e+00,  ..., -1.7932e+00,
           -1.7720e+00,  2.8814e-02],
          ...,
          [ 4.0370e-01, -3.7662e-01, -8.2746e-01,  ..., -3.9416e-01,
           -4.2322e-01, -8.4287e-01],
          [-1.2252e+00, -2.6925e-01,  8.1470e-01,  ...,  1.3153e-01,
            1.1914e+00, -1.3633e+00],
          [ 1.2381e+00, -9.8581e-01,  9.4438e-01,  ...,  1.4311e-01,
            7.2429e-01, -7.0806e-01]],

         [[ 1.4258e+00, -7.8328e-01, -7.8343e-01,  ...,  2.1538e+00,
            9.1266e-01,  6.8784e-01],
          [-9.9185e-01,  3.6240e-01,  1.5117e+00,  ..., -9.3555e-01,
           -1.6770e+00, -5.8834e-01],
          [-3.9692e-01, -6.3377e-01, -9.8278e-01,  ..., -6.5432e-01,
            1.6626e-01, -9.2219e-01],
          ...,
          [ 4.6036e-01, -5.8781e-01, -8.8118e-01,  ...,  1.2219e+00,
            4.8397e-01,  4.0019e-01],
          [-1.6518e+00,  8.5693e-02,  1.3546e-01,  ...,  8.8981e-02,
            4.9291e-01, -1.2256e+00],
          [-1.5917e+00, -1.6293e+00,  7.7945e-01,  ..., -1.1781e+00,
           -3.7004e-02, -2.9441e-01]]],


        [[[-9.0681e-01,  4.8499e-01, -2.1771e-01,  ..., -2.3294e-01,
            5.6191e-01, -2.3965e-01],
          [-9.2769e-01,  3.5224e-01,  1.2943e-01,  ..., -6.3039e-01,
            4.6803e-01,  1.2151e+00],
          [ 1.8916e+00, -3.3086e-01,  1.9701e+00,  ..., -1.8222e-01,
           -6.3983e-01, -6.7326e-01],
          ...,
          [ 7.5450e-02, -5.8734e-01, -1.1068e+00,  ...,  4.3476e-01,
            5.7113e-02, -2.9937e-01],
          [ 1.0282e+00, -2.0569e+00,  1.3908e+00,  ...,  1.5500e+00,
            1.4252e+00, -3.1179e-02],
          [-8.4024e-01, -1.0331e+00, -8.0331e-01,  ..., -8.2481e-01,
           -5.5491e-01,  1.1425e+00]],

         [[-1.6158e-01, -5.7864e-01,  9.0210e-01,  ...,  7.0816e-01,
           -7.7165e-01,  4.0738e-01],
          [ 9.5160e-02, -1.1707e-01,  9.5186e-01,  ...,  1.8876e-02,
            1.1680e+00, -1.9695e-01],
          [ 4.0578e-01, -5.5686e-01, -2.0716e+00,  ..., -2.2876e-02,
           -6.2638e-01, -5.0629e-01],
          ...,
          [-3.0149e-01,  4.6386e-01, -4.0967e-01,  ...,  1.8132e-01,
           -1.9025e+00,  6.7116e-01],
          [ 9.4098e-01, -1.4388e+00, -2.4592e+00,  ..., -2.4991e+00,
            6.8570e-01, -6.8845e-01],
          [-1.7540e-01, -2.1258e-01,  4.8341e-01,  ...,  1.0201e+00,
           -5.7855e-01,  4.8139e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.1095e-01, -8.4683e-01,  8.7845e-01,  ...,  1.5899e+00,
           -5.7671e-01,  6.8609e-01],
          [ 5.5962e-01, -1.1667e+00,  9.4710e-01,  ...,  5.2533e-01,
            1.1219e+00,  1.5050e+00],
          [-9.5601e-01,  1.4495e+00,  7.5925e-01,  ...,  1.4220e-01,
            5.4757e-01, -1.1641e-01],
          ...,
          [ 1.6969e-01,  1.8084e+00, -6.4126e-01,  ...,  2.6755e-01,
            7.4634e-01,  4.0510e-01],
          [-9.6745e-02, -1.8316e+00,  5.6862e-01,  ...,  5.4945e-01,
           -1.1127e-01, -1.2829e+00],
          [ 1.3562e+00, -6.7831e-01,  1.4044e-01,  ...,  2.7302e-01,
            1.2618e+00, -8.3076e-01]],

         [[ 1.6401e+00,  4.7703e-01, -7.8958e-02,  ...,  3.7860e-01,
            6.6412e-01, -3.7786e-01],
          [ 2.2599e+00, -7.8468e-01, -4.4931e-01,  ..., -8.4165e-02,
            6.9692e-02,  7.0538e-01],
          [ 5.9549e-02, -6.4050e-02,  5.1100e-02,  ...,  2.7082e-01,
           -1.9579e+00,  5.4296e-01],
          ...,
          [-1.8295e-03,  2.9379e-01, -7.1472e-01,  ...,  8.3179e-02,
           -1.9611e+00, -6.8282e-01],
          [-3.6829e-01,  3.0515e+00, -6.3957e-01,  ...,  2.1720e-01,
            1.5045e+00, -5.6062e-01],
          [-5.5751e-01, -1.0990e-02,  5.4900e-01,  ...,  6.2349e-01,
           -1.0366e+00,  5.9504e-01]]],


        [[[ 9.6758e-02,  1.3248e+00,  3.9233e-01,  ..., -2.0386e+00,
            3.1534e-01, -3.8628e-01],
          [ 1.9919e+00, -1.7336e+00, -1.1995e+00,  ..., -6.0191e-01,
            1.1722e+00, -6.8759e-02],
          [ 1.3698e+00,  1.9593e+00, -4.5925e-01,  ..., -1.1180e+00,
            1.3855e+00,  1.1687e+00],
          ...,
          [-6.0197e-01, -7.6965e-01,  1.1742e+00,  ..., -3.2817e-01,
            9.3965e-01, -9.0411e-01],
          [-1.3417e+00, -2.3518e-01, -2.6159e+00,  ..., -1.4421e+00,
           -1.9091e-01, -1.5848e-01],
          [ 2.3267e-01, -3.4470e-02, -1.0446e+00,  ...,  4.3386e-01,
            1.2334e+00,  6.3349e-01]],

         [[ 6.6499e-01, -5.1138e-01,  8.9679e-02,  ...,  1.7071e+00,
           -3.9599e-01,  3.7156e-01],
          [-6.3639e-01, -9.8000e-01,  5.0382e-01,  ...,  1.9637e+00,
           -2.3952e+00,  1.0912e+00],
          [-2.3458e+00, -3.9065e-01, -1.1235e+00,  ..., -1.4984e+00,
           -1.0776e+00, -1.9461e+00],
          ...,
          [-1.1050e+00, -1.8633e-01,  4.9189e-01,  ..., -8.2092e-01,
            2.2635e+00,  1.0338e-01],
          [-1.2628e+00,  4.8162e-01, -4.0228e-01,  ..., -1.2373e+00,
            1.8387e+00, -6.8977e-01],
          [-2.5850e-01, -9.2894e-01,  6.2527e-01,  ...,  1.2414e+00,
            6.0236e-02, -5.6430e-01]]],


        [[[ 2.0499e+00,  1.1258e+00,  3.6667e-01,  ..., -1.6655e+00,
            4.0156e-01,  5.5060e-02],
          [-2.4354e+00, -7.9344e-01, -1.7121e-01,  ..., -4.2577e-02,
            8.5523e-01, -3.3154e-02],
          [-9.7109e-01, -1.0634e+00, -1.3321e+00,  ...,  1.2881e+00,
           -1.0393e+00,  6.4471e-01],
          ...,
          [ 1.5798e+00, -6.8470e-02,  1.7270e+00,  ..., -2.7503e-01,
            5.3536e-01, -2.8700e-01],
          [-4.9371e-02,  7.9890e-01, -1.0338e+00,  ...,  1.9834e+00,
           -7.1795e-01, -1.4177e-01],
          [ 2.2394e-01, -5.8789e-02, -3.1089e-01,  ...,  9.4365e-01,
            7.8191e-01, -2.5900e+00]],

         [[-2.5364e-01,  9.3477e-03,  5.9072e-01,  ..., -1.4330e+00,
            1.2963e+00,  1.1383e+00],
          [ 1.0225e+00, -8.3493e-01, -9.5769e-01,  ...,  1.1464e+00,
            3.8314e-02,  4.2832e-01],
          [-3.5759e-01,  6.9483e-01,  1.2003e+00,  ...,  1.5454e+00,
            8.6557e-01,  1.3608e-02],
          ...,
          [ 6.4220e-01, -1.5452e-01, -2.5935e+00,  ...,  1.2147e+00,
           -6.7243e-01, -3.1691e-01],
          [-3.4616e-01,  2.2546e-02, -4.3025e-01,  ...,  3.4451e-01,
            8.9148e-01, -1.4724e+00],
          [ 7.0042e-02,  1.2606e-01,  1.6584e+00,  ...,  3.3575e-01,
            7.2365e-01,  1.4632e+00]]],


        [[[ 1.1357e+00,  7.0994e-01, -1.9276e-01,  ...,  1.4929e+00,
           -1.2615e+00,  1.2874e+00],
          [ 2.4221e+00,  1.0088e+00,  7.3951e-01,  ...,  1.4120e+00,
            1.3371e+00, -1.0014e+00],
          [-8.5640e-01, -4.9093e-01, -5.0237e-01,  ..., -5.3880e-01,
           -4.1519e-01,  1.2365e+00],
          ...,
          [ 4.9094e-01,  1.0739e+00, -5.1832e-01,  ...,  1.0926e+00,
            4.9433e-01, -5.6655e-01],
          [-1.1909e+00,  5.4345e-01, -4.5022e-01,  ..., -2.9083e-01,
           -5.8362e-01,  4.5216e-01],
          [-7.6539e-01,  3.2109e-02,  3.8104e-01,  ...,  1.7276e-01,
            2.4494e-01,  5.0223e-02]],

         [[ 7.0153e-01, -4.3131e-02, -1.5772e-01,  ...,  1.3818e+00,
           -3.0499e-01, -1.0176e+00],
          [ 5.8644e-01,  1.2384e+00,  1.6930e-02,  ...,  1.0384e+00,
            9.3888e-01, -4.4158e-01],
          [-5.9317e-02, -8.7100e-01, -1.3672e+00,  ...,  1.7089e+00,
           -4.5038e-01, -1.5004e+00],
          ...,
          [-1.0105e+00, -3.7792e-01,  3.4558e-01,  ...,  1.0303e+00,
           -6.3257e-01,  2.3015e-01],
          [ 4.1185e-01, -1.2476e-01, -1.2116e+00,  ..., -2.2111e-01,
           -9.3796e-01,  3.5259e-01],
          [-4.8823e-01, -6.7136e-01,  5.5957e-01,  ..., -1.1472e+00,
           -1.3787e+00, -8.2866e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4320e+00,  1.6830e+00,  9.0366e-01,  ...,  4.5769e-01,
           -1.2626e-01,  1.8667e+00],
          [ 2.0064e+00,  8.7220e-01,  4.7351e-01,  ...,  1.5831e-01,
            4.8018e-01, -6.7942e-01],
          [-6.5238e-01,  5.2945e-01,  3.0667e-01,  ..., -4.3111e-01,
            7.9418e-01,  9.5557e-01],
          ...,
          [ 1.5631e-01,  1.7249e-01, -1.3803e+00,  ...,  2.0625e+00,
            1.4161e+00,  5.9404e-01],
          [ 1.6654e+00, -4.9698e-01,  1.1554e+00,  ...,  7.6580e-01,
           -1.6048e+00,  8.6048e-01],
          [-5.9706e-01,  3.9896e-01,  1.1719e+00,  ..., -6.9330e-02,
            1.2047e+00,  8.1716e-01]],

         [[ 1.0795e+00, -7.2804e-02, -7.5149e-01,  ...,  4.0395e-01,
            2.0520e-01, -2.4462e+00],
          [-6.2974e-01, -1.1399e+00, -1.5054e-01,  ..., -9.5451e-01,
           -3.5095e-01,  3.3666e-01],
          [-2.6349e-01,  3.4079e-01,  1.8377e+00,  ..., -1.2011e+00,
           -1.3741e+00, -9.6722e-01],
          ...,
          [-2.8981e+00,  1.7758e+00, -2.8521e-01,  ...,  1.1855e+00,
           -6.7145e-01, -8.7429e-01],
          [ 3.4105e-01, -1.1096e+00,  8.2637e-01,  ...,  1.5116e-02,
            1.0309e+00,  7.8894e-01],
          [ 1.2634e+00, -2.6473e-01,  1.7632e-01,  ...,  9.1309e-01,
           -6.2048e-01,  1.8560e+00]]],


        [[[-3.3496e-01,  1.6416e+00,  1.0917e+00,  ..., -2.0588e+00,
           -6.3926e-01,  3.6306e-01],
          [-3.7442e-02, -3.9691e-01,  1.1549e+00,  ..., -6.0350e-02,
            1.6346e-01,  1.1964e+00],
          [-1.1680e+00, -1.1187e+00,  4.0648e-02,  ...,  2.4657e-01,
            1.4160e+00,  5.4821e-01],
          ...,
          [ 2.7906e-01,  1.7132e+00, -1.1333e+00,  ...,  7.4751e-01,
            1.5688e+00, -2.2130e-01],
          [ 6.4848e-01, -1.9538e-01, -5.1682e-01,  ..., -1.5204e+00,
           -1.1245e-01, -5.0436e-01],
          [-8.0390e-01,  6.4710e-01, -5.3588e-01,  ..., -5.4724e-01,
            2.4123e+00, -4.9106e-01]],

         [[ 1.5970e-02, -8.9530e-01,  3.1617e-01,  ..., -1.4463e-01,
            8.2697e-01,  2.1719e+00],
          [-1.0433e+00,  1.8156e-01,  3.3501e-02,  ..., -1.5841e+00,
            4.1412e-01,  1.2629e+00],
          [-4.6410e-01,  3.5229e-01, -1.1076e-01,  ...,  5.4581e-01,
            2.7649e-03,  1.7669e+00],
          ...,
          [ 7.1888e-01, -2.3999e+00, -1.1462e+00,  ...,  2.7812e-01,
            6.9715e-01,  3.5906e-01],
          [-1.8246e+00,  7.3505e-01,  8.3835e-01,  ..., -6.2466e-01,
           -9.2645e-01, -9.6823e-02],
          [-6.5891e-01, -1.6678e-01,  2.6328e-01,  ...,  8.0090e-01,
           -4.4507e-01, -2.0110e-02]]],


        [[[ 1.3783e+00,  2.5363e-01,  6.3218e-01,  ..., -1.0096e+00,
            2.0386e+00, -4.6992e-01],
          [-1.1370e+00,  1.1077e+00, -7.4016e-01,  ..., -3.7568e-01,
            3.0102e-01,  2.9345e+00],
          [-5.2406e-01,  2.9428e-01,  1.1737e+00,  ..., -1.7936e+00,
           -1.7720e+00,  2.8483e-02],
          ...,
          [ 4.0367e-01, -3.7690e-01, -8.2717e-01,  ..., -3.9430e-01,
           -4.2328e-01, -8.4309e-01],
          [-1.2251e+00, -2.7002e-01,  8.1470e-01,  ...,  1.3171e-01,
            1.1915e+00, -1.3635e+00],
          [ 1.2375e+00, -9.8646e-01,  9.4456e-01,  ...,  1.4338e-01,
            7.2463e-01, -7.0771e-01]],

         [[ 1.4264e+00, -7.8417e-01, -7.8314e-01,  ...,  2.1535e+00,
            9.1294e-01,  6.8736e-01],
          [-9.9196e-01,  3.6200e-01,  1.5115e+00,  ..., -9.3605e-01,
           -1.6770e+00, -5.8837e-01],
          [-3.9726e-01, -6.3460e-01, -9.8305e-01,  ..., -6.5398e-01,
            1.6687e-01, -9.2229e-01],
          ...,
          [ 4.6075e-01, -5.8834e-01, -8.8141e-01,  ...,  1.2217e+00,
            4.8373e-01,  4.0048e-01],
          [-1.6518e+00,  8.5063e-02,  1.3545e-01,  ...,  8.8867e-02,
            4.9239e-01, -1.2252e+00],
          [-1.5915e+00, -1.6292e+00,  7.7952e-01,  ..., -1.1780e+00,
           -3.6984e-02, -2.9437e-01]]],


        [[[-9.0698e-01,  4.8439e-01, -2.1823e-01,  ..., -2.3325e-01,
            5.6220e-01, -2.3910e-01],
          [-9.2787e-01,  3.5162e-01,  1.2925e-01,  ..., -6.3040e-01,
            4.6827e-01,  1.2151e+00],
          [ 1.8924e+00, -3.3032e-01,  1.9696e+00,  ..., -1.8208e-01,
           -6.4033e-01, -6.7367e-01],
          ...,
          [ 7.5645e-02, -5.8722e-01, -1.1069e+00,  ...,  4.3452e-01,
            5.7406e-02, -2.9935e-01],
          [ 1.0290e+00, -2.0564e+00,  1.3913e+00,  ...,  1.5507e+00,
            1.4255e+00, -3.0219e-02],
          [-8.4041e-01, -1.0333e+00, -8.0318e-01,  ..., -8.2479e-01,
           -5.5476e-01,  1.1422e+00]],

         [[-1.6206e-01, -5.7760e-01,  9.0193e-01,  ...,  7.0732e-01,
           -7.7080e-01,  4.0717e-01],
          [ 9.5563e-02, -1.1716e-01,  9.5200e-01,  ...,  1.8927e-02,
            1.1679e+00, -1.9703e-01],
          [ 4.0489e-01, -5.5631e-01, -2.0720e+00,  ..., -2.3608e-02,
           -6.2524e-01, -5.0734e-01],
          ...,
          [-3.0163e-01,  4.6392e-01, -4.0960e-01,  ...,  1.8108e-01,
           -1.9018e+00,  6.7086e-01],
          [ 9.4114e-01, -1.4386e+00, -2.4592e+00,  ..., -2.4993e+00,
            6.8543e-01, -6.8885e-01],
          [-1.7568e-01, -2.1273e-01,  4.8341e-01,  ...,  1.0201e+00,
           -5.7857e-01,  4.8142e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.0965e-01, -8.4644e-01,  8.7783e-01,  ...,  1.5935e+00,
           -5.7680e-01,  6.8404e-01],
          [ 5.6083e-01, -1.1676e+00,  9.4669e-01,  ...,  5.2723e-01,
            1.1221e+00,  1.5046e+00],
          [-9.5578e-01,  1.4500e+00,  7.5777e-01,  ...,  1.4225e-01,
            5.4865e-01, -1.1956e-01],
          ...,
          [ 1.6969e-01,  1.8083e+00, -6.4237e-01,  ...,  2.6751e-01,
            7.4681e-01,  4.0365e-01],
          [-9.5945e-02, -1.8308e+00,  5.6749e-01,  ...,  5.5122e-01,
           -1.1115e-01, -1.2852e+00],
          [ 1.3563e+00, -6.7849e-01,  1.3935e-01,  ...,  2.7329e-01,
            1.2621e+00, -8.3281e-01]],

         [[ 1.6388e+00,  4.7828e-01, -7.8598e-02,  ...,  3.7782e-01,
            6.6629e-01, -3.7838e-01],
          [ 2.2599e+00, -7.8472e-01, -4.4903e-01,  ..., -8.5041e-02,
            6.9750e-02,  7.0501e-01],
          [ 5.8689e-02, -6.1749e-02,  5.0483e-02,  ...,  2.7138e-01,
           -1.9569e+00,  5.4312e-01],
          ...,
          [-2.5466e-03,  2.9419e-01, -7.1468e-01,  ...,  8.2649e-02,
           -1.9606e+00, -6.8288e-01],
          [-3.6936e-01,  3.0518e+00, -6.3886e-01,  ...,  2.1620e-01,
            1.5055e+00, -5.6094e-01],
          [-5.5810e-01, -1.1311e-02,  5.4908e-01,  ...,  6.2179e-01,
           -1.0368e+00,  5.9453e-01]]],


        [[[ 9.7553e-02,  1.3253e+00,  3.9224e-01,  ..., -2.0358e+00,
            3.1634e-01, -3.8922e-01],
          [ 1.9920e+00, -1.7342e+00, -1.1997e+00,  ..., -6.0084e-01,
            1.1727e+00, -6.9835e-02],
          [ 1.3699e+00,  1.9596e+00, -4.5985e-01,  ..., -1.1179e+00,
            1.3876e+00,  1.1670e+00],
          ...,
          [-6.0190e-01, -7.6976e-01,  1.1734e+00,  ..., -3.2798e-01,
            9.4034e-01, -9.0464e-01],
          [-1.3408e+00, -2.3447e-01, -2.6165e+00,  ..., -1.4401e+00,
           -1.9052e-01, -1.6070e-01],
          [ 2.3292e-01, -3.4748e-02, -1.0449e+00,  ...,  4.3445e-01,
            1.2344e+00,  6.3235e-01]],

         [[ 6.6399e-01, -5.0991e-01,  8.9203e-02,  ...,  1.7067e+00,
           -3.9346e-01,  3.7068e-01],
          [-6.3653e-01, -9.7981e-01,  5.0374e-01,  ...,  1.9633e+00,
           -2.3954e+00,  1.0905e+00],
          [-2.3469e+00, -3.8866e-01, -1.1250e+00,  ..., -1.4979e+00,
           -1.0761e+00, -1.9463e+00],
          ...,
          [-1.1060e+00, -1.8482e-01,  4.9118e-01,  ..., -8.2104e-01,
            2.2640e+00,  1.0318e-01],
          [-1.2634e+00,  4.8219e-01, -4.0200e-01,  ..., -1.2376e+00,
            1.8390e+00, -6.9005e-01],
          [-2.5922e-01, -9.2868e-01,  6.2496e-01,  ...,  1.2408e+00,
            5.9975e-02, -5.6545e-01]]],


        [[[ 2.0503e+00,  1.1249e+00,  3.6624e-01,  ..., -1.6635e+00,
            4.0170e-01,  5.2625e-02],
          [-2.4353e+00, -7.9459e-01, -1.7141e-01,  ..., -4.0917e-02,
            8.5556e-01, -3.3933e-02],
          [-9.7041e-01, -1.0638e+00, -1.3322e+00,  ...,  1.2884e+00,
           -1.0386e+00,  6.4350e-01],
          ...,
          [ 1.5799e+00, -6.8573e-02,  1.7269e+00,  ..., -2.7483e-01,
            5.3566e-01, -2.8747e-01],
          [-4.8301e-02,  7.9855e-01, -1.0341e+00,  ...,  1.9848e+00,
           -7.1775e-01, -1.4409e-01],
          [ 2.2461e-01, -5.9690e-02, -3.1114e-01,  ...,  9.4412e-01,
            7.8228e-01, -2.5908e+00]],

         [[-2.5515e-01,  9.9031e-03,  5.9066e-01,  ..., -1.4332e+00,
            1.2972e+00,  1.1383e+00],
          [ 1.0221e+00, -8.3490e-01, -9.5773e-01,  ...,  1.1460e+00,
            3.7689e-02,  4.2745e-01],
          [-3.5831e-01,  6.9650e-01,  1.1994e+00,  ...,  1.5459e+00,
            8.6684e-01,  1.3957e-02],
          ...,
          [ 6.4127e-01, -1.5378e-01, -2.5937e+00,  ...,  1.2145e+00,
           -6.7172e-01, -3.1676e-01],
          [-3.4734e-01,  2.3147e-02, -4.2986e-01,  ...,  3.4345e-01,
            8.9201e-01, -1.4727e+00],
          [ 6.9708e-02,  1.2609e-01,  1.6582e+00,  ...,  3.3515e-01,
            7.2342e-01,  1.4628e+00]]],


        [[[ 1.1371e+00,  7.1016e-01, -1.9346e-01,  ...,  1.4945e+00,
           -1.2614e+00,  1.2850e+00],
          [ 2.4222e+00,  1.0083e+00,  7.3880e-01,  ...,  1.4126e+00,
            1.3374e+00, -1.0021e+00],
          [-8.5514e-01, -4.9081e-01, -5.0264e-01,  ..., -5.3862e-01,
           -4.1380e-01,  1.2348e+00],
          ...,
          [ 4.9132e-01,  1.0740e+00, -5.1891e-01,  ...,  1.0929e+00,
            4.9452e-01, -5.6787e-01],
          [-1.1896e+00,  5.4377e-01, -4.5108e-01,  ..., -2.8815e-01,
           -5.8315e-01,  4.5128e-01],
          [-7.6504e-01,  3.1700e-02,  3.8010e-01,  ...,  1.7421e-01,
            2.4520e-01,  4.9159e-02]],

         [[ 7.0013e-01, -4.1769e-02, -1.5816e-01,  ...,  1.3802e+00,
           -3.0256e-01, -1.0176e+00],
          [ 5.8618e-01,  1.2384e+00,  1.6905e-02,  ...,  1.0379e+00,
            9.3867e-01, -4.4193e-01],
          [-6.0372e-02, -8.6920e-01, -1.3680e+00,  ...,  1.7092e+00,
           -4.4907e-01, -1.5005e+00],
          ...,
          [-1.0114e+00, -3.7747e-01,  3.4534e-01,  ...,  1.0292e+00,
           -6.3114e-01,  2.3014e-01],
          [ 4.1141e-01, -1.2433e-01, -1.2115e+00,  ..., -2.2330e-01,
           -9.3709e-01,  3.5251e-01],
          [-4.8840e-01, -6.7123e-01,  5.5946e-01,  ..., -1.1483e+00,
           -1.3786e+00, -8.2893e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7675, -0.3891, -0.0188,  ..., -0.6485, -0.2372, -0.5127],
         [ 0.9192, -0.0227,  1.1905,  ...,  0.5460, -0.8142, -0.9850],
         [ 0.8273,  0.2985,  0.3412,  ...,  1.3545, -0.0646, -0.5354],
         ...,
         [-1.3419,  1.9876,  0.0970,  ...,  0.0759, -0.3825,  0.2910],
         [-0.5871,  0.7405, -0.2752,  ..., -1.5284, -0.6628,  1.3872],
         [-0.0650,  0.6225,  2.1366,  ...,  0.6188,  0.2241, -0.4349]],

        [[-1.0614,  1.2750, -0.3654,  ...,  0.5360, -0.3137,  0.7325],
         [ 0.4560,  1.5527, -0.9991,  ...,  0.1100, -1.0443, -0.9863],
         [ 0.1874,  0.5767, -0.2539,  ...,  0.9194,  1.2268,  0.9213],
         ...,
         [ 0.3237, -0.8802, -0.1202,  ...,  0.2590, -0.0208,  0.5494],
         [ 0.3566, -0.6827, -0.4031,  ...,  0.0289, -0.0746, -0.1784],
         [ 0.1043,  1.0006,  0.3729,  ...,  0.6989,  1.5199, -1.5250]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4320,  1.6830,  0.9037,  ...,  0.4577, -0.1263,  1.8667],
         [ 2.0064,  0.8722,  0.4735,  ...,  0.1583,  0.4802, -0.6794],
         [-0.6524,  0.5294,  0.3067,  ..., -0.4311,  0.7942,  0.9556],
         ...,
         [ 0.1563,  0.1725, -1.3803,  ...,  2.0625,  1.4161,  0.5940],
         [ 1.6654, -0.4970,  1.1554,  ...,  0.7658, -1.6048,  0.8605],
         [-0.5971,  0.3990,  1.1719,  ..., -0.0693,  1.2047,  0.8172]],

        [[ 1.0795, -0.0728, -0.7515,  ...,  0.4039,  0.2052, -2.4462],
         [-0.6297, -1.1399, -0.1505,  ..., -0.9545, -0.3510,  0.3367],
         [-0.2635,  0.3408,  1.8377,  ..., -1.2011, -1.3741, -0.9672],
         ...,
         [-2.8981,  1.7758, -0.2852,  ...,  1.1855, -0.6714, -0.8743],
         [ 0.3411, -1.1096,  0.8264,  ...,  0.0151,  1.0309,  0.7889],
         [ 1.2634, -0.2647,  0.1763,  ...,  0.9131, -0.6205,  1.8560]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 353.544, Val Loss : 1040.269
======> Trajectory Loss : 210.640, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.429, BelowGroundPenalize Loss : 0.000
Opening in existing browser session.
[1019/152902.795186:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/152903.118915:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[1019/152903.449830:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/129].........tensor([[[-0.7675, -0.3891, -0.0188,  ..., -0.6485, -0.2372, -0.5127],
         [ 0.9192, -0.0227,  1.1905,  ...,  0.5460, -0.8142, -0.9850],
         [ 0.8273,  0.2985,  0.3412,  ...,  1.3545, -0.0646, -0.5354],
         ...,
         [-1.3419,  1.9876,  0.0970,  ...,  0.0759, -0.3825,  0.2910],
         [-0.5871,  0.7405, -0.2752,  ..., -1.5284, -0.6628,  1.3872],
         [-0.0650,  0.6225,  2.1366,  ...,  0.6188,  0.2241, -0.4349]],

        [[-1.0614,  1.2750, -0.3654,  ...,  0.5360, -0.3137,  0.7325],
         [ 0.4560,  1.5527, -0.9991,  ...,  0.1100, -1.0443, -0.9863],
         [ 0.1874,  0.5767, -0.2539,  ...,  0.9194,  1.2268,  0.9213],
         ...,
         [ 0.3237, -0.8802, -0.1202,  ...,  0.2590, -0.0208,  0.5494],
         [ 0.3566, -0.6827, -0.4031,  ...,  0.0289, -0.0746, -0.1784],
         [ 0.1043,  1.0006,  0.3729,  ...,  0.6989,  1.5199, -1.5250]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4320,  1.6830,  0.9037,  ...,  0.4577, -0.1263,  1.8667],
         [ 2.0064,  0.8722,  0.4735,  ...,  0.1583,  0.4802, -0.6794],
         [-0.6524,  0.5294,  0.3067,  ..., -0.4311,  0.7942,  0.9556],
         ...,
         [ 0.1563,  0.1725, -1.3803,  ...,  2.0625,  1.4161,  0.5940],
         [ 1.6654, -0.4970,  1.1554,  ...,  0.7658, -1.6048,  0.8605],
         [-0.5971,  0.3990,  1.1719,  ..., -0.0693,  1.2047,  0.8172]],

        [[ 1.0795, -0.0728, -0.7515,  ...,  0.4039,  0.2052, -2.4462],
         [-0.6297, -1.1399, -0.1505,  ..., -0.9545, -0.3510,  0.3367],
         [-0.2635,  0.3408,  1.8377,  ..., -1.2011, -1.3741, -0.9672],
         ...,
         [-2.8981,  1.7758, -0.2852,  ...,  1.1855, -0.6714, -0.8743],
         [ 0.3411, -1.1096,  0.8264,  ...,  0.0151,  1.0309,  0.7889],
         [ 1.2634, -0.2647,  0.1763,  ...,  0.9131, -0.6205,  1.8560]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4320e+00,  1.6830e+00,  9.0366e-01,  ...,  4.5769e-01,
           -1.2626e-01,  1.8667e+00],
          [ 2.0064e+00,  8.7220e-01,  4.7351e-01,  ...,  1.5831e-01,
            4.8018e-01, -6.7942e-01],
          [-6.5238e-01,  5.2945e-01,  3.0667e-01,  ..., -4.3111e-01,
            7.9418e-01,  9.5557e-01],
          ...,
          [ 1.5631e-01,  1.7249e-01, -1.3803e+00,  ...,  2.0625e+00,
            1.4161e+00,  5.9404e-01],
          [ 1.6654e+00, -4.9698e-01,  1.1554e+00,  ...,  7.6580e-01,
           -1.6048e+00,  8.6048e-01],
          [-5.9706e-01,  3.9896e-01,  1.1719e+00,  ..., -6.9330e-02,
            1.2047e+00,  8.1716e-01]],

         [[ 1.0795e+00, -7.2804e-02, -7.5149e-01,  ...,  4.0395e-01,
            2.0520e-01, -2.4462e+00],
          [-6.2974e-01, -1.1399e+00, -1.5054e-01,  ..., -9.5451e-01,
           -3.5095e-01,  3.3666e-01],
          [-2.6349e-01,  3.4079e-01,  1.8377e+00,  ..., -1.2011e+00,
           -1.3741e+00, -9.6722e-01],
          ...,
          [-2.8981e+00,  1.7758e+00, -2.8521e-01,  ...,  1.1855e+00,
           -6.7145e-01, -8.7429e-01],
          [ 3.4105e-01, -1.1096e+00,  8.2637e-01,  ...,  1.5116e-02,
            1.0309e+00,  7.8894e-01],
          [ 1.2634e+00, -2.6473e-01,  1.7632e-01,  ...,  9.1309e-01,
           -6.2048e-01,  1.8560e+00]]],


        [[[-3.3496e-01,  1.6416e+00,  1.0917e+00,  ..., -2.0588e+00,
           -6.3926e-01,  3.6306e-01],
          [-3.7442e-02, -3.9691e-01,  1.1549e+00,  ..., -6.0350e-02,
            1.6346e-01,  1.1964e+00],
          [-1.1680e+00, -1.1187e+00,  4.0648e-02,  ...,  2.4657e-01,
            1.4160e+00,  5.4821e-01],
          ...,
          [ 2.7906e-01,  1.7132e+00, -1.1333e+00,  ...,  7.4751e-01,
            1.5688e+00, -2.2130e-01],
          [ 6.4848e-01, -1.9538e-01, -5.1682e-01,  ..., -1.5204e+00,
           -1.1245e-01, -5.0436e-01],
          [-8.0390e-01,  6.4710e-01, -5.3588e-01,  ..., -5.4724e-01,
            2.4123e+00, -4.9106e-01]],

         [[ 1.5970e-02, -8.9530e-01,  3.1617e-01,  ..., -1.4463e-01,
            8.2697e-01,  2.1719e+00],
          [-1.0433e+00,  1.8156e-01,  3.3501e-02,  ..., -1.5841e+00,
            4.1412e-01,  1.2629e+00],
          [-4.6410e-01,  3.5229e-01, -1.1076e-01,  ...,  5.4581e-01,
            2.7649e-03,  1.7669e+00],
          ...,
          [ 7.1888e-01, -2.3999e+00, -1.1462e+00,  ...,  2.7812e-01,
            6.9715e-01,  3.5906e-01],
          [-1.8246e+00,  7.3505e-01,  8.3835e-01,  ..., -6.2466e-01,
           -9.2645e-01, -9.6823e-02],
          [-6.5891e-01, -1.6678e-01,  2.6328e-01,  ...,  8.0090e-01,
           -4.4507e-01, -2.0110e-02]]],


        [[[ 1.3783e+00,  2.5363e-01,  6.3218e-01,  ..., -1.0096e+00,
            2.0386e+00, -4.6992e-01],
          [-1.1370e+00,  1.1077e+00, -7.4016e-01,  ..., -3.7568e-01,
            3.0102e-01,  2.9345e+00],
          [-5.2406e-01,  2.9428e-01,  1.1737e+00,  ..., -1.7936e+00,
           -1.7720e+00,  2.8483e-02],
          ...,
          [ 4.0367e-01, -3.7690e-01, -8.2717e-01,  ..., -3.9430e-01,
           -4.2328e-01, -8.4309e-01],
          [-1.2251e+00, -2.7002e-01,  8.1470e-01,  ...,  1.3171e-01,
            1.1915e+00, -1.3635e+00],
          [ 1.2375e+00, -9.8646e-01,  9.4456e-01,  ...,  1.4338e-01,
            7.2463e-01, -7.0771e-01]],

         [[ 1.4264e+00, -7.8417e-01, -7.8314e-01,  ...,  2.1535e+00,
            9.1294e-01,  6.8736e-01],
          [-9.9196e-01,  3.6200e-01,  1.5115e+00,  ..., -9.3605e-01,
           -1.6770e+00, -5.8837e-01],
          [-3.9726e-01, -6.3460e-01, -9.8305e-01,  ..., -6.5398e-01,
            1.6687e-01, -9.2229e-01],
          ...,
          [ 4.6075e-01, -5.8834e-01, -8.8141e-01,  ...,  1.2217e+00,
            4.8373e-01,  4.0048e-01],
          [-1.6518e+00,  8.5063e-02,  1.3545e-01,  ...,  8.8867e-02,
            4.9239e-01, -1.2252e+00],
          [-1.5915e+00, -1.6292e+00,  7.7952e-01,  ..., -1.1780e+00,
           -3.6984e-02, -2.9437e-01]]],


        [[[-9.0698e-01,  4.8439e-01, -2.1823e-01,  ..., -2.3325e-01,
            5.6220e-01, -2.3910e-01],
          [-9.2787e-01,  3.5162e-01,  1.2925e-01,  ..., -6.3040e-01,
            4.6827e-01,  1.2151e+00],
          [ 1.8924e+00, -3.3032e-01,  1.9696e+00,  ..., -1.8208e-01,
           -6.4033e-01, -6.7367e-01],
          ...,
          [ 7.5645e-02, -5.8722e-01, -1.1069e+00,  ...,  4.3452e-01,
            5.7406e-02, -2.9935e-01],
          [ 1.0290e+00, -2.0564e+00,  1.3913e+00,  ...,  1.5507e+00,
            1.4255e+00, -3.0219e-02],
          [-8.4041e-01, -1.0333e+00, -8.0318e-01,  ..., -8.2479e-01,
           -5.5476e-01,  1.1422e+00]],

         [[-1.6206e-01, -5.7760e-01,  9.0193e-01,  ...,  7.0732e-01,
           -7.7080e-01,  4.0717e-01],
          [ 9.5563e-02, -1.1716e-01,  9.5200e-01,  ...,  1.8927e-02,
            1.1679e+00, -1.9703e-01],
          [ 4.0489e-01, -5.5631e-01, -2.0720e+00,  ..., -2.3608e-02,
           -6.2524e-01, -5.0734e-01],
          ...,
          [-3.0163e-01,  4.6392e-01, -4.0960e-01,  ...,  1.8108e-01,
           -1.9018e+00,  6.7086e-01],
          [ 9.4114e-01, -1.4386e+00, -2.4592e+00,  ..., -2.4993e+00,
            6.8543e-01, -6.8885e-01],
          [-1.7568e-01, -2.1273e-01,  4.8341e-01,  ...,  1.0201e+00,
           -5.7857e-01,  4.8142e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.0965e-01, -8.4644e-01,  8.7783e-01,  ...,  1.5935e+00,
           -5.7680e-01,  6.8404e-01],
          [ 5.6083e-01, -1.1676e+00,  9.4669e-01,  ...,  5.2723e-01,
            1.1221e+00,  1.5046e+00],
          [-9.5578e-01,  1.4500e+00,  7.5777e-01,  ...,  1.4225e-01,
            5.4865e-01, -1.1956e-01],
          ...,
          [ 1.6969e-01,  1.8083e+00, -6.4237e-01,  ...,  2.6751e-01,
            7.4681e-01,  4.0365e-01],
          [-9.5945e-02, -1.8308e+00,  5.6749e-01,  ...,  5.5122e-01,
           -1.1115e-01, -1.2852e+00],
          [ 1.3563e+00, -6.7849e-01,  1.3935e-01,  ...,  2.7329e-01,
            1.2621e+00, -8.3281e-01]],

         [[ 1.6388e+00,  4.7828e-01, -7.8598e-02,  ...,  3.7782e-01,
            6.6629e-01, -3.7838e-01],
          [ 2.2599e+00, -7.8472e-01, -4.4903e-01,  ..., -8.5041e-02,
            6.9750e-02,  7.0501e-01],
          [ 5.8689e-02, -6.1749e-02,  5.0483e-02,  ...,  2.7138e-01,
           -1.9569e+00,  5.4312e-01],
          ...,
          [-2.5466e-03,  2.9419e-01, -7.1468e-01,  ...,  8.2649e-02,
           -1.9606e+00, -6.8288e-01],
          [-3.6936e-01,  3.0518e+00, -6.3886e-01,  ...,  2.1620e-01,
            1.5055e+00, -5.6094e-01],
          [-5.5810e-01, -1.1311e-02,  5.4908e-01,  ...,  6.2179e-01,
           -1.0368e+00,  5.9453e-01]]],


        [[[ 9.7553e-02,  1.3253e+00,  3.9224e-01,  ..., -2.0358e+00,
            3.1634e-01, -3.8922e-01],
          [ 1.9920e+00, -1.7342e+00, -1.1997e+00,  ..., -6.0084e-01,
            1.1727e+00, -6.9835e-02],
          [ 1.3699e+00,  1.9596e+00, -4.5985e-01,  ..., -1.1179e+00,
            1.3876e+00,  1.1670e+00],
          ...,
          [-6.0190e-01, -7.6976e-01,  1.1734e+00,  ..., -3.2798e-01,
            9.4034e-01, -9.0464e-01],
          [-1.3408e+00, -2.3447e-01, -2.6165e+00,  ..., -1.4401e+00,
           -1.9052e-01, -1.6070e-01],
          [ 2.3292e-01, -3.4748e-02, -1.0449e+00,  ...,  4.3445e-01,
            1.2344e+00,  6.3235e-01]],

         [[ 6.6399e-01, -5.0991e-01,  8.9203e-02,  ...,  1.7067e+00,
           -3.9346e-01,  3.7068e-01],
          [-6.3653e-01, -9.7981e-01,  5.0374e-01,  ...,  1.9633e+00,
           -2.3954e+00,  1.0905e+00],
          [-2.3469e+00, -3.8866e-01, -1.1250e+00,  ..., -1.4979e+00,
           -1.0761e+00, -1.9463e+00],
          ...,
          [-1.1060e+00, -1.8482e-01,  4.9118e-01,  ..., -8.2104e-01,
            2.2640e+00,  1.0318e-01],
          [-1.2634e+00,  4.8219e-01, -4.0200e-01,  ..., -1.2376e+00,
            1.8390e+00, -6.9005e-01],
          [-2.5922e-01, -9.2868e-01,  6.2496e-01,  ...,  1.2408e+00,
            5.9975e-02, -5.6545e-01]]],


        [[[ 2.0503e+00,  1.1249e+00,  3.6624e-01,  ..., -1.6635e+00,
            4.0170e-01,  5.2625e-02],
          [-2.4353e+00, -7.9459e-01, -1.7141e-01,  ..., -4.0917e-02,
            8.5556e-01, -3.3933e-02],
          [-9.7041e-01, -1.0638e+00, -1.3322e+00,  ...,  1.2884e+00,
           -1.0386e+00,  6.4350e-01],
          ...,
          [ 1.5799e+00, -6.8573e-02,  1.7269e+00,  ..., -2.7483e-01,
            5.3566e-01, -2.8747e-01],
          [-4.8301e-02,  7.9855e-01, -1.0341e+00,  ...,  1.9848e+00,
           -7.1775e-01, -1.4409e-01],
          [ 2.2461e-01, -5.9690e-02, -3.1114e-01,  ...,  9.4412e-01,
            7.8228e-01, -2.5908e+00]],

         [[-2.5515e-01,  9.9031e-03,  5.9066e-01,  ..., -1.4332e+00,
            1.2972e+00,  1.1383e+00],
          [ 1.0221e+00, -8.3490e-01, -9.5773e-01,  ...,  1.1460e+00,
            3.7689e-02,  4.2745e-01],
          [-3.5831e-01,  6.9650e-01,  1.1994e+00,  ...,  1.5459e+00,
            8.6684e-01,  1.3957e-02],
          ...,
          [ 6.4127e-01, -1.5378e-01, -2.5937e+00,  ...,  1.2145e+00,
           -6.7172e-01, -3.1676e-01],
          [-3.4734e-01,  2.3147e-02, -4.2986e-01,  ...,  3.4345e-01,
            8.9201e-01, -1.4727e+00],
          [ 6.9708e-02,  1.2609e-01,  1.6582e+00,  ...,  3.3515e-01,
            7.2342e-01,  1.4628e+00]]],


        [[[ 1.1371e+00,  7.1016e-01, -1.9346e-01,  ...,  1.4945e+00,
           -1.2614e+00,  1.2850e+00],
          [ 2.4222e+00,  1.0083e+00,  7.3880e-01,  ...,  1.4126e+00,
            1.3374e+00, -1.0021e+00],
          [-8.5514e-01, -4.9081e-01, -5.0264e-01,  ..., -5.3862e-01,
           -4.1380e-01,  1.2348e+00],
          ...,
          [ 4.9132e-01,  1.0740e+00, -5.1891e-01,  ...,  1.0929e+00,
            4.9452e-01, -5.6787e-01],
          [-1.1896e+00,  5.4377e-01, -4.5108e-01,  ..., -2.8815e-01,
           -5.8315e-01,  4.5128e-01],
          [-7.6504e-01,  3.1700e-02,  3.8010e-01,  ...,  1.7421e-01,
            2.4520e-01,  4.9159e-02]],

         [[ 7.0013e-01, -4.1769e-02, -1.5816e-01,  ...,  1.3802e+00,
           -3.0256e-01, -1.0176e+00],
          [ 5.8618e-01,  1.2384e+00,  1.6905e-02,  ...,  1.0379e+00,
            9.3867e-01, -4.4193e-01],
          [-6.0372e-02, -8.6920e-01, -1.3680e+00,  ...,  1.7092e+00,
           -4.4907e-01, -1.5005e+00],
          ...,
          [-1.0114e+00, -3.7747e-01,  3.4534e-01,  ...,  1.0292e+00,
           -6.3114e-01,  2.3014e-01],
          [ 4.1141e-01, -1.2433e-01, -1.2115e+00,  ..., -2.2330e-01,
           -9.3709e-01,  3.5251e-01],
          [-4.8840e-01, -6.7123e-01,  5.5946e-01,  ..., -1.1483e+00,
           -1.3786e+00, -8.2893e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4332e+00,  1.6849e+00,  9.0352e-01,  ...,  4.5601e-01,
           -1.2400e-01,  1.8647e+00],
          [ 2.0069e+00,  8.7178e-01,  4.7329e-01,  ...,  1.5816e-01,
            4.7963e-01, -6.7931e-01],
          [-6.5294e-01,  5.2996e-01,  3.0693e-01,  ..., -4.3233e-01,
            7.9420e-01,  9.5584e-01],
          ...,
          [ 1.5622e-01,  1.7226e-01, -1.3798e+00,  ...,  2.0615e+00,
            1.4161e+00,  5.9440e-01],
          [ 1.6647e+00, -4.9682e-01,  1.1542e+00,  ...,  7.6328e-01,
           -1.6075e+00,  8.5863e-01],
          [-5.9787e-01,  3.9952e-01,  1.1714e+00,  ..., -7.0494e-02,
            1.2048e+00,  8.1710e-01]],

         [[ 1.0804e+00, -7.1008e-02, -7.5180e-01,  ...,  4.0509e-01,
            2.0590e-01, -2.4442e+00],
          [-6.2996e-01, -1.1400e+00, -1.4977e-01,  ..., -9.5474e-01,
           -3.5136e-01,  3.3698e-01],
          [-2.6303e-01,  3.4084e-01,  1.8380e+00,  ..., -1.2016e+00,
           -1.3742e+00, -9.6644e-01],
          ...,
          [-2.8989e+00,  1.7753e+00, -2.8483e-01,  ...,  1.1861e+00,
           -6.7068e-01, -8.7381e-01],
          [ 3.4145e-01, -1.1105e+00,  8.2912e-01,  ...,  1.8100e-02,
            1.0328e+00,  7.9159e-01],
          [ 1.2628e+00, -2.6639e-01,  1.7774e-01,  ...,  9.1212e-01,
           -6.2136e-01,  1.8557e+00]]],


        [[[-3.3205e-01,  1.6438e+00,  1.0917e+00,  ..., -2.0599e+00,
           -6.3947e-01,  3.6294e-01],
          [-3.7275e-02, -3.9690e-01,  1.1551e+00,  ..., -6.0442e-02,
            1.6317e-01,  1.1961e+00],
          [-1.1679e+00, -1.1183e+00,  4.0686e-02,  ...,  2.4606e-01,
            1.4159e+00,  5.4774e-01],
          ...,
          [ 2.7955e-01,  1.7134e+00, -1.1330e+00,  ...,  7.4729e-01,
            1.5693e+00, -2.2141e-01],
          [ 6.4950e-01, -1.9543e-01, -5.1609e-01,  ..., -1.5225e+00,
           -1.1339e-01, -5.0573e-01],
          [-8.0326e-01,  6.4564e-01, -5.3708e-01,  ..., -5.4751e-01,
            2.4131e+00, -4.9242e-01]],

         [[ 1.5811e-02, -8.9589e-01,  3.1494e-01,  ..., -1.4251e-01,
            8.2608e-01,  2.1710e+00],
          [-1.0438e+00,  1.8143e-01,  3.3520e-02,  ..., -1.5836e+00,
            4.1377e-01,  1.2634e+00],
          [-4.6446e-01,  3.5145e-01, -1.1093e-01,  ...,  5.4565e-01,
            1.7477e-03,  1.7656e+00],
          ...,
          [ 7.1860e-01, -2.4007e+00, -1.1474e+00,  ...,  2.7968e-01,
            6.9725e-01,  3.5952e-01],
          [-1.8238e+00,  7.3413e-01,  8.3584e-01,  ..., -6.2262e-01,
           -9.2913e-01, -9.7370e-02],
          [-6.5971e-01, -1.6731e-01,  2.6210e-01,  ...,  8.0203e-01,
           -4.4557e-01, -1.9196e-02]]],


        [[[ 1.3767e+00,  2.5185e-01,  6.3386e-01,  ..., -1.0115e+00,
            2.0368e+00, -4.7147e-01],
          [-1.1370e+00,  1.1076e+00, -7.4018e-01,  ..., -3.7567e-01,
            3.0092e-01,  2.9342e+00],
          [-5.2411e-01,  2.9339e-01,  1.1743e+00,  ..., -1.7941e+00,
           -1.7723e+00,  2.7861e-02],
          ...,
          [ 4.0363e-01, -3.7746e-01, -8.2656e-01,  ..., -3.9448e-01,
           -4.2349e-01, -8.4387e-01],
          [-1.2250e+00, -2.7087e-01,  8.1632e-01,  ...,  1.3027e-01,
            1.1916e+00, -1.3645e+00],
          [ 1.2363e+00, -9.8751e-01,  9.4583e-01,  ...,  1.4306e-01,
            7.2545e-01, -7.0788e-01]],

         [[ 1.4266e+00, -7.8495e-01, -7.8282e-01,  ...,  2.1530e+00,
            9.1075e-01,  6.8830e-01],
          [-9.9248e-01,  3.6138e-01,  1.5113e+00,  ..., -9.3643e-01,
           -1.6776e+00, -5.8812e-01],
          [-3.9712e-01, -6.3531e-01, -9.8267e-01,  ..., -6.5481e-01,
            1.6648e-01, -9.2137e-01],
          ...,
          [ 4.6110e-01, -5.8825e-01, -8.8190e-01,  ...,  1.2215e+00,
            4.8297e-01,  4.0049e-01],
          [-1.6525e+00,  8.2681e-02,  1.3645e-01,  ...,  8.7627e-02,
            4.8932e-01, -1.2230e+00],
          [-1.5908e+00, -1.6292e+00,  7.7976e-01,  ..., -1.1789e+00,
           -3.7449e-02, -2.9366e-01]]],


        [[[-9.0959e-01,  4.8173e-01, -2.1912e-01,  ..., -2.3245e-01,
            5.6460e-01, -2.3816e-01],
          [-9.2810e-01,  3.5123e-01,  1.2923e-01,  ..., -6.3026e-01,
            4.6869e-01,  1.2152e+00],
          [ 1.8936e+00, -3.2957e-01,  1.9696e+00,  ..., -1.8212e-01,
           -6.4015e-01, -6.7440e-01],
          ...,
          [ 7.5715e-02, -5.8746e-01, -1.1073e+00,  ...,  4.3416e-01,
            5.8396e-02, -2.9918e-01],
          [ 1.0300e+00, -2.0561e+00,  1.3904e+00,  ...,  1.5522e+00,
            1.4270e+00, -2.7577e-02],
          [-8.4101e-01, -1.0340e+00, -8.0277e-01,  ..., -8.2411e-01,
           -5.5479e-01,  1.1421e+00]],

         [[-1.6314e-01, -5.7601e-01,  9.0195e-01,  ...,  7.0549e-01,
           -7.6825e-01,  4.0693e-01],
          [ 9.6132e-02, -1.1713e-01,  9.5218e-01,  ...,  1.8751e-02,
            1.1679e+00, -1.9715e-01],
          [ 4.0393e-01, -5.5533e-01, -2.0727e+00,  ..., -2.4447e-02,
           -6.2378e-01, -5.0826e-01],
          ...,
          [-3.0226e-01,  4.6472e-01, -4.0944e-01,  ...,  1.8063e-01,
           -1.9004e+00,  6.7108e-01],
          [ 9.4158e-01, -1.4373e+00, -2.4594e+00,  ..., -2.4992e+00,
            6.8417e-01, -6.8910e-01],
          [-1.7631e-01, -2.1223e-01,  4.8395e-01,  ...,  1.0197e+00,
           -5.7814e-01,  4.8144e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8080, -0.8480,  0.8762,  ...,  1.5966, -0.5758,  0.6808],
          [ 0.5619, -1.1688,  0.9463,  ...,  0.5279,  1.1226,  1.5042],
          [-0.9553,  1.4491,  0.7565,  ...,  0.1421,  0.5498, -0.1225],
          ...,
          [ 0.1701,  1.8070, -0.6436,  ...,  0.2665,  0.7476,  0.4022],
          [-0.0954, -1.8302,  0.5641,  ...,  0.5509, -0.1108, -1.2903],
          [ 1.3564, -0.6786,  0.1373,  ...,  0.2734,  1.2624, -0.8372]],

         [[ 1.6363,  0.4804, -0.0772,  ...,  0.3748,  0.6694, -0.3770],
          [ 2.2591, -0.7848, -0.4487,  ..., -0.0863,  0.0703,  0.7052],
          [ 0.0561, -0.0595,  0.0501,  ...,  0.2702, -1.9559,  0.5442],
          ...,
          [-0.0042,  0.2944, -0.7146,  ...,  0.0809, -1.9594, -0.6813],
          [-0.3731,  3.0524, -0.6366,  ...,  0.2131,  1.5077, -0.5589],
          [-0.5610, -0.0113,  0.5498,  ...,  0.6184, -1.0356,  0.5948]]],


        [[[ 0.1013,  1.3244,  0.3901,  ..., -2.0318,  0.3206, -0.3940],
          [ 1.9923, -1.7346, -1.2002,  ..., -0.6000,  1.1737, -0.0713],
          [ 1.3707,  1.9591, -0.4612,  ..., -1.1160,  1.3902,  1.1648],
          ...,
          [-0.6012, -0.7700,  1.1720,  ..., -0.3275,  0.9427, -0.9058],
          [-1.3388, -0.2338, -2.6192,  ..., -1.4389, -0.1875, -0.1656],
          [ 0.2345, -0.0353, -1.0465,  ...,  0.4363,  1.2369,  0.6296]],

         [[ 0.6609, -0.5074,  0.0903,  ...,  1.7059, -0.3908,  0.3709],
          [-0.6373, -0.9795,  0.5038,  ...,  1.9630, -2.3952,  1.0905],
          [-2.3486, -0.3868, -1.1258,  ..., -1.4978, -1.0750, -1.9459],
          ...,
          [-1.1080, -0.1836,  0.4909,  ..., -0.8211,  2.2647,  0.1034],
          [-1.2657,  0.4836, -0.4012,  ..., -1.2379,  1.8397, -0.6889],
          [-0.2624, -0.9279,  0.6252,  ...,  1.2399,  0.0608, -0.5658]]],


        [[[ 2.0522,  1.1218,  0.3645,  ..., -1.6607,  0.4019,  0.0481],
          [-2.4350, -0.7957, -0.1716,  ..., -0.0397,  0.8558, -0.0354],
          [-0.9692, -1.0654, -1.3324,  ...,  1.2897, -1.0383,  0.6420],
          ...,
          [ 1.5803, -0.0689,  1.7266,  ..., -0.2741,  0.5362, -0.2883],
          [-0.0461,  0.7970, -1.0358,  ...,  1.9863, -0.7177, -0.1492],
          [ 0.2263, -0.0616, -0.3131,  ...,  0.9450,  0.7827, -2.5925]],

         [[-0.2595,  0.0118,  0.5918,  ..., -1.4353,  1.2970,  1.1391],
          [ 1.0207, -0.8347, -0.9575,  ...,  1.1455,  0.0364,  0.4275],
          [-0.3601,  0.6982,  1.1994,  ...,  1.5452,  0.8663,  0.0149],
          ...,
          [ 0.6388, -0.1527, -2.5933,  ...,  1.2138, -0.6719, -0.3162],
          [-0.3515,  0.0250, -0.4270,  ...,  0.3399,  0.8903, -1.4711],
          [ 0.0678,  0.1269,  1.6585,  ...,  0.3336,  0.7229,  1.4630]]],


        [[[ 1.1399,  0.7093, -0.1965,  ...,  1.4971, -1.2599,  1.2811],
          [ 2.4224,  1.0079,  0.7377,  ...,  1.4131,  1.3377, -1.0029],
          [-0.8536, -0.4913, -0.5031,  ..., -0.5378, -0.4124,  1.2323],
          ...,
          [ 0.4922,  1.0737, -0.5200,  ...,  1.0934,  0.4952, -0.5696],
          [-1.1879,  0.5426, -0.4546,  ..., -0.2846, -0.5812,  0.4496],
          [-0.7640,  0.0310,  0.3771,  ...,  0.1769,  0.2458,  0.0472]],

         [[ 0.6962, -0.0395, -0.1582,  ...,  1.3772, -0.3009, -1.0175],
          [ 0.5849,  1.2385,  0.0169,  ...,  1.0370,  0.9382, -0.4421],
          [-0.0624, -0.8674, -1.3684,  ...,  1.7083, -0.4486, -1.5006],
          ...,
          [-1.0135, -0.3769,  0.3453,  ...,  1.0270, -0.6304,  0.2302],
          [ 0.4094, -0.1228, -1.2106,  ..., -0.2278, -0.9366,  0.3541],
          [-0.4898, -0.6704,  0.5595,  ..., -1.1503, -1.3782, -0.8292]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7688, -0.3815, -0.0195,  ..., -0.6401, -0.2453, -0.5168],
         [ 0.9106, -0.0137,  1.1830,  ...,  0.5524, -0.8226, -0.9937],
         [ 0.8319,  0.3044,  0.3432,  ...,  1.3623, -0.0591, -0.5438],
         ...,
         [-1.3326,  1.9964,  0.1016,  ...,  0.0848, -0.3754,  0.2873],
         [-0.5836,  0.7465, -0.2803,  ..., -1.5228, -0.6593,  1.3810],
         [-0.0589,  0.6183,  2.1416,  ...,  0.6252,  0.2304, -0.4291]],

        [[-1.0671,  1.2684, -0.3698,  ...,  0.5418, -0.3086,  0.7270],
         [ 0.4640,  1.5458, -1.0059,  ...,  0.1027, -1.0385, -0.9927],
         [ 0.1813,  0.5681, -0.2607,  ...,  0.9258,  1.2340,  0.9235],
         ...,
         [ 0.3141, -0.8721, -0.1232,  ...,  0.2685, -0.0282,  0.5447],
         [ 0.3642, -0.6902, -0.4098,  ...,  0.0221, -0.0652, -0.1855],
         [ 0.0979,  0.9944,  0.3798,  ...,  0.7054,  1.5263, -1.5332]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4332,  1.6849,  0.9035,  ...,  0.4560, -0.1240,  1.8647],
         [ 2.0069,  0.8718,  0.4733,  ...,  0.1582,  0.4796, -0.6793],
         [-0.6529,  0.5300,  0.3069,  ..., -0.4323,  0.7942,  0.9558],
         ...,
         [ 0.1562,  0.1723, -1.3798,  ...,  2.0615,  1.4161,  0.5944],
         [ 1.6647, -0.4968,  1.1542,  ...,  0.7633, -1.6075,  0.8586],
         [-0.5979,  0.3995,  1.1714,  ..., -0.0705,  1.2048,  0.8171]],

        [[ 1.0804, -0.0710, -0.7518,  ...,  0.4051,  0.2059, -2.4442],
         [-0.6300, -1.1400, -0.1498,  ..., -0.9547, -0.3514,  0.3370],
         [-0.2630,  0.3408,  1.8380,  ..., -1.2016, -1.3742, -0.9664],
         ...,
         [-2.8989,  1.7753, -0.2848,  ...,  1.1861, -0.6707, -0.8738],
         [ 0.3414, -1.1105,  0.8291,  ...,  0.0181,  1.0328,  0.7916],
         [ 1.2628, -0.2664,  0.1777,  ...,  0.9121, -0.6214,  1.8557]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 280.241, Val Loss : 780.811
======> Trajectory Loss : 137.948, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.423, BelowGroundPenalize Loss : 0.000
===> [Minibatch 3/129].........tensor([[[-0.7688, -0.3815, -0.0195,  ..., -0.6401, -0.2453, -0.5168],
         [ 0.9106, -0.0137,  1.1830,  ...,  0.5524, -0.8226, -0.9937],
         [ 0.8319,  0.3044,  0.3432,  ...,  1.3623, -0.0591, -0.5438],
         ...,
         [-1.3326,  1.9964,  0.1016,  ...,  0.0848, -0.3754,  0.2873],
         [-0.5836,  0.7465, -0.2803,  ..., -1.5228, -0.6593,  1.3810],
         [-0.0589,  0.6183,  2.1416,  ...,  0.6252,  0.2304, -0.4291]],

        [[-1.0671,  1.2684, -0.3698,  ...,  0.5418, -0.3086,  0.7270],
         [ 0.4640,  1.5458, -1.0059,  ...,  0.1027, -1.0385, -0.9927],
         [ 0.1813,  0.5681, -0.2607,  ...,  0.9258,  1.2340,  0.9235],
         ...,
         [ 0.3141, -0.8721, -0.1232,  ...,  0.2685, -0.0282,  0.5447],
         [ 0.3642, -0.6902, -0.4098,  ...,  0.0221, -0.0652, -0.1855],
         [ 0.0979,  0.9944,  0.3798,  ...,  0.7054,  1.5263, -1.5332]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4332,  1.6849,  0.9035,  ...,  0.4560, -0.1240,  1.8647],
         [ 2.0069,  0.8718,  0.4733,  ...,  0.1582,  0.4796, -0.6793],
         [-0.6529,  0.5300,  0.3069,  ..., -0.4323,  0.7942,  0.9558],
         ...,
         [ 0.1562,  0.1723, -1.3798,  ...,  2.0615,  1.4161,  0.5944],
         [ 1.6647, -0.4968,  1.1542,  ...,  0.7633, -1.6075,  0.8586],
         [-0.5979,  0.3995,  1.1714,  ..., -0.0705,  1.2048,  0.8171]],

        [[ 1.0804, -0.0710, -0.7518,  ...,  0.4051,  0.2059, -2.4442],
         [-0.6300, -1.1400, -0.1498,  ..., -0.9547, -0.3514,  0.3370],
         [-0.2630,  0.3408,  1.8380,  ..., -1.2016, -1.3742, -0.9664],
         ...,
         [-2.8989,  1.7753, -0.2848,  ...,  1.1861, -0.6707, -0.8738],
         [ 0.3414, -1.1105,  0.8291,  ...,  0.0181,  1.0328,  0.7916],
         [ 1.2628, -0.2664,  0.1777,  ...,  0.9121, -0.6214,  1.8557]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4332e+00,  1.6849e+00,  9.0352e-01,  ...,  4.5601e-01,
           -1.2400e-01,  1.8647e+00],
          [ 2.0069e+00,  8.7178e-01,  4.7329e-01,  ...,  1.5816e-01,
            4.7963e-01, -6.7931e-01],
          [-6.5294e-01,  5.2996e-01,  3.0693e-01,  ..., -4.3233e-01,
            7.9420e-01,  9.5584e-01],
          ...,
          [ 1.5622e-01,  1.7226e-01, -1.3798e+00,  ...,  2.0615e+00,
            1.4161e+00,  5.9440e-01],
          [ 1.6647e+00, -4.9682e-01,  1.1542e+00,  ...,  7.6328e-01,
           -1.6075e+00,  8.5863e-01],
          [-5.9787e-01,  3.9952e-01,  1.1714e+00,  ..., -7.0494e-02,
            1.2048e+00,  8.1710e-01]],

         [[ 1.0804e+00, -7.1008e-02, -7.5180e-01,  ...,  4.0509e-01,
            2.0590e-01, -2.4442e+00],
          [-6.2996e-01, -1.1400e+00, -1.4977e-01,  ..., -9.5474e-01,
           -3.5136e-01,  3.3698e-01],
          [-2.6303e-01,  3.4084e-01,  1.8380e+00,  ..., -1.2016e+00,
           -1.3742e+00, -9.6644e-01],
          ...,
          [-2.8989e+00,  1.7753e+00, -2.8483e-01,  ...,  1.1861e+00,
           -6.7068e-01, -8.7381e-01],
          [ 3.4145e-01, -1.1105e+00,  8.2912e-01,  ...,  1.8100e-02,
            1.0328e+00,  7.9159e-01],
          [ 1.2628e+00, -2.6639e-01,  1.7774e-01,  ...,  9.1212e-01,
           -6.2136e-01,  1.8557e+00]]],


        [[[-3.3205e-01,  1.6438e+00,  1.0917e+00,  ..., -2.0599e+00,
           -6.3947e-01,  3.6294e-01],
          [-3.7275e-02, -3.9690e-01,  1.1551e+00,  ..., -6.0442e-02,
            1.6317e-01,  1.1961e+00],
          [-1.1679e+00, -1.1183e+00,  4.0686e-02,  ...,  2.4606e-01,
            1.4159e+00,  5.4774e-01],
          ...,
          [ 2.7955e-01,  1.7134e+00, -1.1330e+00,  ...,  7.4729e-01,
            1.5693e+00, -2.2141e-01],
          [ 6.4950e-01, -1.9543e-01, -5.1609e-01,  ..., -1.5225e+00,
           -1.1339e-01, -5.0573e-01],
          [-8.0326e-01,  6.4564e-01, -5.3708e-01,  ..., -5.4751e-01,
            2.4131e+00, -4.9242e-01]],

         [[ 1.5811e-02, -8.9589e-01,  3.1494e-01,  ..., -1.4251e-01,
            8.2608e-01,  2.1710e+00],
          [-1.0438e+00,  1.8143e-01,  3.3520e-02,  ..., -1.5836e+00,
            4.1377e-01,  1.2634e+00],
          [-4.6446e-01,  3.5145e-01, -1.1093e-01,  ...,  5.4565e-01,
            1.7477e-03,  1.7656e+00],
          ...,
          [ 7.1860e-01, -2.4007e+00, -1.1474e+00,  ...,  2.7968e-01,
            6.9725e-01,  3.5952e-01],
          [-1.8238e+00,  7.3413e-01,  8.3584e-01,  ..., -6.2262e-01,
           -9.2913e-01, -9.7370e-02],
          [-6.5971e-01, -1.6731e-01,  2.6210e-01,  ...,  8.0203e-01,
           -4.4557e-01, -1.9196e-02]]],


        [[[ 1.3767e+00,  2.5185e-01,  6.3386e-01,  ..., -1.0115e+00,
            2.0368e+00, -4.7147e-01],
          [-1.1370e+00,  1.1076e+00, -7.4018e-01,  ..., -3.7567e-01,
            3.0092e-01,  2.9342e+00],
          [-5.2411e-01,  2.9339e-01,  1.1743e+00,  ..., -1.7941e+00,
           -1.7723e+00,  2.7861e-02],
          ...,
          [ 4.0363e-01, -3.7746e-01, -8.2656e-01,  ..., -3.9448e-01,
           -4.2349e-01, -8.4387e-01],
          [-1.2250e+00, -2.7087e-01,  8.1632e-01,  ...,  1.3027e-01,
            1.1916e+00, -1.3645e+00],
          [ 1.2363e+00, -9.8751e-01,  9.4583e-01,  ...,  1.4306e-01,
            7.2545e-01, -7.0788e-01]],

         [[ 1.4266e+00, -7.8495e-01, -7.8282e-01,  ...,  2.1530e+00,
            9.1075e-01,  6.8830e-01],
          [-9.9248e-01,  3.6138e-01,  1.5113e+00,  ..., -9.3643e-01,
           -1.6776e+00, -5.8812e-01],
          [-3.9712e-01, -6.3531e-01, -9.8267e-01,  ..., -6.5481e-01,
            1.6648e-01, -9.2137e-01],
          ...,
          [ 4.6110e-01, -5.8825e-01, -8.8190e-01,  ...,  1.2215e+00,
            4.8297e-01,  4.0049e-01],
          [-1.6525e+00,  8.2681e-02,  1.3645e-01,  ...,  8.7627e-02,
            4.8932e-01, -1.2230e+00],
          [-1.5908e+00, -1.6292e+00,  7.7976e-01,  ..., -1.1789e+00,
           -3.7449e-02, -2.9366e-01]]],


        [[[-9.0959e-01,  4.8173e-01, -2.1912e-01,  ..., -2.3245e-01,
            5.6460e-01, -2.3816e-01],
          [-9.2810e-01,  3.5123e-01,  1.2923e-01,  ..., -6.3026e-01,
            4.6869e-01,  1.2152e+00],
          [ 1.8936e+00, -3.2957e-01,  1.9696e+00,  ..., -1.8212e-01,
           -6.4015e-01, -6.7440e-01],
          ...,
          [ 7.5715e-02, -5.8746e-01, -1.1073e+00,  ...,  4.3416e-01,
            5.8396e-02, -2.9918e-01],
          [ 1.0300e+00, -2.0561e+00,  1.3904e+00,  ...,  1.5522e+00,
            1.4270e+00, -2.7577e-02],
          [-8.4101e-01, -1.0340e+00, -8.0277e-01,  ..., -8.2411e-01,
           -5.5479e-01,  1.1421e+00]],

         [[-1.6314e-01, -5.7601e-01,  9.0195e-01,  ...,  7.0549e-01,
           -7.6825e-01,  4.0693e-01],
          [ 9.6132e-02, -1.1713e-01,  9.5218e-01,  ...,  1.8751e-02,
            1.1679e+00, -1.9715e-01],
          [ 4.0393e-01, -5.5533e-01, -2.0727e+00,  ..., -2.4447e-02,
           -6.2378e-01, -5.0826e-01],
          ...,
          [-3.0226e-01,  4.6472e-01, -4.0944e-01,  ...,  1.8063e-01,
           -1.9004e+00,  6.7108e-01],
          [ 9.4158e-01, -1.4373e+00, -2.4594e+00,  ..., -2.4992e+00,
            6.8417e-01, -6.8910e-01],
          [-1.7631e-01, -2.1223e-01,  4.8395e-01,  ...,  1.0197e+00,
           -5.7814e-01,  4.8144e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8080, -0.8480,  0.8762,  ...,  1.5966, -0.5758,  0.6808],
          [ 0.5619, -1.1688,  0.9463,  ...,  0.5279,  1.1226,  1.5042],
          [-0.9553,  1.4491,  0.7565,  ...,  0.1421,  0.5498, -0.1225],
          ...,
          [ 0.1701,  1.8070, -0.6436,  ...,  0.2665,  0.7476,  0.4022],
          [-0.0954, -1.8302,  0.5641,  ...,  0.5509, -0.1108, -1.2903],
          [ 1.3564, -0.6786,  0.1373,  ...,  0.2734,  1.2624, -0.8372]],

         [[ 1.6363,  0.4804, -0.0772,  ...,  0.3748,  0.6694, -0.3770],
          [ 2.2591, -0.7848, -0.4487,  ..., -0.0863,  0.0703,  0.7052],
          [ 0.0561, -0.0595,  0.0501,  ...,  0.2702, -1.9559,  0.5442],
          ...,
          [-0.0042,  0.2944, -0.7146,  ...,  0.0809, -1.9594, -0.6813],
          [-0.3731,  3.0524, -0.6366,  ...,  0.2131,  1.5077, -0.5589],
          [-0.5610, -0.0113,  0.5498,  ...,  0.6184, -1.0356,  0.5948]]],


        [[[ 0.1013,  1.3244,  0.3901,  ..., -2.0318,  0.3206, -0.3940],
          [ 1.9923, -1.7346, -1.2002,  ..., -0.6000,  1.1737, -0.0713],
          [ 1.3707,  1.9591, -0.4612,  ..., -1.1160,  1.3902,  1.1648],
          ...,
          [-0.6012, -0.7700,  1.1720,  ..., -0.3275,  0.9427, -0.9058],
          [-1.3388, -0.2338, -2.6192,  ..., -1.4389, -0.1875, -0.1656],
          [ 0.2345, -0.0353, -1.0465,  ...,  0.4363,  1.2369,  0.6296]],

         [[ 0.6609, -0.5074,  0.0903,  ...,  1.7059, -0.3908,  0.3709],
          [-0.6373, -0.9795,  0.5038,  ...,  1.9630, -2.3952,  1.0905],
          [-2.3486, -0.3868, -1.1258,  ..., -1.4978, -1.0750, -1.9459],
          ...,
          [-1.1080, -0.1836,  0.4909,  ..., -0.8211,  2.2647,  0.1034],
          [-1.2657,  0.4836, -0.4012,  ..., -1.2379,  1.8397, -0.6889],
          [-0.2624, -0.9279,  0.6252,  ...,  1.2399,  0.0608, -0.5658]]],


        [[[ 2.0522,  1.1218,  0.3645,  ..., -1.6607,  0.4019,  0.0481],
          [-2.4350, -0.7957, -0.1716,  ..., -0.0397,  0.8558, -0.0354],
          [-0.9692, -1.0654, -1.3324,  ...,  1.2897, -1.0383,  0.6420],
          ...,
          [ 1.5803, -0.0689,  1.7266,  ..., -0.2741,  0.5362, -0.2883],
          [-0.0461,  0.7970, -1.0358,  ...,  1.9863, -0.7177, -0.1492],
          [ 0.2263, -0.0616, -0.3131,  ...,  0.9450,  0.7827, -2.5925]],

         [[-0.2595,  0.0118,  0.5918,  ..., -1.4353,  1.2970,  1.1391],
          [ 1.0207, -0.8347, -0.9575,  ...,  1.1455,  0.0364,  0.4275],
          [-0.3601,  0.6982,  1.1994,  ...,  1.5452,  0.8663,  0.0149],
          ...,
          [ 0.6388, -0.1527, -2.5933,  ...,  1.2138, -0.6719, -0.3162],
          [-0.3515,  0.0250, -0.4270,  ...,  0.3399,  0.8903, -1.4711],
          [ 0.0678,  0.1269,  1.6585,  ...,  0.3336,  0.7229,  1.4630]]],


        [[[ 1.1399,  0.7093, -0.1965,  ...,  1.4971, -1.2599,  1.2811],
          [ 2.4224,  1.0079,  0.7377,  ...,  1.4131,  1.3377, -1.0029],
          [-0.8536, -0.4913, -0.5031,  ..., -0.5378, -0.4124,  1.2323],
          ...,
          [ 0.4922,  1.0737, -0.5200,  ...,  1.0934,  0.4952, -0.5696],
          [-1.1879,  0.5426, -0.4546,  ..., -0.2846, -0.5812,  0.4496],
          [-0.7640,  0.0310,  0.3771,  ...,  0.1769,  0.2458,  0.0472]],

         [[ 0.6962, -0.0395, -0.1582,  ...,  1.3772, -0.3009, -1.0175],
          [ 0.5849,  1.2385,  0.0169,  ...,  1.0370,  0.9382, -0.4421],
          [-0.0624, -0.8674, -1.3684,  ...,  1.7083, -0.4486, -1.5006],
          ...,
          [-1.0135, -0.3769,  0.3453,  ...,  1.0270, -0.6304,  0.2302],
          [ 0.4094, -0.1228, -1.2106,  ..., -0.2278, -0.9366,  0.3541],
          [-0.4898, -0.6704,  0.5595,  ..., -1.1503, -1.3782, -0.8292]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4337e+00,  1.6857e+00,  9.0399e-01,  ...,  4.5305e-01,
           -1.2090e-01,  1.8636e+00],
          [ 2.0075e+00,  8.6890e-01,  4.7113e-01,  ...,  1.5389e-01,
            4.7709e-01, -6.7609e-01],
          [-6.5396e-01,  5.3007e-01,  3.0674e-01,  ..., -4.3497e-01,
            7.9426e-01,  9.5731e-01],
          ...,
          [ 1.5525e-01,  1.7216e-01, -1.3796e+00,  ...,  2.0599e+00,
            1.4157e+00,  5.9384e-01],
          [ 1.6615e+00, -4.9555e-01,  1.1526e+00,  ...,  7.5867e-01,
           -1.6122e+00,  8.5626e-01],
          [-6.0103e-01,  3.9850e-01,  1.1733e+00,  ..., -7.4571e-02,
            1.2046e+00,  8.1731e-01]],

         [[ 1.0815e+00, -7.0022e-02, -7.5263e-01,  ...,  4.0636e-01,
            2.0762e-01, -2.4413e+00],
          [-6.2990e-01, -1.1433e+00, -1.4688e-01,  ..., -9.5697e-01,
           -3.5066e-01,  3.3912e-01],
          [-2.6150e-01,  3.3983e-01,  1.8373e+00,  ..., -1.2027e+00,
           -1.3736e+00, -9.6440e-01],
          ...,
          [-2.8999e+00,  1.7739e+00, -2.8457e-01,  ...,  1.1861e+00,
           -6.6895e-01, -8.7277e-01],
          [ 3.4373e-01, -1.1140e+00,  8.3343e-01,  ...,  2.1967e-02,
            1.0370e+00,  7.9615e-01],
          [ 1.2628e+00, -2.7162e-01,  1.8253e-01,  ...,  9.0821e-01,
           -6.2306e-01,  1.8532e+00]]],


        [[[-3.2829e-01,  1.6464e+00,  1.0908e+00,  ..., -2.0620e+00,
           -6.3942e-01,  3.6190e-01],
          [-3.3069e-02, -3.9976e-01,  1.1521e+00,  ..., -6.0887e-02,
            1.6623e-01,  1.1929e+00],
          [-1.1664e+00, -1.1183e+00,  3.9689e-02,  ...,  2.4521e-01,
            1.4160e+00,  5.4644e-01],
          ...,
          [ 2.8136e-01,  1.7131e+00, -1.1337e+00,  ...,  7.4741e-01,
            1.5708e+00, -2.2183e-01],
          [ 6.5343e-01, -1.9761e-01, -5.1699e-01,  ..., -1.5258e+00,
           -1.1313e-01, -5.0833e-01],
          [-7.9953e-01,  6.4123e-01, -5.4169e-01,  ..., -5.4917e-01,
            2.4167e+00, -4.9707e-01]],

         [[ 1.5820e-02, -8.9774e-01,  3.1293e-01,  ..., -1.3996e-01,
            8.2479e-01,  2.1700e+00],
          [-1.0477e+00,  1.7810e-01,  3.4656e-02,  ..., -1.5800e+00,
            4.1342e-01,  1.2658e+00],
          [-4.6532e-01,  3.4943e-01, -1.1076e-01,  ...,  5.4665e-01,
            4.0981e-05,  1.7642e+00],
          ...,
          [ 7.1803e-01, -2.4023e+00, -1.1488e+00,  ...,  2.8203e-01,
            6.9770e-01,  3.6016e-01],
          [-1.8245e+00,  7.3019e-01,  8.3194e-01,  ..., -6.1855e-01,
           -9.3362e-01, -9.8687e-02],
          [-6.6367e-01, -1.7174e-01,  2.5897e-01,  ...,  8.0656e-01,
           -4.4655e-01, -1.5137e-02]]],


        [[[ 1.3753e+00,  2.4942e-01,  6.3488e-01,  ..., -1.0133e+00,
            2.0339e+00, -4.7359e-01],
          [-1.1356e+00,  1.1057e+00, -7.3915e-01,  ..., -3.7443e-01,
            3.0078e-01,  2.9308e+00],
          [-5.2387e-01,  2.9184e-01,  1.1750e+00,  ..., -1.7946e+00,
           -1.7734e+00,  2.6674e-02],
          ...,
          [ 4.0320e-01, -3.7869e-01, -8.2630e-01,  ..., -3.9416e-01,
           -4.2380e-01, -8.4539e-01],
          [-1.2237e+00, -2.7250e-01,  8.1829e-01,  ...,  1.2777e-01,
            1.1902e+00, -1.3668e+00],
          [ 1.2331e+00, -9.9066e-01,  9.4912e-01,  ...,  1.4144e-01,
            7.2580e-01, -7.1066e-01]],

         [[ 1.4273e+00, -7.8611e-01, -7.8240e-01,  ...,  2.1524e+00,
            9.0775e-01,  6.8992e-01],
          [-9.9588e-01,  3.5905e-01,  1.5119e+00,  ..., -9.3861e-01,
           -1.6816e+00, -5.8539e-01],
          [-3.9680e-01, -6.3645e-01, -9.8133e-01,  ..., -6.5701e-01,
            1.6518e-01, -9.1958e-01],
          ...,
          [ 4.6147e-01, -5.8792e-01, -8.8205e-01,  ...,  1.2206e+00,
            4.8170e-01,  4.0047e-01],
          [-1.6546e+00,  7.8313e-02,  1.3893e-01,  ...,  8.4463e-02,
            4.8435e-01, -1.2189e+00],
          [-1.5881e+00, -1.6271e+00,  7.8194e-01,  ..., -1.1827e+00,
           -4.1118e-02, -2.8981e-01]]],


        [[[-9.1246e-01,  4.7860e-01, -2.2042e-01,  ..., -2.3115e-01,
            5.6789e-01, -2.3727e-01],
          [-9.3003e-01,  3.4931e-01,  1.3090e-01,  ..., -6.2812e-01,
            4.7167e-01,  1.2172e+00],
          [ 1.8948e+00, -3.2923e-01,  1.9692e+00,  ..., -1.8192e-01,
           -6.3902e-01, -6.7505e-01],
          ...,
          [ 7.5709e-02, -5.8822e-01, -1.1078e+00,  ...,  4.3403e-01,
            6.0225e-02, -2.9943e-01],
          [ 1.0323e+00, -2.0552e+00,  1.3882e+00,  ...,  1.5548e+00,
            1.4301e+00, -2.3971e-02],
          [-8.4254e-01, -1.0354e+00, -8.0267e-01,  ..., -8.2083e-01,
           -5.5302e-01,  1.1435e+00]],

         [[-1.6476e-01, -5.7426e-01,  9.0173e-01,  ...,  7.0348e-01,
           -7.6548e-01,  4.0657e-01],
          [ 9.7313e-02, -1.1728e-01,  9.5382e-01,  ...,  1.6111e-02,
            1.1674e+00, -1.9791e-01],
          [ 4.0272e-01, -5.5425e-01, -2.0740e+00,  ..., -2.5351e-02,
           -6.2229e-01, -5.0921e-01],
          ...,
          [-3.0325e-01,  4.6583e-01, -4.0950e-01,  ...,  1.7996e-01,
           -1.8988e+00,  6.7150e-01],
          [ 9.4092e-01, -1.4352e+00, -2.4607e+00,  ..., -2.4993e+00,
            6.8231e-01, -6.8704e-01],
          [-1.7952e-01, -2.1003e-01,  4.8486e-01,  ...,  1.0170e+00,
           -5.7602e-01,  4.8266e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8077, -0.8508,  0.8747,  ...,  1.5959, -0.5748,  0.6774],
          [ 0.5634, -1.1724,  0.9440,  ...,  0.5238,  1.1213,  1.5018],
          [-0.9553,  1.4462,  0.7541,  ...,  0.1389,  0.5502, -0.1250],
          ...,
          [ 0.1704,  1.8057, -0.6451,  ...,  0.2648,  0.7480,  0.3984],
          [-0.0954, -1.8318,  0.5598,  ...,  0.5483, -0.1112, -1.2961],
          [ 1.3563, -0.6810,  0.1334,  ...,  0.2694,  1.2629, -0.8425]],

         [[ 1.6341,  0.4813, -0.0755,  ...,  0.3709,  0.6729, -0.3744],
          [ 2.2580, -0.7886, -0.4496,  ..., -0.0909,  0.0739,  0.7083],
          [ 0.0537, -0.0583,  0.0492,  ...,  0.2675, -1.9543,  0.5462],
          ...,
          [-0.0057,  0.2943, -0.7145,  ...,  0.0782, -1.9577, -0.6784],
          [-0.3771,  3.0517, -0.6339,  ...,  0.2080,  1.5115, -0.5547],
          [-0.5635, -0.0145,  0.5500,  ...,  0.6124, -1.0312,  0.5982]]],


        [[[ 0.1064,  1.3226,  0.3869,  ..., -2.0273,  0.3261, -0.3997],
          [ 1.9959, -1.7374, -1.2045,  ..., -0.5955,  1.1783, -0.0765],
          [ 1.3725,  1.9578, -0.4640,  ..., -1.1128,  1.3943,  1.1609],
          ...,
          [-0.5991, -0.7708,  1.1691,  ..., -0.3256,  0.9462, -0.9085],
          [-1.3343, -0.2354, -2.6238,  ..., -1.4350, -0.1826, -0.1720],
          [ 0.2394, -0.0384, -1.0510,  ...,  0.4406,  1.2425,  0.6242]],

         [[ 0.6574, -0.5063,  0.0923,  ...,  1.7057, -0.3886,  0.3729],
          [-0.6410, -0.9819,  0.5061,  ...,  1.9635, -2.3936,  1.0942],
          [-2.3510, -0.3859, -1.1263,  ..., -1.4973, -1.0740, -1.9446],
          ...,
          [-1.1104, -0.1839,  0.4912,  ..., -0.8208,  2.2656,  0.1045],
          [-1.2695,  0.4832, -0.3994,  ..., -1.2374,  1.8402, -0.6857],
          [-0.2681, -0.9305,  0.6280,  ...,  1.2408,  0.0632, -0.5616]]],


        [[[ 2.0542,  1.1178,  0.3619,  ..., -1.6575,  0.4017,  0.0429],
          [-2.4319, -0.7998, -0.1737,  ..., -0.0354,  0.8558, -0.0404],
          [-0.9671, -1.0684, -1.3331,  ...,  1.2918, -1.0381,  0.6402],
          ...,
          [ 1.5813, -0.0698,  1.7260,  ..., -0.2722,  0.5366, -0.2897],
          [-0.0425,  0.7930, -1.0383,  ...,  1.9893, -0.7180, -0.1556],
          [ 0.2308, -0.0665, -0.3179,  ...,  0.9478,  0.7828, -2.5964]],

         [[-0.2646,  0.0135,  0.5935,  ..., -1.4379,  1.2953,  1.1410],
          [ 1.0158, -0.8341, -0.9550,  ...,  1.1430,  0.0315,  0.4315],
          [-0.3628,  0.7000,  1.2000,  ...,  1.5434,  0.8637,  0.0168],
          ...,
          [ 0.6356, -0.1519, -2.5926,  ...,  1.2124, -0.6733, -0.3149],
          [-0.3572,  0.0263, -0.4226,  ...,  0.3346,  0.8855, -1.4674],
          [ 0.0631,  0.1293,  1.6605,  ...,  0.3293,  0.7182,  1.4664]]],


        [[[ 1.1427,  0.7081, -0.2002,  ...,  1.4997, -1.2577,  1.2763],
          [ 2.4242,  1.0067,  0.7327,  ...,  1.4163,  1.3394, -1.0059],
          [-0.8517, -0.4921, -0.5044,  ..., -0.5362, -0.4106,  1.2295],
          ...,
          [ 0.4940,  1.0732, -0.5220,  ...,  1.0945,  0.4962, -0.5722],
          [-1.1850,  0.5408, -0.4594,  ..., -0.2797, -0.5775,  0.4467],
          [-0.7606,  0.0291,  0.3714,  ...,  0.1820,  0.2484,  0.0438]],

         [[ 0.6914, -0.0371, -0.1583,  ...,  1.3740, -0.3011, -1.0170],
          [ 0.5802,  1.2394,  0.0174,  ...,  1.0337,  0.9344, -0.4415],
          [-0.0654, -0.8653, -1.3688,  ...,  1.7068, -0.4494, -1.5006],
          ...,
          [-1.0161, -0.3761,  0.3455,  ...,  1.0246, -0.6305,  0.2304],
          [ 0.4058, -0.1202, -1.2092,  ..., -0.2333, -0.9386,  0.3568],
          [-0.4939, -0.6671,  0.5599,  ..., -1.1541, -1.3807, -0.8292]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7688, -0.3754, -0.0210,  ..., -0.6328, -0.2521, -0.5217],
         [ 0.9049, -0.0069,  1.1776,  ...,  0.5589, -0.8294, -1.0010],
         [ 0.8348,  0.3097,  0.3467,  ...,  1.3682, -0.0548, -0.5509],
         ...,
         [-1.3256,  2.0030,  0.1052,  ...,  0.0918, -0.3699,  0.2835],
         [-0.5810,  0.7510, -0.2857,  ..., -1.5185, -0.6580,  1.3751],
         [-0.0536,  0.6166,  2.1450,  ...,  0.6300,  0.2352, -0.4261]],

        [[-1.0705,  1.2632, -0.3726,  ...,  0.5453, -0.3067,  0.7241],
         [ 0.4714,  1.5404, -1.0104,  ...,  0.0970, -1.0343, -0.9974],
         [ 0.1772,  0.5602, -0.2666,  ...,  0.9305,  1.2402,  0.9218],
         ...,
         [ 0.3073, -0.8653, -0.1260,  ...,  0.2764, -0.0344,  0.5416],
         [ 0.3722, -0.6937, -0.4152,  ...,  0.0172, -0.0568, -0.1910],
         [ 0.0933,  0.9902,  0.3853,  ...,  0.7103,  1.5300, -1.5411]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4337,  1.6857,  0.9040,  ...,  0.4531, -0.1209,  1.8636],
         [ 2.0075,  0.8689,  0.4711,  ...,  0.1539,  0.4771, -0.6761],
         [-0.6540,  0.5301,  0.3067,  ..., -0.4350,  0.7943,  0.9573],
         ...,
         [ 0.1552,  0.1722, -1.3796,  ...,  2.0599,  1.4157,  0.5938],
         [ 1.6615, -0.4956,  1.1526,  ...,  0.7587, -1.6122,  0.8563],
         [-0.6010,  0.3985,  1.1733,  ..., -0.0746,  1.2046,  0.8173]],

        [[ 1.0815, -0.0700, -0.7526,  ...,  0.4064,  0.2076, -2.4413],
         [-0.6299, -1.1433, -0.1469,  ..., -0.9570, -0.3507,  0.3391],
         [-0.2615,  0.3398,  1.8373,  ..., -1.2027, -1.3736, -0.9644],
         ...,
         [-2.8999,  1.7739, -0.2846,  ...,  1.1861, -0.6690, -0.8728],
         [ 0.3437, -1.1140,  0.8334,  ...,  0.0220,  1.0370,  0.7961],
         [ 1.2628, -0.2716,  0.1825,  ...,  0.9082, -0.6231,  1.8532]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 242.049, Val Loss : 537.385
======> Trajectory Loss : 100.006, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.420, BelowGroundPenalize Loss : 0.000
===> [Minibatch 4/129].........tensor([[[-0.7688, -0.3754, -0.0210,  ..., -0.6328, -0.2521, -0.5217],
         [ 0.9049, -0.0069,  1.1776,  ...,  0.5589, -0.8294, -1.0010],
         [ 0.8348,  0.3097,  0.3467,  ...,  1.3682, -0.0548, -0.5509],
         ...,
         [-1.3256,  2.0030,  0.1052,  ...,  0.0918, -0.3699,  0.2835],
         [-0.5810,  0.7510, -0.2857,  ..., -1.5185, -0.6580,  1.3751],
         [-0.0536,  0.6166,  2.1450,  ...,  0.6300,  0.2352, -0.4261]],

        [[-1.0705,  1.2632, -0.3726,  ...,  0.5453, -0.3067,  0.7241],
         [ 0.4714,  1.5404, -1.0104,  ...,  0.0970, -1.0343, -0.9974],
         [ 0.1772,  0.5602, -0.2666,  ...,  0.9305,  1.2402,  0.9218],
         ...,
         [ 0.3073, -0.8653, -0.1260,  ...,  0.2764, -0.0344,  0.5416],
         [ 0.3722, -0.6937, -0.4152,  ...,  0.0172, -0.0568, -0.1910],
         [ 0.0933,  0.9902,  0.3853,  ...,  0.7103,  1.5300, -1.5411]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4337,  1.6857,  0.9040,  ...,  0.4531, -0.1209,  1.8636],
         [ 2.0075,  0.8689,  0.4711,  ...,  0.1539,  0.4771, -0.6761],
         [-0.6540,  0.5301,  0.3067,  ..., -0.4350,  0.7943,  0.9573],
         ...,
         [ 0.1552,  0.1722, -1.3796,  ...,  2.0599,  1.4157,  0.5938],
         [ 1.6615, -0.4956,  1.1526,  ...,  0.7587, -1.6122,  0.8563],
         [-0.6010,  0.3985,  1.1733,  ..., -0.0746,  1.2046,  0.8173]],

        [[ 1.0815, -0.0700, -0.7526,  ...,  0.4064,  0.2076, -2.4413],
         [-0.6299, -1.1433, -0.1469,  ..., -0.9570, -0.3507,  0.3391],
         [-0.2615,  0.3398,  1.8373,  ..., -1.2027, -1.3736, -0.9644],
         ...,
         [-2.8999,  1.7739, -0.2846,  ...,  1.1861, -0.6690, -0.8728],
         [ 0.3437, -1.1140,  0.8334,  ...,  0.0220,  1.0370,  0.7961],
         [ 1.2628, -0.2716,  0.1825,  ...,  0.9082, -0.6231,  1.8532]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4337e+00,  1.6857e+00,  9.0399e-01,  ...,  4.5305e-01,
           -1.2090e-01,  1.8636e+00],
          [ 2.0075e+00,  8.6890e-01,  4.7113e-01,  ...,  1.5389e-01,
            4.7709e-01, -6.7609e-01],
          [-6.5396e-01,  5.3007e-01,  3.0674e-01,  ..., -4.3497e-01,
            7.9426e-01,  9.5731e-01],
          ...,
          [ 1.5525e-01,  1.7216e-01, -1.3796e+00,  ...,  2.0599e+00,
            1.4157e+00,  5.9384e-01],
          [ 1.6615e+00, -4.9555e-01,  1.1526e+00,  ...,  7.5867e-01,
           -1.6122e+00,  8.5626e-01],
          [-6.0103e-01,  3.9850e-01,  1.1733e+00,  ..., -7.4571e-02,
            1.2046e+00,  8.1731e-01]],

         [[ 1.0815e+00, -7.0022e-02, -7.5263e-01,  ...,  4.0636e-01,
            2.0762e-01, -2.4413e+00],
          [-6.2990e-01, -1.1433e+00, -1.4688e-01,  ..., -9.5697e-01,
           -3.5066e-01,  3.3912e-01],
          [-2.6150e-01,  3.3983e-01,  1.8373e+00,  ..., -1.2027e+00,
           -1.3736e+00, -9.6440e-01],
          ...,
          [-2.8999e+00,  1.7739e+00, -2.8457e-01,  ...,  1.1861e+00,
           -6.6895e-01, -8.7277e-01],
          [ 3.4373e-01, -1.1140e+00,  8.3343e-01,  ...,  2.1967e-02,
            1.0370e+00,  7.9615e-01],
          [ 1.2628e+00, -2.7162e-01,  1.8253e-01,  ...,  9.0821e-01,
           -6.2306e-01,  1.8532e+00]]],


        [[[-3.2829e-01,  1.6464e+00,  1.0908e+00,  ..., -2.0620e+00,
           -6.3942e-01,  3.6190e-01],
          [-3.3069e-02, -3.9976e-01,  1.1521e+00,  ..., -6.0887e-02,
            1.6623e-01,  1.1929e+00],
          [-1.1664e+00, -1.1183e+00,  3.9689e-02,  ...,  2.4521e-01,
            1.4160e+00,  5.4644e-01],
          ...,
          [ 2.8136e-01,  1.7131e+00, -1.1337e+00,  ...,  7.4741e-01,
            1.5708e+00, -2.2183e-01],
          [ 6.5343e-01, -1.9761e-01, -5.1699e-01,  ..., -1.5258e+00,
           -1.1313e-01, -5.0833e-01],
          [-7.9953e-01,  6.4123e-01, -5.4169e-01,  ..., -5.4917e-01,
            2.4167e+00, -4.9707e-01]],

         [[ 1.5820e-02, -8.9774e-01,  3.1293e-01,  ..., -1.3996e-01,
            8.2479e-01,  2.1700e+00],
          [-1.0477e+00,  1.7810e-01,  3.4656e-02,  ..., -1.5800e+00,
            4.1342e-01,  1.2658e+00],
          [-4.6532e-01,  3.4943e-01, -1.1076e-01,  ...,  5.4665e-01,
            4.0981e-05,  1.7642e+00],
          ...,
          [ 7.1803e-01, -2.4023e+00, -1.1488e+00,  ...,  2.8203e-01,
            6.9770e-01,  3.6016e-01],
          [-1.8245e+00,  7.3019e-01,  8.3194e-01,  ..., -6.1855e-01,
           -9.3362e-01, -9.8687e-02],
          [-6.6367e-01, -1.7174e-01,  2.5897e-01,  ...,  8.0656e-01,
           -4.4655e-01, -1.5137e-02]]],


        [[[ 1.3753e+00,  2.4942e-01,  6.3488e-01,  ..., -1.0133e+00,
            2.0339e+00, -4.7359e-01],
          [-1.1356e+00,  1.1057e+00, -7.3915e-01,  ..., -3.7443e-01,
            3.0078e-01,  2.9308e+00],
          [-5.2387e-01,  2.9184e-01,  1.1750e+00,  ..., -1.7946e+00,
           -1.7734e+00,  2.6674e-02],
          ...,
          [ 4.0320e-01, -3.7869e-01, -8.2630e-01,  ..., -3.9416e-01,
           -4.2380e-01, -8.4539e-01],
          [-1.2237e+00, -2.7250e-01,  8.1829e-01,  ...,  1.2777e-01,
            1.1902e+00, -1.3668e+00],
          [ 1.2331e+00, -9.9066e-01,  9.4912e-01,  ...,  1.4144e-01,
            7.2580e-01, -7.1066e-01]],

         [[ 1.4273e+00, -7.8611e-01, -7.8240e-01,  ...,  2.1524e+00,
            9.0775e-01,  6.8992e-01],
          [-9.9588e-01,  3.5905e-01,  1.5119e+00,  ..., -9.3861e-01,
           -1.6816e+00, -5.8539e-01],
          [-3.9680e-01, -6.3645e-01, -9.8133e-01,  ..., -6.5701e-01,
            1.6518e-01, -9.1958e-01],
          ...,
          [ 4.6147e-01, -5.8792e-01, -8.8205e-01,  ...,  1.2206e+00,
            4.8170e-01,  4.0047e-01],
          [-1.6546e+00,  7.8313e-02,  1.3893e-01,  ...,  8.4463e-02,
            4.8435e-01, -1.2189e+00],
          [-1.5881e+00, -1.6271e+00,  7.8194e-01,  ..., -1.1827e+00,
           -4.1118e-02, -2.8981e-01]]],


        [[[-9.1246e-01,  4.7860e-01, -2.2042e-01,  ..., -2.3115e-01,
            5.6789e-01, -2.3727e-01],
          [-9.3003e-01,  3.4931e-01,  1.3090e-01,  ..., -6.2812e-01,
            4.7167e-01,  1.2172e+00],
          [ 1.8948e+00, -3.2923e-01,  1.9692e+00,  ..., -1.8192e-01,
           -6.3902e-01, -6.7505e-01],
          ...,
          [ 7.5709e-02, -5.8822e-01, -1.1078e+00,  ...,  4.3403e-01,
            6.0225e-02, -2.9943e-01],
          [ 1.0323e+00, -2.0552e+00,  1.3882e+00,  ...,  1.5548e+00,
            1.4301e+00, -2.3971e-02],
          [-8.4254e-01, -1.0354e+00, -8.0267e-01,  ..., -8.2083e-01,
           -5.5302e-01,  1.1435e+00]],

         [[-1.6476e-01, -5.7426e-01,  9.0173e-01,  ...,  7.0348e-01,
           -7.6548e-01,  4.0657e-01],
          [ 9.7313e-02, -1.1728e-01,  9.5382e-01,  ...,  1.6111e-02,
            1.1674e+00, -1.9791e-01],
          [ 4.0272e-01, -5.5425e-01, -2.0740e+00,  ..., -2.5351e-02,
           -6.2229e-01, -5.0921e-01],
          ...,
          [-3.0325e-01,  4.6583e-01, -4.0950e-01,  ...,  1.7996e-01,
           -1.8988e+00,  6.7150e-01],
          [ 9.4092e-01, -1.4352e+00, -2.4607e+00,  ..., -2.4993e+00,
            6.8231e-01, -6.8704e-01],
          [-1.7952e-01, -2.1003e-01,  4.8486e-01,  ...,  1.0170e+00,
           -5.7602e-01,  4.8266e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8077, -0.8508,  0.8747,  ...,  1.5959, -0.5748,  0.6774],
          [ 0.5634, -1.1724,  0.9440,  ...,  0.5238,  1.1213,  1.5018],
          [-0.9553,  1.4462,  0.7541,  ...,  0.1389,  0.5502, -0.1250],
          ...,
          [ 0.1704,  1.8057, -0.6451,  ...,  0.2648,  0.7480,  0.3984],
          [-0.0954, -1.8318,  0.5598,  ...,  0.5483, -0.1112, -1.2961],
          [ 1.3563, -0.6810,  0.1334,  ...,  0.2694,  1.2629, -0.8425]],

         [[ 1.6341,  0.4813, -0.0755,  ...,  0.3709,  0.6729, -0.3744],
          [ 2.2580, -0.7886, -0.4496,  ..., -0.0909,  0.0739,  0.7083],
          [ 0.0537, -0.0583,  0.0492,  ...,  0.2675, -1.9543,  0.5462],
          ...,
          [-0.0057,  0.2943, -0.7145,  ...,  0.0782, -1.9577, -0.6784],
          [-0.3771,  3.0517, -0.6339,  ...,  0.2080,  1.5115, -0.5547],
          [-0.5635, -0.0145,  0.5500,  ...,  0.6124, -1.0312,  0.5982]]],


        [[[ 0.1064,  1.3226,  0.3869,  ..., -2.0273,  0.3261, -0.3997],
          [ 1.9959, -1.7374, -1.2045,  ..., -0.5955,  1.1783, -0.0765],
          [ 1.3725,  1.9578, -0.4640,  ..., -1.1128,  1.3943,  1.1609],
          ...,
          [-0.5991, -0.7708,  1.1691,  ..., -0.3256,  0.9462, -0.9085],
          [-1.3343, -0.2354, -2.6238,  ..., -1.4350, -0.1826, -0.1720],
          [ 0.2394, -0.0384, -1.0510,  ...,  0.4406,  1.2425,  0.6242]],

         [[ 0.6574, -0.5063,  0.0923,  ...,  1.7057, -0.3886,  0.3729],
          [-0.6410, -0.9819,  0.5061,  ...,  1.9635, -2.3936,  1.0942],
          [-2.3510, -0.3859, -1.1263,  ..., -1.4973, -1.0740, -1.9446],
          ...,
          [-1.1104, -0.1839,  0.4912,  ..., -0.8208,  2.2656,  0.1045],
          [-1.2695,  0.4832, -0.3994,  ..., -1.2374,  1.8402, -0.6857],
          [-0.2681, -0.9305,  0.6280,  ...,  1.2408,  0.0632, -0.5616]]],


        [[[ 2.0542,  1.1178,  0.3619,  ..., -1.6575,  0.4017,  0.0429],
          [-2.4319, -0.7998, -0.1737,  ..., -0.0354,  0.8558, -0.0404],
          [-0.9671, -1.0684, -1.3331,  ...,  1.2918, -1.0381,  0.6402],
          ...,
          [ 1.5813, -0.0698,  1.7260,  ..., -0.2722,  0.5366, -0.2897],
          [-0.0425,  0.7930, -1.0383,  ...,  1.9893, -0.7180, -0.1556],
          [ 0.2308, -0.0665, -0.3179,  ...,  0.9478,  0.7828, -2.5964]],

         [[-0.2646,  0.0135,  0.5935,  ..., -1.4379,  1.2953,  1.1410],
          [ 1.0158, -0.8341, -0.9550,  ...,  1.1430,  0.0315,  0.4315],
          [-0.3628,  0.7000,  1.2000,  ...,  1.5434,  0.8637,  0.0168],
          ...,
          [ 0.6356, -0.1519, -2.5926,  ...,  1.2124, -0.6733, -0.3149],
          [-0.3572,  0.0263, -0.4226,  ...,  0.3346,  0.8855, -1.4674],
          [ 0.0631,  0.1293,  1.6605,  ...,  0.3293,  0.7182,  1.4664]]],


        [[[ 1.1427,  0.7081, -0.2002,  ...,  1.4997, -1.2577,  1.2763],
          [ 2.4242,  1.0067,  0.7327,  ...,  1.4163,  1.3394, -1.0059],
          [-0.8517, -0.4921, -0.5044,  ..., -0.5362, -0.4106,  1.2295],
          ...,
          [ 0.4940,  1.0732, -0.5220,  ...,  1.0945,  0.4962, -0.5722],
          [-1.1850,  0.5408, -0.4594,  ..., -0.2797, -0.5775,  0.4467],
          [-0.7606,  0.0291,  0.3714,  ...,  0.1820,  0.2484,  0.0438]],

         [[ 0.6914, -0.0371, -0.1583,  ...,  1.3740, -0.3011, -1.0170],
          [ 0.5802,  1.2394,  0.0174,  ...,  1.0337,  0.9344, -0.4415],
          [-0.0654, -0.8653, -1.3688,  ...,  1.7068, -0.4494, -1.5006],
          ...,
          [-1.0161, -0.3761,  0.3455,  ...,  1.0246, -0.6305,  0.2304],
          [ 0.4058, -0.1202, -1.2092,  ..., -0.2333, -0.9386,  0.3568],
          [-0.4939, -0.6671,  0.5599,  ..., -1.1541, -1.3807, -0.8292]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4342,  1.6868,  0.9056,  ...,  0.4484, -0.1167,  1.8640],
          [ 2.0076,  0.8665,  0.4696,  ...,  0.1503,  0.4750, -0.6734],
          [-0.6560,  0.5309,  0.3068,  ..., -0.4400,  0.7936,  0.9612],
          ...,
          [ 0.1537,  0.1716, -1.3787,  ...,  2.0577,  1.4154,  0.5934],
          [ 1.6564, -0.4926,  1.1547,  ...,  0.7528, -1.6182,  0.8561],
          [-0.6039,  0.3972,  1.1748,  ..., -0.0780,  1.2047,  0.8185]],

         [[ 1.0842, -0.0721, -0.7559,  ...,  0.4051,  0.2113, -2.4367],
          [-0.6294, -1.1464, -0.1445,  ..., -0.9589, -0.3498,  0.3409],
          [-0.2568,  0.3355,  1.8334,  ..., -1.2067, -1.3696, -0.9594],
          ...,
          [-2.9008,  1.7718, -0.2851,  ...,  1.1855, -0.6664, -0.8713],
          [ 0.3476, -1.1189,  0.8376,  ...,  0.0242,  1.0424,  0.8016],
          [ 1.2631, -0.2764,  0.1867,  ...,  0.9047, -0.6243,  1.8509]]],


        [[[-0.3232,  1.6488,  1.0874,  ..., -2.0659, -0.6377,  0.3588],
          [-0.0295, -0.4022,  1.1495,  ..., -0.0610,  0.1687,  1.1902],
          [-1.1619, -1.1211,  0.0354,  ...,  0.2432,  1.4179,  0.5422],
          ...,
          [ 0.2841,  1.7117, -1.1354,  ...,  0.7482,  1.5730, -0.2226],
          [ 0.6589, -0.2016, -0.5202,  ..., -1.5284, -0.1114, -0.5118],
          [-0.7963,  0.6373, -0.5458,  ..., -0.5502,  2.4197, -0.5011]],

         [[ 0.0139, -0.9011,  0.3093,  ..., -0.1361,  0.8217,  2.1681],
          [-1.0512,  0.1754,  0.0358,  ..., -1.5768,  0.4129,  1.2678],
          [-0.4691,  0.3451, -0.1089,  ...,  0.5504, -0.0044,  1.7612],
          ...,
          [ 0.7171, -2.4044, -1.1503,  ...,  0.2848,  0.6983,  0.3608],
          [-1.8263,  0.7252,  0.8276,  ..., -0.6135, -0.9391, -0.0998],
          [-0.6672, -0.1756,  0.2564,  ...,  0.8105, -0.4475, -0.0117]]],


        [[[ 1.3745,  0.2457,  0.6343,  ..., -1.0154,  2.0293, -0.4772],
          [-1.1345,  1.1043, -0.7384,  ..., -0.3734,  0.3005,  2.9280],
          [-0.5235,  0.2878,  1.1743,  ..., -1.7965, -1.7765,  0.0232],
          ...,
          [ 0.4026, -0.3801, -0.8263,  ..., -0.3937, -0.4241, -0.8474],
          [-1.2217, -0.2754,  0.8189,  ...,  0.1248,  1.1872, -1.3703],
          [ 1.2303, -0.9934,  0.9515,  ...,  0.1402,  0.7256, -0.7130]],

         [[ 1.4282, -0.7880, -0.7802,  ...,  2.1503,  0.9031,  0.6935],
          [-0.9988,  0.3571,  1.5125,  ..., -0.9405, -1.6850, -0.5831],
          [-0.3973, -0.6397, -0.9773,  ..., -0.6619,  0.1610, -0.9152],
          ...,
          [ 0.4617, -0.5875, -0.8818,  ...,  1.2193,  0.4800,  0.4006],
          [-1.6577,  0.0733,  0.1419,  ...,  0.0806,  0.4785, -1.2138],
          [-1.5859, -1.6255,  0.7839,  ..., -1.1861, -0.0443, -0.2864]]],


        [[[-0.9152,  0.4748, -0.2230,  ..., -0.2294,  0.5724, -0.2366],
          [-0.9315,  0.3478,  0.1321,  ..., -0.6263,  0.4741,  1.2187],
          [ 1.8969, -0.3318,  1.9665,  ..., -0.1799, -0.6353, -0.6774],
          ...,
          [ 0.0759, -0.5893, -1.1086,  ...,  0.4342,  0.0625, -0.2999],
          [ 1.0355, -2.0550,  1.3850,  ...,  1.5583,  1.4339, -0.0204],
          [-0.8436, -1.0366, -0.8028,  ..., -0.8180, -0.5513,  1.1444]],

         [[-0.1677, -0.5712,  0.9011,  ...,  0.7004, -0.7616,  0.4072],
          [ 0.0981, -0.1174,  0.9551,  ...,  0.0139,  1.1668, -0.1984],
          [ 0.3993, -0.5528, -2.0770,  ..., -0.0281, -0.6189, -0.5099],
          ...,
          [-0.3046,  0.4672, -0.4096,  ...,  0.1790, -1.8971,  0.6723],
          [ 0.9394, -1.4328, -2.4618,  ..., -2.5000,  0.6804, -0.6840],
          [-0.1822, -0.2082,  0.4853,  ...,  1.0147, -0.5743,  0.4838]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8078, -0.8548,  0.8732,  ...,  1.5916, -0.5740,  0.6745],
          [ 0.5644, -1.1756,  0.9423,  ...,  0.5205,  1.1202,  1.5000],
          [-0.9546,  1.4412,  0.7498,  ...,  0.1334,  0.5483, -0.1286],
          ...,
          [ 0.1705,  1.8041, -0.6459,  ...,  0.2621,  0.7479,  0.3948],
          [-0.0966, -1.8351,  0.5561,  ...,  0.5450, -0.1126, -1.3007],
          [ 1.3561, -0.6842,  0.1307,  ...,  0.2660,  1.2634, -0.8465]],

         [[ 1.6327,  0.4788, -0.0737,  ...,  0.3653,  0.6778, -0.3696],
          [ 2.2575, -0.7920, -0.4507,  ..., -0.0951,  0.0771,  0.7110],
          [ 0.0547, -0.0620,  0.0457,  ...,  0.2622, -1.9499,  0.5509],
          ...,
          [-0.0065,  0.2937, -0.7148,  ...,  0.0746, -1.9554, -0.6746],
          [-0.3788,  3.0501, -0.6322,  ...,  0.2017,  1.5164, -0.5495],
          [-0.5647, -0.0178,  0.5498,  ...,  0.6069, -1.0272,  0.6013]]],


        [[[ 0.1125,  1.3194,  0.3822,  ..., -2.0219,  0.3324, -0.4061],
          [ 1.9988, -1.7397, -1.2081,  ..., -0.5916,  1.1820, -0.0809],
          [ 1.3770,  1.9540, -0.4692,  ..., -1.1074,  1.4000,  1.1553],
          ...,
          [-0.5962, -0.7721,  1.1652,  ..., -0.3230,  0.9505, -0.9120],
          [-1.3283, -0.2389, -2.6295,  ..., -1.4298, -0.1768, -0.1791],
          [ 0.2437, -0.0412, -1.0548,  ...,  0.4446,  1.2473,  0.6195]],

         [[ 0.6524, -0.5073,  0.0961,  ...,  1.7059, -0.3875,  0.3766],
          [-0.6442, -0.9838,  0.5080,  ...,  1.9639, -2.3926,  1.0972],
          [-2.3555, -0.3869, -1.1248,  ..., -1.4959, -1.0752, -1.9410],
          ...,
          [-1.1132, -0.1846,  0.4917,  ..., -0.8205,  2.2663,  0.1058],
          [-1.2740,  0.4822, -0.3969,  ..., -1.2367,  1.8394, -0.6820],
          [-0.2731, -0.9326,  0.6303,  ...,  1.2414,  0.0650, -0.5581]]],


        [[[ 2.0569,  1.1126,  0.3574,  ..., -1.6530,  0.4017,  0.0369],
          [-2.4294, -0.8031, -0.1753,  ..., -0.0319,  0.8559, -0.0446],
          [-0.9624, -1.0735, -1.3362,  ...,  1.2961, -1.0377,  0.6364],
          ...,
          [ 1.5824, -0.0710,  1.7252,  ..., -0.2696,  0.5370, -0.2915],
          [-0.0383,  0.7880, -1.0411,  ...,  1.9930, -0.7181, -0.1628],
          [ 0.2344, -0.0707, -0.3218,  ...,  0.9503,  0.7831, -2.5997]],

         [[-0.2708,  0.0146,  0.5968,  ..., -1.4416,  1.2914,  1.1449],
          [ 1.0115, -0.8337, -0.9529,  ...,  1.1408,  0.0271,  0.4350],
          [-0.3677,  0.7021,  1.2033,  ...,  1.5388,  0.8585,  0.0211],
          ...,
          [ 0.6320, -0.1512, -2.5916,  ...,  1.2106, -0.6753, -0.3134],
          [-0.3636,  0.0267, -0.4174,  ...,  0.3285,  0.8795, -1.4630],
          [ 0.0589,  0.1311,  1.6621,  ...,  0.3256,  0.7139,  1.4693]]],


        [[[ 1.1461,  0.7065, -0.2052,  ...,  1.5022, -1.2539,  1.2707],
          [ 2.4256,  1.0058,  0.7285,  ...,  1.4187,  1.3407, -1.0083],
          [-0.8476, -0.4943, -0.5081,  ..., -0.5329, -0.4067,  1.2251],
          ...,
          [ 0.4960,  1.0726, -0.5242,  ...,  1.0957,  0.4974, -0.5748],
          [-1.1813,  0.5387, -0.4646,  ..., -0.2740, -0.5727,  0.4430],
          [-0.7577,  0.0275,  0.3666,  ...,  0.1862,  0.2505,  0.0411]],

         [[ 0.6854, -0.0336, -0.1579,  ...,  1.3697, -0.3037, -1.0157],
          [ 0.5762,  1.2401,  0.0178,  ...,  1.0309,  0.9311, -0.4410],
          [-0.0704, -0.8619, -1.3686,  ...,  1.7027, -0.4529, -1.5001],
          ...,
          [-1.0186, -0.3752,  0.3456,  ...,  1.0221, -0.6312,  0.2307],
          [ 0.4015, -0.1175, -1.2075,  ..., -0.2391, -0.9416,  0.3595],
          [-0.4973, -0.6644,  0.5601,  ..., -1.1570, -1.3827, -0.8291]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-7.6926e-01, -3.6861e-01, -2.4650e-02,  ..., -6.2495e-01,
          -2.5889e-01, -5.2801e-01],
         [ 8.9857e-01, -5.1607e-05,  1.1717e+00,  ...,  5.6609e-01,
          -8.3687e-01, -1.0079e+00],
         [ 8.3957e-01,  3.1393e-01,  3.5120e-01,  ...,  1.3727e+00,
          -5.1241e-02, -5.5811e-01],
         ...,
         [-1.3199e+00,  2.0095e+00,  1.0918e-01,  ...,  9.8097e-02,
          -3.6571e-01,  2.8085e-01],
         [-5.7817e-01,  7.5449e-01, -2.9049e-01,  ..., -1.5146e+00,
          -6.5795e-01,  1.3694e+00],
         [-4.7492e-02,  6.1803e-01,  2.1506e+00,  ...,  6.3481e-01,
           2.3874e-01, -4.2052e-01]],

        [[-1.0743e+00,  1.2586e+00, -3.7536e-01,  ...,  5.4679e-01,
          -3.0804e-01,  7.2343e-01],
         [ 4.7161e-01,  1.5376e+00, -1.0132e+00,  ...,  9.3459e-02,
          -1.0287e+00, -1.0015e+00],
         [ 1.7298e-01,  5.5854e-01, -2.7201e-01,  ...,  9.3474e-01,
           1.2460e+00,  9.2435e-01],
         ...,
         [ 3.0244e-01, -8.5908e-01, -1.2808e-01,  ...,  2.8260e-01,
          -4.0415e-02,  5.3994e-01],
         [ 3.6941e-01, -6.8913e-01, -4.2033e-01,  ...,  1.4610e-02,
          -4.7836e-02, -1.9487e-01],
         [ 8.8377e-02,  9.9127e-01,  3.9071e-01,  ...,  7.1551e-01,
           1.5348e+00, -1.5470e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.4342,  1.6868,  0.9056,  ...,  0.4484, -0.1167,  1.8640],
         [ 2.0076,  0.8665,  0.4696,  ...,  0.1503,  0.4750, -0.6734],
         [-0.6560,  0.5309,  0.3068,  ..., -0.4400,  0.7936,  0.9612],
         ...,
         [ 0.1537,  0.1716, -1.3787,  ...,  2.0577,  1.4154,  0.5934],
         [ 1.6564, -0.4926,  1.1547,  ...,  0.7528, -1.6182,  0.8561],
         [-0.6039,  0.3972,  1.1748,  ..., -0.0780,  1.2047,  0.8185]],

        [[ 1.0842, -0.0721, -0.7559,  ...,  0.4051,  0.2113, -2.4367],
         [-0.6294, -1.1464, -0.1445,  ..., -0.9589, -0.3498,  0.3409],
         [-0.2568,  0.3355,  1.8334,  ..., -1.2067, -1.3696, -0.9594],
         ...,
         [-2.9008,  1.7718, -0.2851,  ...,  1.1855, -0.6664, -0.8713],
         [ 0.3476, -1.1189,  0.8376,  ...,  0.0242,  1.0424,  0.8016],
         [ 1.2631, -0.2764,  0.1867,  ...,  0.9047, -0.6243,  1.8509]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 208.096, Val Loss : 320.767
======> Trajectory Loss : 66.860, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.412, BelowGroundPenalize Loss : 0.000
===> [Minibatch 5/129].........tensor([[[-7.6926e-01, -3.6861e-01, -2.4650e-02,  ..., -6.2495e-01,
          -2.5889e-01, -5.2801e-01],
         [ 8.9857e-01, -5.1607e-05,  1.1717e+00,  ...,  5.6609e-01,
          -8.3687e-01, -1.0079e+00],
         [ 8.3957e-01,  3.1393e-01,  3.5120e-01,  ...,  1.3727e+00,
          -5.1241e-02, -5.5811e-01],
         ...,
         [-1.3199e+00,  2.0095e+00,  1.0918e-01,  ...,  9.8097e-02,
          -3.6571e-01,  2.8085e-01],
         [-5.7817e-01,  7.5449e-01, -2.9049e-01,  ..., -1.5146e+00,
          -6.5795e-01,  1.3694e+00],
         [-4.7492e-02,  6.1803e-01,  2.1506e+00,  ...,  6.3481e-01,
           2.3874e-01, -4.2052e-01]],

        [[-1.0743e+00,  1.2586e+00, -3.7536e-01,  ...,  5.4679e-01,
          -3.0804e-01,  7.2343e-01],
         [ 4.7161e-01,  1.5376e+00, -1.0132e+00,  ...,  9.3459e-02,
          -1.0287e+00, -1.0015e+00],
         [ 1.7298e-01,  5.5854e-01, -2.7201e-01,  ...,  9.3474e-01,
           1.2460e+00,  9.2435e-01],
         ...,
         [ 3.0244e-01, -8.5908e-01, -1.2808e-01,  ...,  2.8260e-01,
          -4.0415e-02,  5.3994e-01],
         [ 3.6941e-01, -6.8913e-01, -4.2033e-01,  ...,  1.4610e-02,
          -4.7836e-02, -1.9487e-01],
         [ 8.8377e-02,  9.9127e-01,  3.9071e-01,  ...,  7.1551e-01,
           1.5348e+00, -1.5470e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.4342,  1.6868,  0.9056,  ...,  0.4484, -0.1167,  1.8640],
         [ 2.0076,  0.8665,  0.4696,  ...,  0.1503,  0.4750, -0.6734],
         [-0.6560,  0.5309,  0.3068,  ..., -0.4400,  0.7936,  0.9612],
         ...,
         [ 0.1537,  0.1716, -1.3787,  ...,  2.0577,  1.4154,  0.5934],
         [ 1.6564, -0.4926,  1.1547,  ...,  0.7528, -1.6182,  0.8561],
         [-0.6039,  0.3972,  1.1748,  ..., -0.0780,  1.2047,  0.8185]],

        [[ 1.0842, -0.0721, -0.7559,  ...,  0.4051,  0.2113, -2.4367],
         [-0.6294, -1.1464, -0.1445,  ..., -0.9589, -0.3498,  0.3409],
         [-0.2568,  0.3355,  1.8334,  ..., -1.2067, -1.3696, -0.9594],
         ...,
         [-2.9008,  1.7718, -0.2851,  ...,  1.1855, -0.6664, -0.8713],
         [ 0.3476, -1.1189,  0.8376,  ...,  0.0242,  1.0424,  0.8016],
         [ 1.2631, -0.2764,  0.1867,  ...,  0.9047, -0.6243,  1.8509]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4342,  1.6868,  0.9056,  ...,  0.4484, -0.1167,  1.8640],
          [ 2.0076,  0.8665,  0.4696,  ...,  0.1503,  0.4750, -0.6734],
          [-0.6560,  0.5309,  0.3068,  ..., -0.4400,  0.7936,  0.9612],
          ...,
          [ 0.1537,  0.1716, -1.3787,  ...,  2.0577,  1.4154,  0.5934],
          [ 1.6564, -0.4926,  1.1547,  ...,  0.7528, -1.6182,  0.8561],
          [-0.6039,  0.3972,  1.1748,  ..., -0.0780,  1.2047,  0.8185]],

         [[ 1.0842, -0.0721, -0.7559,  ...,  0.4051,  0.2113, -2.4367],
          [-0.6294, -1.1464, -0.1445,  ..., -0.9589, -0.3498,  0.3409],
          [-0.2568,  0.3355,  1.8334,  ..., -1.2067, -1.3696, -0.9594],
          ...,
          [-2.9008,  1.7718, -0.2851,  ...,  1.1855, -0.6664, -0.8713],
          [ 0.3476, -1.1189,  0.8376,  ...,  0.0242,  1.0424,  0.8016],
          [ 1.2631, -0.2764,  0.1867,  ...,  0.9047, -0.6243,  1.8509]]],


        [[[-0.3232,  1.6488,  1.0874,  ..., -2.0659, -0.6377,  0.3588],
          [-0.0295, -0.4022,  1.1495,  ..., -0.0610,  0.1687,  1.1902],
          [-1.1619, -1.1211,  0.0354,  ...,  0.2432,  1.4179,  0.5422],
          ...,
          [ 0.2841,  1.7117, -1.1354,  ...,  0.7482,  1.5730, -0.2226],
          [ 0.6589, -0.2016, -0.5202,  ..., -1.5284, -0.1114, -0.5118],
          [-0.7963,  0.6373, -0.5458,  ..., -0.5502,  2.4197, -0.5011]],

         [[ 0.0139, -0.9011,  0.3093,  ..., -0.1361,  0.8217,  2.1681],
          [-1.0512,  0.1754,  0.0358,  ..., -1.5768,  0.4129,  1.2678],
          [-0.4691,  0.3451, -0.1089,  ...,  0.5504, -0.0044,  1.7612],
          ...,
          [ 0.7171, -2.4044, -1.1503,  ...,  0.2848,  0.6983,  0.3608],
          [-1.8263,  0.7252,  0.8276,  ..., -0.6135, -0.9391, -0.0998],
          [-0.6672, -0.1756,  0.2564,  ...,  0.8105, -0.4475, -0.0117]]],


        [[[ 1.3745,  0.2457,  0.6343,  ..., -1.0154,  2.0293, -0.4772],
          [-1.1345,  1.1043, -0.7384,  ..., -0.3734,  0.3005,  2.9280],
          [-0.5235,  0.2878,  1.1743,  ..., -1.7965, -1.7765,  0.0232],
          ...,
          [ 0.4026, -0.3801, -0.8263,  ..., -0.3937, -0.4241, -0.8474],
          [-1.2217, -0.2754,  0.8189,  ...,  0.1248,  1.1872, -1.3703],
          [ 1.2303, -0.9934,  0.9515,  ...,  0.1402,  0.7256, -0.7130]],

         [[ 1.4282, -0.7880, -0.7802,  ...,  2.1503,  0.9031,  0.6935],
          [-0.9988,  0.3571,  1.5125,  ..., -0.9405, -1.6850, -0.5831],
          [-0.3973, -0.6397, -0.9773,  ..., -0.6619,  0.1610, -0.9152],
          ...,
          [ 0.4617, -0.5875, -0.8818,  ...,  1.2193,  0.4800,  0.4006],
          [-1.6577,  0.0733,  0.1419,  ...,  0.0806,  0.4785, -1.2138],
          [-1.5859, -1.6255,  0.7839,  ..., -1.1861, -0.0443, -0.2864]]],


        [[[-0.9152,  0.4748, -0.2230,  ..., -0.2294,  0.5724, -0.2366],
          [-0.9315,  0.3478,  0.1321,  ..., -0.6263,  0.4741,  1.2187],
          [ 1.8969, -0.3318,  1.9665,  ..., -0.1799, -0.6353, -0.6774],
          ...,
          [ 0.0759, -0.5893, -1.1086,  ...,  0.4342,  0.0625, -0.2999],
          [ 1.0355, -2.0550,  1.3850,  ...,  1.5583,  1.4339, -0.0204],
          [-0.8436, -1.0366, -0.8028,  ..., -0.8180, -0.5513,  1.1444]],

         [[-0.1677, -0.5712,  0.9011,  ...,  0.7004, -0.7616,  0.4072],
          [ 0.0981, -0.1174,  0.9551,  ...,  0.0139,  1.1668, -0.1984],
          [ 0.3993, -0.5528, -2.0770,  ..., -0.0281, -0.6189, -0.5099],
          ...,
          [-0.3046,  0.4672, -0.4096,  ...,  0.1790, -1.8971,  0.6723],
          [ 0.9394, -1.4328, -2.4618,  ..., -2.5000,  0.6804, -0.6840],
          [-0.1822, -0.2082,  0.4853,  ...,  1.0147, -0.5743,  0.4838]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8078, -0.8548,  0.8732,  ...,  1.5916, -0.5740,  0.6745],
          [ 0.5644, -1.1756,  0.9423,  ...,  0.5205,  1.1202,  1.5000],
          [-0.9546,  1.4412,  0.7498,  ...,  0.1334,  0.5483, -0.1286],
          ...,
          [ 0.1705,  1.8041, -0.6459,  ...,  0.2621,  0.7479,  0.3948],
          [-0.0966, -1.8351,  0.5561,  ...,  0.5450, -0.1126, -1.3007],
          [ 1.3561, -0.6842,  0.1307,  ...,  0.2660,  1.2634, -0.8465]],

         [[ 1.6327,  0.4788, -0.0737,  ...,  0.3653,  0.6778, -0.3696],
          [ 2.2575, -0.7920, -0.4507,  ..., -0.0951,  0.0771,  0.7110],
          [ 0.0547, -0.0620,  0.0457,  ...,  0.2622, -1.9499,  0.5509],
          ...,
          [-0.0065,  0.2937, -0.7148,  ...,  0.0746, -1.9554, -0.6746],
          [-0.3788,  3.0501, -0.6322,  ...,  0.2017,  1.5164, -0.5495],
          [-0.5647, -0.0178,  0.5498,  ...,  0.6069, -1.0272,  0.6013]]],


        [[[ 0.1125,  1.3194,  0.3822,  ..., -2.0219,  0.3324, -0.4061],
          [ 1.9988, -1.7397, -1.2081,  ..., -0.5916,  1.1820, -0.0809],
          [ 1.3770,  1.9540, -0.4692,  ..., -1.1074,  1.4000,  1.1553],
          ...,
          [-0.5962, -0.7721,  1.1652,  ..., -0.3230,  0.9505, -0.9120],
          [-1.3283, -0.2389, -2.6295,  ..., -1.4298, -0.1768, -0.1791],
          [ 0.2437, -0.0412, -1.0548,  ...,  0.4446,  1.2473,  0.6195]],

         [[ 0.6524, -0.5073,  0.0961,  ...,  1.7059, -0.3875,  0.3766],
          [-0.6442, -0.9838,  0.5080,  ...,  1.9639, -2.3926,  1.0972],
          [-2.3555, -0.3869, -1.1248,  ..., -1.4959, -1.0752, -1.9410],
          ...,
          [-1.1132, -0.1846,  0.4917,  ..., -0.8205,  2.2663,  0.1058],
          [-1.2740,  0.4822, -0.3969,  ..., -1.2367,  1.8394, -0.6820],
          [-0.2731, -0.9326,  0.6303,  ...,  1.2414,  0.0650, -0.5581]]],


        [[[ 2.0569,  1.1126,  0.3574,  ..., -1.6530,  0.4017,  0.0369],
          [-2.4294, -0.8031, -0.1753,  ..., -0.0319,  0.8559, -0.0446],
          [-0.9624, -1.0735, -1.3362,  ...,  1.2961, -1.0377,  0.6364],
          ...,
          [ 1.5824, -0.0710,  1.7252,  ..., -0.2696,  0.5370, -0.2915],
          [-0.0383,  0.7880, -1.0411,  ...,  1.9930, -0.7181, -0.1628],
          [ 0.2344, -0.0707, -0.3218,  ...,  0.9503,  0.7831, -2.5997]],

         [[-0.2708,  0.0146,  0.5968,  ..., -1.4416,  1.2914,  1.1449],
          [ 1.0115, -0.8337, -0.9529,  ...,  1.1408,  0.0271,  0.4350],
          [-0.3677,  0.7021,  1.2033,  ...,  1.5388,  0.8585,  0.0211],
          ...,
          [ 0.6320, -0.1512, -2.5916,  ...,  1.2106, -0.6753, -0.3134],
          [-0.3636,  0.0267, -0.4174,  ...,  0.3285,  0.8795, -1.4630],
          [ 0.0589,  0.1311,  1.6621,  ...,  0.3256,  0.7139,  1.4693]]],


        [[[ 1.1461,  0.7065, -0.2052,  ...,  1.5022, -1.2539,  1.2707],
          [ 2.4256,  1.0058,  0.7285,  ...,  1.4187,  1.3407, -1.0083],
          [-0.8476, -0.4943, -0.5081,  ..., -0.5329, -0.4067,  1.2251],
          ...,
          [ 0.4960,  1.0726, -0.5242,  ...,  1.0957,  0.4974, -0.5748],
          [-1.1813,  0.5387, -0.4646,  ..., -0.2740, -0.5727,  0.4430],
          [-0.7577,  0.0275,  0.3666,  ...,  0.1862,  0.2505,  0.0411]],

         [[ 0.6854, -0.0336, -0.1579,  ...,  1.3697, -0.3037, -1.0157],
          [ 0.5762,  1.2401,  0.0178,  ...,  1.0309,  0.9311, -0.4410],
          [-0.0704, -0.8619, -1.3686,  ...,  1.7027, -0.4529, -1.5001],
          ...,
          [-1.0186, -0.3752,  0.3456,  ...,  1.0221, -0.6312,  0.2307],
          [ 0.4015, -0.1175, -1.2075,  ..., -0.2391, -0.9416,  0.3595],
          [-0.4973, -0.6644,  0.5601,  ..., -1.1570, -1.3827, -0.8291]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4350,  1.6862,  0.9082,  ...,  0.4434, -0.1125,  1.8646],
          [ 2.0071,  0.8636,  0.4689,  ...,  0.1459,  0.4719, -0.6711],
          [-0.6580,  0.5303,  0.3081,  ..., -0.4450,  0.7939,  0.9653],
          ...,
          [ 0.1506,  0.1695, -1.3747,  ...,  2.0534,  1.4163,  0.5933],
          [ 1.6506, -0.4903,  1.1576,  ...,  0.7461, -1.6250,  0.8558],
          [-0.6085,  0.3931,  1.1787,  ..., -0.0832,  1.2041,  0.8219]],

         [[ 1.0879, -0.0757, -0.7603,  ...,  0.4023,  0.2156, -2.4315],
          [-0.6267, -1.1510, -0.1429,  ..., -0.9619, -0.3469,  0.3439],
          [-0.2521,  0.3312,  1.8294,  ..., -1.2107, -1.3656, -0.9544],
          ...,
          [-2.9003,  1.7672, -0.2888,  ...,  1.1819, -0.6616, -0.8674],
          [ 0.3529, -1.1248,  0.8409,  ...,  0.0231,  1.0487,  0.8078],
          [ 1.2666, -0.2826,  0.1923,  ...,  0.8994, -0.6230,  1.8470]]],


        [[[-0.3181,  1.6506,  1.0838,  ..., -2.0695, -0.6361,  0.3555],
          [-0.0256, -0.4052,  1.1462,  ..., -0.0597,  0.1716,  1.1871],
          [-1.1576, -1.1238,  0.0311,  ...,  0.2418,  1.4196,  0.5380],
          ...,
          [ 0.2890,  1.7075, -1.1398,  ...,  0.7518,  1.5776, -0.2255],
          [ 0.6654, -0.2068, -0.5250,  ..., -1.5273, -0.1079, -0.5165],
          [-0.7911,  0.6317, -0.5515,  ..., -0.5478,  2.4243, -0.5068]],

         [[ 0.0108, -0.9041,  0.3051,  ..., -0.1319,  0.8180,  2.1657],
          [-1.0559,  0.1735,  0.0384,  ..., -1.5725,  0.4107,  1.2697],
          [-0.4729,  0.3412, -0.1071,  ...,  0.5539, -0.0088,  1.7584],
          ...,
          [ 0.7138, -2.4084, -1.1531,  ...,  0.2897,  0.6999,  0.3619],
          [-1.8294,  0.7195,  0.8230,  ..., -0.6077, -0.9454, -0.1014],
          [-0.6726, -0.1807,  0.2536,  ...,  0.8160, -0.4506, -0.0074]]],


        [[[ 1.3736,  0.2420,  0.6332,  ..., -1.0172,  2.0248, -0.4810],
          [-1.1330,  1.1022, -0.7377,  ..., -0.3720,  0.2993,  2.9246],
          [-0.5233,  0.2841,  1.1733,  ..., -1.7980, -1.7795,  0.0199],
          ...,
          [ 0.4011, -0.3827, -0.8274,  ..., -0.3931, -0.4239, -0.8515],
          [-1.2190, -0.2795,  0.8177,  ...,  0.1215,  1.1829, -1.3750],
          [ 1.2265, -0.9979,  0.9511,  ...,  0.1396,  0.7228, -0.7174]],

         [[ 1.4281, -0.7894, -0.7771,  ...,  2.1476,  0.8979,  0.6977],
          [-1.0027,  0.3542,  1.5139,  ..., -0.9432, -1.6891, -0.5799],
          [-0.3982, -0.6428, -0.9734,  ..., -0.6665,  0.1570, -0.9109],
          ...,
          [ 0.4600, -0.5862, -0.8788,  ...,  1.2153,  0.4760,  0.4028],
          [-1.6619,  0.0679,  0.1456,  ...,  0.0759,  0.4720, -1.2078],
          [-1.5845, -1.6227,  0.7879,  ..., -1.1910, -0.0490, -0.2815]]],


        [[[-0.9172,  0.4717, -0.2257,  ..., -0.2279,  0.5766, -0.2363],
          [-0.9323,  0.3464,  0.1328,  ..., -0.6241,  0.4766,  1.2200],
          [ 1.8990, -0.3343,  1.9637,  ..., -0.1779, -0.6316, -0.6797],
          ...,
          [ 0.0772, -0.5917, -1.1111,  ...,  0.4353,  0.0666, -0.3015],
          [ 1.0391, -2.0557,  1.3809,  ...,  1.5623,  1.4379, -0.0171],
          [-0.8420, -1.0395, -0.8050,  ..., -0.8135, -0.5477,  1.1435]],

         [[-0.1709, -0.5679,  0.9002,  ...,  0.6972, -0.7579,  0.4086],
          [ 0.0978, -0.1174,  0.9560,  ...,  0.0108,  1.1654, -0.1987],
          [ 0.3961, -0.5517, -2.0798,  ..., -0.0307, -0.6157, -0.5104],
          ...,
          [-0.3079,  0.4704, -0.4102,  ...,  0.1761, -1.8940,  0.6752],
          [ 0.9373, -1.4297, -2.4621,  ..., -2.5020,  0.6785, -0.6799],
          [-0.1862, -0.2054,  0.4825,  ...,  1.0105, -0.5719,  0.4854]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8069, -0.8592,  0.8726,  ...,  1.5870, -0.5733,  0.6717],
          [ 0.5657, -1.1795,  0.9409,  ...,  0.5174,  1.1184,  1.4979],
          [-0.9526,  1.4354,  0.7466,  ...,  0.1281,  0.5466, -0.1313],
          ...,
          [ 0.1722,  1.7999, -0.6429,  ...,  0.2571,  0.7461,  0.3899],
          [-0.0963, -1.8399,  0.5529,  ...,  0.5402, -0.1145, -1.3046],
          [ 1.3575, -0.6889,  0.1325,  ...,  0.2608,  1.2627, -0.8492]],

         [[ 1.6320,  0.4753, -0.0728,  ...,  0.3590,  0.6831, -0.3641],
          [ 2.2587, -0.7968, -0.4534,  ..., -0.1005,  0.0813,  0.7149],
          [ 0.0563, -0.0658,  0.0423,  ...,  0.2570, -1.9457,  0.5555],
          ...,
          [-0.0044,  0.2907, -0.7173,  ...,  0.0694, -1.9510, -0.6693],
          [-0.3773,  3.0475, -0.6321,  ...,  0.1947,  1.5220, -0.5434],
          [-0.5613, -0.0229,  0.5467,  ...,  0.6003, -1.0216,  0.6062]]],


        [[[ 0.1187,  1.3161,  0.3774,  ..., -2.0166,  0.3386, -0.4124],
          [ 2.0018, -1.7425, -1.2121,  ..., -0.5870,  1.1856, -0.0858],
          [ 1.3813,  1.9502, -0.4742,  ..., -1.1023,  1.4053,  1.1499],
          ...,
          [-0.5913, -0.7758,  1.1598,  ..., -0.3184,  0.9559, -0.9171],
          [-1.3215, -0.2436, -2.6358,  ..., -1.4235, -0.1702, -0.1869],
          [ 0.2496, -0.0459, -1.0601,  ...,  0.4501,  1.2536,  0.6133]],

         [[ 0.6468, -0.5078,  0.1004,  ...,  1.7060, -0.3878,  0.3804],
          [-0.6484, -0.9850,  0.5108,  ...,  1.9641, -2.3928,  1.1003],
          [-2.3597, -0.3876, -1.1231,  ..., -1.4948, -1.0767, -1.9378],
          ...,
          [-1.1178, -0.1844,  0.4942,  ..., -0.8202,  2.2663,  0.1090],
          [-1.2791,  0.4814, -0.3931,  ..., -1.2359,  1.8372, -0.6781],
          [-0.2795, -0.9348,  0.6341,  ...,  1.2408,  0.0649, -0.5533]]],


        [[[ 2.0593,  1.1076,  0.3529,  ..., -1.6486,  0.4018,  0.0309],
          [-2.4268, -0.8062, -0.1768,  ..., -0.0280,  0.8561, -0.0489],
          [-0.9581, -1.0783, -1.3389,  ...,  1.3001, -1.0372,  0.6330],
          ...,
          [ 1.5851, -0.0740,  1.7228,  ..., -0.2651,  0.5379, -0.2950],
          [-0.0334,  0.7821, -1.0447,  ...,  1.9970, -0.7180, -0.1704],
          [ 0.2396, -0.0763, -0.3272,  ...,  0.9544,  0.7840, -2.6040]],

         [[-0.2772,  0.0156,  0.6004,  ..., -1.4451,  1.2868,  1.1491],
          [ 1.0059, -0.8332, -0.9497,  ...,  1.1379,  0.0221,  0.4394],
          [-0.3723,  0.7039,  1.2064,  ...,  1.5343,  0.8535,  0.0252],
          ...,
          [ 0.6268, -0.1503, -2.5884,  ...,  1.2065, -0.6794, -0.3098],
          [-0.3705,  0.0269, -0.4114,  ...,  0.3219,  0.8727, -1.4581],
          [ 0.0533,  0.1328,  1.6650,  ...,  0.3205,  0.7081,  1.4733]]],


        [[[ 1.1489,  0.7049, -0.2098,  ...,  1.5042, -1.2498,  1.2653],
          [ 2.4267,  1.0049,  0.7242,  ...,  1.4208,  1.3419, -1.0104],
          [-0.8437, -0.4963, -0.5115,  ..., -0.5300, -0.4032,  1.2209],
          ...,
          [ 0.4994,  1.0710, -0.5277,  ...,  1.0975,  0.4997, -0.5787],
          [-1.1765,  0.5360, -0.4699,  ..., -0.2678, -0.5670,  0.4387],
          [-0.7533,  0.0250,  0.3607,  ...,  0.1913,  0.2540,  0.0373]],

         [[ 0.6791, -0.0299, -0.1576,  ...,  1.3648, -0.3069, -1.0142],
          [ 0.5716,  1.2409,  0.0183,  ...,  1.0272,  0.9269, -0.4405],
          [-0.0747, -0.8588, -1.3683,  ...,  1.6986, -0.4560, -1.4997],
          ...,
          [-1.0220, -0.3721,  0.3462,  ...,  1.0176, -0.6339,  0.2317],
          [ 0.3967, -0.1141, -1.2057,  ..., -0.2452, -0.9450,  0.3624],
          [-0.5012, -0.6603,  0.5606,  ..., -1.1600, -1.3856, -0.8289]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7731, -0.3619, -0.0302,  ..., -0.6173, -0.2659, -0.5347],
         [ 0.8918,  0.0066,  1.1651,  ...,  0.5709, -0.8448, -1.0151],
         [ 0.8441,  0.3177,  0.3569,  ...,  1.3748, -0.0461, -0.5642],
         ...,
         [-1.3128,  2.0168,  0.1151,  ...,  0.1055, -0.3613,  0.2764],
         [-0.5727,  0.7604, -0.2878,  ..., -1.5087, -0.6616,  1.3628],
         [-0.0415,  0.6234,  2.1560,  ...,  0.6411,  0.2421, -0.4244]],

        [[-1.0802,  1.2620, -0.3705,  ...,  0.5491, -0.3136,  0.7250],
         [ 0.4769,  1.5317, -1.0188,  ...,  0.0880, -1.0260, -1.0058],
         [ 0.1665,  0.5637, -0.2791,  ...,  0.9373,  1.2521,  0.9301],
         ...,
         [ 0.3063, -0.8607, -0.1320,  ...,  0.2840, -0.0401,  0.5345],
         [ 0.3637, -0.6831, -0.4271,  ...,  0.0153, -0.0385, -0.1913],
         [ 0.0914,  0.9861,  0.3909,  ...,  0.7169,  1.5412, -1.5466]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4350,  1.6862,  0.9082,  ...,  0.4434, -0.1125,  1.8646],
         [ 2.0071,  0.8636,  0.4689,  ...,  0.1459,  0.4719, -0.6711],
         [-0.6580,  0.5303,  0.3081,  ..., -0.4450,  0.7939,  0.9653],
         ...,
         [ 0.1506,  0.1695, -1.3747,  ...,  2.0534,  1.4163,  0.5933],
         [ 1.6506, -0.4903,  1.1576,  ...,  0.7461, -1.6250,  0.8558],
         [-0.6085,  0.3931,  1.1787,  ..., -0.0832,  1.2041,  0.8219]],

        [[ 1.0879, -0.0757, -0.7603,  ...,  0.4023,  0.2156, -2.4315],
         [-0.6267, -1.1510, -0.1429,  ..., -0.9619, -0.3469,  0.3439],
         [-0.2521,  0.3312,  1.8294,  ..., -1.2107, -1.3656, -0.9544],
         ...,
         [-2.9003,  1.7672, -0.2888,  ...,  1.1819, -0.6616, -0.8674],
         [ 0.3529, -1.1248,  0.8409,  ...,  0.0231,  1.0487,  0.8078],
         [ 1.2666, -0.2826,  0.1923,  ...,  0.8994, -0.6230,  1.8470]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 179.151, Val Loss : 179.079
======> Trajectory Loss : 38.131, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.410, BelowGroundPenalize Loss : 0.030
===> [Minibatch 6/129].........tensor([[[-0.7731, -0.3619, -0.0302,  ..., -0.6173, -0.2659, -0.5347],
         [ 0.8918,  0.0066,  1.1651,  ...,  0.5709, -0.8448, -1.0151],
         [ 0.8441,  0.3177,  0.3569,  ...,  1.3748, -0.0461, -0.5642],
         ...,
         [-1.3128,  2.0168,  0.1151,  ...,  0.1055, -0.3613,  0.2764],
         [-0.5727,  0.7604, -0.2878,  ..., -1.5087, -0.6616,  1.3628],
         [-0.0415,  0.6234,  2.1560,  ...,  0.6411,  0.2421, -0.4244]],

        [[-1.0802,  1.2620, -0.3705,  ...,  0.5491, -0.3136,  0.7250],
         [ 0.4769,  1.5317, -1.0188,  ...,  0.0880, -1.0260, -1.0058],
         [ 0.1665,  0.5637, -0.2791,  ...,  0.9373,  1.2521,  0.9301],
         ...,
         [ 0.3063, -0.8607, -0.1320,  ...,  0.2840, -0.0401,  0.5345],
         [ 0.3637, -0.6831, -0.4271,  ...,  0.0153, -0.0385, -0.1913],
         [ 0.0914,  0.9861,  0.3909,  ...,  0.7169,  1.5412, -1.5466]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4350,  1.6862,  0.9082,  ...,  0.4434, -0.1125,  1.8646],
         [ 2.0071,  0.8636,  0.4689,  ...,  0.1459,  0.4719, -0.6711],
         [-0.6580,  0.5303,  0.3081,  ..., -0.4450,  0.7939,  0.9653],
         ...,
         [ 0.1506,  0.1695, -1.3747,  ...,  2.0534,  1.4163,  0.5933],
         [ 1.6506, -0.4903,  1.1576,  ...,  0.7461, -1.6250,  0.8558],
         [-0.6085,  0.3931,  1.1787,  ..., -0.0832,  1.2041,  0.8219]],

        [[ 1.0879, -0.0757, -0.7603,  ...,  0.4023,  0.2156, -2.4315],
         [-0.6267, -1.1510, -0.1429,  ..., -0.9619, -0.3469,  0.3439],
         [-0.2521,  0.3312,  1.8294,  ..., -1.2107, -1.3656, -0.9544],
         ...,
         [-2.9003,  1.7672, -0.2888,  ...,  1.1819, -0.6616, -0.8674],
         [ 0.3529, -1.1248,  0.8409,  ...,  0.0231,  1.0487,  0.8078],
         [ 1.2666, -0.2826,  0.1923,  ...,  0.8994, -0.6230,  1.8470]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4350,  1.6862,  0.9082,  ...,  0.4434, -0.1125,  1.8646],
          [ 2.0071,  0.8636,  0.4689,  ...,  0.1459,  0.4719, -0.6711],
          [-0.6580,  0.5303,  0.3081,  ..., -0.4450,  0.7939,  0.9653],
          ...,
          [ 0.1506,  0.1695, -1.3747,  ...,  2.0534,  1.4163,  0.5933],
          [ 1.6506, -0.4903,  1.1576,  ...,  0.7461, -1.6250,  0.8558],
          [-0.6085,  0.3931,  1.1787,  ..., -0.0832,  1.2041,  0.8219]],

         [[ 1.0879, -0.0757, -0.7603,  ...,  0.4023,  0.2156, -2.4315],
          [-0.6267, -1.1510, -0.1429,  ..., -0.9619, -0.3469,  0.3439],
          [-0.2521,  0.3312,  1.8294,  ..., -1.2107, -1.3656, -0.9544],
          ...,
          [-2.9003,  1.7672, -0.2888,  ...,  1.1819, -0.6616, -0.8674],
          [ 0.3529, -1.1248,  0.8409,  ...,  0.0231,  1.0487,  0.8078],
          [ 1.2666, -0.2826,  0.1923,  ...,  0.8994, -0.6230,  1.8470]]],


        [[[-0.3181,  1.6506,  1.0838,  ..., -2.0695, -0.6361,  0.3555],
          [-0.0256, -0.4052,  1.1462,  ..., -0.0597,  0.1716,  1.1871],
          [-1.1576, -1.1238,  0.0311,  ...,  0.2418,  1.4196,  0.5380],
          ...,
          [ 0.2890,  1.7075, -1.1398,  ...,  0.7518,  1.5776, -0.2255],
          [ 0.6654, -0.2068, -0.5250,  ..., -1.5273, -0.1079, -0.5165],
          [-0.7911,  0.6317, -0.5515,  ..., -0.5478,  2.4243, -0.5068]],

         [[ 0.0108, -0.9041,  0.3051,  ..., -0.1319,  0.8180,  2.1657],
          [-1.0559,  0.1735,  0.0384,  ..., -1.5725,  0.4107,  1.2697],
          [-0.4729,  0.3412, -0.1071,  ...,  0.5539, -0.0088,  1.7584],
          ...,
          [ 0.7138, -2.4084, -1.1531,  ...,  0.2897,  0.6999,  0.3619],
          [-1.8294,  0.7195,  0.8230,  ..., -0.6077, -0.9454, -0.1014],
          [-0.6726, -0.1807,  0.2536,  ...,  0.8160, -0.4506, -0.0074]]],


        [[[ 1.3736,  0.2420,  0.6332,  ..., -1.0172,  2.0248, -0.4810],
          [-1.1330,  1.1022, -0.7377,  ..., -0.3720,  0.2993,  2.9246],
          [-0.5233,  0.2841,  1.1733,  ..., -1.7980, -1.7795,  0.0199],
          ...,
          [ 0.4011, -0.3827, -0.8274,  ..., -0.3931, -0.4239, -0.8515],
          [-1.2190, -0.2795,  0.8177,  ...,  0.1215,  1.1829, -1.3750],
          [ 1.2265, -0.9979,  0.9511,  ...,  0.1396,  0.7228, -0.7174]],

         [[ 1.4281, -0.7894, -0.7771,  ...,  2.1476,  0.8979,  0.6977],
          [-1.0027,  0.3542,  1.5139,  ..., -0.9432, -1.6891, -0.5799],
          [-0.3982, -0.6428, -0.9734,  ..., -0.6665,  0.1570, -0.9109],
          ...,
          [ 0.4600, -0.5862, -0.8788,  ...,  1.2153,  0.4760,  0.4028],
          [-1.6619,  0.0679,  0.1456,  ...,  0.0759,  0.4720, -1.2078],
          [-1.5845, -1.6227,  0.7879,  ..., -1.1910, -0.0490, -0.2815]]],


        [[[-0.9172,  0.4717, -0.2257,  ..., -0.2279,  0.5766, -0.2363],
          [-0.9323,  0.3464,  0.1328,  ..., -0.6241,  0.4766,  1.2200],
          [ 1.8990, -0.3343,  1.9637,  ..., -0.1779, -0.6316, -0.6797],
          ...,
          [ 0.0772, -0.5917, -1.1111,  ...,  0.4353,  0.0666, -0.3015],
          [ 1.0391, -2.0557,  1.3809,  ...,  1.5623,  1.4379, -0.0171],
          [-0.8420, -1.0395, -0.8050,  ..., -0.8135, -0.5477,  1.1435]],

         [[-0.1709, -0.5679,  0.9002,  ...,  0.6972, -0.7579,  0.4086],
          [ 0.0978, -0.1174,  0.9560,  ...,  0.0108,  1.1654, -0.1987],
          [ 0.3961, -0.5517, -2.0798,  ..., -0.0307, -0.6157, -0.5104],
          ...,
          [-0.3079,  0.4704, -0.4102,  ...,  0.1761, -1.8940,  0.6752],
          [ 0.9373, -1.4297, -2.4621,  ..., -2.5020,  0.6785, -0.6799],
          [-0.1862, -0.2054,  0.4825,  ...,  1.0105, -0.5719,  0.4854]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8069, -0.8592,  0.8726,  ...,  1.5870, -0.5733,  0.6717],
          [ 0.5657, -1.1795,  0.9409,  ...,  0.5174,  1.1184,  1.4979],
          [-0.9526,  1.4354,  0.7466,  ...,  0.1281,  0.5466, -0.1313],
          ...,
          [ 0.1722,  1.7999, -0.6429,  ...,  0.2571,  0.7461,  0.3899],
          [-0.0963, -1.8399,  0.5529,  ...,  0.5402, -0.1145, -1.3046],
          [ 1.3575, -0.6889,  0.1325,  ...,  0.2608,  1.2627, -0.8492]],

         [[ 1.6320,  0.4753, -0.0728,  ...,  0.3590,  0.6831, -0.3641],
          [ 2.2587, -0.7968, -0.4534,  ..., -0.1005,  0.0813,  0.7149],
          [ 0.0563, -0.0658,  0.0423,  ...,  0.2570, -1.9457,  0.5555],
          ...,
          [-0.0044,  0.2907, -0.7173,  ...,  0.0694, -1.9510, -0.6693],
          [-0.3773,  3.0475, -0.6321,  ...,  0.1947,  1.5220, -0.5434],
          [-0.5613, -0.0229,  0.5467,  ...,  0.6003, -1.0216,  0.6062]]],


        [[[ 0.1187,  1.3161,  0.3774,  ..., -2.0166,  0.3386, -0.4124],
          [ 2.0018, -1.7425, -1.2121,  ..., -0.5870,  1.1856, -0.0858],
          [ 1.3813,  1.9502, -0.4742,  ..., -1.1023,  1.4053,  1.1499],
          ...,
          [-0.5913, -0.7758,  1.1598,  ..., -0.3184,  0.9559, -0.9171],
          [-1.3215, -0.2436, -2.6358,  ..., -1.4235, -0.1702, -0.1869],
          [ 0.2496, -0.0459, -1.0601,  ...,  0.4501,  1.2536,  0.6133]],

         [[ 0.6468, -0.5078,  0.1004,  ...,  1.7060, -0.3878,  0.3804],
          [-0.6484, -0.9850,  0.5108,  ...,  1.9641, -2.3928,  1.1003],
          [-2.3597, -0.3876, -1.1231,  ..., -1.4948, -1.0767, -1.9378],
          ...,
          [-1.1178, -0.1844,  0.4942,  ..., -0.8202,  2.2663,  0.1090],
          [-1.2791,  0.4814, -0.3931,  ..., -1.2359,  1.8372, -0.6781],
          [-0.2795, -0.9348,  0.6341,  ...,  1.2408,  0.0649, -0.5533]]],


        [[[ 2.0593,  1.1076,  0.3529,  ..., -1.6486,  0.4018,  0.0309],
          [-2.4268, -0.8062, -0.1768,  ..., -0.0280,  0.8561, -0.0489],
          [-0.9581, -1.0783, -1.3389,  ...,  1.3001, -1.0372,  0.6330],
          ...,
          [ 1.5851, -0.0740,  1.7228,  ..., -0.2651,  0.5379, -0.2950],
          [-0.0334,  0.7821, -1.0447,  ...,  1.9970, -0.7180, -0.1704],
          [ 0.2396, -0.0763, -0.3272,  ...,  0.9544,  0.7840, -2.6040]],

         [[-0.2772,  0.0156,  0.6004,  ..., -1.4451,  1.2868,  1.1491],
          [ 1.0059, -0.8332, -0.9497,  ...,  1.1379,  0.0221,  0.4394],
          [-0.3723,  0.7039,  1.2064,  ...,  1.5343,  0.8535,  0.0252],
          ...,
          [ 0.6268, -0.1503, -2.5884,  ...,  1.2065, -0.6794, -0.3098],
          [-0.3705,  0.0269, -0.4114,  ...,  0.3219,  0.8727, -1.4581],
          [ 0.0533,  0.1328,  1.6650,  ...,  0.3205,  0.7081,  1.4733]]],


        [[[ 1.1489,  0.7049, -0.2098,  ...,  1.5042, -1.2498,  1.2653],
          [ 2.4267,  1.0049,  0.7242,  ...,  1.4208,  1.3419, -1.0104],
          [-0.8437, -0.4963, -0.5115,  ..., -0.5300, -0.4032,  1.2209],
          ...,
          [ 0.4994,  1.0710, -0.5277,  ...,  1.0975,  0.4997, -0.5787],
          [-1.1765,  0.5360, -0.4699,  ..., -0.2678, -0.5670,  0.4387],
          [-0.7533,  0.0250,  0.3607,  ...,  0.1913,  0.2540,  0.0373]],

         [[ 0.6791, -0.0299, -0.1576,  ...,  1.3648, -0.3069, -1.0142],
          [ 0.5716,  1.2409,  0.0183,  ...,  1.0272,  0.9269, -0.4405],
          [-0.0747, -0.8588, -1.3683,  ...,  1.6986, -0.4560, -1.4997],
          ...,
          [-1.0220, -0.3721,  0.3462,  ...,  1.0176, -0.6339,  0.2317],
          [ 0.3967, -0.1141, -1.2057,  ..., -0.2452, -0.9450,  0.3624],
          [-0.5012, -0.6603,  0.5606,  ..., -1.1600, -1.3856, -0.8289]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4362e+00,  1.6829e+00,  9.1246e-01,  ...,  4.3746e-01,
           -1.0851e-01,  1.8646e+00],
          [ 2.0093e+00,  8.5868e-01,  4.7214e-01,  ...,  1.4042e-01,
            4.6687e-01, -6.7153e-01],
          [-6.5853e-01,  5.2772e-01,  3.1165e-01,  ..., -4.5121e-01,
            7.9337e-01,  9.6991e-01],
          ...,
          [ 1.4752e-01,  1.6705e-01, -1.3699e+00,  ...,  2.0486e+00,
            1.4172e+00,  5.9373e-01],
          [ 1.6440e+00, -4.8957e-01,  1.1623e+00,  ...,  7.3955e-01,
           -1.6315e+00,  8.5234e-01],
          [-6.1442e-01,  3.8743e-01,  1.1841e+00,  ..., -8.9352e-02,
            1.2005e+00,  8.2536e-01]],

         [[ 1.0912e+00, -7.8965e-02, -7.6437e-01,  ...,  3.9962e-01,
            2.1957e-01, -2.4268e+00],
          [-6.2208e-01, -1.1567e+00, -1.4364e-01,  ..., -9.6623e-01,
           -3.4230e-01,  3.4829e-01],
          [-2.4598e-01,  3.2541e-01,  1.8238e+00,  ..., -1.2160e+00,
           -1.3600e+00, -9.4814e-01],
          ...,
          [-2.8993e+00,  1.7625e+00, -2.9266e-01,  ...,  1.1781e+00,
           -6.5669e-01, -8.6351e-01],
          [ 3.5856e-01, -1.1308e+00,  8.3858e-01,  ...,  1.8286e-02,
            1.0548e+00,  8.1386e-01],
          [ 1.2720e+00, -2.8908e-01,  1.9883e-01,  ...,  8.9343e-01,
           -6.1856e-01,  1.8417e+00]]],


        [[[-3.1216e-01,  1.6507e+00,  1.0790e+00,  ..., -2.0725e+00,
           -6.3402e-01,  3.5106e-01],
          [-2.0079e-02, -4.0999e-01,  1.1411e+00,  ..., -5.5403e-02,
            1.7635e-01,  1.1821e+00],
          [-1.1522e+00, -1.1278e+00,  2.5664e-02,  ...,  2.4249e-01,
            1.4226e+00,  5.3267e-01],
          ...,
          [ 2.9424e-01,  1.7027e+00, -1.1446e+00,  ...,  7.5575e-01,
            1.5825e+00, -2.2874e-01],
          [ 6.7179e-01, -2.1281e-01, -5.3078e-01,  ..., -1.5226e+00,
           -1.0278e-01, -5.2211e-01],
          [-7.8506e-01,  6.2541e-01, -5.5798e-01,  ..., -5.4293e-01,
            2.4301e+00, -5.1320e-01]],

         [[ 7.9967e-03, -9.0659e-01,  3.0158e-01,  ..., -1.2824e-01,
            8.1470e-01,  2.1636e+00],
          [-1.0617e+00,  1.7314e-01,  4.2570e-02,  ..., -1.5670e+00,
            4.0700e-01,  1.2710e+00],
          [-4.7810e-01,  3.3774e-01, -1.0349e-01,  ...,  5.5887e-01,
           -1.4457e-02,  1.7543e+00],
          ...,
          [ 7.1048e-01, -2.4122e+00, -1.1554e+00,  ...,  2.9435e-01,
            7.0136e-01,  3.6263e-01],
          [-1.8344e+00,  7.1325e-01,  8.1774e-01,  ..., -6.0161e-01,
           -9.5159e-01, -1.0510e-01],
          [-6.7867e-01, -1.8682e-01,  2.5425e-01,  ...,  8.2226e-01,
           -4.5551e-01, -2.1367e-03]]],


        [[[ 1.3714e+00,  2.3755e-01,  6.3069e-01,  ..., -1.0193e+00,
            2.0196e+00, -4.8588e-01],
          [-1.1301e+00,  1.0978e+00, -7.3594e-01,  ..., -3.6838e-01,
            2.9562e-01,  2.9194e+00],
          [-5.2367e-01,  2.7960e-01,  1.1711e+00,  ..., -1.7989e+00,
           -1.7834e+00,  1.5591e-02],
          ...,
          [ 3.9963e-01, -3.8510e-01, -8.2853e-01,  ..., -3.9256e-01,
           -4.2333e-01, -8.5569e-01],
          [-1.2157e+00, -2.8481e-01,  8.1363e-01,  ...,  1.1914e-01,
            1.1773e+00, -1.3807e+00],
          [ 1.2215e+00, -1.0038e+00,  9.4751e-01,  ...,  1.4187e-01,
            7.1822e-01, -7.2301e-01]],

         [[ 1.4279e+00, -7.9043e-01, -7.7437e-01,  ...,  2.1451e+00,
            8.9331e-01,  7.0139e-01],
          [-1.0076e+00,  3.5034e-01,  1.5163e+00,  ..., -9.4710e-01,
           -1.6939e+00, -5.7577e-01],
          [-4.0109e-01, -6.4675e-01, -9.6817e-01,  ..., -6.7208e-01,
            1.5178e-01, -9.0542e-01],
          ...,
          [ 4.5798e-01, -5.8494e-01, -8.7579e-01,  ...,  1.2114e+00,
            4.7208e-01,  4.0503e-01],
          [-1.6673e+00,  6.1702e-02,  1.5048e-01,  ...,  7.0258e-02,
            4.6557e-01, -1.2017e+00],
          [-1.5873e+00, -1.6183e+00,  7.9340e-01,  ..., -1.1970e+00,
           -5.4850e-02, -2.7543e-01]]],


        [[[-9.1841e-01,  4.6961e-01, -2.2921e-01,  ..., -2.2644e-01,
            5.8121e-01, -2.3679e-01],
          [-9.3031e-01,  3.4348e-01,  1.3122e-01,  ..., -6.1996e-01,
            4.8113e-01,  1.2223e+00],
          [ 1.9020e+00, -3.3679e-01,  1.9597e+00,  ..., -1.7500e-01,
           -6.2695e-01, -6.8228e-01],
          ...,
          [ 7.8801e-02, -5.9386e-01, -1.1137e+00,  ...,  4.3642e-01,
            7.0531e-02, -3.0297e-01],
          [ 1.0438e+00, -2.0579e+00,  1.3756e+00,  ...,  1.5673e+00,
            1.4414e+00, -1.3833e-02],
          [-8.3790e-01, -1.0434e+00, -8.0891e-01,  ..., -8.0785e-01,
           -5.4277e-01,  1.1404e+00]],

         [[-1.7366e-01, -5.6500e-01,  8.9953e-01,  ...,  6.9445e-01,
           -7.5480e-01,  4.0981e-01],
          [ 9.5836e-02, -1.1628e-01,  9.5572e-01,  ...,  6.4833e-03,
            1.1633e+00, -1.9930e-01],
          [ 3.9208e-01, -5.5048e-01, -2.0833e+00,  ..., -3.4227e-02,
           -6.1161e-01, -5.0930e-01],
          ...,
          [-3.1106e-01,  4.7348e-01, -4.1050e-01,  ...,  1.7336e-01,
           -1.8912e+00,  6.7813e-01],
          [ 9.3364e-01, -1.4249e+00, -2.4596e+00,  ..., -2.5062e+00,
            6.7797e-01, -6.7461e-01],
          [-1.9155e-01, -2.0122e-01,  4.7751e-01,  ...,  1.0050e+00,
           -5.6851e-01,  4.8671e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.0361e-01, -8.6462e-01,  8.7371e-01,  ...,  1.5814e+00,
           -5.7350e-01,  6.6728e-01],
          [ 5.6977e-01, -1.1848e+00,  9.4186e-01,  ...,  5.1259e-01,
            1.1148e+00,  1.4932e+00],
          [-9.4906e-01,  1.4289e+00,  7.4478e-01,  ...,  1.2195e-01,
            5.4394e-01, -1.3531e-01],
          ...,
          [ 1.7498e-01,  1.7952e+00, -6.3925e-01,  ...,  2.5188e-01,
            7.4411e-01,  3.8461e-01],
          [-9.2743e-02, -1.8457e+00,  5.4997e-01,  ...,  5.3432e-01,
           -1.1786e-01, -1.3099e+00],
          [ 1.3607e+00, -6.9491e-01,  1.3729e-01,  ...,  2.5445e-01,
            1.2593e+00, -8.5432e-01]],

         [[ 1.6316e+00,  4.7235e-01, -7.2265e-02,  ...,  3.5334e-01,
            6.8766e-01, -3.5904e-01],
          [ 2.2615e+00, -8.0264e-01, -4.5751e-01,  ..., -1.0687e-01,
            8.6385e-02,  7.2016e-01],
          [ 6.0255e-02, -7.1147e-02,  3.7657e-02,  ...,  2.5051e-01,
           -1.9404e+00,  5.6153e-01],
          ...,
          [-2.0500e-03,  2.8779e-01, -7.1963e-01,  ...,  6.4197e-02,
           -1.9468e+00, -6.6391e-01],
          [-3.7248e-01,  3.0430e+00, -6.3561e-01,  ...,  1.8847e-01,
            1.5281e+00, -5.3742e-01],
          [-5.5579e-01, -2.9029e-02,  5.4155e-01,  ...,  5.9362e-01,
           -1.0154e+00,  6.1215e-01]]],


        [[[ 1.2573e-01,  1.3117e+00,  3.7182e-01,  ..., -2.0105e+00,
            3.4535e-01, -4.1946e-01],
          [ 2.0063e+00, -1.7471e+00, -1.2174e+00,  ..., -5.8133e-01,
            1.1906e+00, -9.1802e-02],
          [ 1.3865e+00,  1.9454e+00, -4.8000e-01,  ..., -1.0961e+00,
            1.4112e+00,  1.1434e+00],
          ...,
          [-5.8603e-01, -7.7973e-01,  1.1540e+00,  ..., -3.1358e-01,
            9.6136e-01, -9.2233e-01],
          [-1.3150e+00, -2.4927e-01, -2.6427e+00,  ..., -1.4172e+00,
           -1.6370e-01, -1.9410e-01],
          [ 2.5611e-01, -5.1836e-02, -1.0663e+00,  ...,  4.5650e-01,
            1.2607e+00,  6.0686e-01]],

         [[ 6.4200e-01, -5.0809e-01,  1.0407e-01,  ...,  1.7060e+00,
           -3.8807e-01,  3.8356e-01],
          [-6.5358e-01, -9.8505e-01,  5.1507e-01,  ...,  1.9638e+00,
           -2.3943e+00,  1.1038e+00],
          [-2.3647e+00, -3.8744e-01, -1.1197e+00,  ..., -1.4943e+00,
           -1.0801e+00, -1.9343e+00],
          ...,
          [-1.1222e+00, -1.8364e-01,  4.9674e-01,  ..., -8.2004e-01,
            2.2661e+00,  1.1202e-01],
          [-1.2849e+00,  4.8195e-01, -3.8786e-01,  ..., -1.2358e+00,
            1.8327e+00, -6.7331e-01],
          [-2.8630e-01, -9.3508e-01,  6.3943e-01,  ...,  1.2376e+00,
            6.1638e-02, -5.4728e-01]]],


        [[[ 2.0617e+00,  1.1021e+00,  3.4740e-01,  ..., -1.6432e+00,
            4.0232e-01,  2.4368e-02],
          [-2.4221e+00, -8.1042e-01, -1.8011e-01,  ..., -2.2650e-02,
            8.5730e-01, -5.4766e-02],
          [-9.5278e-01, -1.0830e+00, -1.3420e+00,  ...,  1.3044e+00,
           -1.0366e+00,  6.2885e-01],
          ...,
          [ 1.5875e+00, -7.6853e-02,  1.7202e+00,  ..., -2.6056e-01,
            5.3893e-01, -2.9851e-01],
          [-2.7664e-02,  7.7583e-01, -1.0496e+00,  ...,  2.0015e+00,
           -7.1705e-01, -1.7762e-01],
          [ 2.4574e-01, -8.2866e-02, -3.3339e-01,  ...,  9.5984e-01,
            7.8605e-01, -2.6096e+00]],

         [[-2.8283e-01,  1.6427e-02,  6.0352e-01,  ..., -1.4480e+00,
            1.2828e+00,  1.1527e+00],
          [ 9.9939e-01, -8.3234e-01, -9.4544e-01,  ...,  1.1338e+00,
            1.6167e-02,  4.4475e-01],
          [-3.7770e-01,  7.0588e-01,  1.2102e+00,  ...,  1.5286e+00,
            8.4723e-01,  3.0331e-02],
          ...,
          [ 6.2183e-01, -1.4934e-01, -2.5852e+00,  ...,  1.2024e+00,
           -6.8324e-01, -3.0639e-01],
          [-3.7759e-01,  2.8191e-02, -4.0532e-01,  ...,  3.1535e-01,
            8.6629e-01, -1.4524e+00],
          [ 4.6947e-02,  1.3527e-01,  1.6693e+00,  ...,  3.1443e-01,
            7.0162e-01,  1.4786e+00]]],


        [[[ 1.1517e+00,  7.0296e-01, -2.1471e-01,  ...,  1.5060e+00,
           -1.2447e+00,  1.2592e+00],
          [ 2.4278e+00,  1.0029e+00,  7.1836e-01,  ...,  1.4229e+00,
            1.3438e+00, -1.0132e+00],
          [-8.3874e-01, -4.9863e-01, -5.1570e-01,  ..., -5.2607e-01,
           -3.9887e-01,  1.2161e+00],
          ...,
          [ 5.0270e-01,  1.0693e+00, -5.3116e-01,  ...,  1.0991e+00,
            5.0206e-01, -5.8236e-01],
          [-1.1710e+00,  5.3175e-01, -4.7600e-01,  ..., -2.6150e-01,
           -5.6086e-01,  4.3344e-01],
          [-7.4764e-01,  2.1137e-02,  3.5387e-01,  ...,  1.9748e-01,
            2.5902e-01,  3.2162e-02]],

         [[ 6.7353e-01, -2.6712e-02, -1.5729e-01,  ...,  1.3605e+00,
           -3.0966e-01, -1.0130e+00],
          [ 5.6609e-01,  1.2422e+00,  1.8937e-02,  ...,  1.0223e+00,
            9.2164e-01, -4.3994e-01],
          [-7.9700e-02, -8.5486e-01, -1.3679e+00,  ...,  1.6931e+00,
           -4.5962e-01, -1.4990e+00],
          ...,
          [-1.0249e+00, -3.6919e-01,  3.4673e-01,  ...,  1.0132e+00,
           -6.3646e-01,  2.3263e-01],
          [ 3.9111e-01, -1.0919e-01, -1.2032e+00,  ..., -2.5169e-01,
           -9.4965e-01,  3.6650e-01],
          [-5.0643e-01, -6.5482e-01,  5.6139e-01,  ..., -1.1636e+00,
           -1.3893e+00, -8.2826e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7788, -0.3552, -0.0364,  ..., -0.6091, -0.2724, -0.5419],
         [ 0.8879,  0.0136,  1.1577,  ...,  0.5769, -0.8527, -1.0226],
         [ 0.8400,  0.3213,  0.3543,  ...,  1.3766, -0.0452, -0.5608],
         ...,
         [-1.3064,  2.0229,  0.1201,  ...,  0.1124, -0.3587,  0.2710],
         [-0.5765,  0.7567, -0.2899,  ..., -1.5124, -0.6573,  1.3665],
         [-0.0406,  0.6238,  2.1626,  ...,  0.6421,  0.2473, -0.4240]],

        [[-1.0812,  1.2623, -0.3721,  ...,  0.5519, -0.3165,  0.7283],
         [ 0.4838,  1.5244, -1.0254,  ...,  0.0831, -1.0222, -1.0104],
         [ 0.1656,  0.5640, -0.2833,  ...,  0.9369,  1.2545,  0.9351],
         ...,
         [ 0.3124, -0.8658, -0.1323,  ...,  0.2837, -0.0366,  0.5318],
         [ 0.3628, -0.6813, -0.4308,  ...,  0.0141, -0.0295, -0.1881],
         [ 0.0972,  0.9793,  0.3910,  ...,  0.7183,  1.5488, -1.5422]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4362,  1.6829,  0.9125,  ...,  0.4375, -0.1085,  1.8646],
         [ 2.0093,  0.8587,  0.4721,  ...,  0.1404,  0.4669, -0.6715],
         [-0.6585,  0.5277,  0.3117,  ..., -0.4512,  0.7934,  0.9699],
         ...,
         [ 0.1475,  0.1671, -1.3699,  ...,  2.0486,  1.4172,  0.5937],
         [ 1.6440, -0.4896,  1.1623,  ...,  0.7396, -1.6315,  0.8523],
         [-0.6144,  0.3874,  1.1841,  ..., -0.0894,  1.2005,  0.8254]],

        [[ 1.0912, -0.0790, -0.7644,  ...,  0.3996,  0.2196, -2.4268],
         [-0.6221, -1.1567, -0.1436,  ..., -0.9662, -0.3423,  0.3483],
         [-0.2460,  0.3254,  1.8238,  ..., -1.2160, -1.3600, -0.9481],
         ...,
         [-2.8993,  1.7625, -0.2927,  ...,  1.1781, -0.6567, -0.8635],
         [ 0.3586, -1.1308,  0.8386,  ...,  0.0183,  1.0548,  0.8139],
         [ 1.2720, -0.2891,  0.1988,  ...,  0.8934, -0.6186,  1.8417]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 152.675, Val Loss : 240.246
======> Trajectory Loss : 11.670, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.406, BelowGroundPenalize Loss : 0.387
===> [Minibatch 7/129].........tensor([[[-0.7788, -0.3552, -0.0364,  ..., -0.6091, -0.2724, -0.5419],
         [ 0.8879,  0.0136,  1.1577,  ...,  0.5769, -0.8527, -1.0226],
         [ 0.8400,  0.3213,  0.3543,  ...,  1.3766, -0.0452, -0.5608],
         ...,
         [-1.3064,  2.0229,  0.1201,  ...,  0.1124, -0.3587,  0.2710],
         [-0.5765,  0.7567, -0.2899,  ..., -1.5124, -0.6573,  1.3665],
         [-0.0406,  0.6238,  2.1626,  ...,  0.6421,  0.2473, -0.4240]],

        [[-1.0812,  1.2623, -0.3721,  ...,  0.5519, -0.3165,  0.7283],
         [ 0.4838,  1.5244, -1.0254,  ...,  0.0831, -1.0222, -1.0104],
         [ 0.1656,  0.5640, -0.2833,  ...,  0.9369,  1.2545,  0.9351],
         ...,
         [ 0.3124, -0.8658, -0.1323,  ...,  0.2837, -0.0366,  0.5318],
         [ 0.3628, -0.6813, -0.4308,  ...,  0.0141, -0.0295, -0.1881],
         [ 0.0972,  0.9793,  0.3910,  ...,  0.7183,  1.5488, -1.5422]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4362,  1.6829,  0.9125,  ...,  0.4375, -0.1085,  1.8646],
         [ 2.0093,  0.8587,  0.4721,  ...,  0.1404,  0.4669, -0.6715],
         [-0.6585,  0.5277,  0.3117,  ..., -0.4512,  0.7934,  0.9699],
         ...,
         [ 0.1475,  0.1671, -1.3699,  ...,  2.0486,  1.4172,  0.5937],
         [ 1.6440, -0.4896,  1.1623,  ...,  0.7396, -1.6315,  0.8523],
         [-0.6144,  0.3874,  1.1841,  ..., -0.0894,  1.2005,  0.8254]],

        [[ 1.0912, -0.0790, -0.7644,  ...,  0.3996,  0.2196, -2.4268],
         [-0.6221, -1.1567, -0.1436,  ..., -0.9662, -0.3423,  0.3483],
         [-0.2460,  0.3254,  1.8238,  ..., -1.2160, -1.3600, -0.9481],
         ...,
         [-2.8993,  1.7625, -0.2927,  ...,  1.1781, -0.6567, -0.8635],
         [ 0.3586, -1.1308,  0.8386,  ...,  0.0183,  1.0548,  0.8139],
         [ 1.2720, -0.2891,  0.1988,  ...,  0.8934, -0.6186,  1.8417]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4362e+00,  1.6829e+00,  9.1246e-01,  ...,  4.3746e-01,
           -1.0851e-01,  1.8646e+00],
          [ 2.0093e+00,  8.5868e-01,  4.7214e-01,  ...,  1.4042e-01,
            4.6687e-01, -6.7153e-01],
          [-6.5853e-01,  5.2772e-01,  3.1165e-01,  ..., -4.5121e-01,
            7.9337e-01,  9.6991e-01],
          ...,
          [ 1.4752e-01,  1.6705e-01, -1.3699e+00,  ...,  2.0486e+00,
            1.4172e+00,  5.9373e-01],
          [ 1.6440e+00, -4.8957e-01,  1.1623e+00,  ...,  7.3955e-01,
           -1.6315e+00,  8.5234e-01],
          [-6.1442e-01,  3.8743e-01,  1.1841e+00,  ..., -8.9352e-02,
            1.2005e+00,  8.2536e-01]],

         [[ 1.0912e+00, -7.8965e-02, -7.6437e-01,  ...,  3.9962e-01,
            2.1957e-01, -2.4268e+00],
          [-6.2208e-01, -1.1567e+00, -1.4364e-01,  ..., -9.6623e-01,
           -3.4230e-01,  3.4829e-01],
          [-2.4598e-01,  3.2541e-01,  1.8238e+00,  ..., -1.2160e+00,
           -1.3600e+00, -9.4814e-01],
          ...,
          [-2.8993e+00,  1.7625e+00, -2.9266e-01,  ...,  1.1781e+00,
           -6.5669e-01, -8.6351e-01],
          [ 3.5856e-01, -1.1308e+00,  8.3858e-01,  ...,  1.8286e-02,
            1.0548e+00,  8.1386e-01],
          [ 1.2720e+00, -2.8908e-01,  1.9883e-01,  ...,  8.9343e-01,
           -6.1856e-01,  1.8417e+00]]],


        [[[-3.1216e-01,  1.6507e+00,  1.0790e+00,  ..., -2.0725e+00,
           -6.3402e-01,  3.5106e-01],
          [-2.0079e-02, -4.0999e-01,  1.1411e+00,  ..., -5.5403e-02,
            1.7635e-01,  1.1821e+00],
          [-1.1522e+00, -1.1278e+00,  2.5664e-02,  ...,  2.4249e-01,
            1.4226e+00,  5.3267e-01],
          ...,
          [ 2.9424e-01,  1.7027e+00, -1.1446e+00,  ...,  7.5575e-01,
            1.5825e+00, -2.2874e-01],
          [ 6.7179e-01, -2.1281e-01, -5.3078e-01,  ..., -1.5226e+00,
           -1.0278e-01, -5.2211e-01],
          [-7.8506e-01,  6.2541e-01, -5.5798e-01,  ..., -5.4293e-01,
            2.4301e+00, -5.1320e-01]],

         [[ 7.9967e-03, -9.0659e-01,  3.0158e-01,  ..., -1.2824e-01,
            8.1470e-01,  2.1636e+00],
          [-1.0617e+00,  1.7314e-01,  4.2570e-02,  ..., -1.5670e+00,
            4.0700e-01,  1.2710e+00],
          [-4.7810e-01,  3.3774e-01, -1.0349e-01,  ...,  5.5887e-01,
           -1.4457e-02,  1.7543e+00],
          ...,
          [ 7.1048e-01, -2.4122e+00, -1.1554e+00,  ...,  2.9435e-01,
            7.0136e-01,  3.6263e-01],
          [-1.8344e+00,  7.1325e-01,  8.1774e-01,  ..., -6.0161e-01,
           -9.5159e-01, -1.0510e-01],
          [-6.7867e-01, -1.8682e-01,  2.5425e-01,  ...,  8.2226e-01,
           -4.5551e-01, -2.1367e-03]]],


        [[[ 1.3714e+00,  2.3755e-01,  6.3069e-01,  ..., -1.0193e+00,
            2.0196e+00, -4.8588e-01],
          [-1.1301e+00,  1.0978e+00, -7.3594e-01,  ..., -3.6838e-01,
            2.9562e-01,  2.9194e+00],
          [-5.2367e-01,  2.7960e-01,  1.1711e+00,  ..., -1.7989e+00,
           -1.7834e+00,  1.5591e-02],
          ...,
          [ 3.9963e-01, -3.8510e-01, -8.2853e-01,  ..., -3.9256e-01,
           -4.2333e-01, -8.5569e-01],
          [-1.2157e+00, -2.8481e-01,  8.1363e-01,  ...,  1.1914e-01,
            1.1773e+00, -1.3807e+00],
          [ 1.2215e+00, -1.0038e+00,  9.4751e-01,  ...,  1.4187e-01,
            7.1822e-01, -7.2301e-01]],

         [[ 1.4279e+00, -7.9043e-01, -7.7437e-01,  ...,  2.1451e+00,
            8.9331e-01,  7.0139e-01],
          [-1.0076e+00,  3.5034e-01,  1.5163e+00,  ..., -9.4710e-01,
           -1.6939e+00, -5.7577e-01],
          [-4.0109e-01, -6.4675e-01, -9.6817e-01,  ..., -6.7208e-01,
            1.5178e-01, -9.0542e-01],
          ...,
          [ 4.5798e-01, -5.8494e-01, -8.7579e-01,  ...,  1.2114e+00,
            4.7208e-01,  4.0503e-01],
          [-1.6673e+00,  6.1702e-02,  1.5048e-01,  ...,  7.0258e-02,
            4.6557e-01, -1.2017e+00],
          [-1.5873e+00, -1.6183e+00,  7.9340e-01,  ..., -1.1970e+00,
           -5.4850e-02, -2.7543e-01]]],


        [[[-9.1841e-01,  4.6961e-01, -2.2921e-01,  ..., -2.2644e-01,
            5.8121e-01, -2.3679e-01],
          [-9.3031e-01,  3.4348e-01,  1.3122e-01,  ..., -6.1996e-01,
            4.8113e-01,  1.2223e+00],
          [ 1.9020e+00, -3.3679e-01,  1.9597e+00,  ..., -1.7500e-01,
           -6.2695e-01, -6.8228e-01],
          ...,
          [ 7.8801e-02, -5.9386e-01, -1.1137e+00,  ...,  4.3642e-01,
            7.0531e-02, -3.0297e-01],
          [ 1.0438e+00, -2.0579e+00,  1.3756e+00,  ...,  1.5673e+00,
            1.4414e+00, -1.3833e-02],
          [-8.3790e-01, -1.0434e+00, -8.0891e-01,  ..., -8.0785e-01,
           -5.4277e-01,  1.1404e+00]],

         [[-1.7366e-01, -5.6500e-01,  8.9953e-01,  ...,  6.9445e-01,
           -7.5480e-01,  4.0981e-01],
          [ 9.5836e-02, -1.1628e-01,  9.5572e-01,  ...,  6.4833e-03,
            1.1633e+00, -1.9930e-01],
          [ 3.9208e-01, -5.5048e-01, -2.0833e+00,  ..., -3.4227e-02,
           -6.1161e-01, -5.0930e-01],
          ...,
          [-3.1106e-01,  4.7348e-01, -4.1050e-01,  ...,  1.7336e-01,
           -1.8912e+00,  6.7813e-01],
          [ 9.3364e-01, -1.4249e+00, -2.4596e+00,  ..., -2.5062e+00,
            6.7797e-01, -6.7461e-01],
          [-1.9155e-01, -2.0122e-01,  4.7751e-01,  ...,  1.0050e+00,
           -5.6851e-01,  4.8671e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.0361e-01, -8.6462e-01,  8.7371e-01,  ...,  1.5814e+00,
           -5.7350e-01,  6.6728e-01],
          [ 5.6977e-01, -1.1848e+00,  9.4186e-01,  ...,  5.1259e-01,
            1.1148e+00,  1.4932e+00],
          [-9.4906e-01,  1.4289e+00,  7.4478e-01,  ...,  1.2195e-01,
            5.4394e-01, -1.3531e-01],
          ...,
          [ 1.7498e-01,  1.7952e+00, -6.3925e-01,  ...,  2.5188e-01,
            7.4411e-01,  3.8461e-01],
          [-9.2743e-02, -1.8457e+00,  5.4997e-01,  ...,  5.3432e-01,
           -1.1786e-01, -1.3099e+00],
          [ 1.3607e+00, -6.9491e-01,  1.3729e-01,  ...,  2.5445e-01,
            1.2593e+00, -8.5432e-01]],

         [[ 1.6316e+00,  4.7235e-01, -7.2265e-02,  ...,  3.5334e-01,
            6.8766e-01, -3.5904e-01],
          [ 2.2615e+00, -8.0264e-01, -4.5751e-01,  ..., -1.0687e-01,
            8.6385e-02,  7.2016e-01],
          [ 6.0255e-02, -7.1147e-02,  3.7657e-02,  ...,  2.5051e-01,
           -1.9404e+00,  5.6153e-01],
          ...,
          [-2.0500e-03,  2.8779e-01, -7.1963e-01,  ...,  6.4197e-02,
           -1.9468e+00, -6.6391e-01],
          [-3.7248e-01,  3.0430e+00, -6.3561e-01,  ...,  1.8847e-01,
            1.5281e+00, -5.3742e-01],
          [-5.5579e-01, -2.9029e-02,  5.4155e-01,  ...,  5.9362e-01,
           -1.0154e+00,  6.1215e-01]]],


        [[[ 1.2573e-01,  1.3117e+00,  3.7182e-01,  ..., -2.0105e+00,
            3.4535e-01, -4.1946e-01],
          [ 2.0063e+00, -1.7471e+00, -1.2174e+00,  ..., -5.8133e-01,
            1.1906e+00, -9.1802e-02],
          [ 1.3865e+00,  1.9454e+00, -4.8000e-01,  ..., -1.0961e+00,
            1.4112e+00,  1.1434e+00],
          ...,
          [-5.8603e-01, -7.7973e-01,  1.1540e+00,  ..., -3.1358e-01,
            9.6136e-01, -9.2233e-01],
          [-1.3150e+00, -2.4927e-01, -2.6427e+00,  ..., -1.4172e+00,
           -1.6370e-01, -1.9410e-01],
          [ 2.5611e-01, -5.1836e-02, -1.0663e+00,  ...,  4.5650e-01,
            1.2607e+00,  6.0686e-01]],

         [[ 6.4200e-01, -5.0809e-01,  1.0407e-01,  ...,  1.7060e+00,
           -3.8807e-01,  3.8356e-01],
          [-6.5358e-01, -9.8505e-01,  5.1507e-01,  ...,  1.9638e+00,
           -2.3943e+00,  1.1038e+00],
          [-2.3647e+00, -3.8744e-01, -1.1197e+00,  ..., -1.4943e+00,
           -1.0801e+00, -1.9343e+00],
          ...,
          [-1.1222e+00, -1.8364e-01,  4.9674e-01,  ..., -8.2004e-01,
            2.2661e+00,  1.1202e-01],
          [-1.2849e+00,  4.8195e-01, -3.8786e-01,  ..., -1.2358e+00,
            1.8327e+00, -6.7331e-01],
          [-2.8630e-01, -9.3508e-01,  6.3943e-01,  ...,  1.2376e+00,
            6.1638e-02, -5.4728e-01]]],


        [[[ 2.0617e+00,  1.1021e+00,  3.4740e-01,  ..., -1.6432e+00,
            4.0232e-01,  2.4368e-02],
          [-2.4221e+00, -8.1042e-01, -1.8011e-01,  ..., -2.2650e-02,
            8.5730e-01, -5.4766e-02],
          [-9.5278e-01, -1.0830e+00, -1.3420e+00,  ...,  1.3044e+00,
           -1.0366e+00,  6.2885e-01],
          ...,
          [ 1.5875e+00, -7.6853e-02,  1.7202e+00,  ..., -2.6056e-01,
            5.3893e-01, -2.9851e-01],
          [-2.7664e-02,  7.7583e-01, -1.0496e+00,  ...,  2.0015e+00,
           -7.1705e-01, -1.7762e-01],
          [ 2.4574e-01, -8.2866e-02, -3.3339e-01,  ...,  9.5984e-01,
            7.8605e-01, -2.6096e+00]],

         [[-2.8283e-01,  1.6427e-02,  6.0352e-01,  ..., -1.4480e+00,
            1.2828e+00,  1.1527e+00],
          [ 9.9939e-01, -8.3234e-01, -9.4544e-01,  ...,  1.1338e+00,
            1.6167e-02,  4.4475e-01],
          [-3.7770e-01,  7.0588e-01,  1.2102e+00,  ...,  1.5286e+00,
            8.4723e-01,  3.0331e-02],
          ...,
          [ 6.2183e-01, -1.4934e-01, -2.5852e+00,  ...,  1.2024e+00,
           -6.8324e-01, -3.0639e-01],
          [-3.7759e-01,  2.8191e-02, -4.0532e-01,  ...,  3.1535e-01,
            8.6629e-01, -1.4524e+00],
          [ 4.6947e-02,  1.3527e-01,  1.6693e+00,  ...,  3.1443e-01,
            7.0162e-01,  1.4786e+00]]],


        [[[ 1.1517e+00,  7.0296e-01, -2.1471e-01,  ...,  1.5060e+00,
           -1.2447e+00,  1.2592e+00],
          [ 2.4278e+00,  1.0029e+00,  7.1836e-01,  ...,  1.4229e+00,
            1.3438e+00, -1.0132e+00],
          [-8.3874e-01, -4.9863e-01, -5.1570e-01,  ..., -5.2607e-01,
           -3.9887e-01,  1.2161e+00],
          ...,
          [ 5.0270e-01,  1.0693e+00, -5.3116e-01,  ...,  1.0991e+00,
            5.0206e-01, -5.8236e-01],
          [-1.1710e+00,  5.3175e-01, -4.7600e-01,  ..., -2.6150e-01,
           -5.6086e-01,  4.3344e-01],
          [-7.4764e-01,  2.1137e-02,  3.5387e-01,  ...,  1.9748e-01,
            2.5902e-01,  3.2162e-02]],

         [[ 6.7353e-01, -2.6712e-02, -1.5729e-01,  ...,  1.3605e+00,
           -3.0966e-01, -1.0130e+00],
          [ 5.6609e-01,  1.2422e+00,  1.8937e-02,  ...,  1.0223e+00,
            9.2164e-01, -4.3994e-01],
          [-7.9700e-02, -8.5486e-01, -1.3679e+00,  ...,  1.6931e+00,
           -4.5962e-01, -1.4990e+00],
          ...,
          [-1.0249e+00, -3.6919e-01,  3.4673e-01,  ...,  1.0132e+00,
           -6.3646e-01,  2.3263e-01],
          [ 3.9111e-01, -1.0919e-01, -1.2032e+00,  ..., -2.5169e-01,
           -9.4965e-01,  3.6650e-01],
          [-5.0643e-01, -6.5482e-01,  5.6139e-01,  ..., -1.1636e+00,
           -1.3893e+00, -8.2826e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4363e+00,  1.6824e+00,  9.1333e-01,  ...,  4.3591e-01,
           -1.0384e-01,  1.8668e+00],
          [ 2.0097e+00,  8.6086e-01,  4.7015e-01,  ...,  1.4143e-01,
            4.6868e-01, -6.6844e-01],
          [-6.6165e-01,  5.3134e-01,  3.0759e-01,  ..., -4.4800e-01,
            7.9631e-01,  9.6860e-01],
          ...,
          [ 1.4462e-01,  1.6565e-01, -1.3677e+00,  ...,  2.0460e+00,
            1.4182e+00,  5.9397e-01],
          [ 1.6397e+00, -4.8789e-01,  1.1636e+00,  ...,  7.3582e-01,
           -1.6354e+00,  8.5139e-01],
          [-6.1751e-01,  3.8757e-01,  1.1851e+00,  ..., -8.9909e-02,
            1.1992e+00,  8.2496e-01]],

         [[ 1.0913e+00, -7.9185e-02, -7.6479e-01,  ...,  4.0008e-01,
            2.2032e-01, -2.4254e+00],
          [-6.2515e-01, -1.1542e+00, -1.3992e-01,  ..., -9.6379e-01,
           -3.4531e-01,  3.4552e-01],
          [-2.4879e-01,  3.2815e-01,  1.8268e+00,  ..., -1.2132e+00,
           -1.3629e+00, -9.5082e-01],
          ...,
          [-2.9000e+00,  1.7603e+00, -2.9405e-01,  ...,  1.1769e+00,
           -6.5434e-01, -8.6194e-01],
          [ 3.6197e-01, -1.1345e+00,  8.3841e-01,  ...,  1.5636e-02,
            1.0585e+00,  8.1766e-01],
          [ 1.2726e+00, -2.9095e-01,  2.0297e-01,  ...,  8.9220e-01,
           -6.1872e-01,  1.8377e+00]]],


        [[[-3.0977e-01,  1.6526e+00,  1.0772e+00,  ..., -2.0762e+00,
           -6.3422e-01,  3.4952e-01],
          [-2.0570e-02, -4.0971e-01,  1.1422e+00,  ..., -5.6823e-02,
            1.7561e-01,  1.1832e+00],
          [-1.1556e+00, -1.1244e+00,  2.9039e-02,  ...,  2.3848e-01,
            1.4190e+00,  5.3611e-01],
          ...,
          [ 2.9763e-01,  1.6997e+00, -1.1477e+00,  ...,  7.5788e-01,
            1.5856e+00, -2.3084e-01],
          [ 6.7598e-01, -2.1674e-01, -5.3452e-01,  ..., -1.5199e+00,
           -9.9710e-02, -5.2589e-01],
          [-7.8408e-01,  6.2436e-01, -5.5950e-01,  ..., -5.4321e-01,
            2.4311e+00, -5.1491e-01]],

         [[ 7.7893e-03, -9.0863e-01,  2.9876e-01,  ..., -1.2650e-01,
            8.1308e-01,  2.1631e+00],
          [-1.0605e+00,  1.7066e-01,  4.0275e-02,  ..., -1.5690e+00,
            4.0869e-01,  1.2736e+00],
          [-4.7590e-01,  3.3317e-01, -1.0635e-01,  ...,  5.5688e-01,
           -1.2448e-02,  1.7566e+00],
          ...,
          [ 7.0919e-01, -2.4147e+00, -1.1577e+00,  ...,  2.9700e-01,
            7.0256e-01,  3.6362e-01],
          [-1.8377e+00,  7.0835e-01,  8.1309e-01,  ..., -5.9742e-01,
           -9.5592e-01, -1.0706e-01],
          [-6.8092e-01, -1.9119e-01,  2.5214e-01,  ...,  8.2483e-01,
           -4.5687e-01,  1.8488e-03]]],


        [[[ 1.3709e+00,  2.3494e-01,  6.2995e-01,  ..., -1.0204e+00,
            2.0161e+00, -4.8755e-01],
          [-1.1285e+00,  1.0987e+00, -7.3687e-01,  ..., -3.6854e-01,
            2.9548e-01,  2.9206e+00],
          [-5.2170e-01,  2.8196e-01,  1.1743e+00,  ..., -1.8018e+00,
           -1.7804e+00,  1.8770e-02],
          ...,
          [ 3.9866e-01, -3.8701e-01, -8.2922e-01,  ..., -3.9231e-01,
           -4.2354e-01, -8.5836e-01],
          [-1.2127e+00, -2.8881e-01,  8.1091e-01,  ...,  1.1660e-01,
            1.1730e+00, -1.3844e+00],
          [ 1.2194e+00, -1.0063e+00,  9.4722e-01,  ...,  1.4200e-01,
            7.1438e-01, -7.2402e-01]],

         [[ 1.4286e+00, -7.9182e-01, -7.7360e-01,  ...,  2.1444e+00,
            8.9078e-01,  7.0311e-01],
          [-1.0066e+00,  3.5047e-01,  1.5156e+00,  ..., -9.4639e-01,
           -1.6940e+00, -5.7653e-01],
          [-3.9839e-01, -6.4643e-01, -9.7006e-01,  ..., -6.7176e-01,
            1.5312e-01, -9.0731e-01],
          ...,
          [ 4.5791e-01, -5.8424e-01, -8.7437e-01,  ...,  1.2092e+00,
            4.6974e-01,  4.0602e-01],
          [-1.6714e+00,  5.7020e-02,  1.5402e-01,  ...,  6.6269e-02,
            4.6086e-01, -1.1972e+00],
          [-1.5877e+00, -1.6166e+00,  7.9646e-01,  ..., -1.2012e+00,
           -5.8176e-02, -2.7199e-01]]],


        [[[-9.1954e-01,  4.6752e-01, -2.3121e-01,  ..., -2.2540e-01,
            5.8438e-01, -2.3675e-01],
          [-9.3228e-01,  3.4281e-01,  1.3210e-01,  ..., -6.2003e-01,
            4.8045e-01,  1.2230e+00],
          [ 1.8988e+00, -3.3766e-01,  1.9629e+00,  ..., -1.7746e-01,
           -6.2973e-01, -6.8038e-01],
          ...,
          [ 7.9443e-02, -5.9567e-01, -1.1154e+00,  ...,  4.3709e-01,
            7.3391e-02, -3.0401e-01],
          [ 1.0470e+00, -2.0598e+00,  1.3719e+00,  ...,  1.5709e+00,
            1.4452e+00, -1.1204e-02],
          [-8.3717e-01, -1.0470e+00, -8.1088e-01,  ..., -8.0555e-01,
           -5.3964e-01,  1.1400e+00]],

         [[-1.7519e-01, -5.6342e-01,  8.9935e-01,  ...,  6.9297e-01,
           -7.5225e-01,  4.1004e-01],
          [ 9.7249e-02, -1.1811e-01,  9.5765e-01,  ...,  7.7082e-03,
            1.1633e+00, -2.0014e-01],
          [ 3.9217e-01, -5.4970e-01, -2.0842e+00,  ..., -3.3647e-02,
           -6.1180e-01, -5.1158e-01],
          ...,
          [-3.1336e-01,  4.7554e-01, -4.1113e-01,  ...,  1.7153e-01,
           -1.8890e+00,  6.7985e-01],
          [ 9.3098e-01, -1.4218e+00, -2.4583e+00,  ..., -2.5090e+00,
            6.7746e-01, -6.7097e-01],
          [-1.9489e-01, -1.9884e-01,  4.7493e-01,  ...,  1.0022e+00,
           -5.6650e-01,  4.8554e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.0225e-01, -8.6767e-01,  8.7336e-01,  ...,  1.5782e+00,
           -5.7245e-01,  6.6808e-01],
          [ 5.6789e-01, -1.1830e+00,  9.4070e-01,  ...,  5.0944e-01,
            1.1142e+00,  1.4962e+00],
          [-9.5296e-01,  1.4320e+00,  7.4049e-01,  ...,  1.2157e-01,
            5.4723e-01, -1.3095e-01],
          ...,
          [ 1.7527e-01,  1.7926e+00, -6.3734e-01,  ...,  2.4847e-01,
            7.4287e-01,  3.8183e-01],
          [-9.0460e-02, -1.8497e+00,  5.4660e-01,  ...,  5.3022e-01,
           -1.1981e-01, -1.3104e+00],
          [ 1.3581e+00, -6.9446e-01,  1.3779e-01,  ...,  2.5071e-01,
            1.2588e+00, -8.5346e-01]],

         [[ 1.6308e+00,  4.7086e-01, -7.1025e-02,  ...,  3.5089e-01,
            6.9039e-01, -3.5735e-01],
          [ 2.2600e+00, -8.0125e-01, -4.5593e-01,  ..., -1.0481e-01,
            8.5481e-02,  7.1793e-01],
          [ 5.7261e-02, -6.9251e-02,  3.9565e-02,  ...,  2.5248e-01,
           -1.9419e+00,  5.5930e-01],
          ...,
          [-1.5162e-03,  2.8621e-01, -7.2071e-01,  ...,  6.1248e-02,
           -1.9444e+00, -6.6124e-01],
          [-3.6945e-01,  3.0401e+00, -6.3739e-01,  ...,  1.8436e-01,
            1.5323e+00, -5.3352e-01],
          [-5.5433e-01, -3.1116e-02,  5.4013e-01,  ...,  5.9152e-01,
           -1.0132e+00,  6.1384e-01]]],


        [[[ 1.2965e-01,  1.3096e+00,  3.6915e-01,  ..., -2.0078e+00,
            3.4972e-01, -4.2335e-01],
          [ 2.0076e+00, -1.7468e+00, -1.2186e+00,  ..., -5.8277e-01,
            1.1919e+00, -9.1723e-02],
          [ 1.3836e+00,  1.9490e+00, -4.7729e-01,  ..., -1.0994e+00,
            1.4091e+00,  1.1466e+00],
          ...,
          [-5.8263e-01, -7.8216e-01,  1.1504e+00,  ..., -3.1043e-01,
            9.6550e-01, -9.2619e-01],
          [-1.3108e+00, -2.5293e-01, -2.6482e+00,  ..., -1.4131e+00,
           -1.5926e-01, -1.9921e-01],
          [ 2.5779e-01, -5.2013e-02, -1.0685e+00,  ...,  4.5819e-01,
            1.2649e+00,  6.0522e-01]],

         [[ 6.3924e-01, -5.0893e-01,  1.0606e-01,  ...,  1.7064e+00,
           -3.8771e-01,  3.8586e-01],
          [-6.5282e-01, -9.8738e-01,  5.1304e-01,  ...,  1.9649e+00,
           -2.3927e+00,  1.1045e+00],
          [-2.3657e+00, -3.8980e-01, -1.1221e+00,  ..., -1.4921e+00,
           -1.0782e+00, -1.9335e+00],
          ...,
          [-1.1249e+00, -1.8451e-01,  4.9780e-01,  ..., -8.1966e-01,
            2.2664e+00,  1.1392e-01],
          [-1.2892e+00,  4.8184e-01, -3.8454e-01,  ..., -1.2354e+00,
            1.8297e+00, -6.6955e-01],
          [-2.8976e-01, -9.3745e-01,  6.4173e-01,  ...,  1.2368e+00,
            6.1141e-02, -5.4347e-01]]],


        [[[ 2.0635e+00,  1.0994e+00,  3.4510e-01,  ..., -1.6419e+00,
            4.0248e-01,  2.1366e-02],
          [-2.4243e+00, -8.1179e-01, -1.7934e-01,  ..., -2.4231e-02,
            8.5653e-01, -5.3723e-02],
          [-9.5607e-01, -1.0845e+00, -1.3411e+00,  ...,  1.3032e+00,
           -1.0382e+00,  6.3166e-01],
          ...,
          [ 1.5894e+00, -7.8773e-02,  1.7191e+00,  ..., -2.5782e-01,
            5.3953e-01, -3.0077e-01],
          [-2.4127e-02,  7.7181e-01, -1.0532e+00,  ...,  2.0050e+00,
           -7.1664e-01, -1.8274e-01],
          [ 2.4805e-01, -8.5974e-02, -3.3507e-01,  ...,  9.6218e-01,
            7.8577e-01, -2.6125e+00]],

         [[-2.8698e-01,  1.6732e-02,  6.0571e-01,  ..., -1.4503e+00,
            1.2810e+00,  1.1549e+00],
          [ 1.0013e+00, -8.3379e-01, -9.4739e-01,  ...,  1.1361e+00,
            1.6457e-02,  4.4326e-01],
          [-3.7767e-01,  7.0505e-01,  1.2113e+00,  ...,  1.5306e+00,
            8.4858e-01,  2.8516e-02],
          ...,
          [ 6.1873e-01, -1.4917e-01, -2.5838e+00,  ...,  1.2006e+00,
           -6.8593e-01, -3.0464e-01],
          [-3.8296e-01,  2.8548e-02, -4.0100e-01,  ...,  3.1070e-01,
            8.6181e-01, -1.4486e+00],
          [ 4.4140e-02,  1.3567e-01,  1.6720e+00,  ...,  3.1200e-01,
            6.9920e-01,  1.4817e+00]]],


        [[[ 1.1537e+00,  7.0223e-01, -2.1782e-01,  ...,  1.5074e+00,
           -1.2432e+00,  1.2568e+00],
          [ 2.4285e+00,  1.0048e+00,  7.1949e-01,  ...,  1.4238e+00,
            1.3440e+00, -1.0134e+00],
          [-8.4211e-01, -4.9647e-01, -5.1319e-01,  ..., -5.2952e-01,
           -4.0190e-01,  1.2195e+00],
          ...,
          [ 5.0503e-01,  1.0684e+00, -5.3354e-01,  ...,  1.1002e+00,
            5.0355e-01, -5.8492e-01],
          [-1.1682e+00,  5.2944e-01, -4.8021e-01,  ..., -2.5766e-01,
           -5.5713e-01,  4.3077e-01],
          [-7.4735e-01,  2.0542e-02,  3.5177e-01,  ...,  1.9935e-01,
            2.6011e-01,  3.1902e-02]],

         [[ 6.7015e-01, -2.4892e-02, -1.5708e-01,  ...,  1.3591e+00,
           -3.1124e-01, -1.0123e+00],
          [ 5.6744e-01,  1.2414e+00,  1.9097e-02,  ...,  1.0245e+00,
            9.2369e-01, -4.4010e-01],
          [-7.9595e-02, -8.5627e-01, -1.3679e+00,  ...,  1.6957e+00,
           -4.5953e-01, -1.5001e+00],
          ...,
          [-1.0271e+00, -3.6759e-01,  3.4710e-01,  ...,  1.0110e+00,
           -6.3812e-01,  2.3320e-01],
          [ 3.8755e-01, -1.0608e-01, -1.2012e+00,  ..., -2.5651e-01,
           -9.5311e-01,  3.6949e-01],
          [-5.0889e-01, -6.5323e-01,  5.6191e-01,  ..., -1.1658e+00,
           -1.3917e+00, -8.2811e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7819, -0.3497, -0.0412,  ..., -0.6011, -0.2788, -0.5493],
         [ 0.8829,  0.0213,  1.1500,  ...,  0.5839, -0.8608, -1.0308],
         [ 0.8360,  0.3262,  0.3529,  ...,  1.3777, -0.0475, -0.5611],
         ...,
         [-1.3005,  2.0292,  0.1254,  ...,  0.1185, -0.3535,  0.2644],
         [-0.5805,  0.7518, -0.2878,  ..., -1.5172, -0.6512,  1.3713],
         [-0.0406,  0.6249,  2.1660,  ...,  0.6428,  0.2501, -0.4252]],

        [[-1.0806,  1.2617, -0.3766,  ...,  0.5540, -0.3178,  0.7318],
         [ 0.4917,  1.5163, -1.0323,  ...,  0.0776, -1.0245, -1.0127],
         [ 0.1671,  0.5613, -0.2864,  ...,  0.9340,  1.2553,  0.9385],
         ...,
         [ 0.3192, -0.8725, -0.1308,  ...,  0.2814, -0.0343,  0.5318],
         [ 0.3642, -0.6816, -0.4333,  ...,  0.0109, -0.0240, -0.1846],
         [ 0.1041,  0.9716,  0.3902,  ...,  0.7179,  1.5566, -1.5366]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4363,  1.6824,  0.9133,  ...,  0.4359, -0.1038,  1.8668],
         [ 2.0097,  0.8609,  0.4702,  ...,  0.1414,  0.4687, -0.6684],
         [-0.6616,  0.5313,  0.3076,  ..., -0.4480,  0.7963,  0.9686],
         ...,
         [ 0.1446,  0.1656, -1.3677,  ...,  2.0460,  1.4182,  0.5940],
         [ 1.6397, -0.4879,  1.1636,  ...,  0.7358, -1.6354,  0.8514],
         [-0.6175,  0.3876,  1.1851,  ..., -0.0899,  1.1992,  0.8250]],

        [[ 1.0913, -0.0792, -0.7648,  ...,  0.4001,  0.2203, -2.4254],
         [-0.6251, -1.1542, -0.1399,  ..., -0.9638, -0.3453,  0.3455],
         [-0.2488,  0.3282,  1.8268,  ..., -1.2132, -1.3629, -0.9508],
         ...,
         [-2.9000,  1.7603, -0.2940,  ...,  1.1769, -0.6543, -0.8619],
         [ 0.3620, -1.1345,  0.8384,  ...,  0.0156,  1.0585,  0.8177],
         [ 1.2726, -0.2910,  0.2030,  ...,  0.8922, -0.6187,  1.8377]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 172.609, Val Loss : 288.898
======> Trajectory Loss : 28.979, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.400, BelowGroundPenalize Loss : 3.655
===> [Minibatch 8/129].........tensor([[[-0.7819, -0.3497, -0.0412,  ..., -0.6011, -0.2788, -0.5493],
         [ 0.8829,  0.0213,  1.1500,  ...,  0.5839, -0.8608, -1.0308],
         [ 0.8360,  0.3262,  0.3529,  ...,  1.3777, -0.0475, -0.5611],
         ...,
         [-1.3005,  2.0292,  0.1254,  ...,  0.1185, -0.3535,  0.2644],
         [-0.5805,  0.7518, -0.2878,  ..., -1.5172, -0.6512,  1.3713],
         [-0.0406,  0.6249,  2.1660,  ...,  0.6428,  0.2501, -0.4252]],

        [[-1.0806,  1.2617, -0.3766,  ...,  0.5540, -0.3178,  0.7318],
         [ 0.4917,  1.5163, -1.0323,  ...,  0.0776, -1.0245, -1.0127],
         [ 0.1671,  0.5613, -0.2864,  ...,  0.9340,  1.2553,  0.9385],
         ...,
         [ 0.3192, -0.8725, -0.1308,  ...,  0.2814, -0.0343,  0.5318],
         [ 0.3642, -0.6816, -0.4333,  ...,  0.0109, -0.0240, -0.1846],
         [ 0.1041,  0.9716,  0.3902,  ...,  0.7179,  1.5566, -1.5366]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4363,  1.6824,  0.9133,  ...,  0.4359, -0.1038,  1.8668],
         [ 2.0097,  0.8609,  0.4702,  ...,  0.1414,  0.4687, -0.6684],
         [-0.6616,  0.5313,  0.3076,  ..., -0.4480,  0.7963,  0.9686],
         ...,
         [ 0.1446,  0.1656, -1.3677,  ...,  2.0460,  1.4182,  0.5940],
         [ 1.6397, -0.4879,  1.1636,  ...,  0.7358, -1.6354,  0.8514],
         [-0.6175,  0.3876,  1.1851,  ..., -0.0899,  1.1992,  0.8250]],

        [[ 1.0913, -0.0792, -0.7648,  ...,  0.4001,  0.2203, -2.4254],
         [-0.6251, -1.1542, -0.1399,  ..., -0.9638, -0.3453,  0.3455],
         [-0.2488,  0.3282,  1.8268,  ..., -1.2132, -1.3629, -0.9508],
         ...,
         [-2.9000,  1.7603, -0.2940,  ...,  1.1769, -0.6543, -0.8619],
         [ 0.3620, -1.1345,  0.8384,  ...,  0.0156,  1.0585,  0.8177],
         [ 1.2726, -0.2910,  0.2030,  ...,  0.8922, -0.6187,  1.8377]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4363e+00,  1.6824e+00,  9.1333e-01,  ...,  4.3591e-01,
           -1.0384e-01,  1.8668e+00],
          [ 2.0097e+00,  8.6086e-01,  4.7015e-01,  ...,  1.4143e-01,
            4.6868e-01, -6.6844e-01],
          [-6.6165e-01,  5.3134e-01,  3.0759e-01,  ..., -4.4800e-01,
            7.9631e-01,  9.6860e-01],
          ...,
          [ 1.4462e-01,  1.6565e-01, -1.3677e+00,  ...,  2.0460e+00,
            1.4182e+00,  5.9397e-01],
          [ 1.6397e+00, -4.8789e-01,  1.1636e+00,  ...,  7.3582e-01,
           -1.6354e+00,  8.5139e-01],
          [-6.1751e-01,  3.8757e-01,  1.1851e+00,  ..., -8.9909e-02,
            1.1992e+00,  8.2496e-01]],

         [[ 1.0913e+00, -7.9185e-02, -7.6479e-01,  ...,  4.0008e-01,
            2.2032e-01, -2.4254e+00],
          [-6.2515e-01, -1.1542e+00, -1.3992e-01,  ..., -9.6379e-01,
           -3.4531e-01,  3.4552e-01],
          [-2.4879e-01,  3.2815e-01,  1.8268e+00,  ..., -1.2132e+00,
           -1.3629e+00, -9.5082e-01],
          ...,
          [-2.9000e+00,  1.7603e+00, -2.9405e-01,  ...,  1.1769e+00,
           -6.5434e-01, -8.6194e-01],
          [ 3.6197e-01, -1.1345e+00,  8.3841e-01,  ...,  1.5636e-02,
            1.0585e+00,  8.1766e-01],
          [ 1.2726e+00, -2.9095e-01,  2.0297e-01,  ...,  8.9220e-01,
           -6.1872e-01,  1.8377e+00]]],


        [[[-3.0977e-01,  1.6526e+00,  1.0772e+00,  ..., -2.0762e+00,
           -6.3422e-01,  3.4952e-01],
          [-2.0570e-02, -4.0971e-01,  1.1422e+00,  ..., -5.6823e-02,
            1.7561e-01,  1.1832e+00],
          [-1.1556e+00, -1.1244e+00,  2.9039e-02,  ...,  2.3848e-01,
            1.4190e+00,  5.3611e-01],
          ...,
          [ 2.9763e-01,  1.6997e+00, -1.1477e+00,  ...,  7.5788e-01,
            1.5856e+00, -2.3084e-01],
          [ 6.7598e-01, -2.1674e-01, -5.3452e-01,  ..., -1.5199e+00,
           -9.9710e-02, -5.2589e-01],
          [-7.8408e-01,  6.2436e-01, -5.5950e-01,  ..., -5.4321e-01,
            2.4311e+00, -5.1491e-01]],

         [[ 7.7893e-03, -9.0863e-01,  2.9876e-01,  ..., -1.2650e-01,
            8.1308e-01,  2.1631e+00],
          [-1.0605e+00,  1.7066e-01,  4.0275e-02,  ..., -1.5690e+00,
            4.0869e-01,  1.2736e+00],
          [-4.7590e-01,  3.3317e-01, -1.0635e-01,  ...,  5.5688e-01,
           -1.2448e-02,  1.7566e+00],
          ...,
          [ 7.0919e-01, -2.4147e+00, -1.1577e+00,  ...,  2.9700e-01,
            7.0256e-01,  3.6362e-01],
          [-1.8377e+00,  7.0835e-01,  8.1309e-01,  ..., -5.9742e-01,
           -9.5592e-01, -1.0706e-01],
          [-6.8092e-01, -1.9119e-01,  2.5214e-01,  ...,  8.2483e-01,
           -4.5687e-01,  1.8488e-03]]],


        [[[ 1.3709e+00,  2.3494e-01,  6.2995e-01,  ..., -1.0204e+00,
            2.0161e+00, -4.8755e-01],
          [-1.1285e+00,  1.0987e+00, -7.3687e-01,  ..., -3.6854e-01,
            2.9548e-01,  2.9206e+00],
          [-5.2170e-01,  2.8196e-01,  1.1743e+00,  ..., -1.8018e+00,
           -1.7804e+00,  1.8770e-02],
          ...,
          [ 3.9866e-01, -3.8701e-01, -8.2922e-01,  ..., -3.9231e-01,
           -4.2354e-01, -8.5836e-01],
          [-1.2127e+00, -2.8881e-01,  8.1091e-01,  ...,  1.1660e-01,
            1.1730e+00, -1.3844e+00],
          [ 1.2194e+00, -1.0063e+00,  9.4722e-01,  ...,  1.4200e-01,
            7.1438e-01, -7.2402e-01]],

         [[ 1.4286e+00, -7.9182e-01, -7.7360e-01,  ...,  2.1444e+00,
            8.9078e-01,  7.0311e-01],
          [-1.0066e+00,  3.5047e-01,  1.5156e+00,  ..., -9.4639e-01,
           -1.6940e+00, -5.7653e-01],
          [-3.9839e-01, -6.4643e-01, -9.7006e-01,  ..., -6.7176e-01,
            1.5312e-01, -9.0731e-01],
          ...,
          [ 4.5791e-01, -5.8424e-01, -8.7437e-01,  ...,  1.2092e+00,
            4.6974e-01,  4.0602e-01],
          [-1.6714e+00,  5.7020e-02,  1.5402e-01,  ...,  6.6269e-02,
            4.6086e-01, -1.1972e+00],
          [-1.5877e+00, -1.6166e+00,  7.9646e-01,  ..., -1.2012e+00,
           -5.8176e-02, -2.7199e-01]]],


        [[[-9.1954e-01,  4.6752e-01, -2.3121e-01,  ..., -2.2540e-01,
            5.8438e-01, -2.3675e-01],
          [-9.3228e-01,  3.4281e-01,  1.3210e-01,  ..., -6.2003e-01,
            4.8045e-01,  1.2230e+00],
          [ 1.8988e+00, -3.3766e-01,  1.9629e+00,  ..., -1.7746e-01,
           -6.2973e-01, -6.8038e-01],
          ...,
          [ 7.9443e-02, -5.9567e-01, -1.1154e+00,  ...,  4.3709e-01,
            7.3391e-02, -3.0401e-01],
          [ 1.0470e+00, -2.0598e+00,  1.3719e+00,  ...,  1.5709e+00,
            1.4452e+00, -1.1204e-02],
          [-8.3717e-01, -1.0470e+00, -8.1088e-01,  ..., -8.0555e-01,
           -5.3964e-01,  1.1400e+00]],

         [[-1.7519e-01, -5.6342e-01,  8.9935e-01,  ...,  6.9297e-01,
           -7.5225e-01,  4.1004e-01],
          [ 9.7249e-02, -1.1811e-01,  9.5765e-01,  ...,  7.7082e-03,
            1.1633e+00, -2.0014e-01],
          [ 3.9217e-01, -5.4970e-01, -2.0842e+00,  ..., -3.3647e-02,
           -6.1180e-01, -5.1158e-01],
          ...,
          [-3.1336e-01,  4.7554e-01, -4.1113e-01,  ...,  1.7153e-01,
           -1.8890e+00,  6.7985e-01],
          [ 9.3098e-01, -1.4218e+00, -2.4583e+00,  ..., -2.5090e+00,
            6.7746e-01, -6.7097e-01],
          [-1.9489e-01, -1.9884e-01,  4.7493e-01,  ...,  1.0022e+00,
           -5.6650e-01,  4.8554e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.0225e-01, -8.6767e-01,  8.7336e-01,  ...,  1.5782e+00,
           -5.7245e-01,  6.6808e-01],
          [ 5.6789e-01, -1.1830e+00,  9.4070e-01,  ...,  5.0944e-01,
            1.1142e+00,  1.4962e+00],
          [-9.5296e-01,  1.4320e+00,  7.4049e-01,  ...,  1.2157e-01,
            5.4723e-01, -1.3095e-01],
          ...,
          [ 1.7527e-01,  1.7926e+00, -6.3734e-01,  ...,  2.4847e-01,
            7.4287e-01,  3.8183e-01],
          [-9.0460e-02, -1.8497e+00,  5.4660e-01,  ...,  5.3022e-01,
           -1.1981e-01, -1.3104e+00],
          [ 1.3581e+00, -6.9446e-01,  1.3779e-01,  ...,  2.5071e-01,
            1.2588e+00, -8.5346e-01]],

         [[ 1.6308e+00,  4.7086e-01, -7.1025e-02,  ...,  3.5089e-01,
            6.9039e-01, -3.5735e-01],
          [ 2.2600e+00, -8.0125e-01, -4.5593e-01,  ..., -1.0481e-01,
            8.5481e-02,  7.1793e-01],
          [ 5.7261e-02, -6.9251e-02,  3.9565e-02,  ...,  2.5248e-01,
           -1.9419e+00,  5.5930e-01],
          ...,
          [-1.5162e-03,  2.8621e-01, -7.2071e-01,  ...,  6.1248e-02,
           -1.9444e+00, -6.6124e-01],
          [-3.6945e-01,  3.0401e+00, -6.3739e-01,  ...,  1.8436e-01,
            1.5323e+00, -5.3352e-01],
          [-5.5433e-01, -3.1116e-02,  5.4013e-01,  ...,  5.9152e-01,
           -1.0132e+00,  6.1384e-01]]],


        [[[ 1.2965e-01,  1.3096e+00,  3.6915e-01,  ..., -2.0078e+00,
            3.4972e-01, -4.2335e-01],
          [ 2.0076e+00, -1.7468e+00, -1.2186e+00,  ..., -5.8277e-01,
            1.1919e+00, -9.1723e-02],
          [ 1.3836e+00,  1.9490e+00, -4.7729e-01,  ..., -1.0994e+00,
            1.4091e+00,  1.1466e+00],
          ...,
          [-5.8263e-01, -7.8216e-01,  1.1504e+00,  ..., -3.1043e-01,
            9.6550e-01, -9.2619e-01],
          [-1.3108e+00, -2.5293e-01, -2.6482e+00,  ..., -1.4131e+00,
           -1.5926e-01, -1.9921e-01],
          [ 2.5779e-01, -5.2013e-02, -1.0685e+00,  ...,  4.5819e-01,
            1.2649e+00,  6.0522e-01]],

         [[ 6.3924e-01, -5.0893e-01,  1.0606e-01,  ...,  1.7064e+00,
           -3.8771e-01,  3.8586e-01],
          [-6.5282e-01, -9.8738e-01,  5.1304e-01,  ...,  1.9649e+00,
           -2.3927e+00,  1.1045e+00],
          [-2.3657e+00, -3.8980e-01, -1.1221e+00,  ..., -1.4921e+00,
           -1.0782e+00, -1.9335e+00],
          ...,
          [-1.1249e+00, -1.8451e-01,  4.9780e-01,  ..., -8.1966e-01,
            2.2664e+00,  1.1392e-01],
          [-1.2892e+00,  4.8184e-01, -3.8454e-01,  ..., -1.2354e+00,
            1.8297e+00, -6.6955e-01],
          [-2.8976e-01, -9.3745e-01,  6.4173e-01,  ...,  1.2368e+00,
            6.1141e-02, -5.4347e-01]]],


        [[[ 2.0635e+00,  1.0994e+00,  3.4510e-01,  ..., -1.6419e+00,
            4.0248e-01,  2.1366e-02],
          [-2.4243e+00, -8.1179e-01, -1.7934e-01,  ..., -2.4231e-02,
            8.5653e-01, -5.3723e-02],
          [-9.5607e-01, -1.0845e+00, -1.3411e+00,  ...,  1.3032e+00,
           -1.0382e+00,  6.3166e-01],
          ...,
          [ 1.5894e+00, -7.8773e-02,  1.7191e+00,  ..., -2.5782e-01,
            5.3953e-01, -3.0077e-01],
          [-2.4127e-02,  7.7181e-01, -1.0532e+00,  ...,  2.0050e+00,
           -7.1664e-01, -1.8274e-01],
          [ 2.4805e-01, -8.5974e-02, -3.3507e-01,  ...,  9.6218e-01,
            7.8577e-01, -2.6125e+00]],

         [[-2.8698e-01,  1.6732e-02,  6.0571e-01,  ..., -1.4503e+00,
            1.2810e+00,  1.1549e+00],
          [ 1.0013e+00, -8.3379e-01, -9.4739e-01,  ...,  1.1361e+00,
            1.6457e-02,  4.4326e-01],
          [-3.7767e-01,  7.0505e-01,  1.2113e+00,  ...,  1.5306e+00,
            8.4858e-01,  2.8516e-02],
          ...,
          [ 6.1873e-01, -1.4917e-01, -2.5838e+00,  ...,  1.2006e+00,
           -6.8593e-01, -3.0464e-01],
          [-3.8296e-01,  2.8548e-02, -4.0100e-01,  ...,  3.1070e-01,
            8.6181e-01, -1.4486e+00],
          [ 4.4140e-02,  1.3567e-01,  1.6720e+00,  ...,  3.1200e-01,
            6.9920e-01,  1.4817e+00]]],


        [[[ 1.1537e+00,  7.0223e-01, -2.1782e-01,  ...,  1.5074e+00,
           -1.2432e+00,  1.2568e+00],
          [ 2.4285e+00,  1.0048e+00,  7.1949e-01,  ...,  1.4238e+00,
            1.3440e+00, -1.0134e+00],
          [-8.4211e-01, -4.9647e-01, -5.1319e-01,  ..., -5.2952e-01,
           -4.0190e-01,  1.2195e+00],
          ...,
          [ 5.0503e-01,  1.0684e+00, -5.3354e-01,  ...,  1.1002e+00,
            5.0355e-01, -5.8492e-01],
          [-1.1682e+00,  5.2944e-01, -4.8021e-01,  ..., -2.5766e-01,
           -5.5713e-01,  4.3077e-01],
          [-7.4735e-01,  2.0542e-02,  3.5177e-01,  ...,  1.9935e-01,
            2.6011e-01,  3.1902e-02]],

         [[ 6.7015e-01, -2.4892e-02, -1.5708e-01,  ...,  1.3591e+00,
           -3.1124e-01, -1.0123e+00],
          [ 5.6744e-01,  1.2414e+00,  1.9097e-02,  ...,  1.0245e+00,
            9.2369e-01, -4.4010e-01],
          [-7.9595e-02, -8.5627e-01, -1.3679e+00,  ...,  1.6957e+00,
           -4.5953e-01, -1.5001e+00],
          ...,
          [-1.0271e+00, -3.6759e-01,  3.4710e-01,  ...,  1.0110e+00,
           -6.3812e-01,  2.3320e-01],
          [ 3.8755e-01, -1.0608e-01, -1.2012e+00,  ..., -2.5651e-01,
           -9.5311e-01,  3.6949e-01],
          [-5.0889e-01, -6.5323e-01,  5.6191e-01,  ..., -1.1658e+00,
           -1.3917e+00, -8.2811e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4321,  1.6865,  0.9092,  ...,  0.4402, -0.0983,  1.8714],
          [ 2.0090,  0.8634,  0.4678,  ...,  0.1429,  0.4705, -0.6660],
          [-0.6647,  0.5348,  0.3038,  ..., -0.4448,  0.7991,  0.9672],
          ...,
          [ 0.1413,  0.1651, -1.3680,  ...,  2.0455,  1.4194,  0.5937],
          [ 1.6362, -0.4859,  1.1639,  ...,  0.7332, -1.6381,  0.8508],
          [-0.6204,  0.3874,  1.1862,  ..., -0.0907,  1.1971,  0.8243]],

         [[ 1.0868, -0.0747, -0.7603,  ...,  0.4047,  0.2159, -2.4298],
          [-0.6282, -1.1517, -0.1364,  ..., -0.9613, -0.3483,  0.3427],
          [-0.2515,  0.3308,  1.8297,  ..., -1.2105, -1.3657, -0.9535],
          ...,
          [-2.9031,  1.7620, -0.2917,  ...,  1.1795, -0.6562, -0.8642],
          [ 0.3639, -1.1368,  0.8391,  ...,  0.0144,  1.0608,  0.8199],
          [ 1.2736, -0.2931,  0.2068,  ...,  0.8906, -0.6183,  1.8343]]],


        [[[-0.3139,  1.6572,  1.0814,  ..., -2.0812, -0.6385,  0.3536],
          [-0.0213, -0.4093,  1.1436,  ..., -0.0584,  0.1747,  1.1845],
          [-1.1590, -1.1212,  0.0322,  ...,  0.2347,  1.4157,  0.5393],
          ...,
          [ 0.2992,  1.6985, -1.1493,  ...,  0.7581,  1.5866, -0.2319],
          [ 0.6791, -0.2198, -0.5373,  ..., -1.5183, -0.0977, -0.5288],
          [-0.7829,  0.6231, -0.5612,  ..., -0.5431,  2.4323, -0.5167]],

         [[ 0.0122, -0.9111,  0.2954,  ..., -0.1304,  0.8166,  2.1670],
          [-1.0591,  0.1683,  0.0379,  ..., -1.5712,  0.4105,  1.2762],
          [-0.4737,  0.3290, -0.1091,  ...,  0.5548, -0.0104,  1.7589],
          ...,
          [ 0.7114, -2.4150, -1.1608,  ...,  0.2958,  0.7037,  0.3657],
          [-1.8398,  0.7043,  0.8086,  ..., -0.5946, -0.9589, -0.1076],
          [-0.6834, -0.1950,  0.2509,  ...,  0.8275, -0.4585,  0.0053]]],


        [[[ 1.3745,  0.2370,  0.6335,  ..., -1.0182,  2.0172, -0.4835],
          [-1.1273,  1.0998, -0.7379,  ..., -0.3690,  0.2956,  2.9221],
          [-0.5200,  0.2841,  1.1773,  ..., -1.8045, -1.7776,  0.0218],
          ...,
          [ 0.3981, -0.3885, -0.8295,  ..., -0.3924, -0.4245, -0.8594],
          [-1.2100, -0.2920,  0.8087,  ...,  0.1144,  1.1694, -1.3872],
          [ 1.2174, -1.0087,  0.9467,  ...,  0.1423,  0.7111, -0.7253]],

         [[ 1.4325, -0.7954, -0.7777,  ...,  2.1483,  0.8944,  0.6992],
          [-1.0055,  0.3508,  1.5149,  ..., -0.9455, -1.6939, -0.5775],
          [-0.3958, -0.6460, -0.9720,  ..., -0.6713,  0.1545, -0.9092],
          ...,
          [ 0.4608, -0.5844, -0.8758,  ...,  1.2101,  0.4702,  0.4047],
          [-1.6746,  0.0534,  0.1566,  ...,  0.0634,  0.4574, -1.1940],
          [-1.5883, -1.6149,  0.7993,  ..., -1.2049, -0.0613, -0.2688]]],


        [[[-0.9206,  0.4641, -0.2287,  ..., -0.2250,  0.5830, -0.2346],
          [-0.9343,  0.3424,  0.1331,  ..., -0.6203,  0.4796,  1.2235],
          [ 1.8959, -0.3383,  1.9659,  ..., -0.1797, -0.6323, -0.6785],
          ...,
          [ 0.0792, -0.5972, -1.1164,  ...,  0.4372,  0.0752, -0.3047],
          [ 1.0494, -2.0614,  1.3689,  ...,  1.5738,  1.4488, -0.0091],
          [-0.8363, -1.0499, -0.8127,  ..., -0.8033, -0.5369,  1.1395]],

         [[-0.1722, -0.5664,  0.9020,  ...,  0.6959, -0.7502,  0.4069],
          [ 0.0987, -0.1199,  0.9595,  ...,  0.0091,  1.1635, -0.2009],
          [ 0.3924, -0.5491, -2.0849,  ..., -0.0330, -0.6121, -0.5137],
          ...,
          [-0.3146,  0.4761, -0.4125,  ...,  0.1710, -1.8876,  0.6798],
          [ 0.9289, -1.4197, -2.4576,  ..., -2.5110,  0.6770, -0.6684],
          [-0.1980, -0.1966,  0.4724,  ...,  0.9996, -0.5647,  0.4850]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8059, -0.8646,  0.8699,  ...,  1.5812, -0.5697,  0.6728],
          [ 0.5653, -1.1809,  0.9393,  ...,  0.5074,  1.1136,  1.4990],
          [-0.9566,  1.4351,  0.7367,  ...,  0.1216,  0.5502, -0.1270],
          ...,
          [ 0.1732,  1.7924, -0.6365,  ...,  0.2467,  0.7421,  0.3810],
          [-0.0893, -1.8524,  0.5436,  ...,  0.5270, -0.1212, -1.3100],
          [ 1.3561, -0.6943,  0.1382,  ...,  0.2472,  1.2582, -0.8530]],

         [[ 1.6300,  0.4740, -0.0676,  ...,  0.3551,  0.6874, -0.3617],
          [ 2.2586, -0.7998, -0.4544,  ..., -0.1026,  0.0845,  0.7156],
          [ 0.0545, -0.0674,  0.0414,  ...,  0.2545, -1.9435,  0.5571],
          ...,
          [-0.0036,  0.2868, -0.7198,  ...,  0.0625, -1.9448, -0.6633],
          [-0.3674,  3.0379, -0.6384,  ...,  0.1817,  1.5354, -0.5310],
          [-0.5527, -0.0333,  0.5386,  ...,  0.5892, -1.0110,  0.6158]]],


        [[[ 0.1261,  1.3128,  0.3728,  ..., -2.0118,  0.3470, -0.4203],
          [ 2.0085, -1.7462, -1.2193,  ..., -0.5845,  1.1928, -0.0914],
          [ 1.3810,  1.9523, -0.4747,  ..., -1.1026,  1.4070,  1.1498],
          ...,
          [-0.5811, -0.7832,  1.1491,  ..., -0.3091,  0.9685, -0.9288],
          [-1.3078, -0.2557, -2.6529,  ..., -1.4102, -0.1559, -0.2033],
          [ 0.2596, -0.0525, -1.0706,  ...,  0.4600,  1.2688,  0.6034]],

         [[ 0.6429, -0.5125,  0.1026,  ...,  1.7095, -0.3844,  0.3849],
          [-0.6519, -0.9896,  0.5109,  ...,  1.9660, -2.3911,  1.1050],
          [-2.3665, -0.3920, -1.1244,  ..., -1.4901, -1.0763, -1.9330],
          ...,
          [-1.1244, -0.1878,  0.4962,  ..., -0.8187,  2.2677,  0.1141],
          [-1.2923,  0.4813, -0.3826,  ..., -1.2347,  1.8277, -0.6665],
          [-0.2932, -0.9390,  0.6441,  ...,  1.2358,  0.0603, -0.5400]]],


        [[[ 2.0632,  1.1033,  0.3491,  ..., -1.6465,  0.4013,  0.0254],
          [-2.4269, -0.8127, -0.1784,  ..., -0.0261,  0.8558, -0.0524],
          [-0.9593, -1.0858, -1.3402,  ...,  1.3020, -1.0395,  0.6344],
          ...,
          [ 1.5906, -0.0796,  1.7195,  ..., -0.2571,  0.5398, -0.3017],
          [-0.0216,  0.7689, -1.0561,  ...,  2.0079, -0.7164, -0.1868],
          [ 0.2504, -0.0890, -0.3370,  ...,  0.9644,  0.7857, -2.6153]],

         [[-0.2851,  0.0144,  0.6041,  ..., -1.4501,  1.2851,  1.1527],
          [ 1.0034, -0.8352, -0.9495,  ...,  1.1386,  0.0171,  0.4416],
          [-0.3774,  0.7042,  1.2122,  ...,  1.5327,  0.8500,  0.0267],
          ...,
          [ 0.6192, -0.1503, -2.5856,  ...,  1.2027, -0.6867, -0.3056],
          [-0.3871,  0.0283, -0.3980,  ...,  0.3075,  0.8588, -1.4462],
          [ 0.0413,  0.1362,  1.6745,  ...,  0.3094,  0.6966,  1.4845]]],


        [[[ 1.1530,  0.7056, -0.2149,  ...,  1.5069, -1.2475,  1.2607],
          [ 2.4290,  1.0068,  0.7210,  ...,  1.4245,  1.3441, -1.0133],
          [-0.8454, -0.4944, -0.5107,  ..., -0.5329, -0.4048,  1.2227],
          ...,
          [ 0.5064,  1.0686, -0.5348,  ...,  1.1009,  0.5042, -0.5864],
          [-1.1668,  0.5281, -0.4834,  ..., -0.2551, -0.5546,  0.4291],
          [-0.7465,  0.0197,  0.3495,  ...,  0.2014,  0.2614,  0.0315]],

         [[ 0.6738, -0.0280, -0.1570,  ...,  1.3635, -0.3081, -1.0137],
          [ 0.5690,  1.2406,  0.0192,  ...,  1.0269,  0.9259, -0.4403],
          [-0.0793, -0.8578, -1.3680,  ...,  1.6982, -0.4593, -1.5011],
          ...,
          [-1.0283, -0.3685,  0.3473,  ...,  1.0127, -0.6382,  0.2334],
          [ 0.3856, -0.1043, -1.1996,  ..., -0.2601, -0.9557,  0.3718],
          [-0.5113, -0.6513,  0.5623,  ..., -1.1678, -1.3939, -0.8279]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7810, -0.3488, -0.0437,  ..., -0.6008, -0.2825, -0.5533],
         [ 0.8859,  0.0295,  1.1492,  ...,  0.5914, -0.8693, -1.0391],
         [ 0.8374,  0.3236,  0.3545,  ...,  1.3799, -0.0482, -0.5643],
         ...,
         [-1.2950,  2.0348,  0.1303,  ...,  0.1238, -0.3483,  0.2589],
         [-0.5775,  0.7550, -0.2827,  ..., -1.5141, -0.6511,  1.3680],
         [-0.0357,  0.6299,  2.1711,  ...,  0.6477,  0.2553, -0.4302]],

        [[-1.0804,  1.2592, -0.3828,  ...,  0.5516, -0.3183,  0.7370],
         [ 0.4998,  1.5077, -1.0396,  ...,  0.0707, -1.0299, -1.0103],
         [ 0.1692,  0.5570, -0.2895,  ...,  0.9295,  1.2547,  0.9415],
         ...,
         [ 0.3234, -0.8798, -0.1315,  ...,  0.2771, -0.0361,  0.5329],
         [ 0.3666, -0.6834, -0.4360,  ...,  0.0060, -0.0262, -0.1814],
         [ 0.1107,  0.9640,  0.3870,  ...,  0.7160,  1.5633, -1.5301]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4321,  1.6865,  0.9092,  ...,  0.4402, -0.0983,  1.8714],
         [ 2.0090,  0.8634,  0.4678,  ...,  0.1429,  0.4705, -0.6660],
         [-0.6647,  0.5348,  0.3038,  ..., -0.4448,  0.7991,  0.9672],
         ...,
         [ 0.1413,  0.1651, -1.3680,  ...,  2.0455,  1.4194,  0.5937],
         [ 1.6362, -0.4859,  1.1639,  ...,  0.7332, -1.6381,  0.8508],
         [-0.6204,  0.3874,  1.1862,  ..., -0.0907,  1.1971,  0.8243]],

        [[ 1.0868, -0.0747, -0.7603,  ...,  0.4047,  0.2159, -2.4298],
         [-0.6282, -1.1517, -0.1364,  ..., -0.9613, -0.3483,  0.3427],
         [-0.2515,  0.3308,  1.8297,  ..., -1.2105, -1.3657, -0.9535],
         ...,
         [-2.9031,  1.7620, -0.2917,  ...,  1.1795, -0.6562, -0.8642],
         [ 0.3639, -1.1368,  0.8391,  ...,  0.0144,  1.0608,  0.8199],
         [ 1.2736, -0.2931,  0.2068,  ...,  0.8906, -0.6183,  1.8343]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 176.704, Val Loss : 251.776
======> Trajectory Loss : 32.580, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.393, BelowGroundPenalize Loss : 4.775
===> [Minibatch 9/129].........tensor([[[-0.7810, -0.3488, -0.0437,  ..., -0.6008, -0.2825, -0.5533],
         [ 0.8859,  0.0295,  1.1492,  ...,  0.5914, -0.8693, -1.0391],
         [ 0.8374,  0.3236,  0.3545,  ...,  1.3799, -0.0482, -0.5643],
         ...,
         [-1.2950,  2.0348,  0.1303,  ...,  0.1238, -0.3483,  0.2589],
         [-0.5775,  0.7550, -0.2827,  ..., -1.5141, -0.6511,  1.3680],
         [-0.0357,  0.6299,  2.1711,  ...,  0.6477,  0.2553, -0.4302]],

        [[-1.0804,  1.2592, -0.3828,  ...,  0.5516, -0.3183,  0.7370],
         [ 0.4998,  1.5077, -1.0396,  ...,  0.0707, -1.0299, -1.0103],
         [ 0.1692,  0.5570, -0.2895,  ...,  0.9295,  1.2547,  0.9415],
         ...,
         [ 0.3234, -0.8798, -0.1315,  ...,  0.2771, -0.0361,  0.5329],
         [ 0.3666, -0.6834, -0.4360,  ...,  0.0060, -0.0262, -0.1814],
         [ 0.1107,  0.9640,  0.3870,  ...,  0.7160,  1.5633, -1.5301]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4321,  1.6865,  0.9092,  ...,  0.4402, -0.0983,  1.8714],
         [ 2.0090,  0.8634,  0.4678,  ...,  0.1429,  0.4705, -0.6660],
         [-0.6647,  0.5348,  0.3038,  ..., -0.4448,  0.7991,  0.9672],
         ...,
         [ 0.1413,  0.1651, -1.3680,  ...,  2.0455,  1.4194,  0.5937],
         [ 1.6362, -0.4859,  1.1639,  ...,  0.7332, -1.6381,  0.8508],
         [-0.6204,  0.3874,  1.1862,  ..., -0.0907,  1.1971,  0.8243]],

        [[ 1.0868, -0.0747, -0.7603,  ...,  0.4047,  0.2159, -2.4298],
         [-0.6282, -1.1517, -0.1364,  ..., -0.9613, -0.3483,  0.3427],
         [-0.2515,  0.3308,  1.8297,  ..., -1.2105, -1.3657, -0.9535],
         ...,
         [-2.9031,  1.7620, -0.2917,  ...,  1.1795, -0.6562, -0.8642],
         [ 0.3639, -1.1368,  0.8391,  ...,  0.0144,  1.0608,  0.8199],
         [ 1.2736, -0.2931,  0.2068,  ...,  0.8906, -0.6183,  1.8343]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4321,  1.6865,  0.9092,  ...,  0.4402, -0.0983,  1.8714],
          [ 2.0090,  0.8634,  0.4678,  ...,  0.1429,  0.4705, -0.6660],
          [-0.6647,  0.5348,  0.3038,  ..., -0.4448,  0.7991,  0.9672],
          ...,
          [ 0.1413,  0.1651, -1.3680,  ...,  2.0455,  1.4194,  0.5937],
          [ 1.6362, -0.4859,  1.1639,  ...,  0.7332, -1.6381,  0.8508],
          [-0.6204,  0.3874,  1.1862,  ..., -0.0907,  1.1971,  0.8243]],

         [[ 1.0868, -0.0747, -0.7603,  ...,  0.4047,  0.2159, -2.4298],
          [-0.6282, -1.1517, -0.1364,  ..., -0.9613, -0.3483,  0.3427],
          [-0.2515,  0.3308,  1.8297,  ..., -1.2105, -1.3657, -0.9535],
          ...,
          [-2.9031,  1.7620, -0.2917,  ...,  1.1795, -0.6562, -0.8642],
          [ 0.3639, -1.1368,  0.8391,  ...,  0.0144,  1.0608,  0.8199],
          [ 1.2736, -0.2931,  0.2068,  ...,  0.8906, -0.6183,  1.8343]]],


        [[[-0.3139,  1.6572,  1.0814,  ..., -2.0812, -0.6385,  0.3536],
          [-0.0213, -0.4093,  1.1436,  ..., -0.0584,  0.1747,  1.1845],
          [-1.1590, -1.1212,  0.0322,  ...,  0.2347,  1.4157,  0.5393],
          ...,
          [ 0.2992,  1.6985, -1.1493,  ...,  0.7581,  1.5866, -0.2319],
          [ 0.6791, -0.2198, -0.5373,  ..., -1.5183, -0.0977, -0.5288],
          [-0.7829,  0.6231, -0.5612,  ..., -0.5431,  2.4323, -0.5167]],

         [[ 0.0122, -0.9111,  0.2954,  ..., -0.1304,  0.8166,  2.1670],
          [-1.0591,  0.1683,  0.0379,  ..., -1.5712,  0.4105,  1.2762],
          [-0.4737,  0.3290, -0.1091,  ...,  0.5548, -0.0104,  1.7589],
          ...,
          [ 0.7114, -2.4150, -1.1608,  ...,  0.2958,  0.7037,  0.3657],
          [-1.8398,  0.7043,  0.8086,  ..., -0.5946, -0.9589, -0.1076],
          [-0.6834, -0.1950,  0.2509,  ...,  0.8275, -0.4585,  0.0053]]],


        [[[ 1.3745,  0.2370,  0.6335,  ..., -1.0182,  2.0172, -0.4835],
          [-1.1273,  1.0998, -0.7379,  ..., -0.3690,  0.2956,  2.9221],
          [-0.5200,  0.2841,  1.1773,  ..., -1.8045, -1.7776,  0.0218],
          ...,
          [ 0.3981, -0.3885, -0.8295,  ..., -0.3924, -0.4245, -0.8594],
          [-1.2100, -0.2920,  0.8087,  ...,  0.1144,  1.1694, -1.3872],
          [ 1.2174, -1.0087,  0.9467,  ...,  0.1423,  0.7111, -0.7253]],

         [[ 1.4325, -0.7954, -0.7777,  ...,  2.1483,  0.8944,  0.6992],
          [-1.0055,  0.3508,  1.5149,  ..., -0.9455, -1.6939, -0.5775],
          [-0.3958, -0.6460, -0.9720,  ..., -0.6713,  0.1545, -0.9092],
          ...,
          [ 0.4608, -0.5844, -0.8758,  ...,  1.2101,  0.4702,  0.4047],
          [-1.6746,  0.0534,  0.1566,  ...,  0.0634,  0.4574, -1.1940],
          [-1.5883, -1.6149,  0.7993,  ..., -1.2049, -0.0613, -0.2688]]],


        [[[-0.9206,  0.4641, -0.2287,  ..., -0.2250,  0.5830, -0.2346],
          [-0.9343,  0.3424,  0.1331,  ..., -0.6203,  0.4796,  1.2235],
          [ 1.8959, -0.3383,  1.9659,  ..., -0.1797, -0.6323, -0.6785],
          ...,
          [ 0.0792, -0.5972, -1.1164,  ...,  0.4372,  0.0752, -0.3047],
          [ 1.0494, -2.0614,  1.3689,  ...,  1.5738,  1.4488, -0.0091],
          [-0.8363, -1.0499, -0.8127,  ..., -0.8033, -0.5369,  1.1395]],

         [[-0.1722, -0.5664,  0.9020,  ...,  0.6959, -0.7502,  0.4069],
          [ 0.0987, -0.1199,  0.9595,  ...,  0.0091,  1.1635, -0.2009],
          [ 0.3924, -0.5491, -2.0849,  ..., -0.0330, -0.6121, -0.5137],
          ...,
          [-0.3146,  0.4761, -0.4125,  ...,  0.1710, -1.8876,  0.6798],
          [ 0.9289, -1.4197, -2.4576,  ..., -2.5110,  0.6770, -0.6684],
          [-0.1980, -0.1966,  0.4724,  ...,  0.9996, -0.5647,  0.4850]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8059, -0.8646,  0.8699,  ...,  1.5812, -0.5697,  0.6728],
          [ 0.5653, -1.1809,  0.9393,  ...,  0.5074,  1.1136,  1.4990],
          [-0.9566,  1.4351,  0.7367,  ...,  0.1216,  0.5502, -0.1270],
          ...,
          [ 0.1732,  1.7924, -0.6365,  ...,  0.2467,  0.7421,  0.3810],
          [-0.0893, -1.8524,  0.5436,  ...,  0.5270, -0.1212, -1.3100],
          [ 1.3561, -0.6943,  0.1382,  ...,  0.2472,  1.2582, -0.8530]],

         [[ 1.6300,  0.4740, -0.0676,  ...,  0.3551,  0.6874, -0.3617],
          [ 2.2586, -0.7998, -0.4544,  ..., -0.1026,  0.0845,  0.7156],
          [ 0.0545, -0.0674,  0.0414,  ...,  0.2545, -1.9435,  0.5571],
          ...,
          [-0.0036,  0.2868, -0.7198,  ...,  0.0625, -1.9448, -0.6633],
          [-0.3674,  3.0379, -0.6384,  ...,  0.1817,  1.5354, -0.5310],
          [-0.5527, -0.0333,  0.5386,  ...,  0.5892, -1.0110,  0.6158]]],


        [[[ 0.1261,  1.3128,  0.3728,  ..., -2.0118,  0.3470, -0.4203],
          [ 2.0085, -1.7462, -1.2193,  ..., -0.5845,  1.1928, -0.0914],
          [ 1.3810,  1.9523, -0.4747,  ..., -1.1026,  1.4070,  1.1498],
          ...,
          [-0.5811, -0.7832,  1.1491,  ..., -0.3091,  0.9685, -0.9288],
          [-1.3078, -0.2557, -2.6529,  ..., -1.4102, -0.1559, -0.2033],
          [ 0.2596, -0.0525, -1.0706,  ...,  0.4600,  1.2688,  0.6034]],

         [[ 0.6429, -0.5125,  0.1026,  ...,  1.7095, -0.3844,  0.3849],
          [-0.6519, -0.9896,  0.5109,  ...,  1.9660, -2.3911,  1.1050],
          [-2.3665, -0.3920, -1.1244,  ..., -1.4901, -1.0763, -1.9330],
          ...,
          [-1.1244, -0.1878,  0.4962,  ..., -0.8187,  2.2677,  0.1141],
          [-1.2923,  0.4813, -0.3826,  ..., -1.2347,  1.8277, -0.6665],
          [-0.2932, -0.9390,  0.6441,  ...,  1.2358,  0.0603, -0.5400]]],


        [[[ 2.0632,  1.1033,  0.3491,  ..., -1.6465,  0.4013,  0.0254],
          [-2.4269, -0.8127, -0.1784,  ..., -0.0261,  0.8558, -0.0524],
          [-0.9593, -1.0858, -1.3402,  ...,  1.3020, -1.0395,  0.6344],
          ...,
          [ 1.5906, -0.0796,  1.7195,  ..., -0.2571,  0.5398, -0.3017],
          [-0.0216,  0.7689, -1.0561,  ...,  2.0079, -0.7164, -0.1868],
          [ 0.2504, -0.0890, -0.3370,  ...,  0.9644,  0.7857, -2.6153]],

         [[-0.2851,  0.0144,  0.6041,  ..., -1.4501,  1.2851,  1.1527],
          [ 1.0034, -0.8352, -0.9495,  ...,  1.1386,  0.0171,  0.4416],
          [-0.3774,  0.7042,  1.2122,  ...,  1.5327,  0.8500,  0.0267],
          ...,
          [ 0.6192, -0.1503, -2.5856,  ...,  1.2027, -0.6867, -0.3056],
          [-0.3871,  0.0283, -0.3980,  ...,  0.3075,  0.8588, -1.4462],
          [ 0.0413,  0.1362,  1.6745,  ...,  0.3094,  0.6966,  1.4845]]],


        [[[ 1.1530,  0.7056, -0.2149,  ...,  1.5069, -1.2475,  1.2607],
          [ 2.4290,  1.0068,  0.7210,  ...,  1.4245,  1.3441, -1.0133],
          [-0.8454, -0.4944, -0.5107,  ..., -0.5329, -0.4048,  1.2227],
          ...,
          [ 0.5064,  1.0686, -0.5348,  ...,  1.1009,  0.5042, -0.5864],
          [-1.1668,  0.5281, -0.4834,  ..., -0.2551, -0.5546,  0.4291],
          [-0.7465,  0.0197,  0.3495,  ...,  0.2014,  0.2614,  0.0315]],

         [[ 0.6738, -0.0280, -0.1570,  ...,  1.3635, -0.3081, -1.0137],
          [ 0.5690,  1.2406,  0.0192,  ...,  1.0269,  0.9259, -0.4403],
          [-0.0793, -0.8578, -1.3680,  ...,  1.6982, -0.4593, -1.5011],
          ...,
          [-1.0283, -0.3685,  0.3473,  ...,  1.0127, -0.6382,  0.2334],
          [ 0.3856, -0.1043, -1.1996,  ..., -0.2601, -0.9557,  0.3718],
          [-0.5113, -0.6513,  0.5623,  ..., -1.1678, -1.3939, -0.8279]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4281,  1.6904,  0.9050,  ...,  0.4445, -0.0939,  1.8757],
          [ 2.0083,  0.8657,  0.4656,  ...,  0.1444,  0.4723, -0.6640],
          [-0.6670,  0.5374,  0.3008,  ..., -0.4425,  0.8012,  0.9665],
          ...,
          [ 0.1380,  0.1666, -1.3709,  ...,  2.0477,  1.4226,  0.5933],
          [ 1.6332, -0.4842,  1.1640,  ...,  0.7309, -1.6405,  0.8502],
          [-0.6228,  0.3877,  1.1869,  ..., -0.0912,  1.1954,  0.8232]],

         [[ 1.0825, -0.0704, -0.7559,  ...,  0.4091,  0.2117, -2.4341],
          [-0.6309, -1.1493, -0.1332,  ..., -0.9589, -0.3511,  0.3401],
          [-0.2538,  0.3331,  1.8321,  ..., -1.2082, -1.3681, -0.9557],
          ...,
          [-2.9075,  1.7661, -0.2874,  ...,  1.1842, -0.6605, -0.8687],
          [ 0.3641, -1.1373,  0.8402,  ...,  0.0149,  1.0614,  0.8203],
          [ 1.2742, -0.2946,  0.2099,  ...,  0.8896, -0.6183,  1.8313]]],


        [[[-0.3180,  1.6618,  1.0855,  ..., -2.0861, -0.6427,  0.3577],
          [-0.0220, -0.4088,  1.1448,  ..., -0.0600,  0.1738,  1.1857],
          [-1.1615, -1.1187,  0.0347,  ...,  0.2319,  1.4131,  0.5419],
          ...,
          [ 0.2978,  1.6999, -1.1486,  ...,  0.7557,  1.5848, -0.2312],
          [ 0.6817, -0.2223, -0.5396,  ..., -1.5169, -0.0960, -0.5312],
          [-0.7821,  0.6222, -0.5624,  ..., -0.5433,  2.4331, -0.5180]],

         [[ 0.0166, -0.9134,  0.2922,  ..., -0.1342,  0.8201,  2.1709],
          [-1.0578,  0.1662,  0.0356,  ..., -1.5733,  0.4121,  1.2785],
          [-0.4719,  0.3256, -0.1114,  ...,  0.5532, -0.0088,  1.7607],
          ...,
          [ 0.7156, -2.4134, -1.1647,  ...,  0.2920,  0.7047,  0.3690],
          [-1.8401,  0.7011,  0.8038,  ..., -0.5935, -0.9603, -0.1060],
          [-0.6851, -0.1984,  0.2493,  ...,  0.8294, -0.4595,  0.0083]]],


        [[[ 1.3780,  0.2392,  0.6369,  ..., -1.0160,  2.0186, -0.4794],
          [-1.1263,  1.1009, -0.7388,  ..., -0.3695,  0.2957,  2.9235],
          [-0.5185,  0.2859,  1.1796,  ..., -1.8064, -1.7755,  0.0241],
          ...,
          [ 0.3981, -0.3897, -0.8292,  ..., -0.3930, -0.4268, -0.8577],
          [-1.2077, -0.2948,  0.8068,  ...,  0.1126,  1.1663, -1.3896],
          [ 1.2157, -1.0107,  0.9464,  ...,  0.1426,  0.7082, -0.7262]],

         [[ 1.4362, -0.7988, -0.7817,  ...,  2.1522,  0.8980,  0.6954],
          [-1.0044,  0.3512,  1.5142,  ..., -0.9447, -1.6936, -0.5785],
          [-0.3937, -0.6457, -0.9735,  ..., -0.6709,  0.1557, -0.9108],
          ...,
          [ 0.4653, -0.5853, -0.8792,  ...,  1.2133,  0.4729,  0.4017],
          [-1.6769,  0.0510,  0.1579,  ...,  0.0621,  0.4554, -1.1922],
          [-1.5886, -1.6137,  0.8017,  ..., -1.2081, -0.0638, -0.2661]]],


        [[[-0.9216,  0.4610, -0.2262,  ..., -0.2247,  0.5814, -0.2327],
          [-0.9361,  0.3421,  0.1341,  ..., -0.6207,  0.4787,  1.2239],
          [ 1.8936, -0.3390,  1.9682,  ..., -0.1815, -0.6344, -0.6773],
          ...,
          [ 0.0774, -0.5987, -1.1164,  ...,  0.4364,  0.0753, -0.3049],
          [ 1.0513, -2.0629,  1.3664,  ...,  1.5762,  1.4521, -0.0073],
          [-0.8357, -1.0524, -0.8142,  ..., -0.8015, -0.5346,  1.1392]],

         [[-0.1692, -0.5694,  0.9045,  ...,  0.6988, -0.7485,  0.4040],
          [ 0.1000, -0.1216,  0.9613,  ...,  0.0104,  1.1636, -0.2014],
          [ 0.3925, -0.5485, -2.0856,  ..., -0.0325, -0.6123, -0.5154],
          ...,
          [-0.3150,  0.4752, -0.4145,  ...,  0.1717, -1.8869,  0.6784],
          [ 0.9273, -1.4189, -2.4575,  ..., -2.5121,  0.6767, -0.6670],
          [-0.2004, -0.1949,  0.4705,  ...,  0.9975, -0.5632,  0.4842]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8099, -0.8611,  0.8665,  ...,  1.5843, -0.5672,  0.6772],
          [ 0.5629, -1.1788,  0.9381,  ...,  0.5057,  1.1131,  1.5015],
          [-0.9595,  1.4374,  0.7333,  ...,  0.1213,  0.5527, -0.1237],
          ...,
          [ 0.1696,  1.7944, -0.6368,  ...,  0.2470,  0.7429,  0.3848],
          [-0.0886, -1.8547,  0.5412,  ...,  0.5242, -0.1223, -1.3095],
          [ 1.3538, -0.6937,  0.1384,  ...,  0.2443,  1.2578, -0.8523]],

         [[ 1.6296,  0.4770, -0.0645,  ...,  0.3593,  0.6846, -0.3659],
          [ 2.2575, -0.7984, -0.4530,  ..., -0.1005,  0.0836,  0.7134],
          [ 0.0520, -0.0658,  0.0429,  ...,  0.2561, -1.9447,  0.5552],
          ...,
          [-0.0071,  0.2890, -0.7175,  ...,  0.0664, -1.9470, -0.6678],
          [-0.3658,  3.0366, -0.6393,  ...,  0.1809,  1.5378, -0.5303],
          [-0.5514, -0.0350,  0.5373,  ...,  0.5876, -1.0092,  0.6171]]],


        [[[ 0.1224,  1.3161,  0.3765,  ..., -2.0159,  0.3441, -0.4172],
          [ 2.0093, -1.7456, -1.2199,  ..., -0.5861,  1.1935, -0.0909],
          [ 1.3789,  1.9549, -0.4727,  ..., -1.1049,  1.4054,  1.1520],
          ...,
          [-0.5832, -0.7819,  1.1516,  ..., -0.3108,  0.9698, -0.9293],
          [-1.3053, -0.2580, -2.6570,  ..., -1.4078, -0.1530, -0.2069],
          [ 0.2610, -0.0526, -1.0723,  ...,  0.4613,  1.2721,  0.6020]],

         [[ 0.6465, -0.5159,  0.0992,  ...,  1.7125, -0.3812,  0.3839],
          [-0.6509, -0.9916,  0.5090,  ...,  1.9669, -2.3897,  1.1054],
          [-2.3673, -0.3938, -1.1263,  ..., -1.4885, -1.0748, -1.9324],
          ...,
          [-1.1215, -0.1926,  0.4927,  ..., -0.8173,  2.2701,  0.1130],
          [-1.2941,  0.4801, -0.3825,  ..., -1.2337,  1.8269, -0.6641],
          [-0.2958, -0.9407,  0.6458,  ...,  1.2352,  0.0600, -0.5371]]],


        [[[ 2.0628,  1.1072,  0.3531,  ..., -1.6510,  0.4001,  0.0294],
          [-2.4293, -0.8135, -0.1775,  ..., -0.0279,  0.8551, -0.0511],
          [-0.9615, -1.0871, -1.3395,  ...,  1.3012, -1.0406,  0.6363],
          ...,
          [ 1.5911, -0.0785,  1.7224,  ..., -0.2597,  0.5396, -0.2999],
          [-0.0196,  0.7666, -1.0586,  ...,  2.0103, -0.7163, -0.1902],
          [ 0.2523, -0.0915, -0.3384,  ...,  0.9662,  0.7855, -2.6176]],

         [[-0.2830,  0.0122,  0.6024,  ..., -1.4497,  1.2891,  1.1505],
          [ 1.0054, -0.8364, -0.9515,  ...,  1.1409,  0.0177,  0.4401],
          [-0.3773,  0.7036,  1.2130,  ...,  1.5344,  0.8512,  0.0252],
          ...,
          [ 0.6223, -0.1524, -2.5895,  ...,  1.2069, -0.6858, -0.3082],
          [-0.3896,  0.0273, -0.3966,  ...,  0.3061,  0.8579, -1.4455],
          [ 0.0392,  0.1366,  1.6765,  ...,  0.3076,  0.6948,  1.4868]]],


        [[[ 1.1522,  0.7090, -0.2119,  ...,  1.5063, -1.2518,  1.2646],
          [ 2.4295,  1.0088,  0.7225,  ...,  1.4251,  1.3442, -1.0133],
          [-0.8477, -0.4929, -0.5090,  ..., -0.5352, -0.4069,  1.2253],
          ...,
          [ 0.5059,  1.0705, -0.5341,  ...,  1.1004,  0.5032, -0.5858],
          [-1.1659,  0.5272, -0.4861,  ..., -0.2530, -0.5526,  0.4278],
          [-0.7461,  0.0192,  0.3478,  ...,  0.2029,  0.2623,  0.0312]],

         [[ 0.6776, -0.0310, -0.1570,  ...,  1.3678, -0.3050, -1.0149],
          [ 0.5706,  1.2399,  0.0193,  ...,  1.0291,  0.9281, -0.4404],
          [-0.0791, -0.8589, -1.3680,  ...,  1.7002, -0.4592, -1.5019],
          ...,
          [-1.0285, -0.3715,  0.3475,  ...,  1.0168, -0.6367,  0.2333],
          [ 0.3862, -0.1045, -1.1983,  ..., -0.2622, -0.9573,  0.3736],
          [-0.5131, -0.6502,  0.5627,  ..., -1.1694, -1.3957, -0.8278]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7823, -0.3442, -0.0452,  ..., -0.5962, -0.2883, -0.5590],
         [ 0.8888,  0.0355,  1.1445,  ...,  0.5979, -0.8753, -1.0449],
         [ 0.8334,  0.3275,  0.3500,  ...,  1.3848, -0.0530, -0.5643],
         ...,
         [-1.2904,  2.0390,  0.1357,  ...,  0.1285, -0.3419,  0.2552],
         [-0.5733,  0.7585, -0.2760,  ..., -1.5102, -0.6509,  1.3644],
         [-0.0303,  0.6364,  2.1769,  ...,  0.6535,  0.2618, -0.4367]],

        [[-1.0844,  1.2620, -0.3802,  ...,  0.5490, -0.3230,  0.7430],
         [ 0.4986,  1.5093, -1.0419,  ...,  0.0660, -1.0355, -1.0128],
         [ 0.1654,  0.5598, -0.2935,  ...,  0.9331,  1.2571,  0.9460],
         ...,
         [ 0.3197, -0.8798, -0.1358,  ...,  0.2783, -0.0412,  0.5310],
         [ 0.3634, -0.6803, -0.4410,  ...,  0.0091, -0.0293, -0.1802],
         [ 0.1089,  0.9646,  0.3838,  ...,  0.7143,  1.5603, -1.5226]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4281,  1.6904,  0.9050,  ...,  0.4445, -0.0939,  1.8757],
         [ 2.0083,  0.8657,  0.4656,  ...,  0.1444,  0.4723, -0.6640],
         [-0.6670,  0.5374,  0.3008,  ..., -0.4425,  0.8012,  0.9665],
         ...,
         [ 0.1380,  0.1666, -1.3709,  ...,  2.0477,  1.4226,  0.5933],
         [ 1.6332, -0.4842,  1.1640,  ...,  0.7309, -1.6405,  0.8502],
         [-0.6228,  0.3877,  1.1869,  ..., -0.0912,  1.1954,  0.8232]],

        [[ 1.0825, -0.0704, -0.7559,  ...,  0.4091,  0.2117, -2.4341],
         [-0.6309, -1.1493, -0.1332,  ..., -0.9589, -0.3511,  0.3401],
         [-0.2538,  0.3331,  1.8321,  ..., -1.2082, -1.3681, -0.9557],
         ...,
         [-2.9075,  1.7661, -0.2874,  ...,  1.1842, -0.6605, -0.8687],
         [ 0.3641, -1.1373,  0.8402,  ...,  0.0149,  1.0614,  0.8203],
         [ 1.2742, -0.2946,  0.2099,  ...,  0.8896, -0.6183,  1.8313]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 169.069, Val Loss : 202.146
======> Trajectory Loss : 26.503, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.383, BelowGroundPenalize Loss : 4.236
===> [Minibatch 10/129].........tensor([[[-0.7823, -0.3442, -0.0452,  ..., -0.5962, -0.2883, -0.5590],
         [ 0.8888,  0.0355,  1.1445,  ...,  0.5979, -0.8753, -1.0449],
         [ 0.8334,  0.3275,  0.3500,  ...,  1.3848, -0.0530, -0.5643],
         ...,
         [-1.2904,  2.0390,  0.1357,  ...,  0.1285, -0.3419,  0.2552],
         [-0.5733,  0.7585, -0.2760,  ..., -1.5102, -0.6509,  1.3644],
         [-0.0303,  0.6364,  2.1769,  ...,  0.6535,  0.2618, -0.4367]],

        [[-1.0844,  1.2620, -0.3802,  ...,  0.5490, -0.3230,  0.7430],
         [ 0.4986,  1.5093, -1.0419,  ...,  0.0660, -1.0355, -1.0128],
         [ 0.1654,  0.5598, -0.2935,  ...,  0.9331,  1.2571,  0.9460],
         ...,
         [ 0.3197, -0.8798, -0.1358,  ...,  0.2783, -0.0412,  0.5310],
         [ 0.3634, -0.6803, -0.4410,  ...,  0.0091, -0.0293, -0.1802],
         [ 0.1089,  0.9646,  0.3838,  ...,  0.7143,  1.5603, -1.5226]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4281,  1.6904,  0.9050,  ...,  0.4445, -0.0939,  1.8757],
         [ 2.0083,  0.8657,  0.4656,  ...,  0.1444,  0.4723, -0.6640],
         [-0.6670,  0.5374,  0.3008,  ..., -0.4425,  0.8012,  0.9665],
         ...,
         [ 0.1380,  0.1666, -1.3709,  ...,  2.0477,  1.4226,  0.5933],
         [ 1.6332, -0.4842,  1.1640,  ...,  0.7309, -1.6405,  0.8502],
         [-0.6228,  0.3877,  1.1869,  ..., -0.0912,  1.1954,  0.8232]],

        [[ 1.0825, -0.0704, -0.7559,  ...,  0.4091,  0.2117, -2.4341],
         [-0.6309, -1.1493, -0.1332,  ..., -0.9589, -0.3511,  0.3401],
         [-0.2538,  0.3331,  1.8321,  ..., -1.2082, -1.3681, -0.9557],
         ...,
         [-2.9075,  1.7661, -0.2874,  ...,  1.1842, -0.6605, -0.8687],
         [ 0.3641, -1.1373,  0.8402,  ...,  0.0149,  1.0614,  0.8203],
         [ 1.2742, -0.2946,  0.2099,  ...,  0.8896, -0.6183,  1.8313]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4281,  1.6904,  0.9050,  ...,  0.4445, -0.0939,  1.8757],
          [ 2.0083,  0.8657,  0.4656,  ...,  0.1444,  0.4723, -0.6640],
          [-0.6670,  0.5374,  0.3008,  ..., -0.4425,  0.8012,  0.9665],
          ...,
          [ 0.1380,  0.1666, -1.3709,  ...,  2.0477,  1.4226,  0.5933],
          [ 1.6332, -0.4842,  1.1640,  ...,  0.7309, -1.6405,  0.8502],
          [-0.6228,  0.3877,  1.1869,  ..., -0.0912,  1.1954,  0.8232]],

         [[ 1.0825, -0.0704, -0.7559,  ...,  0.4091,  0.2117, -2.4341],
          [-0.6309, -1.1493, -0.1332,  ..., -0.9589, -0.3511,  0.3401],
          [-0.2538,  0.3331,  1.8321,  ..., -1.2082, -1.3681, -0.9557],
          ...,
          [-2.9075,  1.7661, -0.2874,  ...,  1.1842, -0.6605, -0.8687],
          [ 0.3641, -1.1373,  0.8402,  ...,  0.0149,  1.0614,  0.8203],
          [ 1.2742, -0.2946,  0.2099,  ...,  0.8896, -0.6183,  1.8313]]],


        [[[-0.3180,  1.6618,  1.0855,  ..., -2.0861, -0.6427,  0.3577],
          [-0.0220, -0.4088,  1.1448,  ..., -0.0600,  0.1738,  1.1857],
          [-1.1615, -1.1187,  0.0347,  ...,  0.2319,  1.4131,  0.5419],
          ...,
          [ 0.2978,  1.6999, -1.1486,  ...,  0.7557,  1.5848, -0.2312],
          [ 0.6817, -0.2223, -0.5396,  ..., -1.5169, -0.0960, -0.5312],
          [-0.7821,  0.6222, -0.5624,  ..., -0.5433,  2.4331, -0.5180]],

         [[ 0.0166, -0.9134,  0.2922,  ..., -0.1342,  0.8201,  2.1709],
          [-1.0578,  0.1662,  0.0356,  ..., -1.5733,  0.4121,  1.2785],
          [-0.4719,  0.3256, -0.1114,  ...,  0.5532, -0.0088,  1.7607],
          ...,
          [ 0.7156, -2.4134, -1.1647,  ...,  0.2920,  0.7047,  0.3690],
          [-1.8401,  0.7011,  0.8038,  ..., -0.5935, -0.9603, -0.1060],
          [-0.6851, -0.1984,  0.2493,  ...,  0.8294, -0.4595,  0.0083]]],


        [[[ 1.3780,  0.2392,  0.6369,  ..., -1.0160,  2.0186, -0.4794],
          [-1.1263,  1.1009, -0.7388,  ..., -0.3695,  0.2957,  2.9235],
          [-0.5185,  0.2859,  1.1796,  ..., -1.8064, -1.7755,  0.0241],
          ...,
          [ 0.3981, -0.3897, -0.8292,  ..., -0.3930, -0.4268, -0.8577],
          [-1.2077, -0.2948,  0.8068,  ...,  0.1126,  1.1663, -1.3896],
          [ 1.2157, -1.0107,  0.9464,  ...,  0.1426,  0.7082, -0.7262]],

         [[ 1.4362, -0.7988, -0.7817,  ...,  2.1522,  0.8980,  0.6954],
          [-1.0044,  0.3512,  1.5142,  ..., -0.9447, -1.6936, -0.5785],
          [-0.3937, -0.6457, -0.9735,  ..., -0.6709,  0.1557, -0.9108],
          ...,
          [ 0.4653, -0.5853, -0.8792,  ...,  1.2133,  0.4729,  0.4017],
          [-1.6769,  0.0510,  0.1579,  ...,  0.0621,  0.4554, -1.1922],
          [-1.5886, -1.6137,  0.8017,  ..., -1.2081, -0.0638, -0.2661]]],


        [[[-0.9216,  0.4610, -0.2262,  ..., -0.2247,  0.5814, -0.2327],
          [-0.9361,  0.3421,  0.1341,  ..., -0.6207,  0.4787,  1.2239],
          [ 1.8936, -0.3390,  1.9682,  ..., -0.1815, -0.6344, -0.6773],
          ...,
          [ 0.0774, -0.5987, -1.1164,  ...,  0.4364,  0.0753, -0.3049],
          [ 1.0513, -2.0629,  1.3664,  ...,  1.5762,  1.4521, -0.0073],
          [-0.8357, -1.0524, -0.8142,  ..., -0.8015, -0.5346,  1.1392]],

         [[-0.1692, -0.5694,  0.9045,  ...,  0.6988, -0.7485,  0.4040],
          [ 0.1000, -0.1216,  0.9613,  ...,  0.0104,  1.1636, -0.2014],
          [ 0.3925, -0.5485, -2.0856,  ..., -0.0325, -0.6123, -0.5154],
          ...,
          [-0.3150,  0.4752, -0.4145,  ...,  0.1717, -1.8869,  0.6784],
          [ 0.9273, -1.4189, -2.4575,  ..., -2.5121,  0.6767, -0.6670],
          [-0.2004, -0.1949,  0.4705,  ...,  0.9975, -0.5632,  0.4842]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8099, -0.8611,  0.8665,  ...,  1.5843, -0.5672,  0.6772],
          [ 0.5629, -1.1788,  0.9381,  ...,  0.5057,  1.1131,  1.5015],
          [-0.9595,  1.4374,  0.7333,  ...,  0.1213,  0.5527, -0.1237],
          ...,
          [ 0.1696,  1.7944, -0.6368,  ...,  0.2470,  0.7429,  0.3848],
          [-0.0886, -1.8547,  0.5412,  ...,  0.5242, -0.1223, -1.3095],
          [ 1.3538, -0.6937,  0.1384,  ...,  0.2443,  1.2578, -0.8523]],

         [[ 1.6296,  0.4770, -0.0645,  ...,  0.3593,  0.6846, -0.3659],
          [ 2.2575, -0.7984, -0.4530,  ..., -0.1005,  0.0836,  0.7134],
          [ 0.0520, -0.0658,  0.0429,  ...,  0.2561, -1.9447,  0.5552],
          ...,
          [-0.0071,  0.2890, -0.7175,  ...,  0.0664, -1.9470, -0.6678],
          [-0.3658,  3.0366, -0.6393,  ...,  0.1809,  1.5378, -0.5303],
          [-0.5514, -0.0350,  0.5373,  ...,  0.5876, -1.0092,  0.6171]]],


        [[[ 0.1224,  1.3161,  0.3765,  ..., -2.0159,  0.3441, -0.4172],
          [ 2.0093, -1.7456, -1.2199,  ..., -0.5861,  1.1935, -0.0909],
          [ 1.3789,  1.9549, -0.4727,  ..., -1.1049,  1.4054,  1.1520],
          ...,
          [-0.5832, -0.7819,  1.1516,  ..., -0.3108,  0.9698, -0.9293],
          [-1.3053, -0.2580, -2.6570,  ..., -1.4078, -0.1530, -0.2069],
          [ 0.2610, -0.0526, -1.0723,  ...,  0.4613,  1.2721,  0.6020]],

         [[ 0.6465, -0.5159,  0.0992,  ...,  1.7125, -0.3812,  0.3839],
          [-0.6509, -0.9916,  0.5090,  ...,  1.9669, -2.3897,  1.1054],
          [-2.3673, -0.3938, -1.1263,  ..., -1.4885, -1.0748, -1.9324],
          ...,
          [-1.1215, -0.1926,  0.4927,  ..., -0.8173,  2.2701,  0.1130],
          [-1.2941,  0.4801, -0.3825,  ..., -1.2337,  1.8269, -0.6641],
          [-0.2958, -0.9407,  0.6458,  ...,  1.2352,  0.0600, -0.5371]]],


        [[[ 2.0628,  1.1072,  0.3531,  ..., -1.6510,  0.4001,  0.0294],
          [-2.4293, -0.8135, -0.1775,  ..., -0.0279,  0.8551, -0.0511],
          [-0.9615, -1.0871, -1.3395,  ...,  1.3012, -1.0406,  0.6363],
          ...,
          [ 1.5911, -0.0785,  1.7224,  ..., -0.2597,  0.5396, -0.2999],
          [-0.0196,  0.7666, -1.0586,  ...,  2.0103, -0.7163, -0.1902],
          [ 0.2523, -0.0915, -0.3384,  ...,  0.9662,  0.7855, -2.6176]],

         [[-0.2830,  0.0122,  0.6024,  ..., -1.4497,  1.2891,  1.1505],
          [ 1.0054, -0.8364, -0.9515,  ...,  1.1409,  0.0177,  0.4401],
          [-0.3773,  0.7036,  1.2130,  ...,  1.5344,  0.8512,  0.0252],
          ...,
          [ 0.6223, -0.1524, -2.5895,  ...,  1.2069, -0.6858, -0.3082],
          [-0.3896,  0.0273, -0.3966,  ...,  0.3061,  0.8579, -1.4455],
          [ 0.0392,  0.1366,  1.6765,  ...,  0.3076,  0.6948,  1.4868]]],


        [[[ 1.1522,  0.7090, -0.2119,  ...,  1.5063, -1.2518,  1.2646],
          [ 2.4295,  1.0088,  0.7225,  ...,  1.4251,  1.3442, -1.0133],
          [-0.8477, -0.4929, -0.5090,  ..., -0.5352, -0.4069,  1.2253],
          ...,
          [ 0.5059,  1.0705, -0.5341,  ...,  1.1004,  0.5032, -0.5858],
          [-1.1659,  0.5272, -0.4861,  ..., -0.2530, -0.5526,  0.4278],
          [-0.7461,  0.0192,  0.3478,  ...,  0.2029,  0.2623,  0.0312]],

         [[ 0.6776, -0.0310, -0.1570,  ...,  1.3678, -0.3050, -1.0149],
          [ 0.5706,  1.2399,  0.0193,  ...,  1.0291,  0.9281, -0.4404],
          [-0.0791, -0.8589, -1.3680,  ...,  1.7002, -0.4592, -1.5019],
          ...,
          [-1.0285, -0.3715,  0.3475,  ...,  1.0168, -0.6367,  0.2333],
          [ 0.3862, -0.1045, -1.1983,  ..., -0.2622, -0.9573,  0.3736],
          [-0.5131, -0.6502,  0.5627,  ..., -1.1694, -1.3957, -0.8278]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4244,  1.6939,  0.9013,  ...,  0.4483, -0.0901,  1.8796],
          [ 2.0082,  0.8692,  0.4623,  ...,  0.1471,  0.4750, -0.6648],
          [-0.6691,  0.5401,  0.2979,  ..., -0.4400,  0.8032,  0.9647],
          ...,
          [ 0.1354,  0.1679, -1.3735,  ...,  2.0497,  1.4255,  0.5930],
          [ 1.6331, -0.4815,  1.1614,  ...,  0.7310, -1.6405,  0.8485],
          [-0.6246,  0.3882,  1.1873,  ..., -0.0912,  1.1947,  0.8223]],

         [[ 1.0786, -0.0665, -0.7519,  ...,  0.4131,  0.2078, -2.4379],
          [-0.6339, -1.1460, -0.1299,  ..., -0.9551, -0.3545,  0.3359],
          [-0.2562,  0.3353,  1.8345,  ..., -1.2057, -1.3705, -0.9581],
          ...,
          [-2.9114,  1.7698, -0.2834,  ...,  1.1886, -0.6646, -0.8728],
          [ 0.3628, -1.1364,  0.8400,  ...,  0.0166,  1.0606,  0.8191],
          [ 1.2745, -0.2957,  0.2124,  ...,  0.8891, -0.6186,  1.8285]]],


        [[[-0.3217,  1.6659,  1.0893,  ..., -2.0906, -0.6466,  0.3615],
          [-0.0236, -0.4080,  1.1470,  ..., -0.0625,  0.1724,  1.1878],
          [-1.1643, -1.1161,  0.0374,  ...,  0.2287,  1.4102,  0.5446],
          ...,
          [ 0.2965,  1.7013, -1.1479,  ...,  0.7535,  1.5831, -0.2306],
          [ 0.6821, -0.2234, -0.5401,  ..., -1.5177, -0.0965, -0.5316],
          [-0.7817,  0.6218, -0.5632,  ..., -0.5438,  2.4334, -0.5189]],

         [[ 0.0206, -0.9155,  0.2894,  ..., -0.1377,  0.8232,  2.1745],
          [-1.0547,  0.1629,  0.0316,  ..., -1.5774,  0.4149,  1.2824],
          [-0.4697,  0.3221, -0.1140,  ...,  0.5512, -0.0068,  1.7629],
          ...,
          [ 0.7196, -2.4119, -1.1683,  ...,  0.2884,  0.7056,  0.3720],
          [-1.8385,  0.6985,  0.7983,  ..., -0.5944, -0.9599, -0.1026],
          [-0.6862, -0.2014,  0.2474,  ...,  0.8308, -0.4600,  0.0111]]],


        [[[ 1.3812,  0.2412,  0.6401,  ..., -1.0139,  2.0198, -0.4757],
          [-1.1271,  1.1029, -0.7401,  ..., -0.3713,  0.2970,  2.9262],
          [-0.5173,  0.2877,  1.1822,  ..., -1.8087, -1.7730,  0.0267],
          ...,
          [ 0.3982, -0.3908, -0.8289,  ..., -0.3935, -0.4288, -0.8562],
          [-1.2048, -0.2964,  0.8048,  ...,  0.1124,  1.1645, -1.3902],
          [ 1.2143, -1.0122,  0.9464,  ...,  0.1427,  0.7057, -0.7265]],

         [[ 1.4396, -0.8018, -0.7854,  ...,  2.1557,  0.9013,  0.6919],
          [-1.0017,  0.3535,  1.5126,  ..., -0.9427, -1.6915, -0.5811],
          [-0.3913, -0.6451, -0.9753,  ..., -0.6702,  0.1571, -0.9127],
          ...,
          [ 0.4695, -0.5862, -0.8823,  ...,  1.2163,  0.4754,  0.3989],
          [-1.6785,  0.0499,  0.1580,  ...,  0.0624,  0.4549, -1.1918],
          [-1.5885, -1.6127,  0.8037,  ..., -1.2108, -0.0659, -0.2640]]],


        [[[-0.9224,  0.4583, -0.2239,  ..., -0.2245,  0.5799, -0.2309],
          [-0.9389,  0.3421,  0.1360,  ..., -0.6222,  0.4767,  1.2240],
          [ 1.8913, -0.3394,  1.9708,  ..., -0.1834, -0.6366, -0.6756],
          ...,
          [ 0.0758, -0.5999, -1.1164,  ...,  0.4357,  0.0753, -0.3051],
          [ 1.0517, -2.0646,  1.3652,  ...,  1.5774,  1.4560, -0.0059],
          [-0.8354, -1.0548, -0.8153,  ..., -0.8002, -0.5325,  1.1391]],

         [[-0.1666, -0.5720,  0.9068,  ...,  0.7014, -0.7470,  0.4014],
          [ 0.1029, -0.1246,  0.9645,  ...,  0.0135,  1.1644, -0.2008],
          [ 0.3929, -0.5482, -2.0859,  ..., -0.0318, -0.6127, -0.5171],
          ...,
          [-0.3152,  0.4743, -0.4163,  ...,  0.1723, -1.8864,  0.6771],
          [ 0.9260, -1.4191, -2.4576,  ..., -2.5123,  0.6765, -0.6667],
          [-0.2025, -0.1937,  0.4690,  ...,  0.9958, -0.5619,  0.4832]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8136, -0.8580,  0.8635,  ...,  1.5869, -0.5650,  0.6812],
          [ 0.5590, -1.1755,  0.9372,  ...,  0.5029,  1.1118,  1.5047],
          [-0.9625,  1.4400,  0.7312,  ...,  0.1207,  0.5549, -0.1205],
          ...,
          [ 0.1664,  1.7963, -0.6371,  ...,  0.2472,  0.7435,  0.3884],
          [-0.0904, -1.8546,  0.5401,  ...,  0.5220, -0.1228, -1.3064],
          [ 1.3515, -0.6928,  0.1388,  ...,  0.2416,  1.2576, -0.8515]],

         [[ 1.6295,  0.4797, -0.0619,  ...,  0.3631,  0.6820, -0.3698],
          [ 2.2583, -0.7975, -0.4526,  ..., -0.0966,  0.0837,  0.7098],
          [ 0.0501, -0.0644,  0.0444,  ...,  0.2580, -1.9460,  0.5532],
          ...,
          [-0.0102,  0.2909, -0.7154,  ...,  0.0700, -1.9491, -0.6721],
          [-0.3636,  3.0353, -0.6414,  ...,  0.1819,  1.5402, -0.5312],
          [-0.5500, -0.0365,  0.5361,  ...,  0.5865, -1.0076,  0.6179]]],


        [[[ 0.1190,  1.3190,  0.3798,  ..., -2.0196,  0.3414, -0.4144],
          [ 2.0096, -1.7440, -1.2196,  ..., -0.5894,  1.1935, -0.0893],
          [ 1.3767,  1.9576, -0.4706,  ..., -1.1077,  1.4037,  1.1549],
          ...,
          [-0.5851, -0.7807,  1.1539,  ..., -0.3124,  0.9710, -0.9296],
          [-1.3057, -0.2587, -2.6603,  ..., -1.4083, -0.1521, -0.2084],
          [ 0.2618, -0.0526, -1.0736,  ...,  0.4622,  1.2749,  0.6012]],

         [[ 0.6498, -0.5190,  0.0961,  ...,  1.7151, -0.3783,  0.3830],
          [-0.6483, -0.9943,  0.5056,  ...,  1.9683, -2.3871,  1.1053],
          [-2.3677, -0.3956, -1.1284,  ..., -1.4868, -1.0731, -1.9321],
          ...,
          [-1.1186, -0.1971,  0.4895,  ..., -0.8160,  2.2723,  0.1119],
          [-1.2946,  0.4784, -0.3843,  ..., -1.2323,  1.8273, -0.6621],
          [-0.2979, -0.9426,  0.6471,  ...,  1.2349,  0.0599, -0.5346]]],


        [[[ 2.0624,  1.1108,  0.3566,  ..., -1.6550,  0.3991,  0.0331],
          [-2.4337, -0.8132, -0.1756,  ..., -0.0314,  0.8542, -0.0482],
          [-0.9645, -1.0879, -1.3387,  ...,  1.3001, -1.0416,  0.6388],
          ...,
          [ 1.5915, -0.0775,  1.7251,  ..., -0.2621,  0.5394, -0.2982],
          [-0.0203,  0.7669, -1.0603,  ...,  2.0121, -0.7164, -0.1913],
          [ 0.2535, -0.0933, -0.3393,  ...,  0.9676,  0.7852, -2.6194]],

         [[-0.2811,  0.0102,  0.6009,  ..., -1.4493,  1.2927,  1.1485],
          [ 1.0098, -0.8379, -0.9553,  ...,  1.1452,  0.0206,  0.4372],
          [-0.3769,  0.7029,  1.2136,  ...,  1.5365,  0.8527,  0.0236],
          ...,
          [ 0.6252, -0.1542, -2.5931,  ...,  1.2109, -0.6848, -0.3106],
          [-0.3905,  0.0258, -0.3971,  ...,  0.3067,  0.8592, -1.4463],
          [ 0.0377,  0.1368,  1.6782,  ...,  0.3065,  0.6937,  1.4889]]],


        [[[ 1.1515,  0.7121, -0.2092,  ...,  1.5058, -1.2558,  1.2682],
          [ 2.4298,  1.0118,  0.7258,  ...,  1.4250,  1.3437, -1.0126],
          [-0.8508, -0.4912, -0.5067,  ..., -0.5383, -0.4096,  1.2279],
          ...,
          [ 0.5054,  1.0722, -0.5333,  ...,  1.1000,  0.5022, -0.5853],
          [-1.1686,  0.5286, -0.4865,  ..., -0.2544, -0.5535,  0.4288],
          [-0.7466,  0.0190,  0.3468,  ...,  0.2037,  0.2627,  0.0312]],

         [[ 0.6810, -0.0337, -0.1570,  ...,  1.3717, -0.3022, -1.0161],
          [ 0.5746,  1.2382,  0.0193,  ...,  1.0334,  0.9324, -0.4407],
          [-0.0785, -0.8605, -1.3680,  ...,  1.7027, -0.4587, -1.5026],
          ...,
          [-1.0287, -0.3742,  0.3476,  ...,  1.0206, -0.6354,  0.2333],
          [ 0.3890, -0.1064, -1.1973,  ..., -0.2627, -0.9579,  0.3750],
          [-0.5144, -0.6498,  0.5630,  ..., -1.1707, -1.3971, -0.8277]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7847, -0.3379, -0.0446,  ..., -0.5898, -0.2953, -0.5660],
         [ 0.8883,  0.0418,  1.1402,  ...,  0.6049, -0.8813, -1.0509],
         [ 0.8353,  0.3258,  0.3523,  ...,  1.3815, -0.0499, -0.5686],
         ...,
         [-1.2859,  2.0411,  0.1405,  ...,  0.1320, -0.3346,  0.2536],
         [-0.5703,  0.7584, -0.2688,  ..., -1.5090, -0.6472,  1.3644],
         [-0.0236,  0.6433,  2.1840,  ...,  0.6600,  0.2688, -0.4440]],

        [[-1.0824,  1.2614, -0.3810,  ...,  0.5522, -0.3230,  0.7468],
         [ 0.5017,  1.5072, -1.0451,  ...,  0.0655, -1.0336, -1.0106],
         [ 0.1668,  0.5591, -0.2945,  ...,  0.9347,  1.2584,  0.9520],
         ...,
         [ 0.3157, -0.8794, -0.1399,  ...,  0.2791, -0.0464,  0.5285],
         [ 0.3650, -0.6812, -0.4412,  ...,  0.0105, -0.0266, -0.1759],
         [ 0.1111,  0.9620,  0.3827,  ...,  0.7181,  1.5625, -1.5144]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4244,  1.6939,  0.9013,  ...,  0.4483, -0.0901,  1.8796],
         [ 2.0082,  0.8692,  0.4623,  ...,  0.1471,  0.4750, -0.6648],
         [-0.6691,  0.5401,  0.2979,  ..., -0.4400,  0.8032,  0.9647],
         ...,
         [ 0.1354,  0.1679, -1.3735,  ...,  2.0497,  1.4255,  0.5930],
         [ 1.6331, -0.4815,  1.1614,  ...,  0.7310, -1.6405,  0.8485],
         [-0.6246,  0.3882,  1.1873,  ..., -0.0912,  1.1947,  0.8223]],

        [[ 1.0786, -0.0665, -0.7519,  ...,  0.4131,  0.2078, -2.4379],
         [-0.6339, -1.1460, -0.1299,  ..., -0.9551, -0.3545,  0.3359],
         [-0.2562,  0.3353,  1.8345,  ..., -1.2057, -1.3705, -0.9581],
         ...,
         [-2.9114,  1.7698, -0.2834,  ...,  1.1886, -0.6646, -0.8728],
         [ 0.3628, -1.1364,  0.8400,  ...,  0.0166,  1.0606,  0.8191],
         [ 1.2745, -0.2957,  0.2124,  ...,  0.8891, -0.6186,  1.8285]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 162.881, Val Loss : 170.413
======> Trajectory Loss : 21.605, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.383, BelowGroundPenalize Loss : 2.999
===> [Minibatch 11/129].........tensor([[[-0.7847, -0.3379, -0.0446,  ..., -0.5898, -0.2953, -0.5660],
         [ 0.8883,  0.0418,  1.1402,  ...,  0.6049, -0.8813, -1.0509],
         [ 0.8353,  0.3258,  0.3523,  ...,  1.3815, -0.0499, -0.5686],
         ...,
         [-1.2859,  2.0411,  0.1405,  ...,  0.1320, -0.3346,  0.2536],
         [-0.5703,  0.7584, -0.2688,  ..., -1.5090, -0.6472,  1.3644],
         [-0.0236,  0.6433,  2.1840,  ...,  0.6600,  0.2688, -0.4440]],

        [[-1.0824,  1.2614, -0.3810,  ...,  0.5522, -0.3230,  0.7468],
         [ 0.5017,  1.5072, -1.0451,  ...,  0.0655, -1.0336, -1.0106],
         [ 0.1668,  0.5591, -0.2945,  ...,  0.9347,  1.2584,  0.9520],
         ...,
         [ 0.3157, -0.8794, -0.1399,  ...,  0.2791, -0.0464,  0.5285],
         [ 0.3650, -0.6812, -0.4412,  ...,  0.0105, -0.0266, -0.1759],
         [ 0.1111,  0.9620,  0.3827,  ...,  0.7181,  1.5625, -1.5144]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4244,  1.6939,  0.9013,  ...,  0.4483, -0.0901,  1.8796],
         [ 2.0082,  0.8692,  0.4623,  ...,  0.1471,  0.4750, -0.6648],
         [-0.6691,  0.5401,  0.2979,  ..., -0.4400,  0.8032,  0.9647],
         ...,
         [ 0.1354,  0.1679, -1.3735,  ...,  2.0497,  1.4255,  0.5930],
         [ 1.6331, -0.4815,  1.1614,  ...,  0.7310, -1.6405,  0.8485],
         [-0.6246,  0.3882,  1.1873,  ..., -0.0912,  1.1947,  0.8223]],

        [[ 1.0786, -0.0665, -0.7519,  ...,  0.4131,  0.2078, -2.4379],
         [-0.6339, -1.1460, -0.1299,  ..., -0.9551, -0.3545,  0.3359],
         [-0.2562,  0.3353,  1.8345,  ..., -1.2057, -1.3705, -0.9581],
         ...,
         [-2.9114,  1.7698, -0.2834,  ...,  1.1886, -0.6646, -0.8728],
         [ 0.3628, -1.1364,  0.8400,  ...,  0.0166,  1.0606,  0.8191],
         [ 1.2745, -0.2957,  0.2124,  ...,  0.8891, -0.6186,  1.8285]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4244,  1.6939,  0.9013,  ...,  0.4483, -0.0901,  1.8796],
          [ 2.0082,  0.8692,  0.4623,  ...,  0.1471,  0.4750, -0.6648],
          [-0.6691,  0.5401,  0.2979,  ..., -0.4400,  0.8032,  0.9647],
          ...,
          [ 0.1354,  0.1679, -1.3735,  ...,  2.0497,  1.4255,  0.5930],
          [ 1.6331, -0.4815,  1.1614,  ...,  0.7310, -1.6405,  0.8485],
          [-0.6246,  0.3882,  1.1873,  ..., -0.0912,  1.1947,  0.8223]],

         [[ 1.0786, -0.0665, -0.7519,  ...,  0.4131,  0.2078, -2.4379],
          [-0.6339, -1.1460, -0.1299,  ..., -0.9551, -0.3545,  0.3359],
          [-0.2562,  0.3353,  1.8345,  ..., -1.2057, -1.3705, -0.9581],
          ...,
          [-2.9114,  1.7698, -0.2834,  ...,  1.1886, -0.6646, -0.8728],
          [ 0.3628, -1.1364,  0.8400,  ...,  0.0166,  1.0606,  0.8191],
          [ 1.2745, -0.2957,  0.2124,  ...,  0.8891, -0.6186,  1.8285]]],


        [[[-0.3217,  1.6659,  1.0893,  ..., -2.0906, -0.6466,  0.3615],
          [-0.0236, -0.4080,  1.1470,  ..., -0.0625,  0.1724,  1.1878],
          [-1.1643, -1.1161,  0.0374,  ...,  0.2287,  1.4102,  0.5446],
          ...,
          [ 0.2965,  1.7013, -1.1479,  ...,  0.7535,  1.5831, -0.2306],
          [ 0.6821, -0.2234, -0.5401,  ..., -1.5177, -0.0965, -0.5316],
          [-0.7817,  0.6218, -0.5632,  ..., -0.5438,  2.4334, -0.5189]],

         [[ 0.0206, -0.9155,  0.2894,  ..., -0.1377,  0.8232,  2.1745],
          [-1.0547,  0.1629,  0.0316,  ..., -1.5774,  0.4149,  1.2824],
          [-0.4697,  0.3221, -0.1140,  ...,  0.5512, -0.0068,  1.7629],
          ...,
          [ 0.7196, -2.4119, -1.1683,  ...,  0.2884,  0.7056,  0.3720],
          [-1.8385,  0.6985,  0.7983,  ..., -0.5944, -0.9599, -0.1026],
          [-0.6862, -0.2014,  0.2474,  ...,  0.8308, -0.4600,  0.0111]]],


        [[[ 1.3812,  0.2412,  0.6401,  ..., -1.0139,  2.0198, -0.4757],
          [-1.1271,  1.1029, -0.7401,  ..., -0.3713,  0.2970,  2.9262],
          [-0.5173,  0.2877,  1.1822,  ..., -1.8087, -1.7730,  0.0267],
          ...,
          [ 0.3982, -0.3908, -0.8289,  ..., -0.3935, -0.4288, -0.8562],
          [-1.2048, -0.2964,  0.8048,  ...,  0.1124,  1.1645, -1.3902],
          [ 1.2143, -1.0122,  0.9464,  ...,  0.1427,  0.7057, -0.7265]],

         [[ 1.4396, -0.8018, -0.7854,  ...,  2.1557,  0.9013,  0.6919],
          [-1.0017,  0.3535,  1.5126,  ..., -0.9427, -1.6915, -0.5811],
          [-0.3913, -0.6451, -0.9753,  ..., -0.6702,  0.1571, -0.9127],
          ...,
          [ 0.4695, -0.5862, -0.8823,  ...,  1.2163,  0.4754,  0.3989],
          [-1.6785,  0.0499,  0.1580,  ...,  0.0624,  0.4549, -1.1918],
          [-1.5885, -1.6127,  0.8037,  ..., -1.2108, -0.0659, -0.2640]]],


        [[[-0.9224,  0.4583, -0.2239,  ..., -0.2245,  0.5799, -0.2309],
          [-0.9389,  0.3421,  0.1360,  ..., -0.6222,  0.4767,  1.2240],
          [ 1.8913, -0.3394,  1.9708,  ..., -0.1834, -0.6366, -0.6756],
          ...,
          [ 0.0758, -0.5999, -1.1164,  ...,  0.4357,  0.0753, -0.3051],
          [ 1.0517, -2.0646,  1.3652,  ...,  1.5774,  1.4560, -0.0059],
          [-0.8354, -1.0548, -0.8153,  ..., -0.8002, -0.5325,  1.1391]],

         [[-0.1666, -0.5720,  0.9068,  ...,  0.7014, -0.7470,  0.4014],
          [ 0.1029, -0.1246,  0.9645,  ...,  0.0135,  1.1644, -0.2008],
          [ 0.3929, -0.5482, -2.0859,  ..., -0.0318, -0.6127, -0.5171],
          ...,
          [-0.3152,  0.4743, -0.4163,  ...,  0.1723, -1.8864,  0.6771],
          [ 0.9260, -1.4191, -2.4576,  ..., -2.5123,  0.6765, -0.6667],
          [-0.2025, -0.1937,  0.4690,  ...,  0.9958, -0.5619,  0.4832]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8136, -0.8580,  0.8635,  ...,  1.5869, -0.5650,  0.6812],
          [ 0.5590, -1.1755,  0.9372,  ...,  0.5029,  1.1118,  1.5047],
          [-0.9625,  1.4400,  0.7312,  ...,  0.1207,  0.5549, -0.1205],
          ...,
          [ 0.1664,  1.7963, -0.6371,  ...,  0.2472,  0.7435,  0.3884],
          [-0.0904, -1.8546,  0.5401,  ...,  0.5220, -0.1228, -1.3064],
          [ 1.3515, -0.6928,  0.1388,  ...,  0.2416,  1.2576, -0.8515]],

         [[ 1.6295,  0.4797, -0.0619,  ...,  0.3631,  0.6820, -0.3698],
          [ 2.2583, -0.7975, -0.4526,  ..., -0.0966,  0.0837,  0.7098],
          [ 0.0501, -0.0644,  0.0444,  ...,  0.2580, -1.9460,  0.5532],
          ...,
          [-0.0102,  0.2909, -0.7154,  ...,  0.0700, -1.9491, -0.6721],
          [-0.3636,  3.0353, -0.6414,  ...,  0.1819,  1.5402, -0.5312],
          [-0.5500, -0.0365,  0.5361,  ...,  0.5865, -1.0076,  0.6179]]],


        [[[ 0.1190,  1.3190,  0.3798,  ..., -2.0196,  0.3414, -0.4144],
          [ 2.0096, -1.7440, -1.2196,  ..., -0.5894,  1.1935, -0.0893],
          [ 1.3767,  1.9576, -0.4706,  ..., -1.1077,  1.4037,  1.1549],
          ...,
          [-0.5851, -0.7807,  1.1539,  ..., -0.3124,  0.9710, -0.9296],
          [-1.3057, -0.2587, -2.6603,  ..., -1.4083, -0.1521, -0.2084],
          [ 0.2618, -0.0526, -1.0736,  ...,  0.4622,  1.2749,  0.6012]],

         [[ 0.6498, -0.5190,  0.0961,  ...,  1.7151, -0.3783,  0.3830],
          [-0.6483, -0.9943,  0.5056,  ...,  1.9683, -2.3871,  1.1053],
          [-2.3677, -0.3956, -1.1284,  ..., -1.4868, -1.0731, -1.9321],
          ...,
          [-1.1186, -0.1971,  0.4895,  ..., -0.8160,  2.2723,  0.1119],
          [-1.2946,  0.4784, -0.3843,  ..., -1.2323,  1.8273, -0.6621],
          [-0.2979, -0.9426,  0.6471,  ...,  1.2349,  0.0599, -0.5346]]],


        [[[ 2.0624,  1.1108,  0.3566,  ..., -1.6550,  0.3991,  0.0331],
          [-2.4337, -0.8132, -0.1756,  ..., -0.0314,  0.8542, -0.0482],
          [-0.9645, -1.0879, -1.3387,  ...,  1.3001, -1.0416,  0.6388],
          ...,
          [ 1.5915, -0.0775,  1.7251,  ..., -0.2621,  0.5394, -0.2982],
          [-0.0203,  0.7669, -1.0603,  ...,  2.0121, -0.7164, -0.1913],
          [ 0.2535, -0.0933, -0.3393,  ...,  0.9676,  0.7852, -2.6194]],

         [[-0.2811,  0.0102,  0.6009,  ..., -1.4493,  1.2927,  1.1485],
          [ 1.0098, -0.8379, -0.9553,  ...,  1.1452,  0.0206,  0.4372],
          [-0.3769,  0.7029,  1.2136,  ...,  1.5365,  0.8527,  0.0236],
          ...,
          [ 0.6252, -0.1542, -2.5931,  ...,  1.2109, -0.6848, -0.3106],
          [-0.3905,  0.0258, -0.3971,  ...,  0.3067,  0.8592, -1.4463],
          [ 0.0377,  0.1368,  1.6782,  ...,  0.3065,  0.6937,  1.4889]]],


        [[[ 1.1515,  0.7121, -0.2092,  ...,  1.5058, -1.2558,  1.2682],
          [ 2.4298,  1.0118,  0.7258,  ...,  1.4250,  1.3437, -1.0126],
          [-0.8508, -0.4912, -0.5067,  ..., -0.5383, -0.4096,  1.2279],
          ...,
          [ 0.5054,  1.0722, -0.5333,  ...,  1.1000,  0.5022, -0.5853],
          [-1.1686,  0.5286, -0.4865,  ..., -0.2544, -0.5535,  0.4288],
          [-0.7466,  0.0190,  0.3468,  ...,  0.2037,  0.2627,  0.0312]],

         [[ 0.6810, -0.0337, -0.1570,  ...,  1.3717, -0.3022, -1.0161],
          [ 0.5746,  1.2382,  0.0193,  ...,  1.0334,  0.9324, -0.4407],
          [-0.0785, -0.8605, -1.3680,  ...,  1.7027, -0.4587, -1.5026],
          ...,
          [-1.0287, -0.3742,  0.3476,  ...,  1.0206, -0.6354,  0.2333],
          [ 0.3890, -0.1064, -1.1973,  ..., -0.2627, -0.9579,  0.3750],
          [-0.5144, -0.6498,  0.5630,  ..., -1.1707, -1.3971, -0.8277]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4211,  1.6974,  0.8969,  ...,  0.4530, -0.0895,  1.8829],
          [ 2.0082,  0.8726,  0.4591,  ...,  0.1498,  0.4775, -0.6662],
          [-0.6708,  0.5424,  0.2953,  ..., -0.4376,  0.8051,  0.9630],
          ...,
          [ 0.1331,  0.1693, -1.3763,  ...,  2.0518,  1.4283,  0.5921],
          [ 1.6334, -0.4793,  1.1587,  ...,  0.7315, -1.6399,  0.8467],
          [-0.6262,  0.3890,  1.1875,  ..., -0.0910,  1.1941,  0.8210]],

         [[ 1.0744, -0.0621, -0.7473,  ...,  0.4178,  0.2034, -2.4427],
          [-0.6365, -1.1429, -0.1272,  ..., -0.9514, -0.3577,  0.3318],
          [-0.2582,  0.3373,  1.8367,  ..., -1.2036, -1.3726, -0.9602],
          ...,
          [-2.9149,  1.7730, -0.2799,  ...,  1.1923, -0.6680, -0.8763],
          [ 0.3615, -1.1352,  0.8391,  ...,  0.0183,  1.0597,  0.8176],
          [ 1.2748, -0.2966,  0.2145,  ...,  0.8887, -0.6189,  1.8260]]],


        [[[-0.3269,  1.6712,  1.0944,  ..., -2.0963, -0.6517,  0.3665],
          [-0.0251, -0.4071,  1.1491,  ..., -0.0651,  0.1710,  1.1899],
          [-1.1669, -1.1137,  0.0399,  ...,  0.2258,  1.4076,  0.5470],
          ...,
          [ 0.2950,  1.7028, -1.1470,  ...,  0.7512,  1.5812, -0.2298],
          [ 0.6820, -0.2241, -0.5401,  ..., -1.5189, -0.0975, -0.5317],
          [-0.7816,  0.6216, -0.5637,  ..., -0.5445,  2.4335, -0.5196]],

         [[ 0.0259, -0.9184,  0.2857,  ..., -0.1427,  0.8274,  2.1794],
          [-1.0516,  0.1596,  0.0275,  ..., -1.5816,  0.4176,  1.2864],
          [-0.4678,  0.3190, -0.1164,  ...,  0.5493, -0.0050,  1.7650],
          ...,
          [ 0.7229, -2.4107, -1.1713,  ...,  0.2854,  0.7063,  0.3744],
          [-1.8366,  0.6963,  0.7930,  ..., -0.5956, -0.9592, -0.0989],
          [-0.6870, -0.2040,  0.2455,  ...,  0.8318, -0.4603,  0.0136]]],


        [[[ 1.3851,  0.2448,  0.6446,  ..., -1.0105,  2.0231, -0.4707],
          [-1.1282,  1.1048, -0.7414,  ..., -0.3733,  0.2984,  2.9290],
          [-0.5163,  0.2893,  1.1845,  ..., -1.8108, -1.7707,  0.0291],
          ...,
          [ 0.3983, -0.3918, -0.8285,  ..., -0.3940, -0.4307, -0.8544],
          [-1.2021, -0.2977,  0.8030,  ...,  0.1127,  1.1633, -1.3903],
          [ 1.2131, -1.0136,  0.9466,  ...,  0.1429,  0.7037, -0.7266]],

         [[ 1.4442, -0.8049, -0.7906,  ...,  2.1606,  0.9061,  0.6869],
          [-0.9989,  0.3559,  1.5111,  ..., -0.9406, -1.6892, -0.5839],
          [-0.3892, -0.6445, -0.9770,  ..., -0.6695,  0.1584, -0.9144],
          ...,
          [ 0.4731, -0.5869, -0.8850,  ...,  1.2188,  0.4775,  0.3966],
          [-1.6798,  0.0493,  0.1578,  ...,  0.0630,  0.4549, -1.1918],
          [-1.5883, -1.6118,  0.8054,  ..., -1.2132, -0.0676, -0.2621]]],


        [[[-0.9236,  0.4552, -0.2206,  ..., -0.2255,  0.5770, -0.2291],
          [-0.9417,  0.3422,  0.1380,  ..., -0.6237,  0.4747,  1.2241],
          [ 1.8892, -0.3397,  1.9731,  ..., -0.1851, -0.6386, -0.6741],
          ...,
          [ 0.0742, -0.6011, -1.1162,  ...,  0.4348,  0.0751, -0.3052],
          [ 1.0515, -2.0661,  1.3643,  ...,  1.5782,  1.4597, -0.0047],
          [-0.8353, -1.0570, -0.8162,  ..., -0.7992, -0.5308,  1.1391]],

         [[-0.1627, -0.5757,  0.9103,  ...,  0.7050, -0.7455,  0.3981],
          [ 0.1059, -0.1276,  0.9677,  ...,  0.0168,  1.1652, -0.1998],
          [ 0.3932, -0.5479, -2.0862,  ..., -0.0311, -0.6131, -0.5186],
          ...,
          [-0.3154,  0.4736, -0.4178,  ...,  0.1728, -1.8859,  0.6760],
          [ 0.9248, -1.4196, -2.4577,  ..., -2.5123,  0.6763, -0.6666],
          [-0.2041, -0.1927,  0.4677,  ...,  0.9944, -0.5607,  0.4823]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8187, -0.8536,  0.8607,  ...,  1.5888, -0.5641,  0.6863],
          [ 0.5549, -1.1721,  0.9364,  ...,  0.4998,  1.1105,  1.5075],
          [-0.9652,  1.4424,  0.7293,  ...,  0.1202,  0.5570, -0.1177],
          ...,
          [ 0.1631,  1.7983, -0.6372,  ...,  0.2474,  0.7441,  0.3922],
          [-0.0925, -1.8540,  0.5401,  ...,  0.5196, -0.1231, -1.3030],
          [ 1.3490, -0.6917,  0.1390,  ...,  0.2392,  1.2573, -0.8505]],

         [[ 1.6323,  0.4806, -0.0620,  ...,  0.3680,  0.6801, -0.3745],
          [ 2.2595, -0.7969, -0.4527,  ..., -0.0928,  0.0842,  0.7063],
          [ 0.0484, -0.0631,  0.0456,  ...,  0.2598, -1.9471,  0.5513],
          ...,
          [-0.0129,  0.2926, -0.7136,  ...,  0.0731, -1.9509, -0.6758],
          [-0.3611,  3.0340, -0.6439,  ...,  0.1832,  1.5426, -0.5324],
          [-0.5487, -0.0378,  0.5348,  ...,  0.5857, -1.0061,  0.6185]]],


        [[[ 0.1142,  1.3227,  0.3844,  ..., -2.0249,  0.3375, -0.4101],
          [ 2.0098, -1.7423, -1.2192,  ..., -0.5926,  1.1933, -0.0876],
          [ 1.3748,  1.9600, -0.4686,  ..., -1.1103,  1.4021,  1.1576],
          ...,
          [-0.5874, -0.7794,  1.1566,  ..., -0.3143,  0.9719, -0.9296],
          [-1.3068, -0.2591, -2.6632,  ..., -1.4096, -0.1517, -0.2093],
          [ 0.2623, -0.0524, -1.0747,  ...,  0.4627,  1.2773,  0.6007]],

         [[ 0.6544, -0.5229,  0.0918,  ...,  1.7184, -0.3747,  0.3818],
          [-0.6456, -0.9970,  0.5023,  ...,  1.9696, -2.3847,  1.1051],
          [-2.3680, -0.3973, -1.1303,  ..., -1.4854, -1.0716, -1.9317],
          ...,
          [-1.1163, -0.2009,  0.4868,  ..., -0.8149,  2.2741,  0.1111],
          [-1.2946,  0.4767, -0.3863,  ..., -1.2310,  1.8280, -0.6604],
          [-0.2996, -0.9443,  0.6482,  ...,  1.2348,  0.0600, -0.5324]]],


        [[[ 2.0611,  1.1156,  0.3613,  ..., -1.6606,  0.3978,  0.0383],
          [-2.4379, -0.8128, -0.1738,  ..., -0.0349,  0.8534, -0.0452],
          [-0.9673, -1.0887, -1.3380,  ...,  1.2990, -1.0425,  0.6412],
          ...,
          [ 1.5917, -0.0764,  1.7278,  ..., -0.2648,  0.5392, -0.2963],
          [-0.0216,  0.7678, -1.0617,  ...,  2.0135, -0.7165, -0.1917],
          [ 0.2544, -0.0948, -0.3399,  ...,  0.9686,  0.7849, -2.6210]],

         [[-0.2776,  0.0079,  0.5984,  ..., -1.4482,  1.2979,  1.1461],
          [ 1.0142, -0.8393, -0.9592,  ...,  1.1495,  0.0236,  0.4343],
          [-0.3764,  0.7023,  1.2140,  ...,  1.5384,  0.8542,  0.0222],
          ...,
          [ 0.6276, -0.1557, -2.5961,  ...,  1.2143, -0.6841, -0.3126],
          [-0.3908,  0.0243, -0.3979,  ...,  0.3078,  0.8610, -1.4473],
          [ 0.0366,  0.1369,  1.6796,  ...,  0.3056,  0.6930,  1.4906]]],


        [[[ 1.1499,  0.7163, -0.2050,  ...,  1.5044, -1.2610,  1.2727],
          [ 2.4301,  1.0147,  0.7291,  ...,  1.4249,  1.3432, -1.0120],
          [-0.8537, -0.4896, -0.5046,  ..., -0.5413, -0.4120,  1.2303],
          ...,
          [ 0.5047,  1.0739, -0.5324,  ...,  1.0995,  0.5012, -0.5845],
          [-1.1720,  0.5305, -0.4864,  ..., -0.2566, -0.5549,  0.4301],
          [-0.7474,  0.0190,  0.3463,  ...,  0.2041,  0.2629,  0.0313]],

         [[ 0.6861, -0.0375, -0.1571,  ...,  1.3772, -0.2980, -1.0173],
          [ 0.5787,  1.2366,  0.0192,  ...,  1.0378,  0.9368, -0.4409],
          [-0.0779, -0.8620, -1.3680,  ...,  1.7050, -0.4583, -1.5033],
          ...,
          [-1.0288, -0.3765,  0.3476,  ...,  1.0238, -0.6343,  0.2332],
          [ 0.3923, -0.1086, -1.1964,  ..., -0.2627, -0.9582,  0.3761],
          [-0.5153, -0.6496,  0.5633,  ..., -1.1717, -1.3983, -0.8276]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7807, -0.3365, -0.0404,  ..., -0.5850, -0.2980, -0.5700],
         [ 0.8854,  0.0481,  1.1394,  ...,  0.6109, -0.8864, -1.0563],
         [ 0.8400,  0.3209,  0.3575,  ...,  1.3758, -0.0444, -0.5733],
         ...,
         [-1.2806,  2.0458,  0.1468,  ...,  0.1349, -0.3278,  0.2490],
         [-0.5648,  0.7627, -0.2620,  ..., -1.5043, -0.6477,  1.3601],
         [-0.0182,  0.6508,  2.1903,  ...,  0.6652,  0.2727, -0.4520]],

        [[-1.0782,  1.2596, -0.3843,  ...,  0.5576, -0.3210,  0.7486],
         [ 0.5070,  1.5025, -1.0500,  ...,  0.0681, -1.0300, -1.0056],
         [ 0.1644,  0.5616, -0.2934,  ...,  0.9383,  1.2628,  0.9528],
         ...,
         [ 0.3166, -0.8815, -0.1420,  ...,  0.2819, -0.0461,  0.5321],
         [ 0.3691, -0.6847, -0.4387,  ...,  0.0099, -0.0222, -0.1697],
         [ 0.1157,  0.9572,  0.3814,  ...,  0.7239,  1.5671, -1.5059]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4211,  1.6974,  0.8969,  ...,  0.4530, -0.0895,  1.8829],
         [ 2.0082,  0.8726,  0.4591,  ...,  0.1498,  0.4775, -0.6662],
         [-0.6708,  0.5424,  0.2953,  ..., -0.4376,  0.8051,  0.9630],
         ...,
         [ 0.1331,  0.1693, -1.3763,  ...,  2.0518,  1.4283,  0.5921],
         [ 1.6334, -0.4793,  1.1587,  ...,  0.7315, -1.6399,  0.8467],
         [-0.6262,  0.3890,  1.1875,  ..., -0.0910,  1.1941,  0.8210]],

        [[ 1.0744, -0.0621, -0.7473,  ...,  0.4178,  0.2034, -2.4427],
         [-0.6365, -1.1429, -0.1272,  ..., -0.9514, -0.3577,  0.3318],
         [-0.2582,  0.3373,  1.8367,  ..., -1.2036, -1.3726, -0.9602],
         ...,
         [-2.9149,  1.7730, -0.2799,  ...,  1.1923, -0.6680, -0.8763],
         [ 0.3615, -1.1352,  0.8391,  ...,  0.0183,  1.0597,  0.8176],
         [ 1.2748, -0.2966,  0.2145,  ...,  0.8887, -0.6189,  1.8260]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 151.025, Val Loss : 162.867
======> Trajectory Loss : 13.128, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.366, BelowGroundPenalize Loss : 1.299
===> [Minibatch 12/129].........tensor([[[-0.7807, -0.3365, -0.0404,  ..., -0.5850, -0.2980, -0.5700],
         [ 0.8854,  0.0481,  1.1394,  ...,  0.6109, -0.8864, -1.0563],
         [ 0.8400,  0.3209,  0.3575,  ...,  1.3758, -0.0444, -0.5733],
         ...,
         [-1.2806,  2.0458,  0.1468,  ...,  0.1349, -0.3278,  0.2490],
         [-0.5648,  0.7627, -0.2620,  ..., -1.5043, -0.6477,  1.3601],
         [-0.0182,  0.6508,  2.1903,  ...,  0.6652,  0.2727, -0.4520]],

        [[-1.0782,  1.2596, -0.3843,  ...,  0.5576, -0.3210,  0.7486],
         [ 0.5070,  1.5025, -1.0500,  ...,  0.0681, -1.0300, -1.0056],
         [ 0.1644,  0.5616, -0.2934,  ...,  0.9383,  1.2628,  0.9528],
         ...,
         [ 0.3166, -0.8815, -0.1420,  ...,  0.2819, -0.0461,  0.5321],
         [ 0.3691, -0.6847, -0.4387,  ...,  0.0099, -0.0222, -0.1697],
         [ 0.1157,  0.9572,  0.3814,  ...,  0.7239,  1.5671, -1.5059]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4211,  1.6974,  0.8969,  ...,  0.4530, -0.0895,  1.8829],
         [ 2.0082,  0.8726,  0.4591,  ...,  0.1498,  0.4775, -0.6662],
         [-0.6708,  0.5424,  0.2953,  ..., -0.4376,  0.8051,  0.9630],
         ...,
         [ 0.1331,  0.1693, -1.3763,  ...,  2.0518,  1.4283,  0.5921],
         [ 1.6334, -0.4793,  1.1587,  ...,  0.7315, -1.6399,  0.8467],
         [-0.6262,  0.3890,  1.1875,  ..., -0.0910,  1.1941,  0.8210]],

        [[ 1.0744, -0.0621, -0.7473,  ...,  0.4178,  0.2034, -2.4427],
         [-0.6365, -1.1429, -0.1272,  ..., -0.9514, -0.3577,  0.3318],
         [-0.2582,  0.3373,  1.8367,  ..., -1.2036, -1.3726, -0.9602],
         ...,
         [-2.9149,  1.7730, -0.2799,  ...,  1.1923, -0.6680, -0.8763],
         [ 0.3615, -1.1352,  0.8391,  ...,  0.0183,  1.0597,  0.8176],
         [ 1.2748, -0.2966,  0.2145,  ...,  0.8887, -0.6189,  1.8260]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4211,  1.6974,  0.8969,  ...,  0.4530, -0.0895,  1.8829],
          [ 2.0082,  0.8726,  0.4591,  ...,  0.1498,  0.4775, -0.6662],
          [-0.6708,  0.5424,  0.2953,  ..., -0.4376,  0.8051,  0.9630],
          ...,
          [ 0.1331,  0.1693, -1.3763,  ...,  2.0518,  1.4283,  0.5921],
          [ 1.6334, -0.4793,  1.1587,  ...,  0.7315, -1.6399,  0.8467],
          [-0.6262,  0.3890,  1.1875,  ..., -0.0910,  1.1941,  0.8210]],

         [[ 1.0744, -0.0621, -0.7473,  ...,  0.4178,  0.2034, -2.4427],
          [-0.6365, -1.1429, -0.1272,  ..., -0.9514, -0.3577,  0.3318],
          [-0.2582,  0.3373,  1.8367,  ..., -1.2036, -1.3726, -0.9602],
          ...,
          [-2.9149,  1.7730, -0.2799,  ...,  1.1923, -0.6680, -0.8763],
          [ 0.3615, -1.1352,  0.8391,  ...,  0.0183,  1.0597,  0.8176],
          [ 1.2748, -0.2966,  0.2145,  ...,  0.8887, -0.6189,  1.8260]]],


        [[[-0.3269,  1.6712,  1.0944,  ..., -2.0963, -0.6517,  0.3665],
          [-0.0251, -0.4071,  1.1491,  ..., -0.0651,  0.1710,  1.1899],
          [-1.1669, -1.1137,  0.0399,  ...,  0.2258,  1.4076,  0.5470],
          ...,
          [ 0.2950,  1.7028, -1.1470,  ...,  0.7512,  1.5812, -0.2298],
          [ 0.6820, -0.2241, -0.5401,  ..., -1.5189, -0.0975, -0.5317],
          [-0.7816,  0.6216, -0.5637,  ..., -0.5445,  2.4335, -0.5196]],

         [[ 0.0259, -0.9184,  0.2857,  ..., -0.1427,  0.8274,  2.1794],
          [-1.0516,  0.1596,  0.0275,  ..., -1.5816,  0.4176,  1.2864],
          [-0.4678,  0.3190, -0.1164,  ...,  0.5493, -0.0050,  1.7650],
          ...,
          [ 0.7229, -2.4107, -1.1713,  ...,  0.2854,  0.7063,  0.3744],
          [-1.8366,  0.6963,  0.7930,  ..., -0.5956, -0.9592, -0.0989],
          [-0.6870, -0.2040,  0.2455,  ...,  0.8318, -0.4603,  0.0136]]],


        [[[ 1.3851,  0.2448,  0.6446,  ..., -1.0105,  2.0231, -0.4707],
          [-1.1282,  1.1048, -0.7414,  ..., -0.3733,  0.2984,  2.9290],
          [-0.5163,  0.2893,  1.1845,  ..., -1.8108, -1.7707,  0.0291],
          ...,
          [ 0.3983, -0.3918, -0.8285,  ..., -0.3940, -0.4307, -0.8544],
          [-1.2021, -0.2977,  0.8030,  ...,  0.1127,  1.1633, -1.3903],
          [ 1.2131, -1.0136,  0.9466,  ...,  0.1429,  0.7037, -0.7266]],

         [[ 1.4442, -0.8049, -0.7906,  ...,  2.1606,  0.9061,  0.6869],
          [-0.9989,  0.3559,  1.5111,  ..., -0.9406, -1.6892, -0.5839],
          [-0.3892, -0.6445, -0.9770,  ..., -0.6695,  0.1584, -0.9144],
          ...,
          [ 0.4731, -0.5869, -0.8850,  ...,  1.2188,  0.4775,  0.3966],
          [-1.6798,  0.0493,  0.1578,  ...,  0.0630,  0.4549, -1.1918],
          [-1.5883, -1.6118,  0.8054,  ..., -1.2132, -0.0676, -0.2621]]],


        [[[-0.9236,  0.4552, -0.2206,  ..., -0.2255,  0.5770, -0.2291],
          [-0.9417,  0.3422,  0.1380,  ..., -0.6237,  0.4747,  1.2241],
          [ 1.8892, -0.3397,  1.9731,  ..., -0.1851, -0.6386, -0.6741],
          ...,
          [ 0.0742, -0.6011, -1.1162,  ...,  0.4348,  0.0751, -0.3052],
          [ 1.0515, -2.0661,  1.3643,  ...,  1.5782,  1.4597, -0.0047],
          [-0.8353, -1.0570, -0.8162,  ..., -0.7992, -0.5308,  1.1391]],

         [[-0.1627, -0.5757,  0.9103,  ...,  0.7050, -0.7455,  0.3981],
          [ 0.1059, -0.1276,  0.9677,  ...,  0.0168,  1.1652, -0.1998],
          [ 0.3932, -0.5479, -2.0862,  ..., -0.0311, -0.6131, -0.5186],
          ...,
          [-0.3154,  0.4736, -0.4178,  ...,  0.1728, -1.8859,  0.6760],
          [ 0.9248, -1.4196, -2.4577,  ..., -2.5123,  0.6763, -0.6666],
          [-0.2041, -0.1927,  0.4677,  ...,  0.9944, -0.5607,  0.4823]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8187, -0.8536,  0.8607,  ...,  1.5888, -0.5641,  0.6863],
          [ 0.5549, -1.1721,  0.9364,  ...,  0.4998,  1.1105,  1.5075],
          [-0.9652,  1.4424,  0.7293,  ...,  0.1202,  0.5570, -0.1177],
          ...,
          [ 0.1631,  1.7983, -0.6372,  ...,  0.2474,  0.7441,  0.3922],
          [-0.0925, -1.8540,  0.5401,  ...,  0.5196, -0.1231, -1.3030],
          [ 1.3490, -0.6917,  0.1390,  ...,  0.2392,  1.2573, -0.8505]],

         [[ 1.6323,  0.4806, -0.0620,  ...,  0.3680,  0.6801, -0.3745],
          [ 2.2595, -0.7969, -0.4527,  ..., -0.0928,  0.0842,  0.7063],
          [ 0.0484, -0.0631,  0.0456,  ...,  0.2598, -1.9471,  0.5513],
          ...,
          [-0.0129,  0.2926, -0.7136,  ...,  0.0731, -1.9509, -0.6758],
          [-0.3611,  3.0340, -0.6439,  ...,  0.1832,  1.5426, -0.5324],
          [-0.5487, -0.0378,  0.5348,  ...,  0.5857, -1.0061,  0.6185]]],


        [[[ 0.1142,  1.3227,  0.3844,  ..., -2.0249,  0.3375, -0.4101],
          [ 2.0098, -1.7423, -1.2192,  ..., -0.5926,  1.1933, -0.0876],
          [ 1.3748,  1.9600, -0.4686,  ..., -1.1103,  1.4021,  1.1576],
          ...,
          [-0.5874, -0.7794,  1.1566,  ..., -0.3143,  0.9719, -0.9296],
          [-1.3068, -0.2591, -2.6632,  ..., -1.4096, -0.1517, -0.2093],
          [ 0.2623, -0.0524, -1.0747,  ...,  0.4627,  1.2773,  0.6007]],

         [[ 0.6544, -0.5229,  0.0918,  ...,  1.7184, -0.3747,  0.3818],
          [-0.6456, -0.9970,  0.5023,  ...,  1.9696, -2.3847,  1.1051],
          [-2.3680, -0.3973, -1.1303,  ..., -1.4854, -1.0716, -1.9317],
          ...,
          [-1.1163, -0.2009,  0.4868,  ..., -0.8149,  2.2741,  0.1111],
          [-1.2946,  0.4767, -0.3863,  ..., -1.2310,  1.8280, -0.6604],
          [-0.2996, -0.9443,  0.6482,  ...,  1.2348,  0.0600, -0.5324]]],


        [[[ 2.0611,  1.1156,  0.3613,  ..., -1.6606,  0.3978,  0.0383],
          [-2.4379, -0.8128, -0.1738,  ..., -0.0349,  0.8534, -0.0452],
          [-0.9673, -1.0887, -1.3380,  ...,  1.2990, -1.0425,  0.6412],
          ...,
          [ 1.5917, -0.0764,  1.7278,  ..., -0.2648,  0.5392, -0.2963],
          [-0.0216,  0.7678, -1.0617,  ...,  2.0135, -0.7165, -0.1917],
          [ 0.2544, -0.0948, -0.3399,  ...,  0.9686,  0.7849, -2.6210]],

         [[-0.2776,  0.0079,  0.5984,  ..., -1.4482,  1.2979,  1.1461],
          [ 1.0142, -0.8393, -0.9592,  ...,  1.1495,  0.0236,  0.4343],
          [-0.3764,  0.7023,  1.2140,  ...,  1.5384,  0.8542,  0.0222],
          ...,
          [ 0.6276, -0.1557, -2.5961,  ...,  1.2143, -0.6841, -0.3126],
          [-0.3908,  0.0243, -0.3979,  ...,  0.3078,  0.8610, -1.4473],
          [ 0.0366,  0.1369,  1.6796,  ...,  0.3056,  0.6930,  1.4906]]],


        [[[ 1.1499,  0.7163, -0.2050,  ...,  1.5044, -1.2610,  1.2727],
          [ 2.4301,  1.0147,  0.7291,  ...,  1.4249,  1.3432, -1.0120],
          [-0.8537, -0.4896, -0.5046,  ..., -0.5413, -0.4120,  1.2303],
          ...,
          [ 0.5047,  1.0739, -0.5324,  ...,  1.0995,  0.5012, -0.5845],
          [-1.1720,  0.5305, -0.4864,  ..., -0.2566, -0.5549,  0.4301],
          [-0.7474,  0.0190,  0.3463,  ...,  0.2041,  0.2629,  0.0313]],

         [[ 0.6861, -0.0375, -0.1571,  ...,  1.3772, -0.2980, -1.0173],
          [ 0.5787,  1.2366,  0.0192,  ...,  1.0378,  0.9368, -0.4409],
          [-0.0779, -0.8620, -1.3680,  ...,  1.7050, -0.4583, -1.5033],
          ...,
          [-1.0288, -0.3765,  0.3476,  ...,  1.0238, -0.6343,  0.2332],
          [ 0.3923, -0.1086, -1.1964,  ..., -0.2627, -0.9582,  0.3761],
          [-0.5153, -0.6496,  0.5633,  ..., -1.1717, -1.3983, -0.8276]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4163e+00,  1.7019e+00,  8.9319e-01,  ...,  4.5582e-01,
           -8.9742e-02,  1.8859e+00],
          [ 2.0078e+00,  8.7523e-01,  4.5626e-01,  ...,  1.5183e-01,
            4.7941e-01, -6.6514e-01],
          [-6.6955e-01,  5.4582e-01,  2.9142e-01,  ..., -4.3388e-01,
            8.0266e-01,  9.5843e-01],
          ...,
          [ 1.3275e-01,  1.7150e-01, -1.3806e+00,  ...,  2.0552e+00,
            1.4316e+00,  5.8893e-01],
          [ 1.6331e+00, -4.7751e-01,  1.1566e+00,  ...,  7.3138e-01,
           -1.6400e+00,  8.4547e-01],
          [-6.2761e-01,  3.8951e-01,  1.1877e+00,  ..., -9.0949e-02,
            1.1936e+00,  8.2006e-01]],

         [[ 1.0707e+00, -5.8496e-02, -7.4386e-01,  ...,  4.2133e-01,
            2.0003e-01, -2.4458e+00],
          [-6.3963e-01, -1.1400e+00, -1.2390e-01,  ..., -9.4882e-01,
           -3.6082e-01,  3.2916e-01],
          [-2.6016e-01,  3.3918e-01,  1.8389e+00,  ..., -1.2007e+00,
           -1.3746e+00, -9.6343e-01],
          ...,
          [-2.9180e+00,  1.7764e+00, -2.7650e-01,  ...,  1.1965e+00,
           -6.7190e-01, -8.8038e-01],
          [ 3.6081e-01, -1.1350e+00,  8.4134e-01,  ...,  1.9699e-02,
            1.0593e+00,  8.1746e-01],
          [ 1.2750e+00, -2.9741e-01,  2.1638e-01,  ...,  8.8832e-01,
           -6.1915e-01,  1.8239e+00]]],


        [[[-3.2880e-01,  1.6732e+00,  1.0965e+00,  ..., -2.0982e+00,
           -6.5372e-01,  3.6850e-01],
          [-2.6305e-02, -4.0631e-01,  1.1507e+00,  ..., -6.6888e-02,
            1.6975e-01,  1.1914e+00],
          [-1.1718e+00, -1.1091e+00,  4.4681e-02,  ...,  2.2076e-01,
            1.4028e+00,  5.5172e-01],
          ...,
          [ 2.9175e-01,  1.7061e+00, -1.1444e+00,  ...,  7.4731e-01,
            1.5776e+00, -2.2737e-01],
          [ 6.8231e-01, -2.2482e-01, -5.4046e-01,  ..., -1.5196e+00,
           -9.7990e-02, -5.3205e-01],
          [-7.8141e-01,  6.2137e-01, -5.6423e-01,  ..., -5.4506e-01,
            2.4336e+00, -5.2029e-01]],

         [[ 2.8503e-02, -9.2021e-01,  2.8451e-01,  ..., -1.4476e-01,
            8.2985e-01,  2.1817e+00],
          [-1.0499e+00,  1.5766e-01,  2.5447e-02,  ..., -1.5836e+00,
            4.1966e-01,  1.2878e+00],
          [-4.6375e-01,  3.1469e-01, -1.2066e-01,  ...,  5.4512e-01,
           -1.3110e-03,  1.7693e+00],
          ...,
          [ 7.2697e-01, -2.4090e+00, -1.1746e+00,  ...,  2.8147e-01,
            7.0702e-01,  3.7760e-01],
          [-1.8368e+00,  6.9391e-01,  7.9081e-01,  ..., -5.9506e-01,
           -9.5983e-01, -9.8167e-02],
          [-6.8776e-01, -2.0630e-01,  2.4390e-01,  ...,  8.3278e-01,
           -4.6056e-01,  1.5742e-02]]],


        [[[ 1.3870e+00,  2.4533e-01,  6.4543e-01,  ..., -1.0099e+00,
            2.0230e+00, -4.6898e-01],
          [-1.1280e+00,  1.1061e+00, -7.4220e-01,  ..., -3.7408e-01,
            2.9883e-01,  2.9307e+00],
          [-5.1730e-01,  2.9301e-01,  1.1887e+00,  ..., -1.8148e+00,
           -1.7662e+00,  3.3494e-02],
          ...,
          [ 3.9811e-01, -3.9287e-01, -8.2805e-01,  ..., -3.9485e-01,
           -4.3292e-01, -8.5086e-01],
          [-1.2000e+00, -2.9901e-01,  8.0162e-01,  ...,  1.1236e-01,
            1.1618e+00, -1.3908e+00],
          [ 1.2121e+00, -1.0148e+00,  9.4663e-01,  ...,  1.4304e-01,
            7.0181e-01, -7.2680e-01]],

         [[ 1.4464e+00, -8.0767e-01, -7.9263e-01,  ...,  2.1627e+00,
            9.0798e-01,  6.8478e-01],
          [-9.9761e-01,  3.5627e-01,  1.5104e+00,  ..., -9.3983e-01,
           -1.6885e+00, -5.8497e-01],
          [-3.8552e-01, -6.4213e-01, -9.8071e-01,  ..., -6.6650e-01,
            1.6170e-01, -9.1812e-01],
          ...,
          [ 4.7719e-01, -5.8796e-01, -8.8840e-01,  ...,  1.2222e+00,
            4.8043e-01,  3.9378e-01],
          [-1.6815e+00,  4.7535e-02,  1.5861e-01,  ...,  6.2126e-02,
            4.5357e-01, -1.1906e+00],
          [-1.5881e+00, -1.6111e+00,  8.0696e-01,  ..., -1.2153e+00,
           -6.9207e-02, -2.6044e-01]]],


        [[[-9.2423e-01,  4.5325e-01, -2.1945e-01,  ..., -2.2463e-01,
            5.7661e-01, -2.2779e-01],
          [-9.4342e-01,  3.4209e-01,  1.3869e-01,  ..., -6.2435e-01,
            4.7376e-01,  1.2244e+00],
          [ 1.8852e+00, -3.3803e-01,  1.9775e+00,  ..., -1.8911e-01,
           -6.4298e-01, -6.7054e-01],
          ...,
          [ 7.1558e-02, -6.0187e-01, -1.1150e+00,  ...,  4.3311e-01,
            7.3528e-02, -3.0520e-01],
          [ 1.0519e+00, -2.0674e+00,  1.3633e+00,  ...,  1.5792e+00,
            1.4626e+00, -3.7195e-03],
          [-8.3514e-01, -1.0588e+00, -8.1699e-01,  ..., -7.9821e-01,
           -5.2918e-01,  1.1391e+00]],

         [[-1.6088e-01, -5.7747e-01,  9.1153e-01,  ...,  7.0694e-01,
           -7.4460e-01,  3.9602e-01],
          [ 1.0653e-01, -1.2873e-01,  9.6857e-01,  ...,  1.7709e-02,
            1.1653e+00, -2.0064e-01],
          [ 3.9488e-01, -5.4896e-01, -2.0846e+00,  ..., -2.9016e-02,
           -6.1442e-01, -5.2030e-01],
          ...,
          [-3.1529e-01,  4.7249e-01, -4.1924e-01,  ...,  1.7352e-01,
           -1.8856e+00,  6.7457e-01],
          [ 9.2381e-01, -1.4192e+00, -2.4582e+00,  ..., -2.5129e+00,
            6.7619e-01, -6.6586e-01],
          [-2.0566e-01, -1.9183e-01,  4.6658e-01,  ...,  9.9319e-01,
           -5.5973e-01,  4.8156e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8224, -0.8507,  0.8577,  ...,  1.5924, -0.5631,  0.6862],
          [ 0.5520, -1.1696,  0.9349,  ...,  0.5003,  1.1100,  1.5098],
          [-0.9702,  1.4473,  0.7278,  ...,  0.1196,  0.5590, -0.1141],
          ...,
          [ 0.1584,  1.8022, -0.6374,  ...,  0.2472,  0.7441,  0.3973],
          [-0.0941, -1.8539,  0.5389,  ...,  0.5182, -0.1234, -1.3009],
          [ 1.3471, -0.6909,  0.1393,  ...,  0.2371,  1.2571, -0.8498]],

         [[ 1.6316,  0.4833, -0.0599,  ...,  0.3709,  0.6775, -0.3776],
          [ 2.2587, -0.7949, -0.4512,  ..., -0.0905,  0.0826,  0.7040],
          [ 0.0502, -0.0637,  0.0454,  ...,  0.2630, -1.9467,  0.5482],
          ...,
          [-0.0146,  0.2938, -0.7120,  ...,  0.0770, -1.9525, -0.6802],
          [-0.3620,  3.0344, -0.6427,  ...,  0.1831,  1.5431, -0.5324],
          [-0.5476, -0.0389,  0.5338,  ...,  0.5849, -1.0048,  0.6191]]],


        [[[ 0.1127,  1.3250,  0.3857,  ..., -2.0260,  0.3356, -0.4092],
          [ 2.0101, -1.7412, -1.2192,  ..., -0.5945,  1.1934, -0.0867],
          [ 1.3709,  1.9640, -0.4646,  ..., -1.1151,  1.3982,  1.1622],
          ...,
          [-0.5914, -0.7770,  1.1609,  ..., -0.3180,  0.9716, -0.9283],
          [-1.3069, -0.2597, -2.6658,  ..., -1.4097, -0.1510, -0.2107],
          [ 0.2629, -0.0523, -1.0757,  ...,  0.4633,  1.2795,  0.6002]],

         [[ 0.6566, -0.5252,  0.0896,  ...,  1.7203, -0.3726,  0.3812],
          [-0.6444, -0.9986,  0.5003,  ...,  1.9703, -2.3833,  1.1052],
          [-2.3668, -0.4000, -1.1336,  ..., -1.4829, -1.0687, -1.9318],
          ...,
          [-1.1131, -0.2054,  0.4837,  ..., -0.8135,  2.2763,  0.1098],
          [-1.2958,  0.4759, -0.3864,  ..., -1.2303,  1.8276, -0.6588],
          [-0.3011, -0.9458,  0.6492,  ...,  1.2347,  0.0600, -0.5304]]],


        [[[ 2.0610,  1.1176,  0.3636,  ..., -1.6620,  0.3970,  0.0395],
          [-2.4401, -0.8129, -0.1727,  ..., -0.0366,  0.8527, -0.0436],
          [-0.9720, -1.0873, -1.3363,  ...,  1.2959, -1.0443,  0.6454],
          ...,
          [ 1.5913, -0.0743,  1.7314,  ..., -0.2691,  0.5387, -0.2931],
          [-0.0218,  0.7680, -1.0631,  ...,  2.0148, -0.7166, -0.1927],
          [ 0.2553, -0.0963, -0.3405,  ...,  0.9696,  0.7847, -2.6224]],

         [[-0.2764,  0.0062,  0.5973,  ..., -1.4479,  1.3002,  1.1446],
          [ 1.0160, -0.8403, -0.9612,  ...,  1.1515,  0.0246,  0.4327],
          [-0.3740,  0.7013,  1.2137,  ...,  1.5423,  0.8578,  0.0200],
          ...,
          [ 0.6310, -0.1574, -2.5996,  ...,  1.2184, -0.6827, -0.3148],
          [-0.3926,  0.0234, -0.3971,  ...,  0.3070,  0.8603, -1.4471],
          [ 0.0356,  0.1370,  1.6809,  ...,  0.3048,  0.6923,  1.4922]]],


        [[[ 1.1498,  0.7184, -0.2039,  ...,  1.5045, -1.2635,  1.2751],
          [ 2.4304,  1.0166,  0.7308,  ...,  1.4250,  1.3430, -1.0116],
          [-0.8586, -0.4875, -0.5004,  ..., -0.5462, -0.4160,  1.2341],
          ...,
          [ 0.5028,  1.0766, -0.5301,  ...,  1.0983,  0.4996, -0.5825],
          [-1.1736,  0.5316, -0.4869,  ..., -0.2572, -0.5555,  0.4308],
          [-0.7479,  0.0189,  0.3456,  ...,  0.2046,  0.2632,  0.0314]],

         [[ 0.6880, -0.0397, -0.1571,  ...,  1.3797, -0.2962, -1.0181],
          [ 0.5800,  1.2358,  0.0192,  ...,  1.0398,  0.9386, -0.4411],
          [-0.0750, -0.8655, -1.3681,  ...,  1.7093, -0.4560, -1.5040],
          ...,
          [-1.0285, -0.3794,  0.3477,  ...,  1.0280, -0.6326,  0.2331],
          [ 0.3921, -0.1089, -1.1956,  ..., -0.2640, -0.9593,  0.3773],
          [-0.5162, -0.6493,  0.5635,  ..., -1.1726, -1.3993, -0.8276]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7752, -0.3368, -0.0353,  ..., -0.5786, -0.2970, -0.5748],
         [ 0.8897,  0.0553,  1.1435,  ...,  0.6180, -0.8925, -1.0621],
         [ 0.8434,  0.3170,  0.3627,  ...,  1.3701, -0.0392, -0.5790],
         ...,
         [-1.2760,  2.0506,  0.1531,  ...,  0.1359, -0.3214,  0.2440],
         [-0.5598,  0.7659, -0.2564,  ..., -1.5004, -0.6462,  1.3569],
         [-0.0134,  0.6576,  2.1972,  ...,  0.6696,  0.2776, -0.4592]],

        [[-1.0774,  1.2591, -0.3837,  ...,  0.5592, -0.3204,  0.7494],
         [ 0.5073,  1.5043, -1.0476,  ...,  0.0661, -1.0241, -1.0077],
         [ 0.1605,  0.5656, -0.2908,  ...,  0.9430,  1.2690,  0.9498],
         ...,
         [ 0.3137, -0.8804, -0.1459,  ...,  0.2835, -0.0484,  0.5289],
         [ 0.3692, -0.6840, -0.4397,  ...,  0.0127, -0.0165, -0.1708],
         [ 0.1165,  0.9568,  0.3785,  ...,  0.7286,  1.5694, -1.5058]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4163,  1.7019,  0.8932,  ...,  0.4558, -0.0897,  1.8859],
         [ 2.0078,  0.8752,  0.4563,  ...,  0.1518,  0.4794, -0.6651],
         [-0.6696,  0.5458,  0.2914,  ..., -0.4339,  0.8027,  0.9584],
         ...,
         [ 0.1328,  0.1715, -1.3806,  ...,  2.0552,  1.4316,  0.5889],
         [ 1.6331, -0.4775,  1.1566,  ...,  0.7314, -1.6400,  0.8455],
         [-0.6276,  0.3895,  1.1877,  ..., -0.0909,  1.1936,  0.8201]],

        [[ 1.0707, -0.0585, -0.7439,  ...,  0.4213,  0.2000, -2.4458],
         [-0.6396, -1.1400, -0.1239,  ..., -0.9488, -0.3608,  0.3292],
         [-0.2602,  0.3392,  1.8389,  ..., -1.2007, -1.3746, -0.9634],
         ...,
         [-2.9180,  1.7764, -0.2765,  ...,  1.1965, -0.6719, -0.8804],
         [ 0.3608, -1.1350,  0.8413,  ...,  0.0197,  1.0593,  0.8175],
         [ 1.2750, -0.2974,  0.2164,  ...,  0.8883, -0.6191,  1.8239]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 150.436, Val Loss : 170.451
======> Trajectory Loss : 12.679, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.366, BelowGroundPenalize Loss : 1.186
===> [Minibatch 13/129].........tensor([[[-0.7752, -0.3368, -0.0353,  ..., -0.5786, -0.2970, -0.5748],
         [ 0.8897,  0.0553,  1.1435,  ...,  0.6180, -0.8925, -1.0621],
         [ 0.8434,  0.3170,  0.3627,  ...,  1.3701, -0.0392, -0.5790],
         ...,
         [-1.2760,  2.0506,  0.1531,  ...,  0.1359, -0.3214,  0.2440],
         [-0.5598,  0.7659, -0.2564,  ..., -1.5004, -0.6462,  1.3569],
         [-0.0134,  0.6576,  2.1972,  ...,  0.6696,  0.2776, -0.4592]],

        [[-1.0774,  1.2591, -0.3837,  ...,  0.5592, -0.3204,  0.7494],
         [ 0.5073,  1.5043, -1.0476,  ...,  0.0661, -1.0241, -1.0077],
         [ 0.1605,  0.5656, -0.2908,  ...,  0.9430,  1.2690,  0.9498],
         ...,
         [ 0.3137, -0.8804, -0.1459,  ...,  0.2835, -0.0484,  0.5289],
         [ 0.3692, -0.6840, -0.4397,  ...,  0.0127, -0.0165, -0.1708],
         [ 0.1165,  0.9568,  0.3785,  ...,  0.7286,  1.5694, -1.5058]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4163,  1.7019,  0.8932,  ...,  0.4558, -0.0897,  1.8859],
         [ 2.0078,  0.8752,  0.4563,  ...,  0.1518,  0.4794, -0.6651],
         [-0.6696,  0.5458,  0.2914,  ..., -0.4339,  0.8027,  0.9584],
         ...,
         [ 0.1328,  0.1715, -1.3806,  ...,  2.0552,  1.4316,  0.5889],
         [ 1.6331, -0.4775,  1.1566,  ...,  0.7314, -1.6400,  0.8455],
         [-0.6276,  0.3895,  1.1877,  ..., -0.0909,  1.1936,  0.8201]],

        [[ 1.0707, -0.0585, -0.7439,  ...,  0.4213,  0.2000, -2.4458],
         [-0.6396, -1.1400, -0.1239,  ..., -0.9488, -0.3608,  0.3292],
         [-0.2602,  0.3392,  1.8389,  ..., -1.2007, -1.3746, -0.9634],
         ...,
         [-2.9180,  1.7764, -0.2765,  ...,  1.1965, -0.6719, -0.8804],
         [ 0.3608, -1.1350,  0.8413,  ...,  0.0197,  1.0593,  0.8175],
         [ 1.2750, -0.2974,  0.2164,  ...,  0.8883, -0.6191,  1.8239]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4163e+00,  1.7019e+00,  8.9319e-01,  ...,  4.5582e-01,
           -8.9742e-02,  1.8859e+00],
          [ 2.0078e+00,  8.7523e-01,  4.5626e-01,  ...,  1.5183e-01,
            4.7941e-01, -6.6514e-01],
          [-6.6955e-01,  5.4582e-01,  2.9142e-01,  ..., -4.3388e-01,
            8.0266e-01,  9.5843e-01],
          ...,
          [ 1.3275e-01,  1.7150e-01, -1.3806e+00,  ...,  2.0552e+00,
            1.4316e+00,  5.8893e-01],
          [ 1.6331e+00, -4.7751e-01,  1.1566e+00,  ...,  7.3138e-01,
           -1.6400e+00,  8.4547e-01],
          [-6.2761e-01,  3.8951e-01,  1.1877e+00,  ..., -9.0949e-02,
            1.1936e+00,  8.2006e-01]],

         [[ 1.0707e+00, -5.8496e-02, -7.4386e-01,  ...,  4.2133e-01,
            2.0003e-01, -2.4458e+00],
          [-6.3963e-01, -1.1400e+00, -1.2390e-01,  ..., -9.4882e-01,
           -3.6082e-01,  3.2916e-01],
          [-2.6016e-01,  3.3918e-01,  1.8389e+00,  ..., -1.2007e+00,
           -1.3746e+00, -9.6343e-01],
          ...,
          [-2.9180e+00,  1.7764e+00, -2.7650e-01,  ...,  1.1965e+00,
           -6.7190e-01, -8.8038e-01],
          [ 3.6081e-01, -1.1350e+00,  8.4134e-01,  ...,  1.9699e-02,
            1.0593e+00,  8.1746e-01],
          [ 1.2750e+00, -2.9741e-01,  2.1638e-01,  ...,  8.8832e-01,
           -6.1915e-01,  1.8239e+00]]],


        [[[-3.2880e-01,  1.6732e+00,  1.0965e+00,  ..., -2.0982e+00,
           -6.5372e-01,  3.6850e-01],
          [-2.6305e-02, -4.0631e-01,  1.1507e+00,  ..., -6.6888e-02,
            1.6975e-01,  1.1914e+00],
          [-1.1718e+00, -1.1091e+00,  4.4681e-02,  ...,  2.2076e-01,
            1.4028e+00,  5.5172e-01],
          ...,
          [ 2.9175e-01,  1.7061e+00, -1.1444e+00,  ...,  7.4731e-01,
            1.5776e+00, -2.2737e-01],
          [ 6.8231e-01, -2.2482e-01, -5.4046e-01,  ..., -1.5196e+00,
           -9.7990e-02, -5.3205e-01],
          [-7.8141e-01,  6.2137e-01, -5.6423e-01,  ..., -5.4506e-01,
            2.4336e+00, -5.2029e-01]],

         [[ 2.8503e-02, -9.2021e-01,  2.8451e-01,  ..., -1.4476e-01,
            8.2985e-01,  2.1817e+00],
          [-1.0499e+00,  1.5766e-01,  2.5447e-02,  ..., -1.5836e+00,
            4.1966e-01,  1.2878e+00],
          [-4.6375e-01,  3.1469e-01, -1.2066e-01,  ...,  5.4512e-01,
           -1.3110e-03,  1.7693e+00],
          ...,
          [ 7.2697e-01, -2.4090e+00, -1.1746e+00,  ...,  2.8147e-01,
            7.0702e-01,  3.7760e-01],
          [-1.8368e+00,  6.9391e-01,  7.9081e-01,  ..., -5.9506e-01,
           -9.5983e-01, -9.8167e-02],
          [-6.8776e-01, -2.0630e-01,  2.4390e-01,  ...,  8.3278e-01,
           -4.6056e-01,  1.5742e-02]]],


        [[[ 1.3870e+00,  2.4533e-01,  6.4543e-01,  ..., -1.0099e+00,
            2.0230e+00, -4.6898e-01],
          [-1.1280e+00,  1.1061e+00, -7.4220e-01,  ..., -3.7408e-01,
            2.9883e-01,  2.9307e+00],
          [-5.1730e-01,  2.9301e-01,  1.1887e+00,  ..., -1.8148e+00,
           -1.7662e+00,  3.3494e-02],
          ...,
          [ 3.9811e-01, -3.9287e-01, -8.2805e-01,  ..., -3.9485e-01,
           -4.3292e-01, -8.5086e-01],
          [-1.2000e+00, -2.9901e-01,  8.0162e-01,  ...,  1.1236e-01,
            1.1618e+00, -1.3908e+00],
          [ 1.2121e+00, -1.0148e+00,  9.4663e-01,  ...,  1.4304e-01,
            7.0181e-01, -7.2680e-01]],

         [[ 1.4464e+00, -8.0767e-01, -7.9263e-01,  ...,  2.1627e+00,
            9.0798e-01,  6.8478e-01],
          [-9.9761e-01,  3.5627e-01,  1.5104e+00,  ..., -9.3983e-01,
           -1.6885e+00, -5.8497e-01],
          [-3.8552e-01, -6.4213e-01, -9.8071e-01,  ..., -6.6650e-01,
            1.6170e-01, -9.1812e-01],
          ...,
          [ 4.7719e-01, -5.8796e-01, -8.8840e-01,  ...,  1.2222e+00,
            4.8043e-01,  3.9378e-01],
          [-1.6815e+00,  4.7535e-02,  1.5861e-01,  ...,  6.2126e-02,
            4.5357e-01, -1.1906e+00],
          [-1.5881e+00, -1.6111e+00,  8.0696e-01,  ..., -1.2153e+00,
           -6.9207e-02, -2.6044e-01]]],


        [[[-9.2423e-01,  4.5325e-01, -2.1945e-01,  ..., -2.2463e-01,
            5.7661e-01, -2.2779e-01],
          [-9.4342e-01,  3.4209e-01,  1.3869e-01,  ..., -6.2435e-01,
            4.7376e-01,  1.2244e+00],
          [ 1.8852e+00, -3.3803e-01,  1.9775e+00,  ..., -1.8911e-01,
           -6.4298e-01, -6.7054e-01],
          ...,
          [ 7.1558e-02, -6.0187e-01, -1.1150e+00,  ...,  4.3311e-01,
            7.3528e-02, -3.0520e-01],
          [ 1.0519e+00, -2.0674e+00,  1.3633e+00,  ...,  1.5792e+00,
            1.4626e+00, -3.7195e-03],
          [-8.3514e-01, -1.0588e+00, -8.1699e-01,  ..., -7.9821e-01,
           -5.2918e-01,  1.1391e+00]],

         [[-1.6088e-01, -5.7747e-01,  9.1153e-01,  ...,  7.0694e-01,
           -7.4460e-01,  3.9602e-01],
          [ 1.0653e-01, -1.2873e-01,  9.6857e-01,  ...,  1.7709e-02,
            1.1653e+00, -2.0064e-01],
          [ 3.9488e-01, -5.4896e-01, -2.0846e+00,  ..., -2.9016e-02,
           -6.1442e-01, -5.2030e-01],
          ...,
          [-3.1529e-01,  4.7249e-01, -4.1924e-01,  ...,  1.7352e-01,
           -1.8856e+00,  6.7457e-01],
          [ 9.2381e-01, -1.4192e+00, -2.4582e+00,  ..., -2.5129e+00,
            6.7619e-01, -6.6586e-01],
          [-2.0566e-01, -1.9183e-01,  4.6658e-01,  ...,  9.9319e-01,
           -5.5973e-01,  4.8156e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8224, -0.8507,  0.8577,  ...,  1.5924, -0.5631,  0.6862],
          [ 0.5520, -1.1696,  0.9349,  ...,  0.5003,  1.1100,  1.5098],
          [-0.9702,  1.4473,  0.7278,  ...,  0.1196,  0.5590, -0.1141],
          ...,
          [ 0.1584,  1.8022, -0.6374,  ...,  0.2472,  0.7441,  0.3973],
          [-0.0941, -1.8539,  0.5389,  ...,  0.5182, -0.1234, -1.3009],
          [ 1.3471, -0.6909,  0.1393,  ...,  0.2371,  1.2571, -0.8498]],

         [[ 1.6316,  0.4833, -0.0599,  ...,  0.3709,  0.6775, -0.3776],
          [ 2.2587, -0.7949, -0.4512,  ..., -0.0905,  0.0826,  0.7040],
          [ 0.0502, -0.0637,  0.0454,  ...,  0.2630, -1.9467,  0.5482],
          ...,
          [-0.0146,  0.2938, -0.7120,  ...,  0.0770, -1.9525, -0.6802],
          [-0.3620,  3.0344, -0.6427,  ...,  0.1831,  1.5431, -0.5324],
          [-0.5476, -0.0389,  0.5338,  ...,  0.5849, -1.0048,  0.6191]]],


        [[[ 0.1127,  1.3250,  0.3857,  ..., -2.0260,  0.3356, -0.4092],
          [ 2.0101, -1.7412, -1.2192,  ..., -0.5945,  1.1934, -0.0867],
          [ 1.3709,  1.9640, -0.4646,  ..., -1.1151,  1.3982,  1.1622],
          ...,
          [-0.5914, -0.7770,  1.1609,  ..., -0.3180,  0.9716, -0.9283],
          [-1.3069, -0.2597, -2.6658,  ..., -1.4097, -0.1510, -0.2107],
          [ 0.2629, -0.0523, -1.0757,  ...,  0.4633,  1.2795,  0.6002]],

         [[ 0.6566, -0.5252,  0.0896,  ...,  1.7203, -0.3726,  0.3812],
          [-0.6444, -0.9986,  0.5003,  ...,  1.9703, -2.3833,  1.1052],
          [-2.3668, -0.4000, -1.1336,  ..., -1.4829, -1.0687, -1.9318],
          ...,
          [-1.1131, -0.2054,  0.4837,  ..., -0.8135,  2.2763,  0.1098],
          [-1.2958,  0.4759, -0.3864,  ..., -1.2303,  1.8276, -0.6588],
          [-0.3011, -0.9458,  0.6492,  ...,  1.2347,  0.0600, -0.5304]]],


        [[[ 2.0610,  1.1176,  0.3636,  ..., -1.6620,  0.3970,  0.0395],
          [-2.4401, -0.8129, -0.1727,  ..., -0.0366,  0.8527, -0.0436],
          [-0.9720, -1.0873, -1.3363,  ...,  1.2959, -1.0443,  0.6454],
          ...,
          [ 1.5913, -0.0743,  1.7314,  ..., -0.2691,  0.5387, -0.2931],
          [-0.0218,  0.7680, -1.0631,  ...,  2.0148, -0.7166, -0.1927],
          [ 0.2553, -0.0963, -0.3405,  ...,  0.9696,  0.7847, -2.6224]],

         [[-0.2764,  0.0062,  0.5973,  ..., -1.4479,  1.3002,  1.1446],
          [ 1.0160, -0.8403, -0.9612,  ...,  1.1515,  0.0246,  0.4327],
          [-0.3740,  0.7013,  1.2137,  ...,  1.5423,  0.8578,  0.0200],
          ...,
          [ 0.6310, -0.1574, -2.5996,  ...,  1.2184, -0.6827, -0.3148],
          [-0.3926,  0.0234, -0.3971,  ...,  0.3070,  0.8603, -1.4471],
          [ 0.0356,  0.1370,  1.6809,  ...,  0.3048,  0.6923,  1.4922]]],


        [[[ 1.1498,  0.7184, -0.2039,  ...,  1.5045, -1.2635,  1.2751],
          [ 2.4304,  1.0166,  0.7308,  ...,  1.4250,  1.3430, -1.0116],
          [-0.8586, -0.4875, -0.5004,  ..., -0.5462, -0.4160,  1.2341],
          ...,
          [ 0.5028,  1.0766, -0.5301,  ...,  1.0983,  0.4996, -0.5825],
          [-1.1736,  0.5316, -0.4869,  ..., -0.2572, -0.5555,  0.4308],
          [-0.7479,  0.0189,  0.3456,  ...,  0.2046,  0.2632,  0.0314]],

         [[ 0.6880, -0.0397, -0.1571,  ...,  1.3797, -0.2962, -1.0181],
          [ 0.5800,  1.2358,  0.0192,  ...,  1.0398,  0.9386, -0.4411],
          [-0.0750, -0.8655, -1.3681,  ...,  1.7093, -0.4560, -1.5040],
          ...,
          [-1.0285, -0.3794,  0.3477,  ...,  1.0280, -0.6326,  0.2331],
          [ 0.3921, -0.1089, -1.1956,  ..., -0.2640, -0.9593,  0.3773],
          [-0.5162, -0.6493,  0.5635,  ..., -1.1726, -1.3993, -0.8276]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4120e+00,  1.7060e+00,  8.8993e-01,  ...,  4.5829e-01,
           -8.9735e-02,  1.8887e+00],
          [ 2.0083e+00,  8.7793e-01,  4.5333e-01,  ...,  1.5375e-01,
            4.8111e-01, -6.6544e-01],
          [-6.6926e-01,  5.4866e-01,  2.8795e-01,  ..., -4.3092e-01,
            8.0084e-01,  9.5521e-01],
          ...,
          [ 1.3261e-01,  1.7360e-01, -1.3843e+00,  ...,  2.0580e+00,
            1.4342e+00,  5.8641e-01],
          [ 1.6335e+00, -4.7538e-01,  1.1539e+00,  ...,  7.3217e-01,
           -1.6393e+00,  8.4384e-01],
          [-6.2888e-01,  3.9005e-01,  1.1879e+00,  ..., -9.0853e-02,
            1.1931e+00,  8.1914e-01]],

         [[ 1.0674e+00, -5.5237e-02, -7.4073e-01,  ...,  4.2446e-01,
            1.9697e-01, -2.4486e+00],
          [-6.4194e-01, -1.1376e+00, -1.2144e-01,  ..., -9.4636e-01,
           -3.6335e-01,  3.2654e-01],
          [-2.6209e-01,  3.4107e-01,  1.8410e+00,  ..., -1.1983e+00,
           -1.3767e+00, -9.6594e-01],
          ...,
          [-2.9208e+00,  1.7793e+00, -2.7349e-01,  ...,  1.1998e+00,
           -6.7506e-01, -8.8355e-01],
          [ 3.6016e-01, -1.1346e+00,  8.4159e-01,  ...,  2.0762e-02,
            1.0590e+00,  8.1691e-01],
          [ 1.2753e+00, -2.9816e-01,  2.1802e-01,  ...,  8.8802e-01,
           -6.1935e-01,  1.8219e+00]]],


        [[[-3.3039e-01,  1.6748e+00,  1.0983e+00,  ..., -2.0999e+00,
           -6.5548e-01,  3.7022e-01],
          [-2.7618e-02, -4.0559e-01,  1.1524e+00,  ..., -6.8955e-02,
            1.6846e-01,  1.1931e+00],
          [-1.1757e+00, -1.1051e+00,  4.8620e-02,  ...,  2.1664e-01,
            1.3987e+00,  5.5575e-01],
          ...,
          [ 2.8897e-01,  1.7088e+00, -1.1422e+00,  ...,  7.4406e-01,
            1.5745e+00, -2.2534e-01],
          [ 6.8196e-01, -2.2552e-01, -5.4029e-01,  ..., -1.5208e+00,
           -9.8607e-02, -5.3170e-01],
          [-7.8128e-01,  6.2118e-01, -5.6470e-01,  ..., -5.4558e-01,
            2.4337e+00, -5.2087e-01]],

         [[ 3.0850e-02, -9.2178e-01,  2.8346e-01,  ..., -1.4660e-01,
            8.3207e-01,  2.1838e+00],
          [-1.0482e+00,  1.5585e-01,  2.3167e-02,  ..., -1.5859e+00,
            4.2141e-01,  1.2896e+00],
          [-4.6117e-01,  3.1156e-01, -1.2343e-01,  ...,  5.4261e-01,
            1.0856e-03,  1.7718e+00],
          ...,
          [ 7.2999e-01, -2.4077e+00, -1.1771e+00,  ...,  2.7863e-01,
            7.0751e-01,  3.7975e-01],
          [-1.8363e+00,  6.9217e-01,  7.8808e-01,  ..., -5.9520e-01,
           -9.5999e-01, -9.6790e-02],
          [-6.8840e-01, -2.0836e-01,  2.4244e-01,  ...,  8.3360e-01,
           -4.6079e-01,  1.7680e-02]]],


        [[[ 1.3886e+00,  2.4573e-01,  6.4610e-01,  ..., -1.0095e+00,
            2.0228e+00, -4.6750e-01],
          [-1.1288e+00,  1.1078e+00, -7.4286e-01,  ..., -3.7576e-01,
            3.0017e-01,  2.9328e+00],
          [-5.1783e-01,  2.9617e-01,  1.1921e+00,  ..., -1.8178e+00,
           -1.7629e+00,  3.6969e-02],
          ...,
          [ 3.9792e-01, -3.9361e-01, -8.2759e-01,  ..., -3.9559e-01,
           -4.3469e-01, -8.4824e-01],
          [-1.1977e+00, -2.9948e-01,  8.0002e-01,  ...,  1.1264e-01,
            1.1614e+00, -1.3907e+00],
          [ 1.2112e+00, -1.0158e+00,  9.4671e-01,  ...,  1.4317e-01,
            7.0017e-01, -7.2691e-01]],

         [[ 1.4484e+00, -8.1010e-01, -7.9451e-01,  ...,  2.1646e+00,
            9.0971e-01,  6.8285e-01],
          [-9.9613e-01,  3.5721e-01,  1.5096e+00,  ..., -9.3876e-01,
           -1.6875e+00, -5.8634e-01],
          [-3.8301e-01, -6.4098e-01, -9.8296e-01,  ..., -6.6492e-01,
            1.6370e-01, -9.2048e-01],
          ...,
          [ 4.8033e-01, -5.8858e-01, -8.9088e-01,  ...,  1.2246e+00,
            4.8247e-01,  3.9163e-01],
          [-1.6828e+00,  4.6602e-02,  1.5888e-01,  ...,  6.1988e-02,
            4.5298e-01, -1.1901e+00],
          [-1.5880e+00, -1.6104e+00,  8.0834e-01,  ..., -1.2172e+00,
           -7.0590e-02, -2.5897e-01]]],


        [[[-9.2472e-01,  4.5160e-01, -2.1849e-01,  ..., -2.2379e-01,
            5.7636e-01, -2.2666e-01],
          [-9.4540e-01,  3.4256e-01,  1.3999e-01,  ..., -6.2556e-01,
            4.7222e-01,  1.2245e+00],
          [ 1.8820e+00, -3.3678e-01,  1.9808e+00,  ..., -1.9222e-01,
           -6.4632e-01, -6.6793e-01],
          ...,
          [ 6.9491e-02, -6.0259e-01, -1.1141e+00,  ...,  4.3183e-01,
            7.2416e-02, -3.0517e-01],
          [ 1.0514e+00, -2.0684e+00,  1.3628e+00,  ...,  1.5795e+00,
            1.4655e+00, -2.8427e-03],
          [-8.3502e-01, -1.0605e+00, -8.1769e-01,  ..., -7.9737e-01,
           -5.2778e-01,  1.1390e+00]],

         [[-1.5921e-01, -5.7904e-01,  9.1268e-01,  ...,  7.0868e-01,
           -7.4381e-01,  3.9416e-01],
          [ 1.0779e-01, -1.3021e-01,  9.6997e-01,  ...,  1.9194e-02,
            1.1656e+00, -2.0055e-01],
          [ 3.9577e-01, -5.4918e-01, -2.0841e+00,  ..., -2.7801e-02,
           -6.1515e-01, -5.2172e-01],
          ...,
          [-3.1535e-01,  4.7175e-01, -4.2047e-01,  ...,  1.7406e-01,
           -1.8852e+00,  6.7352e-01],
          [ 9.2293e-01, -1.4192e+00, -2.4582e+00,  ..., -2.5132e+00,
            6.7601e-01, -6.6549e-01],
          [-2.0697e-01, -1.9110e-01,  4.6561e-01,  ...,  9.9210e-01,
           -5.5883e-01,  4.8086e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8256, -0.8482,  0.8550,  ...,  1.5958, -0.5620,  0.6861],
          [ 0.5481, -1.1666,  0.9339,  ...,  0.4995,  1.1090,  1.5119],
          [-0.9745,  1.4514,  0.7254,  ...,  0.1206,  0.5610, -0.1114],
          ...,
          [ 0.1545,  1.8053, -0.6381,  ...,  0.2475,  0.7442,  0.4015],
          [-0.0962, -1.8533,  0.5406,  ...,  0.5155, -0.1240, -1.2977],
          [ 1.3453, -0.6902,  0.1395,  ...,  0.2352,  1.2569, -0.8490]],

         [[ 1.6310,  0.4856, -0.0581,  ...,  0.3736,  0.6752, -0.3804],
          [ 2.2587, -0.7938, -0.4504,  ..., -0.0882,  0.0821,  0.7017],
          [ 0.0502, -0.0631,  0.0458,  ...,  0.2653, -1.9472,  0.5459],
          ...,
          [-0.0167,  0.2952, -0.7105,  ...,  0.0799, -1.9541, -0.6836],
          [-0.3611,  3.0336, -0.6432,  ...,  0.1835,  1.5445, -0.5328],
          [-0.5464, -0.0400,  0.5327,  ...,  0.5842, -1.0036,  0.6196]]],


        [[[ 0.1115,  1.3270,  0.3869,  ..., -2.0269,  0.3339, -0.4084],
          [ 2.0103, -1.7400, -1.2188,  ..., -0.5968,  1.1932, -0.0856],
          [ 1.3676,  1.9673, -0.4612,  ..., -1.1187,  1.3949,  1.1656],
          ...,
          [-0.5946, -0.7750,  1.1643,  ..., -0.3209,  0.9715, -0.9273],
          [-1.3086, -0.2600, -2.6680,  ..., -1.4115, -0.1511, -0.2110],
          [ 0.2633, -0.0521, -1.0765,  ...,  0.4637,  1.2814,  0.5998]],

         [[ 0.6587, -0.5272,  0.0876,  ...,  1.7220, -0.3707,  0.3807],
          [-0.6429, -1.0003,  0.4983,  ...,  1.9711, -2.3819,  1.1051],
          [-2.3664, -0.4018, -1.1359,  ..., -1.4812, -1.0668, -1.9317],
          ...,
          [-1.1109, -0.2088,  0.4813,  ..., -0.8126,  2.2779,  0.1091],
          [-1.2964,  0.4750, -0.3871,  ..., -1.2296,  1.8277, -0.6574],
          [-0.3025, -0.9472,  0.6501,  ...,  1.2346,  0.0601, -0.5286]]],


        [[[ 2.0608,  1.1193,  0.3657,  ..., -1.6631,  0.3962,  0.0406],
          [-2.4425, -0.8127, -0.1715,  ..., -0.0389,  0.8520, -0.0417],
          [-0.9750, -1.0862, -1.3349,  ...,  1.2936, -1.0459,  0.6482],
          ...,
          [ 1.5910, -0.0728,  1.7342,  ..., -0.2722,  0.5383, -0.2907],
          [-0.0239,  0.7689, -1.0640,  ...,  2.0158, -0.7168, -0.1926],
          [ 0.2560, -0.0975, -0.3410,  ...,  0.9705,  0.7845, -2.6237]],

         [[-0.2754,  0.0047,  0.5963,  ..., -1.4476,  1.3023,  1.1432],
          [ 1.0183, -0.8413, -0.9633,  ...,  1.1539,  0.0259,  0.4309],
          [-0.3728,  0.7006,  1.2137,  ...,  1.5449,  0.8600,  0.0184],
          ...,
          [ 0.6334, -0.1587, -2.6024,  ...,  1.2215, -0.6818, -0.3166],
          [-0.3935,  0.0225, -0.3969,  ...,  0.3070,  0.8607, -1.4474],
          [ 0.0348,  0.1371,  1.6820,  ...,  0.3041,  0.6917,  1.4936]]],


        [[[ 1.1498,  0.7203, -0.2030,  ...,  1.5046, -1.2657,  1.2772],
          [ 2.4306,  1.0185,  0.7330,  ...,  1.4250,  1.3426, -1.0112],
          [-0.8620, -0.4857, -0.4973,  ..., -0.5494, -0.4192,  1.2373],
          ...,
          [ 0.5015,  1.0787, -0.5285,  ...,  1.0974,  0.4982, -0.5810],
          [-1.1774,  0.5330, -0.4858,  ..., -0.2598, -0.5579,  0.4320],
          [-0.7485,  0.0189,  0.3451,  ...,  0.2049,  0.2634,  0.0315]],

         [[ 0.6897, -0.0416, -0.1571,  ...,  1.3820, -0.2946, -1.0189],
          [ 0.5820,  1.2349,  0.0192,  ...,  1.0422,  0.9408, -0.4412],
          [-0.0736, -0.8674, -1.3681,  ...,  1.7122, -0.4549, -1.5046],
          ...,
          [-1.0285, -0.3815,  0.3478,  ...,  1.0309, -0.6314,  0.2331],
          [ 0.3931, -0.1099, -1.1949,  ..., -0.2647, -0.9598,  0.3782],
          [-0.5169, -0.6492,  0.5637,  ..., -1.1734, -1.4002, -0.8275]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7770, -0.3330, -0.0375,  ..., -0.5789, -0.3011, -0.5810],
         [ 0.8935,  0.0612,  1.1481,  ...,  0.6239, -0.8972, -1.0674],
         [ 0.8420,  0.3175,  0.3647,  ...,  1.3677, -0.0378, -0.5836],
         ...,
         [-1.2705,  2.0570,  0.1587,  ...,  0.1408, -0.3159,  0.2397],
         [-0.5552,  0.7681, -0.2515,  ..., -1.4972, -0.6427,  1.3544],
         [-0.0079,  0.6647,  2.2050,  ...,  0.6744,  0.2841, -0.4667]],

        [[-1.0786,  1.2592, -0.3808,  ...,  0.5590, -0.3206,  0.7489],
         [ 0.5074,  1.5059, -1.0454,  ...,  0.0643, -1.0188, -1.0094],
         [ 0.1554,  0.5704, -0.2862,  ...,  0.9484,  1.2764,  0.9449],
         ...,
         [ 0.3110, -0.8792, -0.1494,  ...,  0.2849, -0.0507,  0.5261],
         [ 0.3676, -0.6818, -0.4408,  ...,  0.0164, -0.0116, -0.1720],
         [ 0.1171,  0.9565,  0.3762,  ...,  0.7329,  1.5714, -1.5056]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4120,  1.7060,  0.8899,  ...,  0.4583, -0.0897,  1.8887],
         [ 2.0083,  0.8779,  0.4533,  ...,  0.1537,  0.4811, -0.6654],
         [-0.6693,  0.5487,  0.2879,  ..., -0.4309,  0.8008,  0.9552],
         ...,
         [ 0.1326,  0.1736, -1.3843,  ...,  2.0580,  1.4342,  0.5864],
         [ 1.6335, -0.4754,  1.1539,  ...,  0.7322, -1.6393,  0.8438],
         [-0.6289,  0.3900,  1.1879,  ..., -0.0909,  1.1931,  0.8191]],

        [[ 1.0674, -0.0552, -0.7407,  ...,  0.4245,  0.1970, -2.4486],
         [-0.6419, -1.1376, -0.1214,  ..., -0.9464, -0.3633,  0.3265],
         [-0.2621,  0.3411,  1.8410,  ..., -1.1983, -1.3767, -0.9659],
         ...,
         [-2.9208,  1.7793, -0.2735,  ...,  1.1998, -0.6751, -0.8836],
         [ 0.3602, -1.1346,  0.8416,  ...,  0.0208,  1.0590,  0.8169],
         [ 1.2753, -0.2982,  0.2180,  ...,  0.8880, -0.6193,  1.8219]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 143.689, Val Loss : 178.529
======> Trajectory Loss : 10.401, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.330, BelowGroundPenalize Loss : 0.288
===> [Minibatch 14/129].........tensor([[[-0.7770, -0.3330, -0.0375,  ..., -0.5789, -0.3011, -0.5810],
         [ 0.8935,  0.0612,  1.1481,  ...,  0.6239, -0.8972, -1.0674],
         [ 0.8420,  0.3175,  0.3647,  ...,  1.3677, -0.0378, -0.5836],
         ...,
         [-1.2705,  2.0570,  0.1587,  ...,  0.1408, -0.3159,  0.2397],
         [-0.5552,  0.7681, -0.2515,  ..., -1.4972, -0.6427,  1.3544],
         [-0.0079,  0.6647,  2.2050,  ...,  0.6744,  0.2841, -0.4667]],

        [[-1.0786,  1.2592, -0.3808,  ...,  0.5590, -0.3206,  0.7489],
         [ 0.5074,  1.5059, -1.0454,  ...,  0.0643, -1.0188, -1.0094],
         [ 0.1554,  0.5704, -0.2862,  ...,  0.9484,  1.2764,  0.9449],
         ...,
         [ 0.3110, -0.8792, -0.1494,  ...,  0.2849, -0.0507,  0.5261],
         [ 0.3676, -0.6818, -0.4408,  ...,  0.0164, -0.0116, -0.1720],
         [ 0.1171,  0.9565,  0.3762,  ...,  0.7329,  1.5714, -1.5056]]],
       device='cuda:0', grad_fn=<SelectBackward>)
tensor([[[ 1.4120,  1.7060,  0.8899,  ...,  0.4583, -0.0897,  1.8887],
         [ 2.0083,  0.8779,  0.4533,  ...,  0.1537,  0.4811, -0.6654],
         [-0.6693,  0.5487,  0.2879,  ..., -0.4309,  0.8008,  0.9552],
         ...,
         [ 0.1326,  0.1736, -1.3843,  ...,  2.0580,  1.4342,  0.5864],
         [ 1.6335, -0.4754,  1.1539,  ...,  0.7322, -1.6393,  0.8438],
         [-0.6289,  0.3900,  1.1879,  ..., -0.0909,  1.1931,  0.8191]],

        [[ 1.0674, -0.0552, -0.7407,  ...,  0.4245,  0.1970, -2.4486],
         [-0.6419, -1.1376, -0.1214,  ..., -0.9464, -0.3633,  0.3265],
         [-0.2621,  0.3411,  1.8410,  ..., -1.1983, -1.3767, -0.9659],
         ...,
         [-2.9208,  1.7793, -0.2735,  ...,  1.1998, -0.6751, -0.8836],
         [ 0.3602, -1.1346,  0.8416,  ...,  0.0208,  1.0590,  0.8169],
         [ 1.2753, -0.2982,  0.2180,  ...,  0.8880, -0.6193,  1.8219]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4120e+00,  1.7060e+00,  8.8993e-01,  ...,  4.5829e-01,
           -8.9735e-02,  1.8887e+00],
          [ 2.0083e+00,  8.7793e-01,  4.5333e-01,  ...,  1.5375e-01,
            4.8111e-01, -6.6544e-01],
          [-6.6926e-01,  5.4866e-01,  2.8795e-01,  ..., -4.3092e-01,
            8.0084e-01,  9.5521e-01],
          ...,
          [ 1.3261e-01,  1.7360e-01, -1.3843e+00,  ...,  2.0580e+00,
            1.4342e+00,  5.8641e-01],
          [ 1.6335e+00, -4.7538e-01,  1.1539e+00,  ...,  7.3217e-01,
           -1.6393e+00,  8.4384e-01],
          [-6.2888e-01,  3.9005e-01,  1.1879e+00,  ..., -9.0853e-02,
            1.1931e+00,  8.1914e-01]],

         [[ 1.0674e+00, -5.5237e-02, -7.4073e-01,  ...,  4.2446e-01,
            1.9697e-01, -2.4486e+00],
          [-6.4194e-01, -1.1376e+00, -1.2144e-01,  ..., -9.4636e-01,
           -3.6335e-01,  3.2654e-01],
          [-2.6209e-01,  3.4107e-01,  1.8410e+00,  ..., -1.1983e+00,
           -1.3767e+00, -9.6594e-01],
          ...,
          [-2.9208e+00,  1.7793e+00, -2.7349e-01,  ...,  1.1998e+00,
           -6.7506e-01, -8.8355e-01],
          [ 3.6016e-01, -1.1346e+00,  8.4159e-01,  ...,  2.0762e-02,
            1.0590e+00,  8.1691e-01],
          [ 1.2753e+00, -2.9816e-01,  2.1802e-01,  ...,  8.8802e-01,
           -6.1935e-01,  1.8219e+00]]],


        [[[-3.3039e-01,  1.6748e+00,  1.0983e+00,  ..., -2.0999e+00,
           -6.5548e-01,  3.7022e-01],
          [-2.7618e-02, -4.0559e-01,  1.1524e+00,  ..., -6.8955e-02,
            1.6846e-01,  1.1931e+00],
          [-1.1757e+00, -1.1051e+00,  4.8620e-02,  ...,  2.1664e-01,
            1.3987e+00,  5.5575e-01],
          ...,
          [ 2.8897e-01,  1.7088e+00, -1.1422e+00,  ...,  7.4406e-01,
            1.5745e+00, -2.2534e-01],
          [ 6.8196e-01, -2.2552e-01, -5.4029e-01,  ..., -1.5208e+00,
           -9.8607e-02, -5.3170e-01],
          [-7.8128e-01,  6.2118e-01, -5.6470e-01,  ..., -5.4558e-01,
            2.4337e+00, -5.2087e-01]],

         [[ 3.0850e-02, -9.2178e-01,  2.8346e-01,  ..., -1.4660e-01,
            8.3207e-01,  2.1838e+00],
          [-1.0482e+00,  1.5585e-01,  2.3167e-02,  ..., -1.5859e+00,
            4.2141e-01,  1.2896e+00],
          [-4.6117e-01,  3.1156e-01, -1.2343e-01,  ...,  5.4261e-01,
            1.0856e-03,  1.7718e+00],
          ...,
          [ 7.2999e-01, -2.4077e+00, -1.1771e+00,  ...,  2.7863e-01,
            7.0751e-01,  3.7975e-01],
          [-1.8363e+00,  6.9217e-01,  7.8808e-01,  ..., -5.9520e-01,
           -9.5999e-01, -9.6790e-02],
          [-6.8840e-01, -2.0836e-01,  2.4244e-01,  ...,  8.3360e-01,
           -4.6079e-01,  1.7680e-02]]],


        [[[ 1.3886e+00,  2.4573e-01,  6.4610e-01,  ..., -1.0095e+00,
            2.0228e+00, -4.6750e-01],
          [-1.1288e+00,  1.1078e+00, -7.4286e-01,  ..., -3.7576e-01,
            3.0017e-01,  2.9328e+00],
          [-5.1783e-01,  2.9617e-01,  1.1921e+00,  ..., -1.8178e+00,
           -1.7629e+00,  3.6969e-02],
          ...,
          [ 3.9792e-01, -3.9361e-01, -8.2759e-01,  ..., -3.9559e-01,
           -4.3469e-01, -8.4824e-01],
          [-1.1977e+00, -2.9948e-01,  8.0002e-01,  ...,  1.1264e-01,
            1.1614e+00, -1.3907e+00],
          [ 1.2112e+00, -1.0158e+00,  9.4671e-01,  ...,  1.4317e-01,
            7.0017e-01, -7.2691e-01]],

         [[ 1.4484e+00, -8.1010e-01, -7.9451e-01,  ...,  2.1646e+00,
            9.0971e-01,  6.8285e-01],
          [-9.9613e-01,  3.5721e-01,  1.5096e+00,  ..., -9.3876e-01,
           -1.6875e+00, -5.8634e-01],
          [-3.8301e-01, -6.4098e-01, -9.8296e-01,  ..., -6.6492e-01,
            1.6370e-01, -9.2048e-01],
          ...,
          [ 4.8033e-01, -5.8858e-01, -8.9088e-01,  ...,  1.2246e+00,
            4.8247e-01,  3.9163e-01],
          [-1.6828e+00,  4.6602e-02,  1.5888e-01,  ...,  6.1988e-02,
            4.5298e-01, -1.1901e+00],
          [-1.5880e+00, -1.6104e+00,  8.0834e-01,  ..., -1.2172e+00,
           -7.0590e-02, -2.5897e-01]]],


        [[[-9.2472e-01,  4.5160e-01, -2.1849e-01,  ..., -2.2379e-01,
            5.7636e-01, -2.2666e-01],
          [-9.4540e-01,  3.4256e-01,  1.3999e-01,  ..., -6.2556e-01,
            4.7222e-01,  1.2245e+00],
          [ 1.8820e+00, -3.3678e-01,  1.9808e+00,  ..., -1.9222e-01,
           -6.4632e-01, -6.6793e-01],
          ...,
          [ 6.9491e-02, -6.0259e-01, -1.1141e+00,  ...,  4.3183e-01,
            7.2416e-02, -3.0517e-01],
          [ 1.0514e+00, -2.0684e+00,  1.3628e+00,  ...,  1.5795e+00,
            1.4655e+00, -2.8427e-03],
          [-8.3502e-01, -1.0605e+00, -8.1769e-01,  ..., -7.9737e-01,
           -5.2778e-01,  1.1390e+00]],

         [[-1.5921e-01, -5.7904e-01,  9.1268e-01,  ...,  7.0868e-01,
           -7.4381e-01,  3.9416e-01],
          [ 1.0779e-01, -1.3021e-01,  9.6997e-01,  ...,  1.9194e-02,
            1.1656e+00, -2.0055e-01],
          [ 3.9577e-01, -5.4918e-01, -2.0841e+00,  ..., -2.7801e-02,
           -6.1515e-01, -5.2172e-01],
          ...,
          [-3.1535e-01,  4.7175e-01, -4.2047e-01,  ...,  1.7406e-01,
           -1.8852e+00,  6.7352e-01],
          [ 9.2293e-01, -1.4192e+00, -2.4582e+00,  ..., -2.5132e+00,
            6.7601e-01, -6.6549e-01],
          [-2.0697e-01, -1.9110e-01,  4.6561e-01,  ...,  9.9210e-01,
           -5.5883e-01,  4.8086e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8256, -0.8482,  0.8550,  ...,  1.5958, -0.5620,  0.6861],
          [ 0.5481, -1.1666,  0.9339,  ...,  0.4995,  1.1090,  1.5119],
          [-0.9745,  1.4514,  0.7254,  ...,  0.1206,  0.5610, -0.1114],
          ...,
          [ 0.1545,  1.8053, -0.6381,  ...,  0.2475,  0.7442,  0.4015],
          [-0.0962, -1.8533,  0.5406,  ...,  0.5155, -0.1240, -1.2977],
          [ 1.3453, -0.6902,  0.1395,  ...,  0.2352,  1.2569, -0.8490]],

         [[ 1.6310,  0.4856, -0.0581,  ...,  0.3736,  0.6752, -0.3804],
          [ 2.2587, -0.7938, -0.4504,  ..., -0.0882,  0.0821,  0.7017],
          [ 0.0502, -0.0631,  0.0458,  ...,  0.2653, -1.9472,  0.5459],
          ...,
          [-0.0167,  0.2952, -0.7105,  ...,  0.0799, -1.9541, -0.6836],
          [-0.3611,  3.0336, -0.6432,  ...,  0.1835,  1.5445, -0.5328],
          [-0.5464, -0.0400,  0.5327,  ...,  0.5842, -1.0036,  0.6196]]],


        [[[ 0.1115,  1.3270,  0.3869,  ..., -2.0269,  0.3339, -0.4084],
          [ 2.0103, -1.7400, -1.2188,  ..., -0.5968,  1.1932, -0.0856],
          [ 1.3676,  1.9673, -0.4612,  ..., -1.1187,  1.3949,  1.1656],
          ...,
          [-0.5946, -0.7750,  1.1643,  ..., -0.3209,  0.9715, -0.9273],
          [-1.3086, -0.2600, -2.6680,  ..., -1.4115, -0.1511, -0.2110],
          [ 0.2633, -0.0521, -1.0765,  ...,  0.4637,  1.2814,  0.5998]],

         [[ 0.6587, -0.5272,  0.0876,  ...,  1.7220, -0.3707,  0.3807],
          [-0.6429, -1.0003,  0.4983,  ...,  1.9711, -2.3819,  1.1051],
          [-2.3664, -0.4018, -1.1359,  ..., -1.4812, -1.0668, -1.9317],
          ...,
          [-1.1109, -0.2088,  0.4813,  ..., -0.8126,  2.2779,  0.1091],
          [-1.2964,  0.4750, -0.3871,  ..., -1.2296,  1.8277, -0.6574],
          [-0.3025, -0.9472,  0.6501,  ...,  1.2346,  0.0601, -0.5286]]],


        [[[ 2.0608,  1.1193,  0.3657,  ..., -1.6631,  0.3962,  0.0406],
          [-2.4425, -0.8127, -0.1715,  ..., -0.0389,  0.8520, -0.0417],
          [-0.9750, -1.0862, -1.3349,  ...,  1.2936, -1.0459,  0.6482],
          ...,
          [ 1.5910, -0.0728,  1.7342,  ..., -0.2722,  0.5383, -0.2907],
          [-0.0239,  0.7689, -1.0640,  ...,  2.0158, -0.7168, -0.1926],
          [ 0.2560, -0.0975, -0.3410,  ...,  0.9705,  0.7845, -2.6237]],

         [[-0.2754,  0.0047,  0.5963,  ..., -1.4476,  1.3023,  1.1432],
          [ 1.0183, -0.8413, -0.9633,  ...,  1.1539,  0.0259,  0.4309],
          [-0.3728,  0.7006,  1.2137,  ...,  1.5449,  0.8600,  0.0184],
          ...,
          [ 0.6334, -0.1587, -2.6024,  ...,  1.2215, -0.6818, -0.3166],
          [-0.3935,  0.0225, -0.3969,  ...,  0.3070,  0.8607, -1.4474],
          [ 0.0348,  0.1371,  1.6820,  ...,  0.3041,  0.6917,  1.4936]]],


        [[[ 1.1498,  0.7203, -0.2030,  ...,  1.5046, -1.2657,  1.2772],
          [ 2.4306,  1.0185,  0.7330,  ...,  1.4250,  1.3426, -1.0112],
          [-0.8620, -0.4857, -0.4973,  ..., -0.5494, -0.4192,  1.2373],
          ...,
          [ 0.5015,  1.0787, -0.5285,  ...,  1.0974,  0.4982, -0.5810],
          [-1.1774,  0.5330, -0.4858,  ..., -0.2598, -0.5579,  0.4320],
          [-0.7485,  0.0189,  0.3451,  ...,  0.2049,  0.2634,  0.0315]],

         [[ 0.6897, -0.0416, -0.1571,  ...,  1.3820, -0.2946, -1.0189],
          [ 0.5820,  1.2349,  0.0192,  ...,  1.0422,  0.9408, -0.4412],
          [-0.0736, -0.8674, -1.3681,  ...,  1.7122, -0.4549, -1.5046],
          ...,
          [-1.0285, -0.3815,  0.3478,  ...,  1.0309, -0.6314,  0.2331],
          [ 0.3931, -0.1099, -1.1949,  ..., -0.2647, -0.9598,  0.3782],
          [-0.5169, -0.6492,  0.5637,  ..., -1.1734, -1.4002, -0.8275]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4082e+00,  1.7096e+00,  8.8694e-01,  ...,  4.6053e-01,
           -8.9924e-02,  1.8911e+00],
          [ 2.0087e+00,  8.8036e-01,  4.5071e-01,  ...,  1.5547e-01,
            4.8263e-01, -6.6570e-01],
          [-6.6921e-01,  5.5123e-01,  2.8486e-01,  ..., -4.2834e-01,
            7.9928e-01,  9.5251e-01],
          ...,
          [ 1.3247e-01,  1.7537e-01, -1.3876e+00,  ...,  2.0605e+00,
            1.4366e+00,  5.8415e-01],
          [ 1.6338e+00, -4.7350e-01,  1.1518e+00,  ...,  7.3284e-01,
           -1.6387e+00,  8.4250e-01],
          [-6.2998e-01,  3.9046e-01,  1.1882e+00,  ..., -9.0838e-02,
            1.1928e+00,  8.1834e-01]],

         [[ 1.0645e+00, -5.2320e-02, -7.3791e-01,  ...,  4.2727e-01,
            1.9422e-01, -2.4511e+00],
          [-6.4404e-01, -1.1355e+00, -1.1922e-01,  ..., -9.4416e-01,
           -3.6563e-01,  3.2419e-01],
          [-2.6390e-01,  3.4286e-01,  1.8430e+00,  ..., -1.1962e+00,
           -1.3786e+00, -9.6819e-01],
          ...,
          [-2.9235e+00,  1.7820e+00, -2.7079e-01,  ...,  1.2027e+00,
           -6.7781e-01, -8.8624e-01],
          [ 3.5957e-01, -1.1342e+00,  8.4197e-01,  ...,  2.1751e-02,
            1.0586e+00,  8.1644e-01],
          [ 1.2754e+00, -2.9877e-01,  2.1957e-01,  ...,  8.8772e-01,
           -6.1961e-01,  1.8202e+00]]],


        [[[-3.3190e-01,  1.6763e+00,  1.1000e+00,  ..., -2.1014e+00,
           -6.5709e-01,  3.7184e-01],
          [-2.8795e-02, -4.0494e-01,  1.1539e+00,  ..., -7.0805e-02,
            1.6731e-01,  1.1947e+00],
          [-1.1792e+00, -1.1016e+00,  5.2070e-02,  ...,  2.1308e-01,
            1.3952e+00,  5.5928e-01],
          ...,
          [ 2.8646e-01,  1.7113e+00, -1.1402e+00,  ...,  7.4112e-01,
            1.5718e+00, -2.2351e-01],
          [ 6.8171e-01, -2.2613e-01, -5.4019e-01,  ..., -1.5217e+00,
           -9.9165e-02, -5.3147e-01],
          [-7.8105e-01,  6.2091e-01, -5.6520e-01,  ..., -5.4588e-01,
            2.4339e+00, -5.2149e-01]],

         [[ 3.2991e-02, -9.2313e-01,  2.8247e-01,  ..., -1.4829e-01,
            8.3406e-01,  2.1857e+00],
          [-1.0466e+00,  1.5424e-01,  2.1133e-02,  ..., -1.5879e+00,
            4.2299e-01,  1.2911e+00],
          [-4.5901e-01,  3.0886e-01, -1.2573e-01,  ...,  5.4055e-01,
            3.1140e-03,  1.7738e+00],
          ...,
          [ 7.3250e-01, -2.4068e+00, -1.1791e+00,  ...,  2.7629e-01,
            7.0784e-01,  3.8141e-01],
          [-1.8359e+00,  6.9056e-01,  7.8573e-01,  ..., -5.9528e-01,
           -9.6015e-01, -9.5595e-02],
          [-6.8907e-01, -2.1027e-01,  2.4112e-01,  ...,  8.3440e-01,
           -4.6103e-01,  1.9440e-02]]],


        [[[ 1.3902e+00,  2.4621e-01,  6.4681e-01,  ..., -1.0091e+00,
            2.0229e+00, -4.6610e-01],
          [-1.1295e+00,  1.1093e+00, -7.4343e-01,  ..., -3.7724e-01,
            3.0135e-01,  2.9346e+00],
          [-5.1817e-01,  2.9891e-01,  1.1951e+00,  ..., -1.8203e+00,
           -1.7600e+00,  3.9955e-02],
          ...,
          [ 3.9777e-01, -3.9433e-01, -8.2721e-01,  ..., -3.9623e-01,
           -4.3627e-01, -8.4581e-01],
          [-1.1957e+00, -2.9999e-01,  7.9862e-01,  ...,  1.1288e-01,
            1.1609e+00, -1.3906e+00],
          [ 1.2103e+00, -1.0169e+00,  9.4670e-01,  ...,  1.4330e-01,
            6.9853e-01, -7.2717e-01]],

         [[ 1.4502e+00, -8.1225e-01, -7.9625e-01,  ...,  2.1663e+00,
            9.1130e-01,  6.8109e-01],
          [-9.9481e-01,  3.5803e-01,  1.5088e+00,  ..., -9.3783e-01,
           -1.6866e+00, -5.8755e-01],
          [-3.8087e-01, -6.4014e-01, -9.8480e-01,  ..., -6.6369e-01,
            1.6533e-01, -9.2243e-01],
          ...,
          [ 4.8296e-01, -5.8898e-01, -8.9290e-01,  ...,  1.2265e+00,
            4.8410e-01,  3.8983e-01],
          [-1.6840e+00,  4.5707e-02,  1.5917e-01,  ...,  6.1802e-02,
            4.5240e-01, -1.1895e+00],
          [-1.5879e+00, -1.6098e+00,  8.0958e-01,  ..., -1.2189e+00,
           -7.1855e-02, -2.5761e-01]]],


        [[[-9.2519e-01,  4.5012e-01, -2.1757e-01,  ..., -2.2315e-01,
            5.7605e-01, -2.2562e-01],
          [-9.4715e-01,  3.4297e-01,  1.4114e-01,  ..., -6.2663e-01,
            4.7085e-01,  1.2247e+00],
          [ 1.8793e+00, -3.3589e-01,  1.9836e+00,  ..., -1.9477e-01,
           -6.4911e-01, -6.6576e-01],
          ...,
          [ 6.7619e-02, -6.0320e-01, -1.1134e+00,  ...,  4.3066e-01,
            7.1356e-02, -3.0511e-01],
          [ 1.0511e+00, -2.0693e+00,  1.3624e+00,  ...,  1.5798e+00,
            1.4680e+00, -2.0750e-03],
          [-8.3484e-01, -1.0619e+00, -8.1841e-01,  ..., -7.9652e-01,
           -5.2650e-01,  1.1390e+00]],

         [[-1.5770e-01, -5.8047e-01,  9.1373e-01,  ...,  7.1024e-01,
           -7.4309e-01,  3.9249e-01],
          [ 1.0889e-01, -1.3151e-01,  9.7119e-01,  ...,  2.0495e-02,
            1.1659e+00, -2.0050e-01],
          [ 3.9645e-01, -5.4926e-01, -2.0838e+00,  ..., -2.6817e-02,
           -6.1571e-01, -5.2299e-01],
          ...,
          [-3.1549e-01,  4.7121e-01, -4.2157e-01,  ...,  1.7449e-01,
           -1.8849e+00,  6.7265e-01],
          [ 9.2215e-01, -1.4192e+00, -2.4583e+00,  ..., -2.5135e+00,
            6.7586e-01, -6.6514e-01],
          [-2.0822e-01, -1.9031e-01,  4.6463e-01,  ...,  9.9106e-01,
           -5.5811e-01,  4.8027e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8287, -0.8458,  0.8527,  ...,  1.5987, -0.5616,  0.6860],
          [ 0.5446, -1.1638,  0.9330,  ...,  0.4988,  1.1080,  1.5138],
          [-0.9782,  1.4551,  0.7229,  ...,  0.1218,  0.5629, -0.1090],
          ...,
          [ 0.1510,  1.8082, -0.6385,  ...,  0.2477,  0.7441,  0.4052],
          [-0.0979, -1.8528,  0.5418,  ...,  0.5133, -0.1244, -1.2949],
          [ 1.3443, -0.6895,  0.1395,  ...,  0.2338,  1.2568, -0.8484]],

         [[ 1.6305,  0.4877, -0.0565,  ...,  0.3760,  0.6732, -0.3829],
          [ 2.2586, -0.7928, -0.4498,  ..., -0.0861,  0.0817,  0.6996],
          [ 0.0499, -0.0624,  0.0463,  ...,  0.2672, -1.9478,  0.5439],
          ...,
          [-0.0188,  0.2965, -0.7091,  ...,  0.0824, -1.9555, -0.6864],
          [-0.3605,  3.0331, -0.6435,  ...,  0.1838,  1.5457, -0.5331],
          [-0.5459, -0.0407,  0.5320,  ...,  0.5836, -1.0027,  0.6200]]],


        [[[ 0.1103,  1.3288,  0.3880,  ..., -2.0278,  0.3324, -0.4076],
          [ 2.0104, -1.7388, -1.2185,  ..., -0.5989,  1.1930, -0.0845],
          [ 1.3647,  1.9703, -0.4584,  ..., -1.1218,  1.3920,  1.1685],
          ...,
          [-0.5975, -0.7731,  1.1676,  ..., -0.3235,  0.9713, -0.9263],
          [-1.3099, -0.2603, -2.6700,  ..., -1.4129, -0.1510, -0.2114],
          [ 0.2639, -0.0521, -1.0774,  ...,  0.4643,  1.2832,  0.5993]],

         [[ 0.6606, -0.5290,  0.0857,  ...,  1.7235, -0.3690,  0.3802],
          [-0.6416, -1.0017,  0.4964,  ...,  1.9718, -2.3807,  1.1051],
          [-2.3661, -0.4032, -1.1380,  ..., -1.4797, -1.0653, -1.9316],
          ...,
          [-1.1091, -0.2116,  0.4792,  ..., -0.8119,  2.2793,  0.1085],
          [-1.2969,  0.4742, -0.3877,  ..., -1.2289,  1.8277, -0.6562],
          [-0.3038, -0.9483,  0.6509,  ...,  1.2345,  0.0601, -0.5270]]],


        [[[ 2.0607,  1.1208,  0.3676,  ..., -1.6641,  0.3956,  0.0416],
          [-2.4447, -0.8126, -0.1704,  ..., -0.0409,  0.8514, -0.0401],
          [-0.9775, -1.0853, -1.3337,  ...,  1.2917, -1.0472,  0.6506],
          ...,
          [ 1.5908, -0.0714,  1.7368,  ..., -0.2752,  0.5380, -0.2885],
          [-0.0255,  0.7697, -1.0648,  ...,  2.0167, -0.7169, -0.1925],
          [ 0.2569, -0.0987, -0.3417,  ...,  0.9714,  0.7844, -2.6248]],

         [[-0.2744,  0.0034,  0.5954,  ..., -1.4473,  1.3042,  1.1420],
          [ 1.0203, -0.8422, -0.9653,  ...,  1.1560,  0.0272,  0.4293],
          [-0.3718,  0.7001,  1.2137,  ...,  1.5471,  0.8617,  0.0170],
          ...,
          [ 0.6352, -0.1598, -2.6047,  ...,  1.2242, -0.6811, -0.3181],
          [-0.3943,  0.0217, -0.3967,  ...,  0.3069,  0.8610, -1.4476],
          [ 0.0338,  0.1372,  1.6830,  ...,  0.3034,  0.6910,  1.4948]]],


        [[[ 1.1498,  0.7219, -0.2021,  ...,  1.5046, -1.2678,  1.2791],
          [ 2.4308,  1.0201,  0.7350,  ...,  1.4250,  1.3423, -1.0109],
          [-0.8647, -0.4841, -0.4948,  ..., -0.5521, -0.4218,  1.2402],
          ...,
          [ 0.5003,  1.0805, -0.5269,  ...,  1.0965,  0.4970, -0.5797],
          [-1.1804,  0.5343, -0.4850,  ..., -0.2619, -0.5598,  0.4331],
          [-0.7485,  0.0188,  0.3443,  ...,  0.2056,  0.2638,  0.0315]],

         [[ 0.6913, -0.0433, -0.1571,  ...,  1.3841, -0.2931, -1.0195],
          [ 0.5837,  1.2341,  0.0192,  ...,  1.0443,  0.9427, -0.4413],
          [-0.0724, -0.8688, -1.3682,  ...,  1.7146, -0.4541, -1.5051],
          ...,
          [-1.0286, -0.3832,  0.3478,  ...,  1.0334, -0.6306,  0.2331],
          [ 0.3940, -0.1106, -1.1943,  ..., -0.2653, -0.9603,  0.3791],
          [-0.5177, -0.6488,  0.5639,  ..., -1.1741, -1.4011, -0.8275]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-7.7969e-01, -3.2826e-01, -4.0289e-02,  ..., -5.7979e-01,
          -3.0606e-01, -5.8754e-01],
         [ 8.9555e-01,  6.7965e-02,  1.1502e+00,  ...,  6.3017e-01,
          -9.0356e-01, -1.0741e+00],
         [ 8.4233e-01,  3.1567e-01,  3.6907e-01,  ...,  1.3634e+00,
          -3.3820e-02, -5.8272e-01],
         ...,
         [-1.2656e+00,  2.0624e+00,  1.6365e-01,  ...,  1.4496e-01,
          -3.1099e-01,  2.3606e-01],
         [-5.4981e-01,  7.6907e-01, -2.4728e-01,  ..., -1.4941e+00,
          -6.3704e-01,  1.3527e+00],
         [-1.3649e-03,  6.7090e-01,  2.2134e+00,  ...,  6.7918e-01,
           2.9155e-01, -4.7358e-01]],

        [[-1.0790e+00,  1.2590e+00, -3.7957e-01,  ...,  5.5917e-01,
          -3.2056e-01,  7.4951e-01],
         [ 5.0752e-01,  1.5075e+00, -1.0434e+00,  ...,  6.2921e-02,
          -1.0141e+00, -1.0109e+00],
         [ 1.5172e-01,  5.7424e-01, -2.8346e-01,  ...,  9.5284e-01,
           1.2819e+00,  9.4285e-01],
         ...,
         [ 3.0837e-01, -8.7794e-01, -1.5226e-01,  ...,  2.8643e-01,
          -5.2818e-02,  5.2376e-01],
         [ 3.6611e-01, -6.7971e-01, -4.4181e-01,  ...,  1.9790e-02,
          -7.0556e-03, -1.7285e-01],
         [ 1.1858e-01,  9.5558e-01,  3.7227e-01,  ...,  7.3743e-01,
           1.5740e+00, -1.5048e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.4082,  1.7096,  0.8869,  ...,  0.4605, -0.0899,  1.8911],
         [ 2.0087,  0.8804,  0.4507,  ...,  0.1555,  0.4826, -0.6657],
         [-0.6692,  0.5512,  0.2849,  ..., -0.4283,  0.7993,  0.9525],
         ...,
         [ 0.1325,  0.1754, -1.3876,  ...,  2.0605,  1.4366,  0.5842],
         [ 1.6338, -0.4735,  1.1518,  ...,  0.7328, -1.6387,  0.8425],
         [-0.6300,  0.3905,  1.1882,  ..., -0.0908,  1.1928,  0.8183]],

        [[ 1.0645, -0.0523, -0.7379,  ...,  0.4273,  0.1942, -2.4511],
         [-0.6440, -1.1355, -0.1192,  ..., -0.9442, -0.3656,  0.3242],
         [-0.2639,  0.3429,  1.8430,  ..., -1.1962, -1.3786, -0.9682],
         ...,
         [-2.9235,  1.7820, -0.2708,  ...,  1.2027, -0.6778, -0.8862],
         [ 0.3596, -1.1342,  0.8420,  ...,  0.0218,  1.0586,  0.8164],
         [ 1.2754, -0.2988,  0.2196,  ...,  0.8877, -0.6196,  1.8202]]],
       device='cuda:0', grad_fn=<SelectBackward>)
Train Loss : 145.415, Val Loss : 176.793
======> Trajectory Loss : 14.723, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.302, BelowGroundPenalize Loss : 0.471
===> [Minibatch 15/129].........tensor([[[-7.7969e-01, -3.2826e-01, -4.0289e-02,  ..., -5.7979e-01,
          -3.0606e-01, -5.8754e-01],
         [ 8.9555e-01,  6.7965e-02,  1.1502e+00,  ...,  6.3017e-01,
          -9.0356e-01, -1.0741e+00],
         [ 8.4233e-01,  3.1567e-01,  3.6907e-01,  ...,  1.3634e+00,
          -3.3820e-02, -5.8272e-01],
         ...,
         [-1.2656e+00,  2.0624e+00,  1.6365e-01,  ...,  1.4496e-01,
          -3.1099e-01,  2.3606e-01],
         [-5.4981e-01,  7.6907e-01, -2.4728e-01,  ..., -1.4941e+00,
          -6.3704e-01,  1.3527e+00],
         [-1.3649e-03,  6.7090e-01,  2.2134e+00,  ...,  6.7918e-01,
           2.9155e-01, -4.7358e-01]],

        [[-1.0790e+00,  1.2590e+00, -3.7957e-01,  ...,  5.5917e-01,
          -3.2056e-01,  7.4951e-01],
         [ 5.0752e-01,  1.5075e+00, -1.0434e+00,  ...,  6.2921e-02,
          -1.0141e+00, -1.0109e+00],
         [ 1.5172e-01,  5.7424e-01, -2.8346e-01,  ...,  9.5284e-01,
           1.2819e+00,  9.4285e-01],
         ...,
         [ 3.0837e-01, -8.7794e-01, -1.5226e-01,  ...,  2.8643e-01,
          -5.2818e-02,  5.2376e-01],
         [ 3.6611e-01, -6.7971e-01, -4.4181e-01,  ...,  1.9790e-02,
          -7.0556e-03, -1.7285e-01],
         [ 1.1858e-01,  9.5558e-01,  3.7227e-01,  ...,  7.3743e-01,
           1.5740e+00, -1.5048e+00]]], device='cuda:0',
       grad_fn=<SelectBackward>)
tensor([[[ 1.4082,  1.7096,  0.8869,  ...,  0.4605, -0.0899,  1.8911],
         [ 2.0087,  0.8804,  0.4507,  ...,  0.1555,  0.4826, -0.6657],
         [-0.6692,  0.5512,  0.2849,  ..., -0.4283,  0.7993,  0.9525],
         ...,
         [ 0.1325,  0.1754, -1.3876,  ...,  2.0605,  1.4366,  0.5842],
         [ 1.6338, -0.4735,  1.1518,  ...,  0.7328, -1.6387,  0.8425],
         [-0.6300,  0.3905,  1.1882,  ..., -0.0908,  1.1928,  0.8183]],

        [[ 1.0645, -0.0523, -0.7379,  ...,  0.4273,  0.1942, -2.4511],
         [-0.6440, -1.1355, -0.1192,  ..., -0.9442, -0.3656,  0.3242],
         [-0.2639,  0.3429,  1.8430,  ..., -1.1962, -1.3786, -0.9682],
         ...,
         [-2.9235,  1.7820, -0.2708,  ...,  1.2027, -0.6778, -0.8862],
         [ 0.3596, -1.1342,  0.8420,  ...,  0.0218,  1.0586,  0.8164],
         [ 1.2754, -0.2988,  0.2196,  ...,  0.8877, -0.6196,  1.8202]]],
       device='cuda:0', grad_fn=<SelectBackward>)
BEFORE UPDATE
initial_hidden tensor([[[[ 1.4082e+00,  1.7096e+00,  8.8694e-01,  ...,  4.6053e-01,
           -8.9924e-02,  1.8911e+00],
          [ 2.0087e+00,  8.8036e-01,  4.5071e-01,  ...,  1.5547e-01,
            4.8263e-01, -6.6570e-01],
          [-6.6921e-01,  5.5123e-01,  2.8486e-01,  ..., -4.2834e-01,
            7.9928e-01,  9.5251e-01],
          ...,
          [ 1.3247e-01,  1.7537e-01, -1.3876e+00,  ...,  2.0605e+00,
            1.4366e+00,  5.8415e-01],
          [ 1.6338e+00, -4.7350e-01,  1.1518e+00,  ...,  7.3284e-01,
           -1.6387e+00,  8.4250e-01],
          [-6.2998e-01,  3.9046e-01,  1.1882e+00,  ..., -9.0838e-02,
            1.1928e+00,  8.1834e-01]],

         [[ 1.0645e+00, -5.2320e-02, -7.3791e-01,  ...,  4.2727e-01,
            1.9422e-01, -2.4511e+00],
          [-6.4404e-01, -1.1355e+00, -1.1922e-01,  ..., -9.4416e-01,
           -3.6563e-01,  3.2419e-01],
          [-2.6390e-01,  3.4286e-01,  1.8430e+00,  ..., -1.1962e+00,
           -1.3786e+00, -9.6819e-01],
          ...,
          [-2.9235e+00,  1.7820e+00, -2.7079e-01,  ...,  1.2027e+00,
           -6.7781e-01, -8.8624e-01],
          [ 3.5957e-01, -1.1342e+00,  8.4197e-01,  ...,  2.1751e-02,
            1.0586e+00,  8.1644e-01],
          [ 1.2754e+00, -2.9877e-01,  2.1957e-01,  ...,  8.8772e-01,
           -6.1961e-01,  1.8202e+00]]],


        [[[-3.3190e-01,  1.6763e+00,  1.1000e+00,  ..., -2.1014e+00,
           -6.5709e-01,  3.7184e-01],
          [-2.8795e-02, -4.0494e-01,  1.1539e+00,  ..., -7.0805e-02,
            1.6731e-01,  1.1947e+00],
          [-1.1792e+00, -1.1016e+00,  5.2070e-02,  ...,  2.1308e-01,
            1.3952e+00,  5.5928e-01],
          ...,
          [ 2.8646e-01,  1.7113e+00, -1.1402e+00,  ...,  7.4112e-01,
            1.5718e+00, -2.2351e-01],
          [ 6.8171e-01, -2.2613e-01, -5.4019e-01,  ..., -1.5217e+00,
           -9.9165e-02, -5.3147e-01],
          [-7.8105e-01,  6.2091e-01, -5.6520e-01,  ..., -5.4588e-01,
            2.4339e+00, -5.2149e-01]],

         [[ 3.2991e-02, -9.2313e-01,  2.8247e-01,  ..., -1.4829e-01,
            8.3406e-01,  2.1857e+00],
          [-1.0466e+00,  1.5424e-01,  2.1133e-02,  ..., -1.5879e+00,
            4.2299e-01,  1.2911e+00],
          [-4.5901e-01,  3.0886e-01, -1.2573e-01,  ...,  5.4055e-01,
            3.1140e-03,  1.7738e+00],
          ...,
          [ 7.3250e-01, -2.4068e+00, -1.1791e+00,  ...,  2.7629e-01,
            7.0784e-01,  3.8141e-01],
          [-1.8359e+00,  6.9056e-01,  7.8573e-01,  ..., -5.9528e-01,
           -9.6015e-01, -9.5595e-02],
          [-6.8907e-01, -2.1027e-01,  2.4112e-01,  ...,  8.3440e-01,
           -4.6103e-01,  1.9440e-02]]],


        [[[ 1.3902e+00,  2.4621e-01,  6.4681e-01,  ..., -1.0091e+00,
            2.0229e+00, -4.6610e-01],
          [-1.1295e+00,  1.1093e+00, -7.4343e-01,  ..., -3.7724e-01,
            3.0135e-01,  2.9346e+00],
          [-5.1817e-01,  2.9891e-01,  1.1951e+00,  ..., -1.8203e+00,
           -1.7600e+00,  3.9955e-02],
          ...,
          [ 3.9777e-01, -3.9433e-01, -8.2721e-01,  ..., -3.9623e-01,
           -4.3627e-01, -8.4581e-01],
          [-1.1957e+00, -2.9999e-01,  7.9862e-01,  ...,  1.1288e-01,
            1.1609e+00, -1.3906e+00],
          [ 1.2103e+00, -1.0169e+00,  9.4670e-01,  ...,  1.4330e-01,
            6.9853e-01, -7.2717e-01]],

         [[ 1.4502e+00, -8.1225e-01, -7.9625e-01,  ...,  2.1663e+00,
            9.1130e-01,  6.8109e-01],
          [-9.9481e-01,  3.5803e-01,  1.5088e+00,  ..., -9.3783e-01,
           -1.6866e+00, -5.8755e-01],
          [-3.8087e-01, -6.4014e-01, -9.8480e-01,  ..., -6.6369e-01,
            1.6533e-01, -9.2243e-01],
          ...,
          [ 4.8296e-01, -5.8898e-01, -8.9290e-01,  ...,  1.2265e+00,
            4.8410e-01,  3.8983e-01],
          [-1.6840e+00,  4.5707e-02,  1.5917e-01,  ...,  6.1802e-02,
            4.5240e-01, -1.1895e+00],
          [-1.5879e+00, -1.6098e+00,  8.0958e-01,  ..., -1.2189e+00,
           -7.1855e-02, -2.5761e-01]]],


        [[[-9.2519e-01,  4.5012e-01, -2.1757e-01,  ..., -2.2315e-01,
            5.7605e-01, -2.2562e-01],
          [-9.4715e-01,  3.4297e-01,  1.4114e-01,  ..., -6.2663e-01,
            4.7085e-01,  1.2247e+00],
          [ 1.8793e+00, -3.3589e-01,  1.9836e+00,  ..., -1.9477e-01,
           -6.4911e-01, -6.6576e-01],
          ...,
          [ 6.7619e-02, -6.0320e-01, -1.1134e+00,  ...,  4.3066e-01,
            7.1356e-02, -3.0511e-01],
          [ 1.0511e+00, -2.0693e+00,  1.3624e+00,  ...,  1.5798e+00,
            1.4680e+00, -2.0750e-03],
          [-8.3484e-01, -1.0619e+00, -8.1841e-01,  ..., -7.9652e-01,
           -5.2650e-01,  1.1390e+00]],

         [[-1.5770e-01, -5.8047e-01,  9.1373e-01,  ...,  7.1024e-01,
           -7.4309e-01,  3.9249e-01],
          [ 1.0889e-01, -1.3151e-01,  9.7119e-01,  ...,  2.0495e-02,
            1.1659e+00, -2.0050e-01],
          [ 3.9645e-01, -5.4926e-01, -2.0838e+00,  ..., -2.6817e-02,
           -6.1571e-01, -5.2299e-01],
          ...,
          [-3.1549e-01,  4.7121e-01, -4.2157e-01,  ...,  1.7449e-01,
           -1.8849e+00,  6.7265e-01],
          [ 9.2215e-01, -1.4192e+00, -2.4583e+00,  ..., -2.5135e+00,
            6.7586e-01, -6.6514e-01],
          [-2.0822e-01, -1.9031e-01,  4.6463e-01,  ...,  9.9106e-01,
           -5.5811e-01,  4.8027e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-0.8287, -0.8458,  0.8527,  ...,  1.5987, -0.5616,  0.6860],
          [ 0.5446, -1.1638,  0.9330,  ...,  0.4988,  1.1080,  1.5138],
          [-0.9782,  1.4551,  0.7229,  ...,  0.1218,  0.5629, -0.1090],
          ...,
          [ 0.1510,  1.8082, -0.6385,  ...,  0.2477,  0.7441,  0.4052],
          [-0.0979, -1.8528,  0.5418,  ...,  0.5133, -0.1244, -1.2949],
          [ 1.3443, -0.6895,  0.1395,  ...,  0.2338,  1.2568, -0.8484]],

         [[ 1.6305,  0.4877, -0.0565,  ...,  0.3760,  0.6732, -0.3829],
          [ 2.2586, -0.7928, -0.4498,  ..., -0.0861,  0.0817,  0.6996],
          [ 0.0499, -0.0624,  0.0463,  ...,  0.2672, -1.9478,  0.5439],
          ...,
          [-0.0188,  0.2965, -0.7091,  ...,  0.0824, -1.9555, -0.6864],
          [-0.3605,  3.0331, -0.6435,  ...,  0.1838,  1.5457, -0.5331],
          [-0.5459, -0.0407,  0.5320,  ...,  0.5836, -1.0027,  0.6200]]],


        [[[ 0.1103,  1.3288,  0.3880,  ..., -2.0278,  0.3324, -0.4076],
          [ 2.0104, -1.7388, -1.2185,  ..., -0.5989,  1.1930, -0.0845],
          [ 1.3647,  1.9703, -0.4584,  ..., -1.1218,  1.3920,  1.1685],
          ...,
          [-0.5975, -0.7731,  1.1676,  ..., -0.3235,  0.9713, -0.9263],
          [-1.3099, -0.2603, -2.6700,  ..., -1.4129, -0.1510, -0.2114],
          [ 0.2639, -0.0521, -1.0774,  ...,  0.4643,  1.2832,  0.5993]],

         [[ 0.6606, -0.5290,  0.0857,  ...,  1.7235, -0.3690,  0.3802],
          [-0.6416, -1.0017,  0.4964,  ...,  1.9718, -2.3807,  1.1051],
          [-2.3661, -0.4032, -1.1380,  ..., -1.4797, -1.0653, -1.9316],
          ...,
          [-1.1091, -0.2116,  0.4792,  ..., -0.8119,  2.2793,  0.1085],
          [-1.2969,  0.4742, -0.3877,  ..., -1.2289,  1.8277, -0.6562],
          [-0.3038, -0.9483,  0.6509,  ...,  1.2345,  0.0601, -0.5270]]],


        [[[ 2.0607,  1.1208,  0.3676,  ..., -1.6641,  0.3956,  0.0416],
          [-2.4447, -0.8126, -0.1704,  ..., -0.0409,  0.8514, -0.0401],
          [-0.9775, -1.0853, -1.3337,  ...,  1.2917, -1.0472,  0.6506],
          ...,
          [ 1.5908, -0.0714,  1.7368,  ..., -0.2752,  0.5380, -0.2885],
          [-0.0255,  0.7697, -1.0648,  ...,  2.0167, -0.7169, -0.1925],
          [ 0.2569, -0.0987, -0.3417,  ...,  0.9714,  0.7844, -2.6248]],

         [[-0.2744,  0.0034,  0.5954,  ..., -1.4473,  1.3042,  1.1420],
          [ 1.0203, -0.8422, -0.9653,  ...,  1.1560,  0.0272,  0.4293],
          [-0.3718,  0.7001,  1.2137,  ...,  1.5471,  0.8617,  0.0170],
          ...,
          [ 0.6352, -0.1598, -2.6047,  ...,  1.2242, -0.6811, -0.3181],
          [-0.3943,  0.0217, -0.3967,  ...,  0.3069,  0.8610, -1.4476],
          [ 0.0338,  0.1372,  1.6830,  ...,  0.3034,  0.6910,  1.4948]]],


        [[[ 1.1498,  0.7219, -0.2021,  ...,  1.5046, -1.2678,  1.2791],
          [ 2.4308,  1.0201,  0.7350,  ...,  1.4250,  1.3423, -1.0109],
          [-0.8647, -0.4841, -0.4948,  ..., -0.5521, -0.4218,  1.2402],
          ...,
          [ 0.5003,  1.0805, -0.5269,  ...,  1.0965,  0.4970, -0.5797],
          [-1.1804,  0.5343, -0.4850,  ..., -0.2619, -0.5598,  0.4331],
          [-0.7485,  0.0188,  0.3443,  ...,  0.2056,  0.2638,  0.0315]],

         [[ 0.6913, -0.0433, -0.1571,  ...,  1.3841, -0.2931, -1.0195],
          [ 0.5837,  1.2341,  0.0192,  ...,  1.0443,  0.9427, -0.4413],
          [-0.0724, -0.8688, -1.3682,  ...,  1.7146, -0.4541, -1.5051],
          ...,
          [-1.0286, -0.3832,  0.3478,  ...,  1.0334, -0.6306,  0.2331],
          [ 0.3940, -0.1106, -1.1943,  ..., -0.2653, -0.9603,  0.3791],
          [-0.5177, -0.6488,  0.5639,  ..., -1.1741, -1.4011, -0.8275]]]],
       device='cuda:0') torch.Size([4, 2, 128, 32])
After UPDATE
initial_hidden tensor([[[[ 1.4047e+00,  1.7129e+00,  8.8424e-01,  ...,  4.6254e-01,
           -9.0044e-02,  1.8934e+00],
          [ 2.0088e+00,  8.8253e-01,  4.4827e-01,  ...,  1.5704e-01,
            4.8400e-01, -6.6535e-01],
          [-6.6926e-01,  5.5353e-01,  2.8207e-01,  ..., -4.2603e-01,
            7.9794e-01,  9.5016e-01],
          ...,
          [ 1.3235e-01,  1.7705e-01, -1.3903e+00,  ...,  2.0628e+00,
            1.4390e+00,  5.8247e-01],
          [ 1.6337e+00, -4.7150e-01,  1.1499e+00,  ...,  7.3320e-01,
           -1.6384e+00,  8.4143e-01],
          [-6.3101e-01,  3.9078e-01,  1.1885e+00,  ..., -9.0848e-02,
            1.1926e+00,  8.1780e-01]],

         [[ 1.0618e+00, -4.9665e-02, -7.3536e-01,  ...,  4.2983e-01,
            1.9173e-01, -2.4533e+00],
          [-6.4619e-01, -1.1334e+00, -1.1700e-01,  ..., -9.4216e-01,
           -3.6785e-01,  3.2213e-01],
          [-2.6559e-01,  3.4453e-01,  1.8448e+00,  ..., -1.1942e+00,
           -1.3804e+00, -9.7020e-01],
          ...,
          [-2.9258e+00,  1.7843e+00, -2.6835e-01,  ...,  1.2053e+00,
           -6.8024e-01, -8.8858e-01],
          [ 3.5896e-01, -1.1339e+00,  8.4326e-01,  ...,  2.2876e-02,
            1.0582e+00,  8.1616e-01],
          [ 1.2754e+00, -2.9926e-01,  2.2105e-01,  ...,  8.8745e-01,
           -6.1990e-01,  1.8189e+00]]],


        [[[-3.3319e-01,  1.6776e+00,  1.1015e+00,  ..., -2.1027e+00,
           -6.5850e-01,  3.7325e-01],
          [-2.9810e-02, -4.0433e-01,  1.1553e+00,  ..., -7.2460e-02,
            1.6630e-01,  1.1961e+00],
          [-1.1823e+00, -1.0984e+00,  5.5156e-02,  ...,  2.0989e-01,
            1.3920e+00,  5.6245e-01],
          ...,
          [ 2.8423e-01,  1.7136e+00, -1.1385e+00,  ...,  7.3858e-01,
            1.5694e+00, -2.2191e-01],
          [ 6.8158e-01, -2.2660e-01, -5.4016e-01,  ..., -1.5226e+00,
           -9.9735e-02, -5.3139e-01],
          [-7.8082e-01,  6.2064e-01, -5.6568e-01,  ..., -5.4613e-01,
            2.4341e+00, -5.2206e-01]],

         [[ 3.4876e-02, -9.2434e-01,  2.8162e-01,  ..., -1.4974e-01,
            8.3586e-01,  2.1873e+00],
          [-1.0452e+00,  1.5270e-01,  1.9445e-02,  ..., -1.5896e+00,
            4.2456e-01,  1.2924e+00],
          [-4.5717e-01,  3.0648e-01, -1.2771e-01,  ...,  5.3882e-01,
            4.8705e-03,  1.7755e+00],
          ...,
          [ 7.3461e-01, -2.4060e+00, -1.1807e+00,  ...,  2.7434e-01,
            7.0804e-01,  3.8269e-01],
          [-1.8358e+00,  6.8881e-01,  7.8410e-01,  ..., -5.9506e-01,
           -9.6038e-01, -9.4783e-02],
          [-6.8974e-01, -2.1201e-01,  2.3992e-01,  ...,  8.3523e-01,
           -4.6124e-01,  2.1049e-02]]],


        [[[ 1.3915e+00,  2.4657e-01,  6.4738e-01,  ..., -1.0088e+00,
            2.0228e+00, -4.6490e-01],
          [-1.1298e+00,  1.1105e+00, -7.4379e-01,  ..., -3.7842e-01,
            3.0220e-01,  2.9362e+00],
          [-5.1846e-01,  3.0136e-01,  1.1977e+00,  ..., -1.8225e+00,
           -1.7576e+00,  4.2599e-02],
          ...,
          [ 3.9770e-01, -3.9490e-01, -8.2677e-01,  ..., -3.9686e-01,
           -4.3755e-01, -8.4394e-01],
          [-1.1939e+00, -3.0060e-01,  7.9757e-01,  ...,  1.1288e-01,
            1.1601e+00, -1.3907e+00],
          [ 1.2094e+00, -1.0179e+00,  9.4667e-01,  ...,  1.4341e-01,
            6.9704e-01, -7.2747e-01]],

         [[ 1.4518e+00, -8.1421e-01, -7.9773e-01,  ...,  2.1678e+00,
            9.1267e-01,  6.7957e-01],
          [-9.9371e-01,  3.5848e-01,  1.5083e+00,  ..., -9.3718e-01,
           -1.6859e+00, -5.8846e-01],
          [-3.7902e-01, -6.3952e-01, -9.8635e-01,  ..., -6.6271e-01,
            1.6671e-01, -9.2411e-01],
          ...,
          [ 4.8522e-01, -5.8922e-01, -8.9458e-01,  ...,  1.2281e+00,
            4.8547e-01,  3.8828e-01],
          [-1.6850e+00,  4.4573e-02,  1.5970e-01,  ...,  6.1291e-02,
            4.5159e-01, -1.1889e+00],
          [-1.5879e+00, -1.6095e+00,  8.1074e-01,  ..., -1.2204e+00,
           -7.3018e-02, -2.5634e-01]]],


        [[[-9.2557e-01,  4.4882e-01, -2.1680e-01,  ..., -2.2256e-01,
            5.7583e-01, -2.2469e-01],
          [-9.4854e-01,  3.4312e-01,  1.4185e-01,  ..., -6.2738e-01,
            4.6986e-01,  1.2249e+00],
          [ 1.8769e+00, -3.3511e-01,  1.9861e+00,  ..., -1.9703e-01,
           -6.5156e-01, -6.6386e-01],
          ...,
          [ 6.6008e-02, -6.0376e-01, -1.1128e+00,  ...,  4.2971e-01,
            7.0624e-02, -3.0504e-01],
          [ 1.0511e+00, -2.0702e+00,  1.3617e+00,  ...,  1.5802e+00,
            1.4702e+00, -1.4082e-03],
          [-8.3465e-01, -1.0631e+00, -8.1910e-01,  ..., -7.9573e-01,
           -5.2537e-01,  1.1389e+00]],

         [[-1.5637e-01, -5.8171e-01,  9.1463e-01,  ...,  7.1161e-01,
           -7.4249e-01,  3.9101e-01],
          [ 1.0951e-01, -1.3244e-01,  9.7195e-01,  ...,  2.1299e-02,
            1.1660e+00, -2.0096e-01],
          [ 3.9699e-01, -5.4924e-01, -2.0837e+00,  ..., -2.5993e-02,
           -6.1618e-01, -5.2412e-01],
          ...,
          [-3.1566e-01,  4.7081e-01, -4.2254e-01,  ...,  1.7486e-01,
           -1.8846e+00,  6.7193e-01],
          [ 9.2145e-01, -1.4190e+00, -2.4587e+00,  ..., -2.5138e+00,
            6.7574e-01, -6.6466e-01],
          [-2.0939e-01, -1.8951e-01,  4.6366e-01,  ...,  9.9004e-01,
           -5.5753e-01,  4.7978e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
initial_cell tensor([[[[-8.3145e-01, -8.4378e-01,  8.5068e-01,  ...,  1.6014e+00,
           -5.6132e-01,  6.8587e-01],
          [ 5.4151e-01, -1.1615e+00,  9.3203e-01,  ...,  4.9910e-01,
            1.1072e+00,  1.5155e+00],
          [-9.8155e-01,  1.4584e+00,  7.2060e-01,  ...,  1.2317e-01,
            5.6462e-01, -1.0692e-01],
          ...,
          [ 1.4789e-01,  1.8105e+00, -6.3898e-01,  ...,  2.4828e-01,
            7.4401e-01,  4.0842e-01],
          [-9.9360e-02, -1.8524e+00,  5.4219e-01,  ...,  5.1197e-01,
           -1.2476e-01, -1.2927e+00],
          [ 1.3434e+00, -6.8902e-01,  1.3936e-01,  ...,  2.3265e-01,
            1.2567e+00, -8.4794e-01]],

         [[ 1.6300e+00,  4.8966e-01, -5.4982e-02,  ...,  3.7816e-01,
            6.7126e-01, -3.8512e-01],
          [ 2.2583e+00, -7.9154e-01, -4.4899e-01,  ..., -8.4267e-02,
            8.0773e-02,  6.9784e-01],
          [ 4.9385e-02, -6.1462e-02,  4.6812e-02,  ...,  2.6898e-01,
           -1.9486e+00,  5.4208e-01],
          ...,
          [-2.0948e-02,  2.9775e-01, -7.0793e-01,  ...,  8.4583e-02,
           -1.9569e+00, -6.8892e-01],
          [-3.6112e-01,  3.0335e+00, -6.4305e-01,  ...,  1.8397e-01,
            1.5460e+00, -5.3330e-01],
          [-5.4567e-01, -4.1190e-02,  5.3155e-01,  ...,  5.8296e-01,
           -1.0022e+00,  6.2044e-01]]],


        [[[ 1.0922e-01,  1.3304e+00,  3.8893e-01,  ..., -2.0285e+00,
            3.3090e-01, -4.0693e-01],
          [ 2.0105e+00, -1.7379e+00, -1.2183e+00,  ..., -6.0055e-01,
            1.1928e+00, -8.3735e-02],
          [ 1.3621e+00,  1.9730e+00, -4.5578e-01,  ..., -1.1245e+00,
            1.3893e+00,  1.1710e+00],
          ...,
          [-6.0008e-01, -7.7163e-01,  1.1703e+00,  ..., -3.2553e-01,
            9.7111e-01, -9.2561e-01],
          [-1.3108e+00, -2.6063e-01, -2.6719e+00,  ..., -1.4137e+00,
           -1.5095e-01, -2.1192e-01],
          [ 2.6451e-01, -5.2000e-02, -1.0782e+00,  ...,  4.6496e-01,
            1.2849e+00,  5.9875e-01]],

         [[ 6.6219e-01, -5.3057e-01,  8.4107e-02,  ...,  1.7248e+00,
           -3.6748e-01,  3.7973e-01],
          [-6.4062e-01, -1.0029e+00,  4.9483e-01,  ...,  1.9724e+00,
           -2.3796e+00,  1.1051e+00],
          [-2.3659e+00, -4.0446e-01, -1.1398e+00,  ..., -1.4785e+00,
           -1.0639e+00, -1.9315e+00],
          ...,
          [-1.1076e+00, -2.1393e-01,  4.7739e-01,  ..., -8.1124e-01,
            2.2804e+00,  1.0803e-01],
          [-1.2977e+00,  4.7365e-01, -3.8813e-01,  ..., -1.2284e+00,
            1.8275e+00, -6.5518e-01],
          [-3.0509e-01, -9.4909e-01,  6.5165e-01,  ...,  1.2344e+00,
            5.9979e-02, -5.2565e-01]]],


        [[[ 2.0605e+00,  1.1222e+00,  3.6938e-01,  ..., -1.6650e+00,
            3.9494e-01,  4.2473e-02],
          [-2.4465e+00, -8.1254e-01, -1.6942e-01,  ..., -4.2372e-02,
            8.5083e-01, -3.8731e-02],
          [-9.7966e-01, -1.0845e+00, -1.3326e+00,  ...,  1.2901e+00,
           -1.0484e+00,  6.5266e-01],
          ...,
          [ 1.5906e+00, -7.0275e-02,  1.7391e+00,  ..., -2.7739e-01,
            5.3762e-01, -2.8679e-01],
          [-2.6423e-02,  7.7019e-01, -1.0656e+00,  ...,  2.0175e+00,
           -7.1698e-01, -1.9266e-01],
          [ 2.5779e-01, -9.9745e-02, -3.4224e-01,  ...,  9.7225e-01,
            7.8424e-01, -2.6259e+00]],

         [[-2.7353e-01,  2.2491e-03,  5.9464e-01,  ..., -1.4471e+00,
            1.3058e+00,  1.1409e+00],
          [ 1.0219e+00, -8.4290e-01, -9.6692e-01,  ...,  1.1577e+00,
            2.8018e-02,  4.2800e-01],
          [-3.7094e-01,  6.9958e-01,  1.2137e+00,  ...,  1.5490e+00,
            8.6318e-01,  1.5719e-02],
          ...,
          [ 6.3672e-01, -1.6080e-01, -2.6068e+00,  ...,  1.2265e+00,
           -6.8067e-01, -3.1945e-01],
          [-3.9551e-01,  2.1133e-02, -3.9639e-01,  ...,  3.0653e-01,
            8.6072e-01, -1.4478e+00],
          [ 3.2909e-02,  1.3735e-01,  1.6839e+00,  ...,  3.0284e-01,
            6.9018e-01,  1.4959e+00]]],


        [[[ 1.1497e+00,  7.2338e-01, -2.0133e-01,  ...,  1.5046e+00,
           -1.2697e+00,  1.2807e+00],
          [ 2.4309e+00,  1.0215e+00,  7.3659e-01,  ...,  1.4251e+00,
            1.3420e+00, -1.0106e+00],
          [-8.6712e-01, -4.8278e-01, -4.9260e-01,  ..., -5.5439e-01,
           -4.2425e-01,  1.2427e+00],
          ...,
          [ 4.9926e-01,  1.0819e+00, -5.2565e-01,  ...,  1.0960e+00,
            4.9563e-01, -5.7859e-01],
          [-1.1824e+00,  5.3527e-01, -4.8465e-01,  ..., -2.6312e-01,
           -5.6137e-01,  4.3395e-01],
          [-7.4848e-01,  1.8770e-02,  3.4353e-01,  ...,  2.0630e-01,
            2.6404e-01,  3.1517e-02]],

         [[ 6.9271e-01, -4.4767e-02, -1.5705e-01,  ...,  1.3860e+00,
           -2.9187e-01, -1.0201e+00],
          [ 5.8496e-01,  1.2335e+00,  1.9206e-02,  ...,  1.0460e+00,
            9.4414e-01, -4.4145e-01],
          [-7.1516e-02, -8.6995e-01, -1.3682e+00,  ...,  1.7168e+00,
           -4.5344e-01, -1.5055e+00],
          ...,
          [-1.0287e+00, -3.8458e-01,  3.4785e-01,  ...,  1.0356e+00,
           -6.2997e-01,  2.3302e-01],
          [ 3.9390e-01, -1.1077e-01, -1.1938e+00,  ..., -2.6610e-01,
           -9.6095e-01,  3.7982e-01],
          [-5.1849e-01, -6.4818e-01,  5.6401e-01,  ..., -1.1747e+00,
           -1.4019e+00, -8.2741e-01]]]], device='cuda:0') torch.Size([4, 2, 128, 32])
tensor([[[-0.7798, -0.3259, -0.0421,  ..., -0.5790, -0.3086, -0.5948],
         [ 0.8990,  0.0737,  1.1540,  ...,  0.6356, -0.9086, -1.0797],
         [ 0.8422,  0.3142,  0.3727,  ...,  1.3595, -0.0305, -0.5811],
         ...,
         [-1.2607,  2.0672,  0.1688,  ...,  0.1488, -0.3054,  0.2343],
         [-0.5448,  0.7696, -0.2434,  ..., -1.4915, -0.6310,  1.3514],
         [ 0.0052,  0.6770,  2.2208,  ...,  0.6855,  0.2980, -0.4813]],

        [[-1.0787,  1.2590, -0.3795,  ...,  0.5598, -0.3204,  0.7518],
         [ 0.5076,  1.5089, -1.0415,  ...,  0.0619, -1.0097, -1.0120],
         [ 0.1489,  0.5772, -0.2824,  ...,  0.9567,  1.2864,  0.9415],
         ...,
         [ 0.3069, -0.8770, -0.1558,  ...,  0.2899, -0.0530,  0.5225],
         [ 0.3647, -0.6777, -0.4426,  ...,  0.0230, -0.0027, -0.1733],
         [ 0.1205,  0.9543,  0.3671,  ...,  0.7421,  1.5768, -1.5036]]],
       device='cuda:0', grad_fn=<SelectBackward>)
