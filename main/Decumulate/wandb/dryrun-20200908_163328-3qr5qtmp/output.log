[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/No_noise/val_set
Mixed:   0%|                                                                                                     | 0/2 [00:00<?, ?it/s]Mixed: 100%|█████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 17.29it/s]Mixed: 100%|█████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 17.25it/s]
===============================Dataset shape===============================
Mixed : (2000,)
===========================================================================
Mixed:   0%|                                                                                                     | 0/2 [00:00<?, ?it/s]Mixed: 100%|█████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 17.67it/s]Mixed: 100%|█████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 17.63it/s]
===============================Dataset shape===============================
Mixed : (2000,)
===========================================================================
======================================================Summary Batch (batch_size = 4)=========================================================================
Input batch [0] : batch=torch.Size([4, 1788, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1788, 3]), initial position=torch.Size([4, 1, 4])
Output batch [0] : batch=torch.Size([4, 1789, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1789, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([4, 1812, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1812, 3]), initial position=torch.Size([4, 1, 4])
Output batch [1] : batch=torch.Size([4, 1813, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1813, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([4, 1280, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1280, 3]), initial position=torch.Size([4, 1, 4])
Output batch [2] : batch=torch.Size([4, 1281, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1281, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([4, 1267, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1267, 3]), initial position=torch.Size([4, 1, 4])
Output batch [3] : batch=torch.Size([4, 1268, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1268, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([4, 1243, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1243, 3]), initial position=torch.Size([4, 1, 4])
Output batch [4] : batch=torch.Size([4, 1244, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1244, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([4, 1127, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1127, 3]), initial position=torch.Size([4, 1, 4])
Output batch [5] : batch=torch.Size([4, 1128, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1128, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([4, 1787, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1787, 3]), initial position=torch.Size([4, 1, 4])
Output batch [6] : batch=torch.Size([4, 1788, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1788, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([4, 1150, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1150, 3]), initial position=torch.Size([4, 1, 4])
Output batch [7] : batch=torch.Size([4, 1151, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1151, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([4, 498, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 498, 3]), initial position=torch.Size([4, 1, 4])
Output batch [8] : batch=torch.Size([4, 499, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 499, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([4, 1143, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1143, 3]), initial position=torch.Size([4, 1, 4])
Output batch [9] : batch=torch.Size([4, 1144, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1144, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([4, 1334, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1334, 3]), initial position=torch.Size([4, 1, 4])
Output batch [10] : batch=torch.Size([4, 1335, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1335, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([4, 1306, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1306, 3]), initial position=torch.Size([4, 1, 4])
Output batch [11] : batch=torch.Size([4, 1307, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1307, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([4, 1604, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1604, 3]), initial position=torch.Size([4, 1, 4])
Output batch [12] : batch=torch.Size([4, 1605, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1605, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([4, 1023, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1023, 3]), initial position=torch.Size([4, 1, 4])
Output batch [13] : batch=torch.Size([4, 1024, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1024, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([4, 1696, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1696, 3]), initial position=torch.Size([4, 1, 4])
Output batch [14] : batch=torch.Size([4, 1697, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1697, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([4, 1497, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1497, 3]), initial position=torch.Size([4, 1, 4])
Output batch [15] : batch=torch.Size([4, 1498, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1498, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([4, 1336, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1336, 3]), initial position=torch.Size([4, 1, 4])
Output batch [16] : batch=torch.Size([4, 1337, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1337, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([4, 1138, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1138, 3]), initial position=torch.Size([4, 1, 4])
Output batch [17] : batch=torch.Size([4, 1139, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1139, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([4, 1195, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1195, 3]), initial position=torch.Size([4, 1, 4])
Output batch [18] : batch=torch.Size([4, 1196, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1196, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([4, 1836, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1836, 3]), initial position=torch.Size([4, 1, 4])
Output batch [19] : batch=torch.Size([4, 1837, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1837, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([4, 2248, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2248, 3]), initial position=torch.Size([4, 1, 4])
Output batch [20] : batch=torch.Size([4, 2249, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2249, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([4, 1301, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1301, 3]), initial position=torch.Size([4, 1, 4])
Output batch [21] : batch=torch.Size([4, 1302, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1302, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([4, 1561, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1561, 3]), initial position=torch.Size([4, 1, 4])
Output batch [22] : batch=torch.Size([4, 1562, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1562, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([4, 1611, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1611, 3]), initial position=torch.Size([4, 1, 4])
Output batch [23] : batch=torch.Size([4, 1612, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1612, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([4, 2028, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2028, 3]), initial position=torch.Size([4, 1, 4])
Output batch [24] : batch=torch.Size([4, 2029, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2029, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([4, 1420, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1420, 3]), initial position=torch.Size([4, 1, 4])
Output batch [25] : batch=torch.Size([4, 1421, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1421, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([4, 1871, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1871, 3]), initial position=torch.Size([4, 1, 4])
Output batch [26] : batch=torch.Size([4, 1872, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1872, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([4, 1551, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1551, 3]), initial position=torch.Size([4, 1, 4])
Output batch [27] : batch=torch.Size([4, 1552, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1552, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([4, 1433, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1433, 3]), initial position=torch.Size([4, 1, 4])
Output batch [28] : batch=torch.Size([4, 1434, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1434, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([4, 1458, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1458, 3]), initial position=torch.Size([4, 1, 4])
Output batch [29] : batch=torch.Size([4, 1459, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1459, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([4, 1566, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1566, 3]), initial position=torch.Size([4, 1, 4])
Output batch [30] : batch=torch.Size([4, 1567, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1567, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([4, 1603, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1603, 3]), initial position=torch.Size([4, 1, 4])
Output batch [31] : batch=torch.Size([4, 1604, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1604, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([4, 1070, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1070, 3]), initial position=torch.Size([4, 1, 4])
Output batch [32] : batch=torch.Size([4, 1071, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1071, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([4, 2187, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2187, 3]), initial position=torch.Size([4, 1, 4])
Output batch [33] : batch=torch.Size([4, 2188, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2188, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([4, 1387, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1387, 3]), initial position=torch.Size([4, 1, 4])
Output batch [34] : batch=torch.Size([4, 1388, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1388, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([4, 2097, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2097, 3]), initial position=torch.Size([4, 1, 4])
Output batch [35] : batch=torch.Size([4, 2098, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2098, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([4, 1705, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1705, 3]), initial position=torch.Size([4, 1, 4])
Output batch [36] : batch=torch.Size([4, 1706, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1706, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([4, 1499, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1499, 3]), initial position=torch.Size([4, 1, 4])
Output batch [37] : batch=torch.Size([4, 1500, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1500, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([4, 1583, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1583, 3]), initial position=torch.Size([4, 1, 4])
Output batch [38] : batch=torch.Size([4, 1584, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1584, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([4, 1151, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1151, 3]), initial position=torch.Size([4, 1, 4])
Output batch [39] : batch=torch.Size([4, 1152, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1152, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([4, 875, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 875, 3]), initial position=torch.Size([4, 1, 4])
Output batch [40] : batch=torch.Size([4, 876, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 876, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([4, 703, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 703, 3]), initial position=torch.Size([4, 1, 4])
Output batch [41] : batch=torch.Size([4, 704, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 704, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([4, 991, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 991, 3]), initial position=torch.Size([4, 1, 4])
Output batch [42] : batch=torch.Size([4, 992, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 992, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([4, 1915, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1915, 3]), initial position=torch.Size([4, 1, 4])
Output batch [43] : batch=torch.Size([4, 1916, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1916, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([4, 836, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 836, 3]), initial position=torch.Size([4, 1, 4])
Output batch [44] : batch=torch.Size([4, 837, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 837, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([4, 867, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 867, 3]), initial position=torch.Size([4, 1, 4])
Output batch [45] : batch=torch.Size([4, 868, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 868, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([4, 1026, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1026, 3]), initial position=torch.Size([4, 1, 4])
Output batch [46] : batch=torch.Size([4, 1027, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1027, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([4, 1312, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1312, 3]), initial position=torch.Size([4, 1, 4])
Output batch [47] : batch=torch.Size([4, 1313, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1313, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([4, 1379, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1379, 3]), initial position=torch.Size([4, 1, 4])
Output batch [48] : batch=torch.Size([4, 1380, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1380, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([4, 1045, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1045, 3]), initial position=torch.Size([4, 1, 4])
Output batch [49] : batch=torch.Size([4, 1046, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1046, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([4, 2109, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2109, 3]), initial position=torch.Size([4, 1, 4])
Output batch [50] : batch=torch.Size([4, 2110, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2110, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([4, 1639, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1639, 3]), initial position=torch.Size([4, 1, 4])
Output batch [51] : batch=torch.Size([4, 1640, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1640, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([4, 1756, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1756, 3]), initial position=torch.Size([4, 1, 4])
Output batch [52] : batch=torch.Size([4, 1757, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1757, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([4, 907, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 907, 3]), initial position=torch.Size([4, 1, 4])
Output batch [53] : batch=torch.Size([4, 908, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 908, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([4, 1387, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1387, 3]), initial position=torch.Size([4, 1, 4])
Output batch [54] : batch=torch.Size([4, 1388, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1388, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([4, 1685, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1685, 3]), initial position=torch.Size([4, 1, 4])
Output batch [55] : batch=torch.Size([4, 1686, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1686, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([4, 1499, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1499, 3]), initial position=torch.Size([4, 1, 4])
Output batch [56] : batch=torch.Size([4, 1500, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1500, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([4, 1072, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1072, 3]), initial position=torch.Size([4, 1, 4])
Output batch [57] : batch=torch.Size([4, 1073, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1073, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [58] : batch=torch.Size([4, 1401, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1401, 3]), initial position=torch.Size([4, 1, 4])
Output batch [58] : batch=torch.Size([4, 1402, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1402, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [59] : batch=torch.Size([4, 1387, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1387, 3]), initial position=torch.Size([4, 1, 4])
Output batch [59] : batch=torch.Size([4, 1388, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1388, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [60] : batch=torch.Size([4, 1461, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1461, 3]), initial position=torch.Size([4, 1, 4])
Output batch [60] : batch=torch.Size([4, 1462, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1462, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [61] : batch=torch.Size([4, 1336, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1336, 3]), initial position=torch.Size([4, 1, 4])
Output batch [61] : batch=torch.Size([4, 1337, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1337, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [62] : batch=torch.Size([4, 1436, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1436, 3]), initial position=torch.Size([4, 1, 4])
Output batch [62] : batch=torch.Size([4, 1437, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1437, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [63] : batch=torch.Size([4, 738, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 738, 3]), initial position=torch.Size([4, 1, 4])
Output batch [63] : batch=torch.Size([4, 739, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 739, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [64] : batch=torch.Size([4, 1164, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1164, 3]), initial position=torch.Size([4, 1, 4])
Output batch [64] : batch=torch.Size([4, 1165, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1165, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [65] : batch=torch.Size([4, 1575, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1575, 3]), initial position=torch.Size([4, 1, 4])
Output batch [65] : batch=torch.Size([4, 1576, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1576, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [66] : batch=torch.Size([4, 1731, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1731, 3]), initial position=torch.Size([4, 1, 4])
Output batch [66] : batch=torch.Size([4, 1732, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1732, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [67] : batch=torch.Size([4, 1301, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1301, 3]), initial position=torch.Size([4, 1, 4])
Output batch [67] : batch=torch.Size([4, 1302, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1302, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [68] : batch=torch.Size([4, 1886, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1886, 3]), initial position=torch.Size([4, 1, 4])
Output batch [68] : batch=torch.Size([4, 1887, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1887, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [69] : batch=torch.Size([4, 1374, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1374, 3]), initial position=torch.Size([4, 1, 4])
Output batch [69] : batch=torch.Size([4, 1375, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1375, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [70] : batch=torch.Size([4, 1179, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1179, 3]), initial position=torch.Size([4, 1, 4])
Output batch [70] : batch=torch.Size([4, 1180, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1180, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [71] : batch=torch.Size([4, 1258, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1258, 3]), initial position=torch.Size([4, 1, 4])
Output batch [71] : batch=torch.Size([4, 1259, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1259, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [72] : batch=torch.Size([4, 1462, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1462, 3]), initial position=torch.Size([4, 1, 4])
Output batch [72] : batch=torch.Size([4, 1463, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1463, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [73] : batch=torch.Size([4, 1254, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1254, 3]), initial position=torch.Size([4, 1, 4])
Output batch [73] : batch=torch.Size([4, 1255, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1255, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [74] : batch=torch.Size([4, 781, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 781, 3]), initial position=torch.Size([4, 1, 4])
Output batch [74] : batch=torch.Size([4, 782, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 782, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [75] : batch=torch.Size([4, 1817, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1817, 3]), initial position=torch.Size([4, 1, 4])
Output batch [75] : batch=torch.Size([4, 1818, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1818, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [76] : batch=torch.Size([4, 621, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 621, 3]), initial position=torch.Size([4, 1, 4])
Output batch [76] : batch=torch.Size([4, 622, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 622, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [77] : batch=torch.Size([4, 479, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 479, 3]), initial position=torch.Size([4, 1, 4])
Output batch [77] : batch=torch.Size([4, 480, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 480, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [78] : batch=torch.Size([4, 1236, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1236, 3]), initial position=torch.Size([4, 1, 4])
Output batch [78] : batch=torch.Size([4, 1237, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1237, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [79] : batch=torch.Size([4, 1475, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1475, 3]), initial position=torch.Size([4, 1, 4])
Output batch [79] : batch=torch.Size([4, 1476, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1476, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [80] : batch=torch.Size([4, 1546, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1546, 3]), initial position=torch.Size([4, 1, 4])
Output batch [80] : batch=torch.Size([4, 1547, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1547, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [81] : batch=torch.Size([4, 1061, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1061, 3]), initial position=torch.Size([4, 1, 4])
Output batch [81] : batch=torch.Size([4, 1062, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1062, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [82] : batch=torch.Size([4, 1592, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1592, 3]), initial position=torch.Size([4, 1, 4])
Output batch [82] : batch=torch.Size([4, 1593, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1593, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [83] : batch=torch.Size([4, 1502, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1502, 3]), initial position=torch.Size([4, 1, 4])
Output batch [83] : batch=torch.Size([4, 1503, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1503, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [84] : batch=torch.Size([4, 1181, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1181, 3]), initial position=torch.Size([4, 1, 4])
Output batch [84] : batch=torch.Size([4, 1182, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1182, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [85] : batch=torch.Size([4, 1325, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1325, 3]), initial position=torch.Size([4, 1, 4])
Output batch [85] : batch=torch.Size([4, 1326, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1326, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [86] : batch=torch.Size([4, 1267, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1267, 3]), initial position=torch.Size([4, 1, 4])
Output batch [86] : batch=torch.Size([4, 1268, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1268, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [87] : batch=torch.Size([4, 1811, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1811, 3]), initial position=torch.Size([4, 1, 4])
Output batch [87] : batch=torch.Size([4, 1812, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1812, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [88] : batch=torch.Size([4, 1605, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1605, 3]), initial position=torch.Size([4, 1, 4])
Output batch [88] : batch=torch.Size([4, 1606, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1606, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [89] : batch=torch.Size([4, 1121, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1121, 3]), initial position=torch.Size([4, 1, 4])
Output batch [89] : batch=torch.Size([4, 1122, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1122, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [90] : batch=torch.Size([4, 1431, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1431, 3]), initial position=torch.Size([4, 1, 4])
Output batch [90] : batch=torch.Size([4, 1432, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1432, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [91] : batch=torch.Size([4, 1371, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1371, 3]), initial position=torch.Size([4, 1, 4])
Output batch [91] : batch=torch.Size([4, 1372, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1372, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [92] : batch=torch.Size([4, 1125, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1125, 3]), initial position=torch.Size([4, 1, 4])
Output batch [92] : batch=torch.Size([4, 1126, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1126, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [93] : batch=torch.Size([4, 1650, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1650, 3]), initial position=torch.Size([4, 1, 4])
Output batch [93] : batch=torch.Size([4, 1651, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1651, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [94] : batch=torch.Size([4, 1734, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1734, 3]), initial position=torch.Size([4, 1, 4])
Output batch [94] : batch=torch.Size([4, 1735, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1735, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [95] : batch=torch.Size([4, 1086, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1086, 3]), initial position=torch.Size([4, 1, 4])
Output batch [95] : batch=torch.Size([4, 1087, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1087, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [96] : batch=torch.Size([4, 1155, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1155, 3]), initial position=torch.Size([4, 1, 4])
Output batch [96] : batch=torch.Size([4, 1156, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1156, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [97] : batch=torch.Size([4, 1649, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1649, 3]), initial position=torch.Size([4, 1, 4])
Output batch [97] : batch=torch.Size([4, 1650, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1650, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [98] : batch=torch.Size([4, 1429, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1429, 3]), initial position=torch.Size([4, 1, 4])
Output batch [98] : batch=torch.Size([4, 1430, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1430, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [99] : batch=torch.Size([4, 1746, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1746, 3]), initial position=torch.Size([4, 1, 4])
Output batch [99] : batch=torch.Size([4, 1747, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1747, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [100] : batch=torch.Size([4, 1130, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1130, 3]), initial position=torch.Size([4, 1, 4])
Output batch [100] : batch=torch.Size([4, 1131, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1131, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [101] : batch=torch.Size([4, 1608, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1608, 3]), initial position=torch.Size([4, 1, 4])
Output batch [101] : batch=torch.Size([4, 1609, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1609, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [102] : batch=torch.Size([4, 1096, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1096, 3]), initial position=torch.Size([4, 1, 4])
Output batch [102] : batch=torch.Size([4, 1097, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1097, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [103] : batch=torch.Size([4, 1895, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1895, 3]), initial position=torch.Size([4, 1, 4])
Output batch [103] : batch=torch.Size([4, 1896, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1896, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [104] : batch=torch.Size([4, 1938, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1938, 3]), initial position=torch.Size([4, 1, 4])
Output batch [104] : batch=torch.Size([4, 1939, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1939, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [105] : batch=torch.Size([4, 1463, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1463, 3]), initial position=torch.Size([4, 1, 4])
Output batch [105] : batch=torch.Size([4, 1464, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1464, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [106] : batch=torch.Size([4, 673, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 673, 3]), initial position=torch.Size([4, 1, 4])
Output batch [106] : batch=torch.Size([4, 674, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 674, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [107] : batch=torch.Size([4, 712, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 712, 3]), initial position=torch.Size([4, 1, 4])
Output batch [107] : batch=torch.Size([4, 713, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 713, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [108] : batch=torch.Size([4, 1001, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1001, 3]), initial position=torch.Size([4, 1, 4])
Output batch [108] : batch=torch.Size([4, 1002, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1002, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [109] : batch=torch.Size([4, 1833, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1833, 3]), initial position=torch.Size([4, 1, 4])
Output batch [109] : batch=torch.Size([4, 1834, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1834, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [110] : batch=torch.Size([4, 1760, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1760, 3]), initial position=torch.Size([4, 1, 4])
Output batch [110] : batch=torch.Size([4, 1761, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1761, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [111] : batch=torch.Size([4, 1597, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1597, 3]), initial position=torch.Size([4, 1, 4])
Output batch [111] : batch=torch.Size([4, 1598, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1598, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [112] : batch=torch.Size([4, 1244, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1244, 3]), initial position=torch.Size([4, 1, 4])
Output batch [112] : batch=torch.Size([4, 1245, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1245, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [113] : batch=torch.Size([4, 2022, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2022, 3]), initial position=torch.Size([4, 1, 4])
Output batch [113] : batch=torch.Size([4, 2023, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2023, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [114] : batch=torch.Size([4, 1131, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1131, 3]), initial position=torch.Size([4, 1, 4])
Output batch [114] : batch=torch.Size([4, 1132, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1132, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [115] : batch=torch.Size([4, 1434, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1434, 3]), initial position=torch.Size([4, 1, 4])
Output batch [115] : batch=torch.Size([4, 1435, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1435, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [116] : batch=torch.Size([4, 1228, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1228, 3]), initial position=torch.Size([4, 1, 4])
Output batch [116] : batch=torch.Size([4, 1229, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1229, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [117] : batch=torch.Size([4, 1315, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1315, 3]), initial position=torch.Size([4, 1, 4])
Output batch [117] : batch=torch.Size([4, 1316, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1316, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [118] : batch=torch.Size([4, 1081, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1081, 3]), initial position=torch.Size([4, 1, 4])
Output batch [118] : batch=torch.Size([4, 1082, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1082, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [119] : batch=torch.Size([4, 1063, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1063, 3]), initial position=torch.Size([4, 1, 4])
Output batch [119] : batch=torch.Size([4, 1064, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1064, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [120] : batch=torch.Size([4, 1265, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1265, 3]), initial position=torch.Size([4, 1, 4])
Output batch [120] : batch=torch.Size([4, 1266, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1266, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [121] : batch=torch.Size([4, 1735, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1735, 3]), initial position=torch.Size([4, 1, 4])
Output batch [121] : batch=torch.Size([4, 1736, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1736, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [122] : batch=torch.Size([4, 1836, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1836, 3]), initial position=torch.Size([4, 1, 4])
Output batch [122] : batch=torch.Size([4, 1837, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1837, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [123] : batch=torch.Size([4, 1515, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1515, 3]), initial position=torch.Size([4, 1, 4])
Output batch [123] : batch=torch.Size([4, 1516, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1516, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [124] : batch=torch.Size([4, 1460, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1460, 3]), initial position=torch.Size([4, 1, 4])
Output batch [124] : batch=torch.Size([4, 1461, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1461, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [125] : batch=torch.Size([4, 1480, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1480, 3]), initial position=torch.Size([4, 1, 4])
Output batch [125] : batch=torch.Size([4, 1481, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1481, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [126] : batch=torch.Size([4, 1124, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1124, 3]), initial position=torch.Size([4, 1, 4])
Output batch [126] : batch=torch.Size([4, 1125, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1125, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [127] : batch=torch.Size([4, 1309, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1309, 3]), initial position=torch.Size([4, 1, 4])
Output batch [127] : batch=torch.Size([4, 1310, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1310, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [128] : batch=torch.Size([4, 1133, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1133, 3]), initial position=torch.Size([4, 1, 4])
Output batch [128] : batch=torch.Size([4, 1134, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1134, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [129] : batch=torch.Size([4, 891, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 891, 3]), initial position=torch.Size([4, 1, 4])
Output batch [129] : batch=torch.Size([4, 892, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 892, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [130] : batch=torch.Size([4, 622, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 622, 3]), initial position=torch.Size([4, 1, 4])
Output batch [130] : batch=torch.Size([4, 623, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 623, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [131] : batch=torch.Size([4, 1059, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1059, 3]), initial position=torch.Size([4, 1, 4])
Output batch [131] : batch=torch.Size([4, 1060, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1060, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [132] : batch=torch.Size([4, 1366, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1366, 3]), initial position=torch.Size([4, 1, 4])
Output batch [132] : batch=torch.Size([4, 1367, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1367, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [133] : batch=torch.Size([4, 1804, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1804, 3]), initial position=torch.Size([4, 1, 4])
Output batch [133] : batch=torch.Size([4, 1805, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1805, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [134] : batch=torch.Size([4, 1332, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1332, 3]), initial position=torch.Size([4, 1, 4])
Output batch [134] : batch=torch.Size([4, 1333, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1333, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [135] : batch=torch.Size([4, 1026, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1026, 3]), initial position=torch.Size([4, 1, 4])
Output batch [135] : batch=torch.Size([4, 1027, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1027, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [136] : batch=torch.Size([4, 1258, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1258, 3]), initial position=torch.Size([4, 1, 4])
Output batch [136] : batch=torch.Size([4, 1259, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1259, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [137] : batch=torch.Size([4, 841, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 841, 3]), initial position=torch.Size([4, 1, 4])
Output batch [137] : batch=torch.Size([4, 842, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 842, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [138] : batch=torch.Size([4, 1283, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1283, 3]), initial position=torch.Size([4, 1, 4])
Output batch [138] : batch=torch.Size([4, 1284, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1284, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [139] : batch=torch.Size([4, 996, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 996, 3]), initial position=torch.Size([4, 1, 4])
Output batch [139] : batch=torch.Size([4, 997, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 997, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [140] : batch=torch.Size([4, 1581, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1581, 3]), initial position=torch.Size([4, 1, 4])
Output batch [140] : batch=torch.Size([4, 1582, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1582, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [141] : batch=torch.Size([4, 1162, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1162, 3]), initial position=torch.Size([4, 1, 4])
Output batch [141] : batch=torch.Size([4, 1163, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1163, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [142] : batch=torch.Size([4, 1406, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1406, 3]), initial position=torch.Size([4, 1, 4])
Output batch [142] : batch=torch.Size([4, 1407, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1407, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [143] : batch=torch.Size([4, 985, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 985, 3]), initial position=torch.Size([4, 1, 4])
Output batch [143] : batch=torch.Size([4, 986, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 986, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [144] : batch=torch.Size([4, 1352, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1352, 3]), initial position=torch.Size([4, 1, 4])
Output batch [144] : batch=torch.Size([4, 1353, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1353, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [145] : batch=torch.Size([4, 1713, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1713, 3]), initial position=torch.Size([4, 1, 4])
Output batch [145] : batch=torch.Size([4, 1714, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1714, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [146] : batch=torch.Size([4, 1119, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1119, 3]), initial position=torch.Size([4, 1, 4])
Output batch [146] : batch=torch.Size([4, 1120, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1120, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [147] : batch=torch.Size([4, 987, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 987, 3]), initial position=torch.Size([4, 1, 4])
Output batch [147] : batch=torch.Size([4, 988, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 988, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [148] : batch=torch.Size([4, 2255, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2255, 3]), initial position=torch.Size([4, 1, 4])
Output batch [148] : batch=torch.Size([4, 2256, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2256, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [149] : batch=torch.Size([4, 1048, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1048, 3]), initial position=torch.Size([4, 1, 4])
Output batch [149] : batch=torch.Size([4, 1049, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1049, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [150] : batch=torch.Size([4, 1797, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1797, 3]), initial position=torch.Size([4, 1, 4])
Output batch [150] : batch=torch.Size([4, 1798, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1798, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [151] : batch=torch.Size([4, 1750, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1750, 3]), initial position=torch.Size([4, 1, 4])
Output batch [151] : batch=torch.Size([4, 1751, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1751, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [152] : batch=torch.Size([4, 2049, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2049, 3]), initial position=torch.Size([4, 1, 4])
Output batch [152] : batch=torch.Size([4, 2050, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2050, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [153] : batch=torch.Size([4, 558, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 558, 3]), initial position=torch.Size([4, 1, 4])
Output batch [153] : batch=torch.Size([4, 559, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 559, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [154] : batch=torch.Size([4, 1422, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1422, 3]), initial position=torch.Size([4, 1, 4])
Output batch [154] : batch=torch.Size([4, 1423, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1423, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [155] : batch=torch.Size([4, 844, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 844, 3]), initial position=torch.Size([4, 1, 4])
Output batch [155] : batch=torch.Size([4, 845, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 845, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [156] : batch=torch.Size([4, 1379, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1379, 3]), initial position=torch.Size([4, 1, 4])
Output batch [156] : batch=torch.Size([4, 1380, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1380, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [157] : batch=torch.Size([4, 1644, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1644, 3]), initial position=torch.Size([4, 1, 4])
Output batch [157] : batch=torch.Size([4, 1645, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1645, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [158] : batch=torch.Size([4, 1355, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1355, 3]), initial position=torch.Size([4, 1, 4])
Output batch [158] : batch=torch.Size([4, 1356, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1356, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [159] : batch=torch.Size([4, 1189, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1189, 3]), initial position=torch.Size([4, 1, 4])
Output batch [159] : batch=torch.Size([4, 1190, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1190, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [160] : batch=torch.Size([4, 1549, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1549, 3]), initial position=torch.Size([4, 1, 4])
Output batch [160] : batch=torch.Size([4, 1550, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1550, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [161] : batch=torch.Size([4, 1270, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1270, 3]), initial position=torch.Size([4, 1, 4])
Output batch [161] : batch=torch.Size([4, 1271, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1271, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [162] : batch=torch.Size([4, 1045, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1045, 3]), initial position=torch.Size([4, 1, 4])
Output batch [162] : batch=torch.Size([4, 1046, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1046, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [163] : batch=torch.Size([4, 1560, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1560, 3]), initial position=torch.Size([4, 1, 4])
Output batch [163] : batch=torch.Size([4, 1561, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1561, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [164] : batch=torch.Size([4, 1414, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1414, 3]), initial position=torch.Size([4, 1, 4])
Output batch [164] : batch=torch.Size([4, 1415, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1415, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [165] : batch=torch.Size([4, 1307, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1307, 3]), initial position=torch.Size([4, 1, 4])
Output batch [165] : batch=torch.Size([4, 1308, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1308, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [166] : batch=torch.Size([4, 1457, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1457, 3]), initial position=torch.Size([4, 1, 4])
Output batch [166] : batch=torch.Size([4, 1458, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1458, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [167] : batch=torch.Size([4, 1123, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1123, 3]), initial position=torch.Size([4, 1, 4])
Output batch [167] : batch=torch.Size([4, 1124, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1124, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [168] : batch=torch.Size([4, 1063, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1063, 3]), initial position=torch.Size([4, 1, 4])
Output batch [168] : batch=torch.Size([4, 1064, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1064, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [169] : batch=torch.Size([4, 2364, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2364, 3]), initial position=torch.Size([4, 1, 4])
Output batch [169] : batch=torch.Size([4, 2365, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2365, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [170] : batch=torch.Size([4, 1737, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1737, 3]), initial position=torch.Size([4, 1, 4])
Output batch [170] : batch=torch.Size([4, 1738, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1738, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [171] : batch=torch.Size([4, 1572, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1572, 3]), initial position=torch.Size([4, 1, 4])
Output batch [171] : batch=torch.Size([4, 1573, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1573, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [172] : batch=torch.Size([4, 1362, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1362, 3]), initial position=torch.Size([4, 1, 4])
Output batch [172] : batch=torch.Size([4, 1363, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1363, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [173] : batch=torch.Size([4, 1917, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1917, 3]), initial position=torch.Size([4, 1, 4])
Output batch [173] : batch=torch.Size([4, 1918, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1918, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [174] : batch=torch.Size([4, 1815, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1815, 3]), initial position=torch.Size([4, 1, 4])
Output batch [174] : batch=torch.Size([4, 1816, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1816, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [175] : batch=torch.Size([4, 1021, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1021, 3]), initial position=torch.Size([4, 1, 4])
Output batch [175] : batch=torch.Size([4, 1022, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1022, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [176] : batch=torch.Size([4, 1445, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1445, 3]), initial position=torch.Size([4, 1, 4])
Output batch [176] : batch=torch.Size([4, 1446, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1446, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [177] : batch=torch.Size([4, 1850, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1850, 3]), initial position=torch.Size([4, 1, 4])
Output batch [177] : batch=torch.Size([4, 1851, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1851, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [178] : batch=torch.Size([4, 1747, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1747, 3]), initial position=torch.Size([4, 1, 4])
Output batch [178] : batch=torch.Size([4, 1748, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1748, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [179] : batch=torch.Size([4, 739, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 739, 3]), initial position=torch.Size([4, 1, 4])
Output batch [179] : batch=torch.Size([4, 740, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 740, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [180] : batch=torch.Size([4, 1757, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1757, 3]), initial position=torch.Size([4, 1, 4])
Output batch [180] : batch=torch.Size([4, 1758, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1758, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [181] : batch=torch.Size([4, 1887, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1887, 3]), initial position=torch.Size([4, 1, 4])
Output batch [181] : batch=torch.Size([4, 1888, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1888, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [182] : batch=torch.Size([4, 1328, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1328, 3]), initial position=torch.Size([4, 1, 4])
Output batch [182] : batch=torch.Size([4, 1329, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1329, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [183] : batch=torch.Size([4, 1566, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1566, 3]), initial position=torch.Size([4, 1, 4])
Output batch [183] : batch=torch.Size([4, 1567, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1567, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [184] : batch=torch.Size([4, 1852, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1852, 3]), initial position=torch.Size([4, 1, 4])
Output batch [184] : batch=torch.Size([4, 1853, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1853, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [185] : batch=torch.Size([4, 1123, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1123, 3]), initial position=torch.Size([4, 1, 4])
Output batch [185] : batch=torch.Size([4, 1124, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1124, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [186] : batch=torch.Size([4, 640, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 640, 3]), initial position=torch.Size([4, 1, 4])
Output batch [186] : batch=torch.Size([4, 641, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 641, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [187] : batch=torch.Size([4, 1176, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1176, 3]), initial position=torch.Size([4, 1, 4])
Output batch [187] : batch=torch.Size([4, 1177, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1177, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [188] : batch=torch.Size([4, 1316, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1316, 3]), initial position=torch.Size([4, 1, 4])
Output batch [188] : batch=torch.Size([4, 1317, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1317, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [189] : batch=torch.Size([4, 1554, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1554, 3]), initial position=torch.Size([4, 1, 4])
Output batch [189] : batch=torch.Size([4, 1555, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1555, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [190] : batch=torch.Size([4, 1331, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1331, 3]), initial position=torch.Size([4, 1, 4])
Output batch [190] : batch=torch.Size([4, 1332, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1332, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [191] : batch=torch.Size([4, 1188, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1188, 3]), initial position=torch.Size([4, 1, 4])
Output batch [191] : batch=torch.Size([4, 1189, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1189, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [192] : batch=torch.Size([4, 1458, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1458, 3]), initial position=torch.Size([4, 1, 4])
Output batch [192] : batch=torch.Size([4, 1459, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1459, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [193] : batch=torch.Size([4, 1199, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1199, 3]), initial position=torch.Size([4, 1, 4])
Output batch [193] : batch=torch.Size([4, 1200, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1200, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [194] : batch=torch.Size([4, 1108, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1108, 3]), initial position=torch.Size([4, 1, 4])
Output batch [194] : batch=torch.Size([4, 1109, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1109, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [195] : batch=torch.Size([4, 1044, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1044, 3]), initial position=torch.Size([4, 1, 4])
Output batch [195] : batch=torch.Size([4, 1045, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1045, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [196] : batch=torch.Size([4, 1560, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1560, 3]), initial position=torch.Size([4, 1, 4])
Output batch [196] : batch=torch.Size([4, 1561, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1561, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [197] : batch=torch.Size([4, 952, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 952, 3]), initial position=torch.Size([4, 1, 4])
Output batch [197] : batch=torch.Size([4, 953, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 953, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [198] : batch=torch.Size([4, 898, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 898, 3]), initial position=torch.Size([4, 1, 4])
Output batch [198] : batch=torch.Size([4, 899, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 899, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [199] : batch=torch.Size([4, 866, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 866, 3]), initial position=torch.Size([4, 1, 4])
Output batch [199] : batch=torch.Size([4, 867, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 867, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [200] : batch=torch.Size([4, 1126, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1126, 3]), initial position=torch.Size([4, 1, 4])
Output batch [200] : batch=torch.Size([4, 1127, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1127, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [201] : batch=torch.Size([4, 1410, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1410, 3]), initial position=torch.Size([4, 1, 4])
Output batch [201] : batch=torch.Size([4, 1411, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1411, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [202] : batch=torch.Size([4, 1481, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1481, 3]), initial position=torch.Size([4, 1, 4])
Output batch [202] : batch=torch.Size([4, 1482, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1482, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [203] : batch=torch.Size([4, 2112, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2112, 3]), initial position=torch.Size([4, 1, 4])
Output batch [203] : batch=torch.Size([4, 2113, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2113, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [204] : batch=torch.Size([4, 1952, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1952, 3]), initial position=torch.Size([4, 1, 4])
Output batch [204] : batch=torch.Size([4, 1953, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1953, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [205] : batch=torch.Size([4, 1628, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1628, 3]), initial position=torch.Size([4, 1, 4])
Output batch [205] : batch=torch.Size([4, 1629, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1629, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [206] : batch=torch.Size([4, 1938, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1938, 3]), initial position=torch.Size([4, 1, 4])
Output batch [206] : batch=torch.Size([4, 1939, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1939, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [207] : batch=torch.Size([4, 1204, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1204, 3]), initial position=torch.Size([4, 1, 4])
Output batch [207] : batch=torch.Size([4, 1205, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1205, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [208] : batch=torch.Size([4, 1192, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1192, 3]), initial position=torch.Size([4, 1, 4])
Output batch [208] : batch=torch.Size([4, 1193, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1193, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [209] : batch=torch.Size([4, 1640, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1640, 3]), initial position=torch.Size([4, 1, 4])
Output batch [209] : batch=torch.Size([4, 1641, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1641, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [210] : batch=torch.Size([4, 1562, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1562, 3]), initial position=torch.Size([4, 1, 4])
Output batch [210] : batch=torch.Size([4, 1563, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1563, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [211] : batch=torch.Size([4, 1365, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1365, 3]), initial position=torch.Size([4, 1, 4])
Output batch [211] : batch=torch.Size([4, 1366, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1366, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [212] : batch=torch.Size([4, 1507, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1507, 3]), initial position=torch.Size([4, 1, 4])
Output batch [212] : batch=torch.Size([4, 1508, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1508, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [213] : batch=torch.Size([4, 846, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 846, 3]), initial position=torch.Size([4, 1, 4])
Output batch [213] : batch=torch.Size([4, 847, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 847, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [214] : batch=torch.Size([4, 1136, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1136, 3]), initial position=torch.Size([4, 1, 4])
Output batch [214] : batch=torch.Size([4, 1137, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1137, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [215] : batch=torch.Size([4, 828, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 828, 3]), initial position=torch.Size([4, 1, 4])
Output batch [215] : batch=torch.Size([4, 829, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 829, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [216] : batch=torch.Size([4, 1313, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1313, 3]), initial position=torch.Size([4, 1, 4])
Output batch [216] : batch=torch.Size([4, 1314, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1314, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [217] : batch=torch.Size([4, 1602, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1602, 3]), initial position=torch.Size([4, 1, 4])
Output batch [217] : batch=torch.Size([4, 1603, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1603, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [218] : batch=torch.Size([4, 1587, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1587, 3]), initial position=torch.Size([4, 1, 4])
Output batch [218] : batch=torch.Size([4, 1588, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1588, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [219] : batch=torch.Size([4, 1741, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1741, 3]), initial position=torch.Size([4, 1, 4])
Output batch [219] : batch=torch.Size([4, 1742, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1742, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [220] : batch=torch.Size([4, 1629, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1629, 3]), initial position=torch.Size([4, 1, 4])
Output batch [220] : batch=torch.Size([4, 1630, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1630, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [221] : batch=torch.Size([4, 971, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 971, 3]), initial position=torch.Size([4, 1, 4])
Output batch [221] : batch=torch.Size([4, 972, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 972, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [222] : batch=torch.Size([4, 1243, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1243, 3]), initial position=torch.Size([4, 1, 4])
Output batch [222] : batch=torch.Size([4, 1244, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1244, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [223] : batch=torch.Size([4, 1350, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1350, 3]), initial position=torch.Size([4, 1, 4])
Output batch [223] : batch=torch.Size([4, 1351, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1351, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [224] : batch=torch.Size([4, 1367, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1367, 3]), initial position=torch.Size([4, 1, 4])
Output batch [224] : batch=torch.Size([4, 1368, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1368, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [225] : batch=torch.Size([4, 1483, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1483, 3]), initial position=torch.Size([4, 1, 4])
Output batch [225] : batch=torch.Size([4, 1484, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1484, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [226] : batch=torch.Size([4, 1585, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1585, 3]), initial position=torch.Size([4, 1, 4])
Output batch [226] : batch=torch.Size([4, 1586, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1586, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [227] : batch=torch.Size([4, 1679, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1679, 3]), initial position=torch.Size([4, 1, 4])
Output batch [227] : batch=torch.Size([4, 1680, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1680, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [228] : batch=torch.Size([4, 1799, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1799, 3]), initial position=torch.Size([4, 1, 4])
Output batch [228] : batch=torch.Size([4, 1800, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1800, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [229] : batch=torch.Size([4, 1327, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1327, 3]), initial position=torch.Size([4, 1, 4])
Output batch [229] : batch=torch.Size([4, 1328, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1328, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [230] : batch=torch.Size([4, 1412, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1412, 3]), initial position=torch.Size([4, 1, 4])
Output batch [230] : batch=torch.Size([4, 1413, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1413, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [231] : batch=torch.Size([4, 955, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 955, 3]), initial position=torch.Size([4, 1, 4])
Output batch [231] : batch=torch.Size([4, 956, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 956, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [232] : batch=torch.Size([4, 1042, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1042, 3]), initial position=torch.Size([4, 1, 4])
Output batch [232] : batch=torch.Size([4, 1043, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1043, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [233] : batch=torch.Size([4, 1581, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1581, 3]), initial position=torch.Size([4, 1, 4])
Output batch [233] : batch=torch.Size([4, 1582, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1582, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [234] : batch=torch.Size([4, 1774, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1774, 3]), initial position=torch.Size([4, 1, 4])
Output batch [234] : batch=torch.Size([4, 1775, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1775, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [235] : batch=torch.Size([4, 575, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 575, 3]), initial position=torch.Size([4, 1, 4])
Output batch [235] : batch=torch.Size([4, 576, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 576, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [236] : batch=torch.Size([4, 1264, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1264, 3]), initial position=torch.Size([4, 1, 4])
Output batch [236] : batch=torch.Size([4, 1265, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1265, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [237] : batch=torch.Size([4, 1372, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1372, 3]), initial position=torch.Size([4, 1, 4])
Output batch [237] : batch=torch.Size([4, 1373, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1373, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [238] : batch=torch.Size([4, 1080, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1080, 3]), initial position=torch.Size([4, 1, 4])
Output batch [238] : batch=torch.Size([4, 1081, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1081, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [239] : batch=torch.Size([4, 1072, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1072, 3]), initial position=torch.Size([4, 1, 4])
Output batch [239] : batch=torch.Size([4, 1073, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1073, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [240] : batch=torch.Size([4, 516, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 516, 3]), initial position=torch.Size([4, 1, 4])
Output batch [240] : batch=torch.Size([4, 517, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 517, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [241] : batch=torch.Size([4, 1179, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1179, 3]), initial position=torch.Size([4, 1, 4])
Output batch [241] : batch=torch.Size([4, 1180, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1180, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [242] : batch=torch.Size([4, 1160, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1160, 3]), initial position=torch.Size([4, 1, 4])
Output batch [242] : batch=torch.Size([4, 1161, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1161, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [243] : batch=torch.Size([4, 1632, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1632, 3]), initial position=torch.Size([4, 1, 4])
Output batch [243] : batch=torch.Size([4, 1633, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1633, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [244] : batch=torch.Size([4, 1158, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1158, 3]), initial position=torch.Size([4, 1, 4])
Output batch [244] : batch=torch.Size([4, 1159, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1159, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [245] : batch=torch.Size([4, 1260, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1260, 3]), initial position=torch.Size([4, 1, 4])
Output batch [245] : batch=torch.Size([4, 1261, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1261, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [246] : batch=torch.Size([4, 2028, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2028, 3]), initial position=torch.Size([4, 1, 4])
Output batch [246] : batch=torch.Size([4, 2029, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2029, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [247] : batch=torch.Size([4, 1051, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1051, 3]), initial position=torch.Size([4, 1, 4])
Output batch [247] : batch=torch.Size([4, 1052, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1052, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [248] : batch=torch.Size([4, 1597, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1597, 3]), initial position=torch.Size([4, 1, 4])
Output batch [248] : batch=torch.Size([4, 1598, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1598, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [249] : batch=torch.Size([4, 1321, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1321, 3]), initial position=torch.Size([4, 1, 4])
Output batch [249] : batch=torch.Size([4, 1322, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1322, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [250] : batch=torch.Size([4, 1666, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1666, 3]), initial position=torch.Size([4, 1, 4])
Output batch [250] : batch=torch.Size([4, 1667, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1667, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [251] : batch=torch.Size([4, 1665, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1665, 3]), initial position=torch.Size([4, 1, 4])
Output batch [251] : batch=torch.Size([4, 1666, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1666, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [252] : batch=torch.Size([4, 1042, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1042, 3]), initial position=torch.Size([4, 1, 4])
Output batch [252] : batch=torch.Size([4, 1043, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1043, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [253] : batch=torch.Size([4, 1361, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1361, 3]), initial position=torch.Size([4, 1, 4])
Output batch [253] : batch=torch.Size([4, 1362, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1362, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [254] : batch=torch.Size([4, 962, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 962, 3]), initial position=torch.Size([4, 1, 4])
Output batch [254] : batch=torch.Size([4, 963, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 963, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [255] : batch=torch.Size([4, 735, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 735, 3]), initial position=torch.Size([4, 1, 4])
Output batch [255] : batch=torch.Size([4, 736, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 736, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [256] : batch=torch.Size([4, 1349, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1349, 3]), initial position=torch.Size([4, 1, 4])
Output batch [256] : batch=torch.Size([4, 1350, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1350, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [257] : batch=torch.Size([4, 978, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 978, 3]), initial position=torch.Size([4, 1, 4])
Output batch [257] : batch=torch.Size([4, 979, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 979, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [258] : batch=torch.Size([4, 1281, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1281, 3]), initial position=torch.Size([4, 1, 4])
Output batch [258] : batch=torch.Size([4, 1282, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1282, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [259] : batch=torch.Size([4, 1622, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1622, 3]), initial position=torch.Size([4, 1, 4])
Output batch [259] : batch=torch.Size([4, 1623, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1623, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [260] : batch=torch.Size([4, 1477, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1477, 3]), initial position=torch.Size([4, 1, 4])
Output batch [260] : batch=torch.Size([4, 1478, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1478, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [261] : batch=torch.Size([4, 1421, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1421, 3]), initial position=torch.Size([4, 1, 4])
Output batch [261] : batch=torch.Size([4, 1422, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1422, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [262] : batch=torch.Size([4, 1579, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1579, 3]), initial position=torch.Size([4, 1, 4])
Output batch [262] : batch=torch.Size([4, 1580, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1580, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [263] : batch=torch.Size([4, 1913, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1913, 3]), initial position=torch.Size([4, 1, 4])
Output batch [263] : batch=torch.Size([4, 1914, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1914, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [264] : batch=torch.Size([4, 1468, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1468, 3]), initial position=torch.Size([4, 1, 4])
Output batch [264] : batch=torch.Size([4, 1469, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1469, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [265] : batch=torch.Size([4, 1592, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1592, 3]), initial position=torch.Size([4, 1, 4])
Output batch [265] : batch=torch.Size([4, 1593, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1593, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [266] : batch=torch.Size([4, 730, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 730, 3]), initial position=torch.Size([4, 1, 4])
Output batch [266] : batch=torch.Size([4, 731, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 731, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [267] : batch=torch.Size([4, 1608, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1608, 3]), initial position=torch.Size([4, 1, 4])
Output batch [267] : batch=torch.Size([4, 1609, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1609, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [268] : batch=torch.Size([4, 593, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 593, 3]), initial position=torch.Size([4, 1, 4])
Output batch [268] : batch=torch.Size([4, 594, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 594, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [269] : batch=torch.Size([4, 1060, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1060, 3]), initial position=torch.Size([4, 1, 4])
Output batch [269] : batch=torch.Size([4, 1061, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1061, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [270] : batch=torch.Size([4, 1708, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1708, 3]), initial position=torch.Size([4, 1, 4])
Output batch [270] : batch=torch.Size([4, 1709, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1709, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [271] : batch=torch.Size([4, 1564, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1564, 3]), initial position=torch.Size([4, 1, 4])
Output batch [271] : batch=torch.Size([4, 1565, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1565, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [272] : batch=torch.Size([4, 1745, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1745, 3]), initial position=torch.Size([4, 1, 4])
Output batch [272] : batch=torch.Size([4, 1746, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1746, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [273] : batch=torch.Size([4, 989, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 989, 3]), initial position=torch.Size([4, 1, 4])
Output batch [273] : batch=torch.Size([4, 990, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 990, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [274] : batch=torch.Size([4, 1723, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1723, 3]), initial position=torch.Size([4, 1, 4])
Output batch [274] : batch=torch.Size([4, 1724, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1724, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [275] : batch=torch.Size([4, 1275, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1275, 3]), initial position=torch.Size([4, 1, 4])
Output batch [275] : batch=torch.Size([4, 1276, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1276, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [276] : batch=torch.Size([4, 1146, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1146, 3]), initial position=torch.Size([4, 1, 4])
Output batch [276] : batch=torch.Size([4, 1147, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1147, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [277] : batch=torch.Size([4, 1496, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1496, 3]), initial position=torch.Size([4, 1, 4])
Output batch [277] : batch=torch.Size([4, 1497, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1497, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [278] : batch=torch.Size([4, 1133, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1133, 3]), initial position=torch.Size([4, 1, 4])
Output batch [278] : batch=torch.Size([4, 1134, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1134, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [279] : batch=torch.Size([4, 729, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 729, 3]), initial position=torch.Size([4, 1, 4])
Output batch [279] : batch=torch.Size([4, 730, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 730, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [280] : batch=torch.Size([4, 1298, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1298, 3]), initial position=torch.Size([4, 1, 4])
Output batch [280] : batch=torch.Size([4, 1299, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1299, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [281] : batch=torch.Size([4, 2171, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2171, 3]), initial position=torch.Size([4, 1, 4])
Output batch [281] : batch=torch.Size([4, 2172, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2172, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [282] : batch=torch.Size([4, 1339, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1339, 3]), initial position=torch.Size([4, 1, 4])
Output batch [282] : batch=torch.Size([4, 1340, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1340, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [283] : batch=torch.Size([4, 978, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 978, 3]), initial position=torch.Size([4, 1, 4])
Output batch [283] : batch=torch.Size([4, 979, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 979, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [284] : batch=torch.Size([4, 324, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 324, 3]), initial position=torch.Size([4, 1, 4])
Output batch [284] : batch=torch.Size([4, 325, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 325, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [285] : batch=torch.Size([4, 1226, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1226, 3]), initial position=torch.Size([4, 1, 4])
Output batch [285] : batch=torch.Size([4, 1227, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1227, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [286] : batch=torch.Size([4, 1479, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1479, 3]), initial position=torch.Size([4, 1, 4])
Output batch [286] : batch=torch.Size([4, 1480, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1480, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [287] : batch=torch.Size([4, 1283, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1283, 3]), initial position=torch.Size([4, 1, 4])
Output batch [287] : batch=torch.Size([4, 1284, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1284, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [288] : batch=torch.Size([4, 1557, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1557, 3]), initial position=torch.Size([4, 1, 4])
Output batch [288] : batch=torch.Size([4, 1558, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1558, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [289] : batch=torch.Size([4, 1151, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1151, 3]), initial position=torch.Size([4, 1, 4])
Output batch [289] : batch=torch.Size([4, 1152, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1152, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [290] : batch=torch.Size([4, 1351, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1351, 3]), initial position=torch.Size([4, 1, 4])
Output batch [290] : batch=torch.Size([4, 1352, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1352, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [291] : batch=torch.Size([4, 964, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 964, 3]), initial position=torch.Size([4, 1, 4])
Output batch [291] : batch=torch.Size([4, 965, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 965, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [292] : batch=torch.Size([4, 999, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 999, 3]), initial position=torch.Size([4, 1, 4])
Output batch [292] : batch=torch.Size([4, 1000, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1000, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [293] : batch=torch.Size([4, 1381, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1381, 3]), initial position=torch.Size([4, 1, 4])
Output batch [293] : batch=torch.Size([4, 1382, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1382, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [294] : batch=torch.Size([4, 1287, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1287, 3]), initial position=torch.Size([4, 1, 4])
Output batch [294] : batch=torch.Size([4, 1288, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1288, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [295] : batch=torch.Size([4, 825, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 825, 3]), initial position=torch.Size([4, 1, 4])
Output batch [295] : batch=torch.Size([4, 826, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 826, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [296] : batch=torch.Size([4, 1794, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1794, 3]), initial position=torch.Size([4, 1, 4])
Output batch [296] : batch=torch.Size([4, 1795, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1795, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [297] : batch=torch.Size([4, 1827, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1827, 3]), initial position=torch.Size([4, 1, 4])
Output batch [297] : batch=torch.Size([4, 1828, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1828, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [298] : batch=torch.Size([4, 1527, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1527, 3]), initial position=torch.Size([4, 1, 4])
Output batch [298] : batch=torch.Size([4, 1528, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1528, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [299] : batch=torch.Size([4, 1238, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1238, 3]), initial position=torch.Size([4, 1, 4])
Output batch [299] : batch=torch.Size([4, 1239, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1239, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [300] : batch=torch.Size([4, 1722, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1722, 3]), initial position=torch.Size([4, 1, 4])
Output batch [300] : batch=torch.Size([4, 1723, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1723, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [301] : batch=torch.Size([4, 1253, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1253, 3]), initial position=torch.Size([4, 1, 4])
Output batch [301] : batch=torch.Size([4, 1254, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1254, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [302] : batch=torch.Size([4, 589, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 589, 3]), initial position=torch.Size([4, 1, 4])
Output batch [302] : batch=torch.Size([4, 590, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 590, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [303] : batch=torch.Size([4, 1466, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1466, 3]), initial position=torch.Size([4, 1, 4])
Output batch [303] : batch=torch.Size([4, 1467, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1467, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [304] : batch=torch.Size([4, 1278, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1278, 3]), initial position=torch.Size([4, 1, 4])
Output batch [304] : batch=torch.Size([4, 1279, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1279, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [305] : batch=torch.Size([4, 1474, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1474, 3]), initial position=torch.Size([4, 1, 4])
Output batch [305] : batch=torch.Size([4, 1475, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1475, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [306] : batch=torch.Size([4, 857, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 857, 3]), initial position=torch.Size([4, 1, 4])
Output batch [306] : batch=torch.Size([4, 858, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 858, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [307] : batch=torch.Size([4, 1892, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1892, 3]), initial position=torch.Size([4, 1, 4])
Output batch [307] : batch=torch.Size([4, 1893, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1893, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [308] : batch=torch.Size([4, 519, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 519, 3]), initial position=torch.Size([4, 1, 4])
Output batch [308] : batch=torch.Size([4, 520, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 520, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [309] : batch=torch.Size([4, 896, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 896, 3]), initial position=torch.Size([4, 1, 4])
Output batch [309] : batch=torch.Size([4, 897, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 897, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [310] : batch=torch.Size([4, 1169, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1169, 3]), initial position=torch.Size([4, 1, 4])
Output batch [310] : batch=torch.Size([4, 1170, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1170, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [311] : batch=torch.Size([4, 1005, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1005, 3]), initial position=torch.Size([4, 1, 4])
Output batch [311] : batch=torch.Size([4, 1006, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1006, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [312] : batch=torch.Size([4, 1719, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1719, 3]), initial position=torch.Size([4, 1, 4])
Output batch [312] : batch=torch.Size([4, 1720, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1720, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [313] : batch=torch.Size([4, 1476, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1476, 3]), initial position=torch.Size([4, 1, 4])
Output batch [313] : batch=torch.Size([4, 1477, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1477, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [314] : batch=torch.Size([4, 1429, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1429, 3]), initial position=torch.Size([4, 1, 4])
Output batch [314] : batch=torch.Size([4, 1430, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1430, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [315] : batch=torch.Size([4, 1621, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1621, 3]), initial position=torch.Size([4, 1, 4])
Output batch [315] : batch=torch.Size([4, 1622, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1622, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [316] : batch=torch.Size([4, 1709, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1709, 3]), initial position=torch.Size([4, 1, 4])
Output batch [316] : batch=torch.Size([4, 1710, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1710, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [317] : batch=torch.Size([4, 931, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 931, 3]), initial position=torch.Size([4, 1, 4])
Output batch [317] : batch=torch.Size([4, 932, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 932, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [318] : batch=torch.Size([4, 1296, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1296, 3]), initial position=torch.Size([4, 1, 4])
Output batch [318] : batch=torch.Size([4, 1297, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1297, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [319] : batch=torch.Size([4, 1290, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1290, 3]), initial position=torch.Size([4, 1, 4])
Output batch [319] : batch=torch.Size([4, 1291, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1291, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [320] : batch=torch.Size([4, 988, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 988, 3]), initial position=torch.Size([4, 1, 4])
Output batch [320] : batch=torch.Size([4, 989, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 989, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [321] : batch=torch.Size([4, 1344, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1344, 3]), initial position=torch.Size([4, 1, 4])
Output batch [321] : batch=torch.Size([4, 1345, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1345, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [322] : batch=torch.Size([4, 1340, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1340, 3]), initial position=torch.Size([4, 1, 4])
Output batch [322] : batch=torch.Size([4, 1341, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1341, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [323] : batch=torch.Size([4, 1336, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1336, 3]), initial position=torch.Size([4, 1, 4])
Output batch [323] : batch=torch.Size([4, 1337, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1337, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [324] : batch=torch.Size([4, 1641, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1641, 3]), initial position=torch.Size([4, 1, 4])
Output batch [324] : batch=torch.Size([4, 1642, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1642, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [325] : batch=torch.Size([4, 1557, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1557, 3]), initial position=torch.Size([4, 1, 4])
Output batch [325] : batch=torch.Size([4, 1558, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1558, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [326] : batch=torch.Size([4, 1033, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1033, 3]), initial position=torch.Size([4, 1, 4])
Output batch [326] : batch=torch.Size([4, 1034, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1034, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [327] : batch=torch.Size([4, 1860, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1860, 3]), initial position=torch.Size([4, 1, 4])
Output batch [327] : batch=torch.Size([4, 1861, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1861, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [328] : batch=torch.Size([4, 1619, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1619, 3]), initial position=torch.Size([4, 1, 4])
Output batch [328] : batch=torch.Size([4, 1620, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1620, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [329] : batch=torch.Size([4, 1315, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1315, 3]), initial position=torch.Size([4, 1, 4])
Output batch [329] : batch=torch.Size([4, 1316, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1316, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [330] : batch=torch.Size([4, 1287, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1287, 3]), initial position=torch.Size([4, 1, 4])
Output batch [330] : batch=torch.Size([4, 1288, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1288, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [331] : batch=torch.Size([4, 1577, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1577, 3]), initial position=torch.Size([4, 1, 4])
Output batch [331] : batch=torch.Size([4, 1578, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1578, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [332] : batch=torch.Size([4, 1357, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1357, 3]), initial position=torch.Size([4, 1, 4])
Output batch [332] : batch=torch.Size([4, 1358, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1358, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [333] : batch=torch.Size([4, 1910, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1910, 3]), initial position=torch.Size([4, 1, 4])
Output batch [333] : batch=torch.Size([4, 1911, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1911, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [334] : batch=torch.Size([4, 845, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 845, 3]), initial position=torch.Size([4, 1, 4])
Output batch [334] : batch=torch.Size([4, 846, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 846, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [335] : batch=torch.Size([4, 1164, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1164, 3]), initial position=torch.Size([4, 1, 4])
Output batch [335] : batch=torch.Size([4, 1165, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1165, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [336] : batch=torch.Size([4, 1703, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1703, 3]), initial position=torch.Size([4, 1, 4])
Output batch [336] : batch=torch.Size([4, 1704, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1704, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [337] : batch=torch.Size([4, 1782, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1782, 3]), initial position=torch.Size([4, 1, 4])
Output batch [337] : batch=torch.Size([4, 1783, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1783, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [338] : batch=torch.Size([4, 1138, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1138, 3]), initial position=torch.Size([4, 1, 4])
Output batch [338] : batch=torch.Size([4, 1139, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1139, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [339] : batch=torch.Size([4, 1904, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1904, 3]), initial position=torch.Size([4, 1, 4])
Output batch [339] : batch=torch.Size([4, 1905, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1905, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [340] : batch=torch.Size([4, 2042, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2042, 3]), initial position=torch.Size([4, 1, 4])
Output batch [340] : batch=torch.Size([4, 2043, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2043, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [341] : batch=torch.Size([4, 981, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 981, 3]), initial position=torch.Size([4, 1, 4])
Output batch [341] : batch=torch.Size([4, 982, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 982, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [342] : batch=torch.Size([4, 1269, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1269, 3]), initial position=torch.Size([4, 1, 4])
Output batch [342] : batch=torch.Size([4, 1270, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1270, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [343] : batch=torch.Size([4, 1516, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1516, 3]), initial position=torch.Size([4, 1, 4])
Output batch [343] : batch=torch.Size([4, 1517, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1517, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [344] : batch=torch.Size([4, 1612, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1612, 3]), initial position=torch.Size([4, 1, 4])
Output batch [344] : batch=torch.Size([4, 1613, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1613, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [345] : batch=torch.Size([4, 1953, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1953, 3]), initial position=torch.Size([4, 1, 4])
Output batch [345] : batch=torch.Size([4, 1954, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1954, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [346] : batch=torch.Size([4, 1813, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1813, 3]), initial position=torch.Size([4, 1, 4])
Output batch [346] : batch=torch.Size([4, 1814, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1814, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [347] : batch=torch.Size([4, 1734, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1734, 3]), initial position=torch.Size([4, 1, 4])
Output batch [347] : batch=torch.Size([4, 1735, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1735, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [348] : batch=torch.Size([4, 1547, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1547, 3]), initial position=torch.Size([4, 1, 4])
Output batch [348] : batch=torch.Size([4, 1548, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1548, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [349] : batch=torch.Size([4, 1455, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1455, 3]), initial position=torch.Size([4, 1, 4])
Output batch [349] : batch=torch.Size([4, 1456, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1456, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [350] : batch=torch.Size([4, 1713, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1713, 3]), initial position=torch.Size([4, 1, 4])
Output batch [350] : batch=torch.Size([4, 1714, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1714, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [351] : batch=torch.Size([4, 1058, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1058, 3]), initial position=torch.Size([4, 1, 4])
Output batch [351] : batch=torch.Size([4, 1059, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1059, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [352] : batch=torch.Size([4, 1906, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1906, 3]), initial position=torch.Size([4, 1, 4])
Output batch [352] : batch=torch.Size([4, 1907, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1907, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [353] : batch=torch.Size([4, 1061, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1061, 3]), initial position=torch.Size([4, 1, 4])
Output batch [353] : batch=torch.Size([4, 1062, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1062, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [354] : batch=torch.Size([4, 619, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 619, 3]), initial position=torch.Size([4, 1, 4])
Output batch [354] : batch=torch.Size([4, 620, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 620, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [355] : batch=torch.Size([4, 1226, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1226, 3]), initial position=torch.Size([4, 1, 4])
Output batch [355] : batch=torch.Size([4, 1227, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1227, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [356] : batch=torch.Size([4, 1667, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1667, 3]), initial position=torch.Size([4, 1, 4])
Output batch [356] : batch=torch.Size([4, 1668, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1668, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [357] : batch=torch.Size([4, 1629, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1629, 3]), initial position=torch.Size([4, 1, 4])
Output batch [357] : batch=torch.Size([4, 1630, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1630, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [358] : batch=torch.Size([4, 1126, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1126, 3]), initial position=torch.Size([4, 1, 4])
Output batch [358] : batch=torch.Size([4, 1127, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1127, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [359] : batch=torch.Size([4, 1518, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1518, 3]), initial position=torch.Size([4, 1, 4])
Output batch [359] : batch=torch.Size([4, 1519, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1519, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [360] : batch=torch.Size([4, 1774, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1774, 3]), initial position=torch.Size([4, 1, 4])
Output batch [360] : batch=torch.Size([4, 1775, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1775, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [361] : batch=torch.Size([4, 1378, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1378, 3]), initial position=torch.Size([4, 1, 4])
Output batch [361] : batch=torch.Size([4, 1379, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1379, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [362] : batch=torch.Size([4, 1228, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1228, 3]), initial position=torch.Size([4, 1, 4])
Output batch [362] : batch=torch.Size([4, 1229, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1229, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [363] : batch=torch.Size([4, 1169, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1169, 3]), initial position=torch.Size([4, 1, 4])
Output batch [363] : batch=torch.Size([4, 1170, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1170, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [364] : batch=torch.Size([4, 1095, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1095, 3]), initial position=torch.Size([4, 1, 4])
Output batch [364] : batch=torch.Size([4, 1096, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1096, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [365] : batch=torch.Size([4, 906, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 906, 3]), initial position=torch.Size([4, 1, 4])
Output batch [365] : batch=torch.Size([4, 907, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 907, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [366] : batch=torch.Size([4, 1321, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1321, 3]), initial position=torch.Size([4, 1, 4])
Output batch [366] : batch=torch.Size([4, 1322, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1322, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [367] : batch=torch.Size([4, 1175, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1175, 3]), initial position=torch.Size([4, 1, 4])
Output batch [367] : batch=torch.Size([4, 1176, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1176, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [368] : batch=torch.Size([4, 608, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 608, 3]), initial position=torch.Size([4, 1, 4])
Output batch [368] : batch=torch.Size([4, 609, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 609, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [369] : batch=torch.Size([4, 1629, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1629, 3]), initial position=torch.Size([4, 1, 4])
Output batch [369] : batch=torch.Size([4, 1630, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1630, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [370] : batch=torch.Size([4, 1601, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1601, 3]), initial position=torch.Size([4, 1, 4])
Output batch [370] : batch=torch.Size([4, 1602, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1602, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [371] : batch=torch.Size([4, 1013, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1013, 3]), initial position=torch.Size([4, 1, 4])
Output batch [371] : batch=torch.Size([4, 1014, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1014, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [372] : batch=torch.Size([4, 1499, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1499, 3]), initial position=torch.Size([4, 1, 4])
Output batch [372] : batch=torch.Size([4, 1500, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1500, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [373] : batch=torch.Size([4, 731, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 731, 3]), initial position=torch.Size([4, 1, 4])
Output batch [373] : batch=torch.Size([4, 732, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 732, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [374] : batch=torch.Size([4, 1251, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1251, 3]), initial position=torch.Size([4, 1, 4])
Output batch [374] : batch=torch.Size([4, 1252, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1252, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [375] : batch=torch.Size([4, 1344, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1344, 3]), initial position=torch.Size([4, 1, 4])
Output batch [375] : batch=torch.Size([4, 1345, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1345, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [376] : batch=torch.Size([4, 1107, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1107, 3]), initial position=torch.Size([4, 1, 4])
Output batch [376] : batch=torch.Size([4, 1108, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1108, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [377] : batch=torch.Size([4, 1164, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1164, 3]), initial position=torch.Size([4, 1, 4])
Output batch [377] : batch=torch.Size([4, 1165, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1165, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [378] : batch=torch.Size([4, 1376, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1376, 3]), initial position=torch.Size([4, 1, 4])
Output batch [378] : batch=torch.Size([4, 1377, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1377, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [379] : batch=torch.Size([4, 495, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 495, 3]), initial position=torch.Size([4, 1, 4])
Output batch [379] : batch=torch.Size([4, 496, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 496, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [380] : batch=torch.Size([4, 1313, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1313, 3]), initial position=torch.Size([4, 1, 4])
Output batch [380] : batch=torch.Size([4, 1314, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1314, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [381] : batch=torch.Size([4, 844, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 844, 3]), initial position=torch.Size([4, 1, 4])
Output batch [381] : batch=torch.Size([4, 845, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 845, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [382] : batch=torch.Size([4, 1324, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1324, 3]), initial position=torch.Size([4, 1, 4])
Output batch [382] : batch=torch.Size([4, 1325, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1325, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [383] : batch=torch.Size([4, 1718, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1718, 3]), initial position=torch.Size([4, 1, 4])
Output batch [383] : batch=torch.Size([4, 1719, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1719, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [384] : batch=torch.Size([4, 1446, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1446, 3]), initial position=torch.Size([4, 1, 4])
Output batch [384] : batch=torch.Size([4, 1447, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1447, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [385] : batch=torch.Size([4, 921, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 921, 3]), initial position=torch.Size([4, 1, 4])
Output batch [385] : batch=torch.Size([4, 922, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 922, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [386] : batch=torch.Size([4, 1474, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1474, 3]), initial position=torch.Size([4, 1, 4])
Output batch [386] : batch=torch.Size([4, 1475, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1475, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [387] : batch=torch.Size([4, 1817, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1817, 3]), initial position=torch.Size([4, 1, 4])
Output batch [387] : batch=torch.Size([4, 1818, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1818, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [388] : batch=torch.Size([4, 1469, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1469, 3]), initial position=torch.Size([4, 1, 4])
Output batch [388] : batch=torch.Size([4, 1470, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1470, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [389] : batch=torch.Size([4, 1985, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1985, 3]), initial position=torch.Size([4, 1, 4])
Output batch [389] : batch=torch.Size([4, 1986, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1986, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [390] : batch=torch.Size([4, 835, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 835, 3]), initial position=torch.Size([4, 1, 4])
Output batch [390] : batch=torch.Size([4, 836, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 836, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [391] : batch=torch.Size([4, 368, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 368, 3]), initial position=torch.Size([4, 1, 4])
Output batch [391] : batch=torch.Size([4, 369, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 369, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [392] : batch=torch.Size([4, 1656, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1656, 3]), initial position=torch.Size([4, 1, 4])
Output batch [392] : batch=torch.Size([4, 1657, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1657, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [393] : batch=torch.Size([4, 1299, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1299, 3]), initial position=torch.Size([4, 1, 4])
Output batch [393] : batch=torch.Size([4, 1300, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1300, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [394] : batch=torch.Size([4, 1642, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1642, 3]), initial position=torch.Size([4, 1, 4])
Output batch [394] : batch=torch.Size([4, 1643, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1643, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [395] : batch=torch.Size([4, 1791, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1791, 3]), initial position=torch.Size([4, 1, 4])
Output batch [395] : batch=torch.Size([4, 1792, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1792, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [396] : batch=torch.Size([4, 1494, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1494, 3]), initial position=torch.Size([4, 1, 4])
Output batch [396] : batch=torch.Size([4, 1495, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1495, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [397] : batch=torch.Size([4, 1280, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1280, 3]), initial position=torch.Size([4, 1, 4])
Output batch [397] : batch=torch.Size([4, 1281, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1281, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [398] : batch=torch.Size([4, 1639, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1639, 3]), initial position=torch.Size([4, 1, 4])
Output batch [398] : batch=torch.Size([4, 1640, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1640, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [399] : batch=torch.Size([4, 1048, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1048, 3]), initial position=torch.Size([4, 1, 4])
Output batch [399] : batch=torch.Size([4, 1049, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1049, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [400] : batch=torch.Size([4, 1995, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1995, 3]), initial position=torch.Size([4, 1, 4])
Output batch [400] : batch=torch.Size([4, 1996, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1996, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [401] : batch=torch.Size([4, 1057, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1057, 3]), initial position=torch.Size([4, 1, 4])
Output batch [401] : batch=torch.Size([4, 1058, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1058, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [402] : batch=torch.Size([4, 1431, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1431, 3]), initial position=torch.Size([4, 1, 4])
Output batch [402] : batch=torch.Size([4, 1432, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1432, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [403] : batch=torch.Size([4, 1529, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1529, 3]), initial position=torch.Size([4, 1, 4])
Output batch [403] : batch=torch.Size([4, 1530, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1530, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [404] : batch=torch.Size([4, 1169, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1169, 3]), initial position=torch.Size([4, 1, 4])
Output batch [404] : batch=torch.Size([4, 1170, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1170, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [405] : batch=torch.Size([4, 1429, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1429, 3]), initial position=torch.Size([4, 1, 4])
Output batch [405] : batch=torch.Size([4, 1430, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1430, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [406] : batch=torch.Size([4, 1027, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1027, 3]), initial position=torch.Size([4, 1, 4])
Output batch [406] : batch=torch.Size([4, 1028, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1028, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [407] : batch=torch.Size([4, 686, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 686, 3]), initial position=torch.Size([4, 1, 4])
Output batch [407] : batch=torch.Size([4, 687, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 687, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [408] : batch=torch.Size([4, 1525, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1525, 3]), initial position=torch.Size([4, 1, 4])
Output batch [408] : batch=torch.Size([4, 1526, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1526, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [409] : batch=torch.Size([4, 1614, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1614, 3]), initial position=torch.Size([4, 1, 4])
Output batch [409] : batch=torch.Size([4, 1615, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1615, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [410] : batch=torch.Size([4, 1289, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1289, 3]), initial position=torch.Size([4, 1, 4])
Output batch [410] : batch=torch.Size([4, 1290, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1290, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [411] : batch=torch.Size([4, 1800, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1800, 3]), initial position=torch.Size([4, 1, 4])
Output batch [411] : batch=torch.Size([4, 1801, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1801, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [412] : batch=torch.Size([4, 1389, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1389, 3]), initial position=torch.Size([4, 1, 4])
Output batch [412] : batch=torch.Size([4, 1390, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1390, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [413] : batch=torch.Size([4, 1220, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1220, 3]), initial position=torch.Size([4, 1, 4])
Output batch [413] : batch=torch.Size([4, 1221, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1221, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [414] : batch=torch.Size([4, 1216, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1216, 3]), initial position=torch.Size([4, 1, 4])
Output batch [414] : batch=torch.Size([4, 1217, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1217, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [415] : batch=torch.Size([4, 1363, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1363, 3]), initial position=torch.Size([4, 1, 4])
Output batch [415] : batch=torch.Size([4, 1364, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1364, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [416] : batch=torch.Size([4, 1234, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1234, 3]), initial position=torch.Size([4, 1, 4])
Output batch [416] : batch=torch.Size([4, 1235, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1235, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [417] : batch=torch.Size([4, 1291, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1291, 3]), initial position=torch.Size([4, 1, 4])
Output batch [417] : batch=torch.Size([4, 1292, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1292, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [418] : batch=torch.Size([4, 1225, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1225, 3]), initial position=torch.Size([4, 1, 4])
Output batch [418] : batch=torch.Size([4, 1226, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1226, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [419] : batch=torch.Size([4, 880, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 880, 3]), initial position=torch.Size([4, 1, 4])
Output batch [419] : batch=torch.Size([4, 881, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 881, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [420] : batch=torch.Size([4, 1217, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1217, 3]), initial position=torch.Size([4, 1, 4])
Output batch [420] : batch=torch.Size([4, 1218, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1218, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [421] : batch=torch.Size([4, 1600, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1600, 3]), initial position=torch.Size([4, 1, 4])
Output batch [421] : batch=torch.Size([4, 1601, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1601, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [422] : batch=torch.Size([4, 1206, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1206, 3]), initial position=torch.Size([4, 1, 4])
Output batch [422] : batch=torch.Size([4, 1207, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1207, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [423] : batch=torch.Size([4, 1481, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1481, 3]), initial position=torch.Size([4, 1, 4])
Output batch [423] : batch=torch.Size([4, 1482, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1482, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [424] : batch=torch.Size([4, 1325, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1325, 3]), initial position=torch.Size([4, 1, 4])
Output batch [424] : batch=torch.Size([4, 1326, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1326, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [425] : batch=torch.Size([4, 1243, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1243, 3]), initial position=torch.Size([4, 1, 4])
Output batch [425] : batch=torch.Size([4, 1244, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1244, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [426] : batch=torch.Size([4, 1514, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1514, 3]), initial position=torch.Size([4, 1, 4])
Output batch [426] : batch=torch.Size([4, 1515, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1515, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [427] : batch=torch.Size([4, 1512, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1512, 3]), initial position=torch.Size([4, 1, 4])
Output batch [427] : batch=torch.Size([4, 1513, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1513, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [428] : batch=torch.Size([4, 1836, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1836, 3]), initial position=torch.Size([4, 1, 4])
Output batch [428] : batch=torch.Size([4, 1837, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1837, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [429] : batch=torch.Size([4, 1145, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1145, 3]), initial position=torch.Size([4, 1, 4])
Output batch [429] : batch=torch.Size([4, 1146, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1146, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [430] : batch=torch.Size([4, 1339, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1339, 3]), initial position=torch.Size([4, 1, 4])
Output batch [430] : batch=torch.Size([4, 1340, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1340, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [431] : batch=torch.Size([4, 1632, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1632, 3]), initial position=torch.Size([4, 1, 4])
Output batch [431] : batch=torch.Size([4, 1633, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1633, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [432] : batch=torch.Size([4, 1557, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1557, 3]), initial position=torch.Size([4, 1, 4])
Output batch [432] : batch=torch.Size([4, 1558, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1558, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [433] : batch=torch.Size([4, 1555, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1555, 3]), initial position=torch.Size([4, 1, 4])
Output batch [433] : batch=torch.Size([4, 1556, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1556, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [434] : batch=torch.Size([4, 637, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 637, 3]), initial position=torch.Size([4, 1, 4])
Output batch [434] : batch=torch.Size([4, 638, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 638, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [435] : batch=torch.Size([4, 1205, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1205, 3]), initial position=torch.Size([4, 1, 4])
Output batch [435] : batch=torch.Size([4, 1206, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1206, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [436] : batch=torch.Size([4, 1775, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1775, 3]), initial position=torch.Size([4, 1, 4])
Output batch [436] : batch=torch.Size([4, 1776, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1776, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [437] : batch=torch.Size([4, 1577, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1577, 3]), initial position=torch.Size([4, 1, 4])
Output batch [437] : batch=torch.Size([4, 1578, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1578, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [438] : batch=torch.Size([4, 1170, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1170, 3]), initial position=torch.Size([4, 1, 4])
Output batch [438] : batch=torch.Size([4, 1171, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1171, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [439] : batch=torch.Size([4, 908, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 908, 3]), initial position=torch.Size([4, 1, 4])
Output batch [439] : batch=torch.Size([4, 909, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 909, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [440] : batch=torch.Size([4, 1705, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1705, 3]), initial position=torch.Size([4, 1, 4])
Output batch [440] : batch=torch.Size([4, 1706, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1706, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [441] : batch=torch.Size([4, 1540, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1540, 3]), initial position=torch.Size([4, 1, 4])
Output batch [441] : batch=torch.Size([4, 1541, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1541, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [442] : batch=torch.Size([4, 844, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 844, 3]), initial position=torch.Size([4, 1, 4])
Output batch [442] : batch=torch.Size([4, 845, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 845, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [443] : batch=torch.Size([4, 1699, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1699, 3]), initial position=torch.Size([4, 1, 4])
Output batch [443] : batch=torch.Size([4, 1700, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1700, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [444] : batch=torch.Size([4, 1257, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1257, 3]), initial position=torch.Size([4, 1, 4])
Output batch [444] : batch=torch.Size([4, 1258, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1258, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [445] : batch=torch.Size([4, 1480, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1480, 3]), initial position=torch.Size([4, 1, 4])
Output batch [445] : batch=torch.Size([4, 1481, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1481, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [446] : batch=torch.Size([4, 1010, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1010, 3]), initial position=torch.Size([4, 1, 4])
Output batch [446] : batch=torch.Size([4, 1011, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1011, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [447] : batch=torch.Size([4, 1070, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1070, 3]), initial position=torch.Size([4, 1, 4])
Output batch [447] : batch=torch.Size([4, 1071, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1071, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [448] : batch=torch.Size([4, 1708, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1708, 3]), initial position=torch.Size([4, 1, 4])
Output batch [448] : batch=torch.Size([4, 1709, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1709, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [449] : batch=torch.Size([4, 1047, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1047, 3]), initial position=torch.Size([4, 1, 4])
Output batch [449] : batch=torch.Size([4, 1048, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1048, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [450] : batch=torch.Size([4, 898, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 898, 3]), initial position=torch.Size([4, 1, 4])
Output batch [450] : batch=torch.Size([4, 899, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 899, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [451] : batch=torch.Size([4, 1214, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1214, 3]), initial position=torch.Size([4, 1, 4])
Output batch [451] : batch=torch.Size([4, 1215, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1215, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [452] : batch=torch.Size([4, 1526, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1526, 3]), initial position=torch.Size([4, 1, 4])
Output batch [452] : batch=torch.Size([4, 1527, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1527, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [453] : batch=torch.Size([4, 1626, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1626, 3]), initial position=torch.Size([4, 1, 4])
Output batch [453] : batch=torch.Size([4, 1627, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1627, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [454] : batch=torch.Size([4, 1397, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1397, 3]), initial position=torch.Size([4, 1, 4])
Output batch [454] : batch=torch.Size([4, 1398, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1398, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [455] : batch=torch.Size([4, 1561, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1561, 3]), initial position=torch.Size([4, 1, 4])
Output batch [455] : batch=torch.Size([4, 1562, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1562, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [456] : batch=torch.Size([4, 423, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 423, 3]), initial position=torch.Size([4, 1, 4])
Output batch [456] : batch=torch.Size([4, 424, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 424, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [457] : batch=torch.Size([4, 1299, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1299, 3]), initial position=torch.Size([4, 1, 4])
Output batch [457] : batch=torch.Size([4, 1300, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1300, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [458] : batch=torch.Size([4, 748, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 748, 3]), initial position=torch.Size([4, 1, 4])
Output batch [458] : batch=torch.Size([4, 749, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 749, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [459] : batch=torch.Size([4, 370, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 370, 3]), initial position=torch.Size([4, 1, 4])
Output batch [459] : batch=torch.Size([4, 371, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 371, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [460] : batch=torch.Size([4, 1573, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1573, 3]), initial position=torch.Size([4, 1, 4])
Output batch [460] : batch=torch.Size([4, 1574, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1574, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [461] : batch=torch.Size([4, 1379, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1379, 3]), initial position=torch.Size([4, 1, 4])
Output batch [461] : batch=torch.Size([4, 1380, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1380, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [462] : batch=torch.Size([4, 1439, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1439, 3]), initial position=torch.Size([4, 1, 4])
Output batch [462] : batch=torch.Size([4, 1440, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1440, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [463] : batch=torch.Size([4, 1691, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1691, 3]), initial position=torch.Size([4, 1, 4])
Output batch [463] : batch=torch.Size([4, 1692, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1692, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [464] : batch=torch.Size([4, 1034, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1034, 3]), initial position=torch.Size([4, 1, 4])
Output batch [464] : batch=torch.Size([4, 1035, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1035, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [465] : batch=torch.Size([4, 1218, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1218, 3]), initial position=torch.Size([4, 1, 4])
Output batch [465] : batch=torch.Size([4, 1219, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1219, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [466] : batch=torch.Size([4, 1225, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1225, 3]), initial position=torch.Size([4, 1, 4])
Output batch [466] : batch=torch.Size([4, 1226, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1226, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [467] : batch=torch.Size([4, 1855, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1855, 3]), initial position=torch.Size([4, 1, 4])
Output batch [467] : batch=torch.Size([4, 1856, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1856, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [468] : batch=torch.Size([4, 1337, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1337, 3]), initial position=torch.Size([4, 1, 4])
Output batch [468] : batch=torch.Size([4, 1338, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1338, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [469] : batch=torch.Size([4, 951, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 951, 3]), initial position=torch.Size([4, 1, 4])
Output batch [469] : batch=torch.Size([4, 952, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 952, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [470] : batch=torch.Size([4, 1698, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1698, 3]), initial position=torch.Size([4, 1, 4])
Output batch [470] : batch=torch.Size([4, 1699, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1699, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [471] : batch=torch.Size([4, 1443, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1443, 3]), initial position=torch.Size([4, 1, 4])
Output batch [471] : batch=torch.Size([4, 1444, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1444, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [472] : batch=torch.Size([4, 2024, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 2024, 3]), initial position=torch.Size([4, 1, 4])
Output batch [472] : batch=torch.Size([4, 2025, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 2025, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [473] : batch=torch.Size([4, 1213, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1213, 3]), initial position=torch.Size([4, 1, 4])
Output batch [473] : batch=torch.Size([4, 1214, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1214, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [474] : batch=torch.Size([4, 1482, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1482, 3]), initial position=torch.Size([4, 1, 4])
Output batch [474] : batch=torch.Size([4, 1483, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1483, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [475] : batch=torch.Size([4, 1396, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1396, 3]), initial position=torch.Size([4, 1, 4])
Output batch [475] : batch=torch.Size([4, 1397, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1397, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [476] : batch=torch.Size([4, 1118, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1118, 3]), initial position=torch.Size([4, 1, 4])
Output batch [476] : batch=torch.Size([4, 1119, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1119, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [477] : batch=torch.Size([4, 1040, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1040, 3]), initial position=torch.Size([4, 1, 4])
Output batch [477] : batch=torch.Size([4, 1041, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1041, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [478] : batch=torch.Size([4, 1355, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1355, 3]), initial position=torch.Size([4, 1, 4])
Output batch [478] : batch=torch.Size([4, 1356, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1356, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [479] : batch=torch.Size([4, 1047, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1047, 3]), initial position=torch.Size([4, 1, 4])
Output batch [479] : batch=torch.Size([4, 1048, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1048, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [480] : batch=torch.Size([4, 1322, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1322, 3]), initial position=torch.Size([4, 1, 4])
Output batch [480] : batch=torch.Size([4, 1323, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1323, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [481] : batch=torch.Size([4, 1294, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1294, 3]), initial position=torch.Size([4, 1, 4])
Output batch [481] : batch=torch.Size([4, 1295, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1295, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [482] : batch=torch.Size([4, 1666, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1666, 3]), initial position=torch.Size([4, 1, 4])
Output batch [482] : batch=torch.Size([4, 1667, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1667, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [483] : batch=torch.Size([4, 666, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 666, 3]), initial position=torch.Size([4, 1, 4])
Output batch [483] : batch=torch.Size([4, 667, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 667, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [484] : batch=torch.Size([4, 337, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 337, 3]), initial position=torch.Size([4, 1, 4])
Output batch [484] : batch=torch.Size([4, 338, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 338, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [485] : batch=torch.Size([4, 1180, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1180, 3]), initial position=torch.Size([4, 1, 4])
Output batch [485] : batch=torch.Size([4, 1181, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1181, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [486] : batch=torch.Size([4, 1704, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1704, 3]), initial position=torch.Size([4, 1, 4])
Output batch [486] : batch=torch.Size([4, 1705, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1705, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [487] : batch=torch.Size([4, 1537, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1537, 3]), initial position=torch.Size([4, 1, 4])
Output batch [487] : batch=torch.Size([4, 1538, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1538, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [488] : batch=torch.Size([4, 1775, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1775, 3]), initial position=torch.Size([4, 1, 4])
Output batch [488] : batch=torch.Size([4, 1776, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1776, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [489] : batch=torch.Size([4, 1345, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1345, 3]), initial position=torch.Size([4, 1, 4])
Output batch [489] : batch=torch.Size([4, 1346, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1346, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [490] : batch=torch.Size([4, 1651, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1651, 3]), initial position=torch.Size([4, 1, 4])
Output batch [490] : batch=torch.Size([4, 1652, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1652, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [491] : batch=torch.Size([4, 1207, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1207, 3]), initial position=torch.Size([4, 1, 4])
Output batch [491] : batch=torch.Size([4, 1208, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1208, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [492] : batch=torch.Size([4, 1386, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1386, 3]), initial position=torch.Size([4, 1, 4])
Output batch [492] : batch=torch.Size([4, 1387, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1387, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [493] : batch=torch.Size([4, 1390, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1390, 3]), initial position=torch.Size([4, 1, 4])
Output batch [493] : batch=torch.Size([4, 1391, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1391, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [494] : batch=torch.Size([4, 1142, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1142, 3]), initial position=torch.Size([4, 1, 4])
Output batch [494] : batch=torch.Size([4, 1143, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1143, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [495] : batch=torch.Size([4, 1692, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1692, 3]), initial position=torch.Size([4, 1, 4])
Output batch [495] : batch=torch.Size([4, 1693, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1693, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [496] : batch=torch.Size([4, 1209, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1209, 3]), initial position=torch.Size([4, 1, 4])
Output batch [496] : batch=torch.Size([4, 1210, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1210, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [497] : batch=torch.Size([4, 1224, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1224, 3]), initial position=torch.Size([4, 1, 4])
Output batch [497] : batch=torch.Size([4, 1225, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1225, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [498] : batch=torch.Size([4, 856, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 856, 3]), initial position=torch.Size([4, 1, 4])
Output batch [498] : batch=torch.Size([4, 857, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 857, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [499] : batch=torch.Size([4, 1266, 3]), lengths=torch.Size([4]), mask=torch.Size([4, 1266, 3]), initial position=torch.Size([4, 1, 4])
Output batch [499] : batch=torch.Size([4, 1267, 2]), lengths=torch.Size([4]), mask=torch.Size([4, 1267, 4]), initial position=torch.Size([4, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(3, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.001
===> [Minibatch 1/500].........torch.Size([4, 1583, 1]) torch.Size([4, 1583, 2]) torch.Size([4, 1, 4]) torch.Size([4, 1583, 1])
torch.Size([1583, 1])
tensor(1324, device='cuda:0')
tensor(1324, device='cuda:0')
1583
Traceback (most recent call last):
  File "train_ball_trajectory_depth_jointly_decumulate.py", line 697, in <module>
    optimizer=optimizer, epoch=epoch, n_epochs=n_epochs, vis_signal=vis_signal, width=width, height=height)
  File "train_ball_trajectory_depth_jointly_decumulate.py", line 388, in train
    output_train_depth, input_trajectory_train_uv = cumsum_decumulate_trajectory(depth=output_train_depth, uv=input_trajectory_train_gt[..., :-1], trajectory_startpos=input_trajectory_train_startpos, lengths=input_trajectory_train_lengths, eot=input_trajectory_train_gt[..., -1].unsqueeze(dim=-1), projection_matrix=projection_matrix, camera_to_world_matrix=camera_to_world_matrix, width=width, height=height)
  File "train_ball_trajectory_depth_jointly_decumulate.py", line 350, in cumsum_decumulate_trajectory
    depth_cumsum = [split_cumsum(reset_idx=reset_idx[i][0], length=lengths[i], reset_depth=reset_depth[i], depth=depth[i]) for i in range(trajectory_startpos.shape[0])]
  File "train_ball_trajectory_depth_jointly_decumulate.py", line 350, in <listcomp>
    depth_cumsum = [split_cumsum(reset_idx=reset_idx[i][0], length=lengths[i], reset_depth=reset_depth[i], depth=depth[i]) for i in range(trajectory_startpos.shape[0])]
  File "train_ball_trajectory_depth_jointly_decumulate.py", line 314, in split_cumsum
    reset_idx = pt.cat((reset_idx.view(-1, 1), pt.tensor(depth.shape[0])))
RuntimeError: zero-dimensional tensor (at position 1) cannot be concatenated
