[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/No_noise/train_set
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                                         | 2/3 [00:00<00:00, 13.52it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.38it/s]
===============================Dataset shape===============================
Mixed : (7434,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 18.84it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 18.80it/s]
===============================Dataset shape===============================
Mixed : (2000,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 925, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 3]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 925, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 881, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 3]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 928, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 3]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 939, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 3]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 907, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 907, 3]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 907, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 908, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 3]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 901, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 793, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 793, 3]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 793, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 967, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 3]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 967, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 968, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 3]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 837, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 800, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 800, 3]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 800, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 801, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 848, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 848, 3]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 848, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 723, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 723, 3]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 723, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 724, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 896, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 3]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 896, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 882, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 3]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 878, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 878, 3]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 878, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 896, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 3]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 896, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 3]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 859, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 953, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 3]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 953, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 809, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 3]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 831, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 3]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 831, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 892, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 3]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 874, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 3]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 891, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 3]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 919, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 3]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 919, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 3]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 3]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 912, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 918, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 3]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 942, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 942, 3]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 942, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 937, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 937, 3]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 937, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 938, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 914, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 914, 3]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 914, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 876, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 3]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 932, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 3]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 863, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 3]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 829, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 3]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 3]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 869, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 3]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 869, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 916, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 3]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 916, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 833, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 3]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [44] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 3]), initial position=torch.Size([128, 1, 4])
Output batch [44] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [45] : batch=torch.Size([128, 857, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 3]), initial position=torch.Size([128, 1, 4])
Output batch [45] : batch=torch.Size([128, 857, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [46] : batch=torch.Size([128, 854, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 3]), initial position=torch.Size([128, 1, 4])
Output batch [46] : batch=torch.Size([128, 854, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [47] : batch=torch.Size([128, 847, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 3]), initial position=torch.Size([128, 1, 4])
Output batch [47] : batch=torch.Size([128, 847, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 848, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [48] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 3]), initial position=torch.Size([128, 1, 4])
Output batch [48] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [49] : batch=torch.Size([128, 817, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 3]), initial position=torch.Size([128, 1, 4])
Output batch [49] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [50] : batch=torch.Size([128, 841, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 3]), initial position=torch.Size([128, 1, 4])
Output batch [50] : batch=torch.Size([128, 841, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [51] : batch=torch.Size([128, 905, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 3]), initial position=torch.Size([128, 1, 4])
Output batch [51] : batch=torch.Size([128, 905, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 906, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [52] : batch=torch.Size([128, 920, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 3]), initial position=torch.Size([128, 1, 4])
Output batch [52] : batch=torch.Size([128, 920, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 921, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [53] : batch=torch.Size([128, 811, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 811, 3]), initial position=torch.Size([128, 1, 4])
Output batch [53] : batch=torch.Size([128, 811, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [54] : batch=torch.Size([128, 883, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 3]), initial position=torch.Size([128, 1, 4])
Output batch [54] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [55] : batch=torch.Size([128, 835, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 3]), initial position=torch.Size([128, 1, 4])
Output batch [55] : batch=torch.Size([128, 835, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [56] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 3]), initial position=torch.Size([128, 1, 4])
Output batch [56] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [57] : batch=torch.Size([128, 879, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 879, 3]), initial position=torch.Size([128, 1, 4])
Output batch [57] : batch=torch.Size([128, 879, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 880, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(3, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/58].........torch.Size([637])
torch.Size([649])
torch.Size([477])
torch.Size([768])
torch.Size([777])
torch.Size([432])
torch.Size([451])
torch.Size([641])
torch.Size([517])
torch.Size([494])
torch.Size([434])
torch.Size([440])
torch.Size([274])
torch.Size([362])
torch.Size([353])
torch.Size([422])
torch.Size([565])
torch.Size([324])
torch.Size([285])
torch.Size([332])
torch.Size([449])
torch.Size([412])
torch.Size([299])
torch.Size([615])
torch.Size([492])
torch.Size([407])
torch.Size([450])
torch.Size([439])
torch.Size([281])
torch.Size([274])
torch.Size([476])
torch.Size([516])
torch.Size([492])
torch.Size([500])
torch.Size([546])
torch.Size([268])
torch.Size([392])
torch.Size([422])
torch.Size([321])
torch.Size([302])
torch.Size([302])
torch.Size([550])
torch.Size([282])
torch.Size([366])
torch.Size([470])
torch.Size([349])
torch.Size([478])
torch.Size([539])
torch.Size([408])
torch.Size([413])
torch.Size([335])
torch.Size([354])
torch.Size([315])
torch.Size([481])
torch.Size([330])
torch.Size([334])
torch.Size([577])
torch.Size([468])
torch.Size([319])
torch.Size([802])
torch.Size([493])
torch.Size([442])
torch.Size([284])
torch.Size([590])
torch.Size([533])
torch.Size([289])
torch.Size([281])
torch.Size([552])
torch.Size([276])
torch.Size([520])
torch.Size([345])
torch.Size([316])
torch.Size([739])
torch.Size([534])
torch.Size([431])
torch.Size([784])
torch.Size([381])
torch.Size([457])
torch.Size([498])
torch.Size([604])
torch.Size([457])
torch.Size([434])
torch.Size([370])
torch.Size([566])
torch.Size([461])
torch.Size([319])
torch.Size([408])
torch.Size([373])
torch.Size([571])
torch.Size([275])
torch.Size([294])
torch.Size([567])
torch.Size([821])
torch.Size([310])
torch.Size([303])
torch.Size([525])
torch.Size([334])
torch.Size([442])
torch.Size([649])
torch.Size([450])
torch.Size([319])
torch.Size([542])
torch.Size([528])
torch.Size([276])
torch.Size([719])
torch.Size([468])
torch.Size([295])
torch.Size([325])
torch.Size([618])
torch.Size([647])
torch.Size([820])
torch.Size([335])
torch.Size([354])
torch.Size([569])
torch.Size([325])
torch.Size([405])
torch.Size([474])
torch.Size([401])
torch.Size([475])
torch.Size([297])
torch.Size([492])
torch.Size([597])
torch.Size([277])
torch.Size([474])
torch.Size([484])
torch.Size([597])
torch.Size([426])
torch.Size([336])
train_ball_trajectory_depth_jointly_decumulate.py:261: RuntimeWarning:

invalid value encountered in long_scalars

torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 20259.621, Val Loss : 657322.438
======> Trajectory Loss : 940.639, Gravity Loss : 362137.469, EndOfTrajectory Loss : 1.378, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.107
Opening in existing browser session.
[0915/184438.890164:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[0915/184439.468231:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
===> [Minibatch 2/58].........torch.Size([576])
torch.Size([733])
torch.Size([485])
torch.Size([333])
torch.Size([311])
torch.Size([321])
torch.Size([444])
torch.Size([397])
torch.Size([393])
torch.Size([315])
torch.Size([349])
torch.Size([530])
torch.Size([567])
torch.Size([479])
torch.Size([514])
torch.Size([293])
torch.Size([319])
torch.Size([407])
torch.Size([632])
torch.Size([559])
torch.Size([386])
torch.Size([635])
torch.Size([420])
torch.Size([289])
torch.Size([321])
torch.Size([507])
torch.Size([441])
torch.Size([422])
torch.Size([343])
torch.Size([513])
torch.Size([427])
torch.Size([733])
torch.Size([632])
torch.Size([276])
torch.Size([517])
torch.Size([408])
torch.Size([465])
torch.Size([567])
torch.Size([363])
torch.Size([352])
torch.Size([347])
torch.Size([421])
torch.Size([302])
torch.Size([317])
torch.Size([655])
torch.Size([343])
torch.Size([755])
torch.Size([722])
torch.Size([642])
torch.Size([531])
torch.Size([388])
torch.Size([609])
torch.Size([289])
torch.Size([467])
torch.Size([619])
torch.Size([337])
torch.Size([480])
torch.Size([552])
torch.Size([317])
torch.Size([576])
torch.Size([450])
torch.Size([302])
torch.Size([324])
torch.Size([532])
torch.Size([782])
torch.Size([260])
torch.Size([308])
torch.Size([460])
torch.Size([588])
torch.Size([542])
torch.Size([457])
torch.Size([919])
torch.Size([265])
torch.Size([432])
torch.Size([309])
torch.Size([370])
torch.Size([567])
torch.Size([412])
torch.Size([449])
torch.Size([495])
torch.Size([306])
torch.Size([283])
torch.Size([486])
torch.Size([619])
torch.Size([326])
torch.Size([908])
torch.Size([308])
torch.Size([280])
torch.Size([291])
torch.Size([310])
torch.Size([435])
torch.Size([499])
torch.Size([299])
torch.Size([549])
torch.Size([321])
torch.Size([304])
torch.Size([325])
torch.Size([722])
torch.Size([260])
torch.Size([397])
torch.Size([337])
torch.Size([519])
torch.Size([337])
torch.Size([639])
torch.Size([470])
torch.Size([498])
torch.Size([576])
torch.Size([417])
torch.Size([883])
torch.Size([483])
torch.Size([509])
torch.Size([318])
torch.Size([272])
torch.Size([577])
torch.Size([333])
torch.Size([574])
torch.Size([465])
torch.Size([655])
torch.Size([258])
torch.Size([491])
torch.Size([379])
torch.Size([429])
torch.Size([582])
torch.Size([548])
torch.Size([449])
torch.Size([291])
torch.Size([253])
torch.Size([273])
train_ball_trajectory_depth_jointly_decumulate.py:261: RuntimeWarning:

invalid value encountered in long_scalars

torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 14297.507, Val Loss : 379273.281
======> Trajectory Loss : 690.824, Gravity Loss : 228504.953, EndOfTrajectory Loss : 1.372, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.073
===> [Minibatch 3/58].........torch.Size([789])
torch.Size([479])
torch.Size([665])
torch.Size([432])
torch.Size([367])
torch.Size([300])
torch.Size([421])
torch.Size([325])
torch.Size([466])
torch.Size([394])
torch.Size([598])
torch.Size([311])
torch.Size([469])
torch.Size([452])
torch.Size([692])
torch.Size([301])
torch.Size([273])
torch.Size([407])
torch.Size([292])
torch.Size([435])
torch.Size([575])
torch.Size([722])
torch.Size([545])
torch.Size([458])
torch.Size([654])
torch.Size([482])
torch.Size([299])
torch.Size([497])
torch.Size([445])
torch.Size([671])
torch.Size([602])
torch.Size([320])
torch.Size([272])
torch.Size([283])
torch.Size([588])
torch.Size([275])
torch.Size([380])
torch.Size([409])
torch.Size([298])
torch.Size([475])
torch.Size([329])
torch.Size([548])
torch.Size([637])
torch.Size([609])
torch.Size([318])
torch.Size([636])
torch.Size([414])
torch.Size([418])
torch.Size([328])
torch.Size([511])
torch.Size([415])
torch.Size([608])
torch.Size([297])
torch.Size([593])
torch.Size([926])
torch.Size([661])
torch.Size([447])
torch.Size([306])
torch.Size([327])
torch.Size([420])
torch.Size([310])
torch.Size([527])
torch.Size([429])
torch.Size([517])
torch.Size([485])
torch.Size([404])
torch.Size([273])
torch.Size([459])
torch.Size([492])
torch.Size([320])
torch.Size([318])
torch.Size([277])
torch.Size([586])
torch.Size([506])
torch.Size([557])
torch.Size([582])
torch.Size([683])
torch.Size([612])
torch.Size([397])
torch.Size([318])
torch.Size([378])
torch.Size([692])
torch.Size([650])
torch.Size([430])
torch.Size([293])
torch.Size([387])
torch.Size([335])
torch.Size([492])
torch.Size([385])
torch.Size([355])
torch.Size([657])
torch.Size([369])
torch.Size([314])
torch.Size([514])
torch.Size([461])
torch.Size([381])
torch.Size([506])
torch.Size([726])
torch.Size([455])
torch.Size([540])
torch.Size([513])
torch.Size([324])
torch.Size([293])
torch.Size([363])
torch.Size([544])
torch.Size([554])
torch.Size([429])
torch.Size([631])
torch.Size([470])
torch.Size([339])
torch.Size([737])
torch.Size([533])
torch.Size([683])
torch.Size([354])
torch.Size([283])
torch.Size([278])
torch.Size([384])
torch.Size([389])
torch.Size([302])
torch.Size([271])
torch.Size([320])
torch.Size([510])
torch.Size([476])
torch.Size([371])
torch.Size([641])
torch.Size([274])
torch.Size([608])
torch.Size([502])
torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 8441.062, Val Loss : 76088.977
======> Trajectory Loss : 394.010, Gravity Loss : 151060.609, EndOfTrajectory Loss : 1.375, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.044
===> [Minibatch 4/58].........torch.Size([300])
torch.Size([458])
torch.Size([520])
torch.Size([394])
torch.Size([428])
torch.Size([550])
torch.Size([475])
torch.Size([320])
torch.Size([331])
torch.Size([265])
torch.Size([528])
torch.Size([441])
torch.Size([302])
torch.Size([593])
torch.Size([517])
torch.Size([657])
torch.Size([376])
torch.Size([520])
torch.Size([491])
torch.Size([291])
torch.Size([398])
torch.Size([449])
torch.Size([388])
torch.Size([283])
torch.Size([277])
torch.Size([576])
torch.Size([543])
torch.Size([586])
torch.Size([696])
torch.Size([283])
torch.Size([450])
torch.Size([498])
torch.Size([409])
torch.Size([286])
torch.Size([262])
torch.Size([488])
torch.Size([572])
torch.Size([633])
torch.Size([724])
torch.Size([611])
torch.Size([439])
torch.Size([381])
torch.Size([522])
torch.Size([554])
torch.Size([512])
torch.Size([466])
torch.Size([665])
torch.Size([309])
torch.Size([358])
torch.Size([628])
torch.Size([659])
torch.Size([510])
torch.Size([338])
torch.Size([281])
torch.Size([592])
torch.Size([280])
torch.Size([414])
torch.Size([691])
torch.Size([690])
torch.Size([534])
torch.Size([333])
torch.Size([442])
torch.Size([327])
torch.Size([542])
torch.Size([654])
torch.Size([529])
torch.Size([364])
torch.Size([515])
torch.Size([312])
torch.Size([717])
torch.Size([303])
torch.Size([617])
torch.Size([300])
torch.Size([570])
torch.Size([288])
torch.Size([321])
torch.Size([504])
torch.Size([309])
torch.Size([469])
torch.Size([389])
torch.Size([310])
torch.Size([410])
torch.Size([592])
torch.Size([611])
torch.Size([457])
torch.Size([369])
torch.Size([321])
torch.Size([321])
torch.Size([350])
torch.Size([342])
torch.Size([492])
torch.Size([604])
torch.Size([470])
torch.Size([735])
torch.Size([496])
torch.Size([284])
torch.Size([557])
torch.Size([294])
torch.Size([426])
torch.Size([371])
torch.Size([763])
torch.Size([901])
torch.Size([587])
torch.Size([680])
torch.Size([318])
torch.Size([268])
torch.Size([307])
torch.Size([243])
torch.Size([398])
torch.Size([329])
torch.Size([438])
torch.Size([326])
torch.Size([295])
torch.Size([261])
torch.Size([269])
torch.Size([481])
torch.Size([286])
torch.Size([442])
torch.Size([294])
torch.Size([344])
torch.Size([592])
torch.Size([398])
torch.Size([349])
torch.Size([286])
torch.Size([324])
torch.Size([610])
torch.Size([509])
torch.Size([576])
torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 2167.205, Val Loss : 158877.688
======> Trajectory Loss : 93.501, Gravity Loss : 28058.766, EndOfTrajectory Loss : 1.378, BelowGroundPenalize Loss : 0.012, Depth Loss : 0.011
===> [Minibatch 5/58].........torch.Size([516])
torch.Size([491])
torch.Size([484])
torch.Size([492])
torch.Size([678])
torch.Size([328])
torch.Size([603])
torch.Size([849])
torch.Size([314])
torch.Size([495])
torch.Size([490])
torch.Size([505])
torch.Size([510])
torch.Size([644])
torch.Size([535])
torch.Size([578])
torch.Size([301])
torch.Size([296])
torch.Size([452])
torch.Size([270])
torch.Size([534])
torch.Size([369])
torch.Size([420])
torch.Size([584])
torch.Size([399])
torch.Size([396])
torch.Size([606])
torch.Size([516])
torch.Size([282])
torch.Size([334])
torch.Size([656])
torch.Size([338])
torch.Size([477])
torch.Size([283])
torch.Size([509])
torch.Size([268])
torch.Size([531])
torch.Size([355])
torch.Size([492])
torch.Size([339])
torch.Size([533])
torch.Size([644])
torch.Size([311])
torch.Size([546])
torch.Size([322])
torch.Size([633])
torch.Size([577])
torch.Size([295])
torch.Size([884])
torch.Size([503])
torch.Size([316])
torch.Size([469])
torch.Size([477])
torch.Size([607])
torch.Size([353])
torch.Size([530])
torch.Size([576])
torch.Size([269])
torch.Size([312])
torch.Size([503])
torch.Size([548])
torch.Size([359])
torch.Size([872])
torch.Size([330])
torch.Size([790])
torch.Size([683])
torch.Size([495])
torch.Size([471])
torch.Size([414])
torch.Size([354])
torch.Size([481])
torch.Size([361])
torch.Size([308])
torch.Size([443])
torch.Size([444])
torch.Size([353])
torch.Size([481])
torch.Size([632])
torch.Size([386])
torch.Size([332])
torch.Size([444])
torch.Size([473])
torch.Size([766])
torch.Size([424])
torch.Size([253])
torch.Size([392])
torch.Size([404])
torch.Size([395])
torch.Size([523])
torch.Size([474])
torch.Size([606])
torch.Size([303])
torch.Size([490])
torch.Size([314])
torch.Size([589])
torch.Size([617])
torch.Size([493])
torch.Size([788])
torch.Size([497])
torch.Size([509])
torch.Size([390])
torch.Size([309])
torch.Size([310])
torch.Size([295])
torch.Size([499])
torch.Size([531])
torch.Size([486])
torch.Size([310])
torch.Size([459])
torch.Size([311])
torch.Size([588])
torch.Size([867])
torch.Size([786])
torch.Size([408])
torch.Size([353])
torch.Size([291])
torch.Size([314])
torch.Size([696])
torch.Size([495])
torch.Size([630])
torch.Size([407])
torch.Size([324])
torch.Size([318])
torch.Size([624])
torch.Size([412])
torch.Size([531])
torch.Size([484])
torch.Size([366])
torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 3657.496, Val Loss : 87781.047
======> Trajectory Loss : 179.908, Gravity Loss : 79711.148, EndOfTrajectory Loss : 1.382, BelowGroundPenalize Loss : 126.424, Depth Loss : 0.017
===> [Minibatch 6/58].........torch.Size([334])
torch.Size([321])
torch.Size([356])
torch.Size([516])
torch.Size([603])
torch.Size([651])
torch.Size([307])
torch.Size([565])
torch.Size([323])
torch.Size([542])
torch.Size([830])
torch.Size([616])
torch.Size([477])
torch.Size([656])
torch.Size([440])
torch.Size([482])
torch.Size([475])
torch.Size([537])
torch.Size([518])
torch.Size([308])
torch.Size([488])
torch.Size([607])
torch.Size([321])
torch.Size([483])
torch.Size([524])
torch.Size([330])
torch.Size([473])
torch.Size([425])
torch.Size([324])
torch.Size([488])
torch.Size([516])
torch.Size([495])
torch.Size([616])
torch.Size([379])
torch.Size([269])
torch.Size([575])
torch.Size([578])
torch.Size([275])
torch.Size([592])
torch.Size([346])
torch.Size([324])
torch.Size([459])
torch.Size([390])
torch.Size([529])
torch.Size([306])
torch.Size([541])
torch.Size([387])
torch.Size([305])
torch.Size([526])
torch.Size([395])
torch.Size([434])
torch.Size([558])
torch.Size([810])
torch.Size([410])
torch.Size([419])
torch.Size([596])
torch.Size([294])
torch.Size([477])
torch.Size([579])
torch.Size([319])
torch.Size([515])
torch.Size([464])
torch.Size([309])
torch.Size([331])
torch.Size([661])
torch.Size([273])
torch.Size([314])
torch.Size([487])
torch.Size([466])
torch.Size([392])
torch.Size([521])
torch.Size([659])
torch.Size([570])
torch.Size([448])
torch.Size([380])
torch.Size([370])
torch.Size([581])
torch.Size([355])
torch.Size([255])
torch.Size([504])
torch.Size([625])
torch.Size([623])
torch.Size([329])
torch.Size([590])
torch.Size([683])
torch.Size([282])
torch.Size([355])
torch.Size([409])
torch.Size([288])
torch.Size([551])
torch.Size([382])
torch.Size([411])
torch.Size([304])
torch.Size([643])
torch.Size([296])
torch.Size([321])
torch.Size([332])
torch.Size([298])
torch.Size([295])
torch.Size([518])
torch.Size([664])
torch.Size([320])
torch.Size([438])
torch.Size([396])
torch.Size([349])
torch.Size([438])
torch.Size([741])
torch.Size([644])
torch.Size([288])
torch.Size([833])
torch.Size([335])
torch.Size([818])
torch.Size([274])
torch.Size([513])
torch.Size([352])
torch.Size([408])
torch.Size([266])
torch.Size([408])
torch.Size([467])
torch.Size([392])
torch.Size([401])
torch.Size([317])
torch.Size([728])
torch.Size([574])
torch.Size([684])
torch.Size([279])
torch.Size([303])
torch.Size([488])
torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 1997.272, Val Loss : 12190.623
======> Trajectory Loss : 84.664, Gravity Loss : 30732.434, EndOfTrajectory Loss : 1.377, BelowGroundPenalize Loss : 60.055, Depth Loss : 0.010
===> [Minibatch 7/58].........torch.Size([452])
torch.Size([359])
torch.Size([317])
torch.Size([866])
torch.Size([315])
torch.Size([390])
torch.Size([305])
torch.Size([420])
torch.Size([407])
torch.Size([594])
torch.Size([673])
torch.Size([632])
torch.Size([478])
torch.Size([275])
torch.Size([298])
torch.Size([349])
torch.Size([529])
torch.Size([280])
torch.Size([506])
torch.Size([491])
torch.Size([426])
torch.Size([559])
torch.Size([381])
torch.Size([371])
torch.Size([468])
torch.Size([461])
torch.Size([417])
torch.Size([548])
torch.Size([375])
torch.Size([289])
torch.Size([494])
torch.Size([526])
torch.Size([574])
torch.Size([553])
torch.Size([288])
torch.Size([316])
torch.Size([629])
torch.Size([442])
torch.Size([654])
torch.Size([329])
torch.Size([338])
torch.Size([509])
torch.Size([327])
torch.Size([598])
torch.Size([536])
torch.Size([408])
torch.Size([607])
torch.Size([308])
torch.Size([600])
torch.Size([307])
torch.Size([694])
torch.Size([466])
torch.Size([301])
torch.Size([317])
torch.Size([268])
torch.Size([466])
torch.Size([654])
torch.Size([289])
torch.Size([578])
torch.Size([340])
torch.Size([490])
torch.Size([485])
torch.Size([549])
torch.Size([347])
torch.Size([680])
torch.Size([308])
torch.Size([674])
torch.Size([272])
torch.Size([429])
torch.Size([529])
torch.Size([528])
torch.Size([596])
torch.Size([536])
torch.Size([686])
torch.Size([436])
torch.Size([453])
torch.Size([731])
torch.Size([294])
torch.Size([644])
torch.Size([285])
torch.Size([341])
torch.Size([658])
torch.Size([738])
torch.Size([307])
torch.Size([302])
torch.Size([727])
torch.Size([420])
torch.Size([334])
torch.Size([629])
torch.Size([509])
torch.Size([321])
torch.Size([351])
torch.Size([298])
torch.Size([410])
torch.Size([276])
torch.Size([594])
torch.Size([323])
torch.Size([517])
torch.Size([501])
torch.Size([586])
torch.Size([600])
torch.Size([372])
torch.Size([545])
torch.Size([519])
torch.Size([639])
torch.Size([456])
torch.Size([493])
torch.Size([437])
torch.Size([277])
torch.Size([387])
torch.Size([325])
torch.Size([310])
torch.Size([309])
torch.Size([574])
torch.Size([294])
torch.Size([787])
torch.Size([632])
torch.Size([583])
torch.Size([657])
torch.Size([469])
torch.Size([335])
torch.Size([346])
torch.Size([593])
torch.Size([460])
torch.Size([383])
torch.Size([553])
torch.Size([273])
torch.Size([760])
torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 594.372, Val Loss : 13700.704
======> Trajectory Loss : 15.689, Gravity Loss : 4448.439, EndOfTrajectory Loss : 1.377, BelowGroundPenalize Loss : 9.107, Depth Loss : 0.003
===> [Minibatch 8/58].........torch.Size([294])
torch.Size([297])
torch.Size([886])
torch.Size([312])
torch.Size([659])
torch.Size([477])
torch.Size([744])
torch.Size([564])
torch.Size([502])
torch.Size([319])
torch.Size([469])
torch.Size([447])
torch.Size([280])
torch.Size([758])
torch.Size([571])
torch.Size([436])
torch.Size([327])
torch.Size([408])
torch.Size([322])
torch.Size([513])
torch.Size([603])
torch.Size([707])
torch.Size([354])
torch.Size([357])
torch.Size([920])
torch.Size([524])
torch.Size([541])
torch.Size([550])
torch.Size([357])
torch.Size([467])
torch.Size([480])
torch.Size([573])
torch.Size([677])
torch.Size([382])
torch.Size([760])
torch.Size([429])
torch.Size([615])
torch.Size([352])
torch.Size([617])
torch.Size([439])
torch.Size([290])
torch.Size([311])
torch.Size([556])
torch.Size([317])
torch.Size([535])
torch.Size([358])
torch.Size([663])
torch.Size([708])
torch.Size([276])
torch.Size([458])
torch.Size([756])
torch.Size([288])
torch.Size([636])
torch.Size([755])
torch.Size([577])
torch.Size([349])
torch.Size([648])
torch.Size([363])
torch.Size([332])
torch.Size([435])
torch.Size([429])
torch.Size([555])
torch.Size([488])
torch.Size([479])
torch.Size([383])
torch.Size([752])
torch.Size([410])
torch.Size([459])
torch.Size([726])
torch.Size([614])
torch.Size([291])
torch.Size([517])
torch.Size([280])
torch.Size([345])
torch.Size([441])
torch.Size([310])
torch.Size([312])
torch.Size([367])
torch.Size([722])
torch.Size([321])
torch.Size([482])
torch.Size([459])
torch.Size([481])
torch.Size([563])
torch.Size([459])
torch.Size([364])
torch.Size([489])
torch.Size([260])
torch.Size([549])
torch.Size([525])
torch.Size([289])
torch.Size([709])
torch.Size([317])
torch.Size([644])
torch.Size([285])
torch.Size([664])
torch.Size([332])
torch.Size([391])
torch.Size([315])
torch.Size([410])
torch.Size([287])
torch.Size([381])
torch.Size([391])
torch.Size([344])
torch.Size([450])
torch.Size([635])
torch.Size([626])
torch.Size([409])
torch.Size([429])
torch.Size([400])
torch.Size([318])
torch.Size([630])
torch.Size([664])
torch.Size([492])
torch.Size([348])
torch.Size([415])
torch.Size([525])
torch.Size([317])
torch.Size([499])
torch.Size([427])
torch.Size([467])
torch.Size([583])
torch.Size([343])
torch.Size([310])
torch.Size([271])
torch.Size([673])
torch.Size([480])
torch.Size([286])
torch.Size([305])
torch.Size([372])
torch.Size([1697])
torch.Size([1035])
torch.Size([1257])
torch.Size([796])
torch.Size([1905])
torch.Size([302])
torch.Size([426])
torch.Size([125])
torch.Size([411])
torch.Size([900])
torch.Size([779])
torch.Size([518])
torch.Size([371])
torch.Size([810])
torch.Size([402])
torch.Size([1210])
torch.Size([1324])
torch.Size([1388])
torch.Size([1323])
torch.Size([434])
torch.Size([119])
torch.Size([1103])
torch.Size([1062])
torch.Size([1538])
torch.Size([217])
torch.Size([150])
torch.Size([1622])
torch.Size([1123])
torch.Size([267])
torch.Size([1335])
torch.Size([1888])
torch.Size([1152])
torch.Size([764])
torch.Size([790])
torch.Size([128])
torch.Size([239])
torch.Size([600])
torch.Size([261])
torch.Size([1469])
torch.Size([1582])
torch.Size([297])
torch.Size([604])
torch.Size([403])
torch.Size([423])
torch.Size([469])
torch.Size([167])
torch.Size([770])
torch.Size([295])
torch.Size([284])
torch.Size([1225])
torch.Size([1582])
torch.Size([673])
torch.Size([1738])
torch.Size([726])
torch.Size([153])
torch.Size([314])
torch.Size([1181])
torch.Size([449])
torch.Size([1021])
torch.Size([176])
torch.Size([1255])
torch.Size([311])
torch.Size([738])
torch.Size([920])
torch.Size([369])
torch.Size([1666])
torch.Size([418])
torch.Size([516])
torch.Size([501])
torch.Size([1723])
torch.Size([468])
torch.Size([2172])
torch.Size([173])
torch.Size([490])
torch.Size([878])
torch.Size([1642])
torch.Size([718])
torch.Size([176])
torch.Size([161])
torch.Size([1199])
torch.Size([582])
torch.Size([835])
torch.Size([1338])
torch.Size([1217])
torch.Size([738])
torch.Size([302])
torch.Size([447])
torch.Size([432])
torch.Size([1226])
torch.Size([1043])
torch.Size([369])
torch.Size([1196])
torch.Size([1094])
torch.Size([966])
torch.Size([802])
torch.Size([646])
torch.Size([922])
torch.Size([1091])
torch.Size([1021])
torch.Size([125])
torch.Size([826])
torch.Size([390])
torch.Size([352])
torch.Size([1872])
torch.Size([1463])
torch.Size([1437])
torch.Size([429])
torch.Size([2029])
torch.Size([1415])
torch.Size([550])
torch.Size([168])
torch.Size([1297])
torch.Size([569])
torch.Size([1257])
torch.Size([1594])
torch.Size([1210])
torch.Size([1147])
torch.Size([424])
torch.Size([426])
torch.Size([151])
torch.Size([340])
torch.Size([1573])
torch.Size([302])
torch.Size([1281])
torch.Size([594])
torch.Size([655])
Train Loss : 773.799, Val Loss : 28213.672
======> Trajectory Loss : 24.599, Gravity Loss : 6059.542, EndOfTrajectory Loss : 1.373, BelowGroundPenalize Loss : 0.352, Depth Loss : 0.004
===> [Minibatch 9/58].........torch.Size([553])
torch.Size([462])
torch.Size([471])
torch.Size([433])
torch.Size([611])
torch.Size([379])
torch.Size([462])
torch.Size([658])
torch.Size([313])
torch.Size([458])
torch.Size([410])
torch.Size([462])
torch.Size([317])
torch.Size([313])
torch.Size([616])
torch.Size([528])
torch.Size([457])
torch.Size([768])
torch.Size([515])
torch.Size([304])
torch.Size([528])
torch.Size([274])
torch.Size([475])
torch.Size([548])
torch.Size([328])
torch.Size([399])
torch.Size([587])
torch.Size([814])
torch.Size([430])
torch.Size([902])
torch.Size([436])
torch.Size([524])
torch.Size([280])
torch.Size([545])
torch.Size([519])
torch.Size([696])
torch.Size([635])
torch.Size([333])
torch.Size([475])
torch.Size([281])
torch.Size([647])
torch.Size([499])
torch.Size([583])
torch.Size([297])
torch.Size([497])
torch.Size([350])
torch.Size([444])
torch.Size([398])
torch.Size([252])
torch.Size([291])
torch.Size([596])
torch.Size([711])
torch.Size([292])
torch.Size([473])
torch.Size([599])
torch.Size([372])
torch.Size([277])
torch.Size([438])
torch.Size([528])
torch.Size([356])
torch.Size([473])
torch.Size([858])
torch.Size([532])
torch.Size([548])
torch.Size([734])
torch.Size([316])
torch.Size([353])
torch.Size([466])
torch.Size([297])
torch.Size([504])
torch.Size([282])
torch.Size([348])
torch.Size([651])
torch.Size([322])
torch.Size([540])
torch.Size([279])
torch.Size([324])
torch.Size([258])
torch.Size([289])
torch.Size([577])
torch.Size([312])
torch.Size([330])
torch.Size([427])
torch.Size([464])
torch.Size([693])
torch.Size([448])
torch.Size([298])
torch.Size([327])
torch.Size([485])
torch.Size([454])
torch.Size([493])
torch.Size([335])
torch.Size([408])
torch.Size([617])
torch.Size([917])
torch.Size([399])
torch.Size([841])
torch.Size([482])
torch.Size([400])
torch.Size([436])
torch.Size([630])
torch.Size([337])
torch.Size([475])
torch.Size([494])
torch.Size([298])
torch.Size([489])
torch.Size([724])
torch.Size([268])
torch.Size([529])
torch.Size([418])
torch.Size([499])
torch.Size([263])
torch.Size([270])
torch.Size([506])
torch.Size([313])
torch.Size([554])
torch.Size([329])
torch.Size([573])
torch.Size([546])
torch.Size([523])
torch.Size([320])
torch.Size([507])
torch.Size([745])
torch.Size([397])
torch.Size([348])
torch.Size([627])
torch.Size([305])
torch.Size([637])
