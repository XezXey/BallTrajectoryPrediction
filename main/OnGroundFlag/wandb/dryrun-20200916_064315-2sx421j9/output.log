[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/onGroundFlag/train_set
Mixed:   0%|                                                                                                                           | 0/3 [00:00<?, ?it/s]Mixed:  67%|████████████████████████████████████████████████████████████████████████████▋                                      | 2/3 [00:00<00:00, 16.78it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 16.96it/s]
Mixed : (4565,)
===========================================================================
Mixed:   0%|                                                                                                                           | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed : (650,)
===========================================================================
Mixed: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 23.81it/s]
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 900, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 5])
Output batch [0] : batch=torch.Size([128, 900, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 893, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 5])
Output batch [1] : batch=torch.Size([128, 893, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 849, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 4]), initial position=torch.Size([128, 1, 5])
Output batch [2] : batch=torch.Size([128, 849, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 5])
Output batch [3] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 920, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 5])
Output batch [4] : batch=torch.Size([128, 920, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 921, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 983, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 5])
Output batch [5] : batch=torch.Size([128, 983, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 984, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 889, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 889, 4]), initial position=torch.Size([128, 1, 5])
Output batch [6] : batch=torch.Size([128, 889, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 890, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 816, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 5])
Output batch [7] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 818, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 5])
Output batch [8] : batch=torch.Size([128, 818, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 945, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 4]), initial position=torch.Size([128, 1, 5])
Output batch [9] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 5])
Output batch [10] : batch=torch.Size([128, 951, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 910, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 910, 4]), initial position=torch.Size([128, 1, 5])
Output batch [11] : batch=torch.Size([128, 910, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 884, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 5])
Output batch [12] : batch=torch.Size([128, 884, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 965, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 965, 4]), initial position=torch.Size([128, 1, 5])
Output batch [13] : batch=torch.Size([128, 965, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 5])
Output batch [14] : batch=torch.Size([128, 959, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 5])
Output batch [15] : batch=torch.Size([128, 898, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 820, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 4]), initial position=torch.Size([128, 1, 5])
Output batch [16] : batch=torch.Size([128, 820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [17] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 969, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 4]), initial position=torch.Size([128, 1, 5])
Output batch [18] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 4]), initial position=torch.Size([128, 1, 5])
Output batch [19] : batch=torch.Size([128, 925, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 837, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 5])
Output batch [20] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 816, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 5])
Output batch [21] : batch=torch.Size([128, 816, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 948, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 4]), initial position=torch.Size([128, 1, 5])
Output batch [22] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 911, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 4]), initial position=torch.Size([128, 1, 5])
Output batch [23] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 815, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 5])
Output batch [24] : batch=torch.Size([128, 815, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 1030, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1030, 4]), initial position=torch.Size([128, 1, 5])
Output batch [25] : batch=torch.Size([128, 1030, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1031, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 834, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 5])
Output batch [26] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 858, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 4]), initial position=torch.Size([128, 1, 5])
Output batch [27] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 5])
Output batch [28] : batch=torch.Size([128, 872, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [29] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [30] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 917, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 4]), initial position=torch.Size([128, 1, 5])
Output batch [31] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 839, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 4]), initial position=torch.Size([128, 1, 5])
Output batch [32] : batch=torch.Size([128, 839, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 912, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 5])
Output batch [33] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 847, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 4]), initial position=torch.Size([128, 1, 5])
Output batch [34] : batch=torch.Size([128, 847, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 848, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Flag #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & flag) :  0.01
===> [Minibatch 1/35].........tensor([[886.2815, 522.6024,  59.3903,   0.0000,   1.0000]], device='cuda:0')
tensor([-1.2858,  1.9936,  0.0000,  0.0000], device='cuda:0')
tensor([1.7339, 1.1436, 0.0000, 0.0000], device='cuda:0')
tensor([1.6023, 1.7183, 0.0000, 0.0000], device='cuda:0')
tensor([ 1.2457, -2.1268,  0.0000,  1.0000], device='cuda:0')
tensor([-1.1180,  3.4241,  0.0000,  0.0000], device='cuda:0')
tensor([-3.1361,  2.0719,  0.0000,  1.0000], device='cuda:0')
tensor([-0.2757,  2.3611,  0.0000,  0.0000], device='cuda:0')
tensor([ 2.1974, -2.6808,  0.0000,  1.0000], device='cuda:0')
tensor([1.2262, 3.8865, 0.0000, 0.0000], device='cuda:0')
tensor([-0.7615,  1.2216,  0.0000,  0.0000], device='cuda:0')
tensor([ 0.5955, -2.0934,  0.0000,  1.0000], device='cuda:0')
tensor([ 2.1495, -2.5508,  0.0000,  1.0000], device='cuda:0')
tensor([-3.4333,  2.4181,  0.0000,  1.0000], device='cuda:0')
tensor([-1.2179,  3.5787,  0.0000,  0.0000], device='cuda:0')
tensor([0.3447, 2.6117, 0.0000, 0.0000], device='cuda:0')
tensor([2.6046, 1.8404, 0.0000, 1.0000], device='cuda:0')
tensor([-0.6432,  1.0806,  0.0000,  0.0000], device='cuda:0')
tensor([-3.6095,  3.1241,  0.0000,  1.0000], device='cuda:0')
tensor([-0.9511,  2.1794,  0.0000,  0.0000], device='cuda:0')
tensor([-0.6860,  0.9959,  0.0000,  0.0000], device='cuda:0')
tensor([ 1.7913, -1.4124,  0.0000,  1.0000], device='cuda:0')
tensor([-3.7252,  2.0927,  0.0000,  1.0000], device='cuda:0')
tensor([-3.2975,  3.3789,  0.0000,  1.0000], device='cuda:0')
tensor([-0.2714,  2.0260,  0.0000,  0.0000], device='cuda:0')
tensor([-4.9108, -1.0430,  0.0000,  1.0000], device='cuda:0')
tensor([3.9347, 1.7313, 0.0000, 1.0000], device='cuda:0')
tensor([ 2.5575, -1.3968,  0.0000,  1.0000], device='cuda:0')
tensor([4.7258, 1.8594, 0.0000, 1.0000], device='cuda:0')
tensor([4.3967, 0.4084, 0.0000, 1.0000], device='cuda:0')
tensor([-2.1363, -1.3775,  0.0000,  1.0000], device='cuda:0')
tensor([-2.3136, -1.1502,  0.0000,  1.0000], device='cuda:0')
tensor([3.5727, 1.8067, 0.0000, 1.0000], device='cuda:0')
tensor([0.4683, 1.8195, 0.0000, 0.0000], device='cuda:0')
tensor([-1.7372,  2.7250,  0.0000,  1.0000], device='cuda:0')
tensor([2.0320, 3.1753, 0.0000, 0.0000], device='cuda:0')
tensor([0.5235, 1.3892, 0.0000, 0.0000], device='cuda:0')
tensor([-4.3200,  2.6864,  0.0000,  1.0000], device='cuda:0')
tensor([ 1.6871, -1.8591,  0.0000,  1.0000], device='cuda:0')
tensor([3.3201, 2.5773, 0.0000, 1.0000], device='cuda:0')
tensor([-3.5588, -1.1551,  0.0000,  1.0000], device='cuda:0')
tensor([-0.7532,  2.6342,  0.0000,  0.0000], device='cuda:0')
tensor([3.8539, 1.0365, 0.0000, 1.0000], device='cuda:0')
tensor([ 1.2786, -1.9236,  0.0000,  1.0000], device='cuda:0')
tensor([4.5617, 1.6963, 0.0000, 1.0000], device='cuda:0')
tensor([-3.5580, -1.7338,  0.0000,  1.0000], device='cuda:0')
tensor([1.4176, 2.4959, 0.0000, 0.0000], device='cuda:0')
tensor([-0.4742,  2.9080,  0.0000,  0.0000], device='cuda:0')
tensor([-0.1581,  3.0972,  0.0000,  0.0000], device='cuda:0')
tensor([-1.0388,  0.1180,  0.0000,  0.0000], device='cuda:0')
tensor([-3.7430, -3.2144,  0.0000,  1.0000], device='cuda:0')
tensor([-0.4910,  1.3251,  0.0000,  0.0000], device='cuda:0')
tensor([ 1.7916, -3.9868,  0.0000,  1.0000], device='cuda:0')
tensor([-0.7186,  1.7527,  0.0000,  0.0000], device='cuda:0')
tensor([-1.2585,  1.6627,  0.0000,  0.0000], device='cuda:0')
tensor([-3.7263, -1.4150,  0.0000,  1.0000], device='cuda:0')
tensor([-0.6980,  1.5377,  0.0000,  0.0000], device='cuda:0')
tensor([4.7611, 3.0796, 0.0000, 1.0000], device='cuda:0')
tensor([-1.2922,  1.2842,  0.0000,  0.0000], device='cuda:0')
tensor([0.4639, 2.3281, 0.0000, 0.0000], device='cuda:0')
tensor([2.1732, 0.8883, 0.0000, 0.0000], device='cuda:0')
tensor([1.3099, 1.6343, 0.0000, 0.0000], device='cuda:0')
tensor([ 1.8071, -2.1389,  0.0000,  1.0000], device='cuda:0')
tensor([3.9923, 2.3187, 0.0000, 1.0000], device='cuda:0')
tensor([4.1444, 2.0825, 0.0000, 1.0000], device='cuda:0')
tensor([-0.6446,  0.7641,  0.0000,  0.0000], device='cuda:0')
tensor([-2.8039, -1.8512,  0.0000,  1.0000], device='cuda:0')
tensor([-0.2930,  2.7460,  0.0000,  0.0000], device='cuda:0')
tensor([1.1298, 0.9824, 0.0000, 0.0000], device='cuda:0')
tensor([ 3.0305, -2.1636,  0.0000,  1.0000], device='cuda:0')
tensor([-0.5780,  1.4463,  0.0000,  0.0000], device='cuda:0')
tensor([-4.9130,  2.5686,  0.0000,  1.0000], device='cuda:0')
tensor([ 1.8254, -0.9640,  0.0000,  1.0000], device='cuda:0')
tensor([0.9848, 3.3670, 0.0000, 0.0000], device='cuda:0')
tensor([-1.4777,  1.2851,  0.0000,  0.0000], device='cuda:0')
tensor([-4.1797,  3.0720,  0.0000,  1.0000], device='cuda:0')
tensor([ 3.0323, -1.5171,  0.0000,  1.0000], device='cuda:0')
tensor([-3.3603, -0.8844,  0.0000,  1.0000], device='cuda:0')
tensor([2.9780, 2.7404, 0.0000, 1.0000], device='cuda:0')
tensor([1.3729, 3.5512, 0.0000, 0.0000], device='cuda:0')
tensor([-1.3003, -1.9097,  0.0000,  1.0000], device='cuda:0')
tensor([-1.0316,  3.2592,  0.0000,  0.0000], device='cuda:0')
tensor([-2.0497,  1.6840,  0.0000,  1.0000], device='cuda:0')
tensor([0.9249, 1.4110, 0.0000, 0.0000], device='cuda:0')
tensor([-0.4830,  1.2138,  0.0000,  0.0000], device='cuda:0')
tensor([-4.1890,  1.6995,  0.0000,  1.0000], device='cuda:0')
tensor([4.1689, 2.7890, 0.0000, 1.0000], device='cuda:0')
tensor([ 1.7834, -1.3065,  0.0000,  1.0000], device='cuda:0')
tensor([-1.3554,  0.0775,  0.0000,  0.0000], device='cuda:0')
tensor([-0.4230,  4.5814,  0.0000,  0.0000], device='cuda:0')
tensor([-4.7458,  3.3876,  0.0000,  1.0000], device='cuda:0')
tensor([ 2.2678, -1.2580,  0.0000,  1.0000], device='cuda:0')
tensor([-6.3610,  2.6537,  0.0000,  1.0000], device='cuda:0')
tensor([2.2092, 3.2418, 0.0000, 0.0000], device='cuda:0')
tensor([-3.3229,  1.9987,  0.0000,  1.0000], device='cuda:0')
tensor([-3.2772, -1.7448,  0.0000,  1.0000], device='cuda:0')
tensor([-1.9562,  2.7350,  0.0000,  1.0000], device='cuda:0')
tensor([ 2.3512, -1.4565,  0.0000,  1.0000], device='cuda:0')
tensor([-0.4130,  2.3142,  0.0000,  0.0000], device='cuda:0')
tensor([-1.2828,  3.4121,  0.0000,  0.0000], device='cuda:0')
tensor([1.3983, 4.0807, 0.0000, 0.0000], device='cuda:0')
tensor([-1.0675,  3.2251,  0.0000,  0.0000], device='cuda:0')
tensor([-1.5930,  2.3035,  0.0000,  0.0000], device='cuda:0')
tensor([0.8433, 1.6860, 0.0000, 0.0000], device='cuda:0')
tensor([4.2993, 0.2698, 0.0000, 1.0000], device='cuda:0')
tensor([ 2.9015, -1.5572,  0.0000,  1.0000], device='cuda:0')
tensor([-1.4510,  2.2829,  0.0000,  0.0000], device='cuda:0')
tensor([-2.3817,  1.2173,  0.0000,  0.0000], device='cuda:0')
tensor([-4.2425,  0.6645,  0.0000,  1.0000], device='cuda:0')
tensor([3.2709, 2.9862, 0.0000, 1.0000], device='cuda:0')
tensor([-7.1703,  4.8855,  0.0000,  1.0000], device='cuda:0')
tensor([ 2.6313, -1.9797,  0.0000,  1.0000], device='cuda:0')
tensor([-2.6427, -1.4631,  0.0000,  1.0000], device='cuda:0')
tensor([0.6748, 0.6554, 0.0000, 0.0000], device='cuda:0')
tensor([0.8920, 1.0539, 0.0000, 0.0000], device='cuda:0')
tensor([-4.1175,  1.8486,  0.0000,  1.0000], device='cuda:0')
tensor([-3.6336, -0.9775,  0.0000,  1.0000], device='cuda:0')
tensor([2.3852, 1.0854, 0.0000, 1.0000], device='cuda:0')
tensor([0.6851, 2.0255, 0.0000, 0.0000], device='cuda:0')
tensor([ 3.3793, -1.4499,  0.0000,  1.0000], device='cuda:0')
tensor([-1.8160,  2.1936,  0.0000,  0.0000], device='cuda:0')
tensor([-3.3506, -0.3151,  0.0000,  1.0000], device='cuda:0')
tensor([-1.0748,  4.3046,  0.0000,  0.0000], device='cuda:0')
tensor([1.0567, 0.9099, 0.0000, 0.0000], device='cuda:0')
tensor([-4.8225,  3.2159,  0.0000,  1.0000], device='cuda:0')
tensor([-0.7371,  0.8911,  0.0000,  0.0000], device='cuda:0')
tensor([-1.8795, -1.3141,  0.0000,  1.0000], device='cuda:0')
tensor([-2.4702,  4.4208,  0.0000,  0.0000], device='cuda:0')
tensor([ 2.5670, -1.8206,  0.0000,  1.0000], device='cuda:0')
