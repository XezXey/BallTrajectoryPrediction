[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/onGroundFlag/train_set
Mixed:   0%|                                                                                                                           | 0/3 [00:00<?, ?it/s]Mixed:  67%|████████████████████████████████████████████████████████████████████████████▋                                      | 2/3 [00:00<00:00, 17.50it/s]===============================Dataset shape===============================
Mixed: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 17.77it/s]
Mixed : (4565,)
===========================================================================
Mixed:   0%|                                                                                                                           | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 25.06it/s]
===============================Dataset shape===============================
Mixed : (631,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 969, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 4]), initial position=torch.Size([128, 1, 5])
Output batch [0] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 4]), initial position=torch.Size([128, 1, 5])
Output batch [1] : batch=torch.Size([128, 925, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [2] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 5])
Output batch [3] : batch=torch.Size([128, 951, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 848, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 848, 4]), initial position=torch.Size([128, 1, 5])
Output batch [4] : batch=torch.Size([128, 848, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 942, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 942, 4]), initial position=torch.Size([128, 1, 5])
Output batch [5] : batch=torch.Size([128, 942, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 858, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 4]), initial position=torch.Size([128, 1, 5])
Output batch [6] : batch=torch.Size([128, 858, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 856, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 4]), initial position=torch.Size([128, 1, 5])
Output batch [7] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 948, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 948, 4]), initial position=torch.Size([128, 1, 5])
Output batch [8] : batch=torch.Size([128, 948, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 838, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 5])
Output batch [9] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 965, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 965, 4]), initial position=torch.Size([128, 1, 5])
Output batch [10] : batch=torch.Size([128, 965, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 917, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 4]), initial position=torch.Size([128, 1, 5])
Output batch [11] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 5])
Output batch [12] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 912, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 5])
Output batch [13] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 834, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 5])
Output batch [14] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 5])
Output batch [15] : batch=torch.Size([128, 959, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 781, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 5])
Output batch [16] : batch=torch.Size([128, 781, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 961, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 4]), initial position=torch.Size([128, 1, 5])
Output batch [17] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 924, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 924, 4]), initial position=torch.Size([128, 1, 5])
Output batch [18] : batch=torch.Size([128, 924, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 893, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 5])
Output batch [19] : batch=torch.Size([128, 893, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 827, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 5])
Output batch [20] : batch=torch.Size([128, 827, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 945, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 945, 4]), initial position=torch.Size([128, 1, 5])
Output batch [21] : batch=torch.Size([128, 945, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 946, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 896, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 896, 4]), initial position=torch.Size([128, 1, 5])
Output batch [22] : batch=torch.Size([128, 896, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 897, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 901, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 5])
Output batch [23] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 889, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 889, 4]), initial position=torch.Size([128, 1, 5])
Output batch [24] : batch=torch.Size([128, 889, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 890, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 909, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 909, 4]), initial position=torch.Size([128, 1, 5])
Output batch [25] : batch=torch.Size([128, 909, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 910, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 859, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 5])
Output batch [26] : batch=torch.Size([128, 859, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 856, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 4]), initial position=torch.Size([128, 1, 5])
Output batch [27] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 910, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 910, 4]), initial position=torch.Size([128, 1, 5])
Output batch [28] : batch=torch.Size([128, 910, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 983, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 5])
Output batch [29] : batch=torch.Size([128, 983, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 984, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [30] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 851, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 4]), initial position=torch.Size([128, 1, 5])
Output batch [31] : batch=torch.Size([128, 851, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 838, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 5])
Output batch [32] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 910, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 910, 4]), initial position=torch.Size([128, 1, 5])
Output batch [33] : batch=torch.Size([128, 910, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 873, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 5])
Output batch [34] : batch=torch.Size([128, 873, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Flag #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & flag) :  0.01
===> [Minibatch 1/35].........[[  0   0 279   0]
 [513   0  52   0]
 [607   0  51   0]
 [191   0 198   0]
 [661   0  58   0]
 [482   0  47   0]
 [  0   0 294   0]
 [  0   0 348   0]
 [399   0 206   0]
 [408   0 173   0]
 [  0   0 299   0]
 [331   0 237   0]
 [368   0 212   0]
 [274   0 196   0]
 [305   0 174   0]
 [421   0 162   0]
 [  0   0 294   0]
 [248   0 176   0]
 [327   0 197   0]
 [  0   0 302   0]
 [597   0  56   0]
 [395   0 182   0]
 [655   0  52   0]
 [204   0 170   0]
 [300   0 183   0]
 [  0   0 320   0]
 [338   0 173   0]
 [453   0 224   0]
 [298   0 174   0]
 [382   0 158   0]
 [457   0  51   0]
 [215   0 149   0]
 [  0   0 338   0]
 [359   0 161   0]
 [237   0 193   0]
 [  0   0 316   0]
 [218   0 184   0]
 [311   0 200   0]
 [  0   0 268   0]
 [650   0  54   0]
 [372   0 191   0]
 [633   0  55   0]
 [252   0 189   0]
 [  0   0 386   0]
 [665   0  48   0]
 [408   0  54   0]
 [240   0 177   0]
 [413   0  54   0]
 [781   0  53   0]
 [240   0 170   0]
 [623   0  56   0]
 [  0   0 271   0]
 [377   0 153   0]
 [254   0 155   0]
 [265   0 207   0]
 [546   0  57   0]
 [416   0  59   0]
 [  0   0 266   0]
 [389   0 183   0]
 [357   0 146   0]
 [  0   0 311   0]
 [477   0  56   0]
 [243   0 140   0]
 [  0   0 322   0]
 [315   0 156   0]
 [  0   0 305   0]
 [371   0 166   0]
 [  0   0 322   0]
 [293   0 213   0]
 [307   0 203   0]
 [518   0  56   0]
 [225   0 161   0]
 [  0   0 289   0]
 [699   0  57   0]
 [205   0 156   0]
 [  0   0 299   0]
 [225   0 166   0]
 [622   0  47   0]
 [446   0  49   0]
 [354   0 185   0]
 [  0   0 370   0]
 [  0   0 300   0]
 [213   0 173   0]
 [234   0 193   0]
 [634   0  48   0]
 [  0   0 307   0]
 [166   0 212   0]
 [  0   0 313   0]
 [239   0 187   0]
 [683   0  52   0]
 [229   0 144   0]
 [649   0  52   0]
 [197   0 184   0]
 [643   0  54   0]
 [  0   0 317   0]
 [  0   0 307   0]
 [353   0 166   0]
 [359   0 192   0]
 [255   0 168   0]
 [590   0  48   0]
 [287   0 212   0]
 [  0   0 304   0]
 [  0   0 279   0]
 [  0   0 322   0]
 [576   0  51   0]
 [240   0 192   0]
 [56train_ball_trajectory_depth_jointly_ongroundflag.py:275: RuntimeWarning:

invalid value encountered in long_scalars

7   0  46   0]
 [503   0  51   0]
 [209   0 172   0]
 [344   0 196   0]
 [  0   0 297   0]
 [251   0 155   0]
 [362   0 191   0]
 [320   0 144   0]
 [407   0 198   0]
 [  0   0 332   0]
 [  0   0 262   0]
 [257   0 167   0]
 [579   0  49   0]
 [979   0  51   0]
 [359   0 189   0]
 [  0   0 294   0]
 [525   0  51   0]
 [234   0 184   0]
 [357   0 184   0]
 [457   0 143   0]
 [  0   0 306   0]
 [433   0  47   0]]
[[ 277    0    2    0]
 [ 563    0    2    0]
 [ 656    0    2    0]
 [ 387    0    2    0]
 [ 717    0    2    0]
 [ 527    0    2    0]
 [ 292    0    2    0]
 [ 346    0    2    0]
 [ 603    0    2    0]
 [ 579    0    2    0]
 [ 297    0    2    0]
 [ 566    0    2    0]
 [ 578    0    2    0]
 [ 468    0    2    0]
 [ 477    0    2    0]
 [ 581    0    2    0]
 [ 292    0    2    0]
 [ 422    0    2    0]
 [ 522    0    2    0]
 [ 300    0    2    0]
 [ 651    0    2    0]
 [ 575    0    2    0]
 [ 705    0    2    0]
 [ 372    0    2    0]
 [ 481    0    2    0]
 [ 318    0    2    0]
 [ 509    0    2    0]
 [ 675    0    2    0]
 [ 470    0    2    0]
 [ 538    0    2    0]
 [ 506    0    2    0]
 [ 362    0    2    0]
 [ 336    0    2    0]
 [ 518    0    2    0]
 [ 428    0    2    0]
 [ 314    0    2    0]
 [ 400    0    2    0]
 [ 509    0    2    0]
 [ 266    0    2    0]
 [ 702    0    2    0]
 [ 561    0    2    0]
 [ 686    0    2    0]
 [ 439    0    2    0]
 [ 384    0    2    0]
 [ 711    0    2    0]
 [ 460    0    2    0]
 [ 415    0    2    0]
 [ 465    0    2    0]
 [ 832    0    2    0]
 [ 408    0    2    0]
 [ 677    0    2    0]
 [ 269    0    2    0]
 [ 528    0    2    0]
 [ 407    0    2    0]
 [ 470    0    2    0]
 [ 601    0    2    0]
 [ 473    0    2    0]
 [ 264    0    2    0]
 [ 570    0    2    0]
 [ 501    0    2    0]
 [ 309    0    2    0]
 [ 531    0    2    0]
 [ 381    0    2    0]
 [ 320    0    2    0]
 [ 469    0    2    0]
 [ 303    0    2    0]
 [ 535    0    2    0]
 [ 320    0    2    0]
 [ 504    0    2    0]
 [ 508    0    2    0]
 [ 572    0    2    0]
 [ 384    0    2    0]
 [ 287    0    2    0]
 [ 754    0    2    0]
 [ 359    0    2    0]
 [ 297    0    2    0]
 [ 389    0    2    0]
 [ 667    0    2    0]
 [ 493    0    2    0]
 [ 537    0    2    0]
 [ 368    0    2    0]
 [ 298    0    2    0]
 [ 384    0    2    0]
 [ 425    0    2    0]
 [ 680    0    2    0]
 [ 305    0    2    0]
 [ 376    0    2    0]
 [ 311    0    2    0]
 [ 424    0    2    0]
 [ 733    0    2    0]
 [ 371    0    2    0]
 [ 699    0    2    0]
 [ 379    0    2    0]
 [ 695    0    2    0]
 [ 315    0    2    0]
 [ 305    0    2    0]
 [ 517    0    2    0]
 [ 549    0    2    0]
 [ 421    0    2    0]
 [ 636    0    2    0]
 [ 497    0    2    0]
 [ 302    0    2    0]
 [ 277    0    2    0]
 [ 320    0    2    0]
 [ 625    0    2    0]
 [ 430    0    2    0]
 [ 611    0    2    0]
 [ 552    0    2    0]
 [ 379    0    2    0]
 [ 538    0    2    0]
 [ 295    0    2    0]
 [ 404    0    2    0]
 [ 551    0    2    0]
 [ 462    0    2    0]
 [ 603    0    2    0]
 [ 330    0    2    0]
 [ 260    0    2    0]
 [ 422    0    2    0]
 [ 626    0    2    0]
 [1028    0    2    0]
 [ 546    0    2    0]
 [ 292    0    2    0]
 [ 574    0    2    0]
 [ 416    0    2    0]
 [ 539    0    2    0]
 [ 598    0    2    0]
 [ 304    0    2    0]
 [ 478    0    2    0]]
Traceback (most recent call last):
  File "train_ball_trajectory_depth_jointly_ongroundflag.py", line 746, in <module>
    optimizer=optimizer, epoch=epoch, n_epochs=n_epochs, vis_signal=vis_signal, width=width, height=height)
  File "train_ball_trajectory_depth_jointly_ongroundflag.py", line 453, in train
    output_val_depth, (_, _) = model_depth(input_trajectory_val, hidden_depth, cell_state_depth, lengths=input_trajectory_val_lengths)
  File "/home/puntawat/Mint/Work/Vision/working_environment/ball_venv3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/models/Simple/bigru_model_residual_add.py", line 64, in forward
    out_packed, hidden = recurrent_block(out_packed)
  File "/home/puntawat/Mint/Work/Vision/working_environment/ball_venv3/lib/python3.6/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/puntawat/Mint/Work/Vision/working_environment/ball_venv3/lib/python3.6/site-packages/torch/nn/modules/rnn.py", line 713, in forward
    self.check_forward_args(input, hx, batch_sizes)
  File "/home/puntawat/Mint/Work/Vision/working_environment/ball_venv3/lib/python3.6/site-packages/torch/nn/modules/rnn.py", line 180, in check_forward_args
    self.check_input(input, batch_sizes)
  File "/home/puntawat/Mint/Work/Vision/working_environment/ball_venv3/lib/python3.6/site-packages/torch/nn/modules/rnn.py", line 159, in check_input
    self.input_size, input.size(-1)))
RuntimeError: input.size(-1) must be equal to input_size. Expected 4, got 5
