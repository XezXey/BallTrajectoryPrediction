[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/onGroundFlag/train_set
Mixed:   0%|                                                                                                                           | 0/3 [00:00<?, ?it/s]Mixed:  67%|████████████████████████████████████████████████████████████████████████████▋                                      | 2/3 [00:00<00:00, 16.95it/s]Mixed: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 17.19it/s]
===============================Dataset shape===============================
Mixed : (4565,)
===========================================================================
Mixed:   0%|                                                                                                                           | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 23.67it/s]
===============================Dataset shape===============================
Mixed : (631,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 5])
Output batch [0] : batch=torch.Size([128, 959, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 4]), initial position=torch.Size([128, 1, 5])
Output batch [1] : batch=torch.Size([128, 925, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 826, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 5])
Output batch [2] : batch=torch.Size([128, 826, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 969, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 969, 4]), initial position=torch.Size([128, 1, 5])
Output batch [3] : batch=torch.Size([128, 969, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 970, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 5])
Output batch [4] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 917, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 917, 4]), initial position=torch.Size([128, 1, 5])
Output batch [5] : batch=torch.Size([128, 917, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 856, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 4]), initial position=torch.Size([128, 1, 5])
Output batch [6] : batch=torch.Size([128, 856, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 857, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 820, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 4]), initial position=torch.Size([128, 1, 5])
Output batch [7] : batch=torch.Size([128, 820, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 821, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 834, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 5])
Output batch [8] : batch=torch.Size([128, 834, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 835, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 983, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 983, 4]), initial position=torch.Size([128, 1, 5])
Output batch [9] : batch=torch.Size([128, 983, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 984, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [10] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 822, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 822, 4]), initial position=torch.Size([128, 1, 5])
Output batch [11] : batch=torch.Size([128, 822, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 920, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 920, 4]), initial position=torch.Size([128, 1, 5])
Output batch [12] : batch=torch.Size([128, 920, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 921, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 889, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 889, 4]), initial position=torch.Size([128, 1, 5])
Output batch [13] : batch=torch.Size([128, 889, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 890, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 5])
Output batch [14] : batch=torch.Size([128, 898, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 5])
Output batch [15] : batch=torch.Size([128, 875, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 873, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 5])
Output batch [16] : batch=torch.Size([128, 873, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 5])
Output batch [17] : batch=torch.Size([128, 951, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 779, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 779, 4]), initial position=torch.Size([128, 1, 5])
Output batch [18] : batch=torch.Size([128, 779, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 780, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 933, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 5])
Output batch [19] : batch=torch.Size([128, 933, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 934, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 924, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 924, 4]), initial position=torch.Size([128, 1, 5])
Output batch [20] : batch=torch.Size([128, 924, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 868, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 5])
Output batch [21] : batch=torch.Size([128, 868, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 838, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 4]), initial position=torch.Size([128, 1, 5])
Output batch [22] : batch=torch.Size([128, 838, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 839, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 1030, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1030, 4]), initial position=torch.Size([128, 1, 5])
Output batch [23] : batch=torch.Size([128, 1030, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 1031, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 5])
Output batch [24] : batch=torch.Size([128, 885, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 910, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 910, 4]), initial position=torch.Size([128, 1, 5])
Output batch [25] : batch=torch.Size([128, 910, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 942, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 942, 4]), initial position=torch.Size([128, 1, 5])
Output batch [26] : batch=torch.Size([128, 942, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 943, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 961, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 4]), initial position=torch.Size([128, 1, 5])
Output batch [27] : batch=torch.Size([128, 961, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 901, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 5])
Output batch [28] : batch=torch.Size([128, 901, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 902, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 819, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 5])
Output batch [29] : batch=torch.Size([128, 819, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 912, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 4]), initial position=torch.Size([128, 1, 5])
Output batch [30] : batch=torch.Size([128, 912, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 913, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 5])
Output batch [31] : batch=torch.Size([128, 899, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 911, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 911, 4]), initial position=torch.Size([128, 1, 5])
Output batch [32] : batch=torch.Size([128, 911, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 912, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 965, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 965, 4]), initial position=torch.Size([128, 1, 5])
Output batch [33] : batch=torch.Size([128, 965, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 837, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 5])
Output batch [34] : batch=torch.Size([128, 837, 3]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 5]), initial position=torch.Size([128, 1, 5])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - Flag #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=2, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & flag) :  0.01
===> [Minibatch 1/35].........[[203   0 170   0]
 [253   0 179   0]
 [352   0 205   0]
 [249   0 164   0]
 [  0   0 356   0]
 [  0   0 333   0]
 [  0   0 246   0]
 [359   0 179   0]
 [286   0 197   0]
 [  0   0 294   0]
 [654   0  49   0]
 [244   0 200   0]
 [442   0 180   0]
 [329   0 207   0]
 [217   0 166   0]
 [368   0 195   0]
 [358   0 201   0]
 [301   0 208   0]
 [331   0 171   0]
 [  0   0 304   0]
 [182   0 188   0]
 [382   0 189   0]
 [  0   0 331   0]
 [232   0 183   0]
 [  0   0 296   0]
 [298   0 201   0]
 [768   0  48   0]
 [329   0 189   0]
 [560   0  49   0]
 [351   0 204   0]
 [597   0  53   0]
 [  0   0 313   0]
 [  0   0 327   0]
 [396   0 178   0]
 [  0   0 267   0]
 [550   0  48   0]
 [393   0 180   0]
 [325   0 168   0]
 [327   0 216   0]
 [  0   0 313   0]
 [295   0 198   0]
 [781   0  53   0]
 [  0   0 321   0]
 [297   0 196   0]
 [308   0 162   0]
 [  0   0 313   0]
 [  0   0 277   0]
 [282   0 196   0]
 [  0   0 305   0]
 [249   0 208   0]
 [  0   0 321   0]
 [191   0 178   0]
 [291   0 187   0]
 [198   0 165   0]
 [246   0 195   0]
 [672   0  55   0]
 [  0   0 332   0]
 [483   0  45   0]
 [238   0 208   0]
 [258   0 181   0]
 [314   0 181   0]
 [384   0 165   0]
 [  0   0 293   0]
 [316   0 198   0]
 [488   0  49   0]
 [388   0 211   0]
 [  0   0 325   0]
 [  0   0 274   0]
 [  0   0 334   0]
 [  0   0 353   0]
 [  0   0 314   0]
 [  0   0 314   0]
 [  0   0 314   0]
 [252   0 197   0]
 [631   0  61   0]
 [243   0 183   0]
 [  0   0 335   0]
 [455   0 186   0]
 [471   0  49   0]
 [  0   0 295   0]
 [167   0 188   0]
 [  0   0 259   0]
 [444   0  49   0]
 [318   0 207   0]
 [366   0 200   0]
 [439   0 167   0]
 [652   0  52   0]
 [492   0  56   0]
 [348   0 210   0]
 [  0   0 303   0]
 [599   0  55   0]
 [204   0 176   0]
 [  0   0 274   0]
 [268   0 184   0]
 [217   0 190   0]
 [453   0  47   0]
 [645   0  49   0]
 [  0   0 337   0]
 [  0   0 260   0]
 [204   0 148   0]
 [  0   0 249   0]
 [546   0  58   0]
 [388   0 210   0]
 [  0   0 335   0]
 [408   0 211   0]
 [  0   0 292   0]
 [236   0 196   0]
 [357   0  58   0]
 [308   0 183   0]
 [292   0 185   0]
 [591   0  48   0]
 [472   0  51   0]
 [253   0 144   0]
 [270   0 189   0]
 [233   0 157   0]
 [255   0 168   0]
 [519   0  47   0]
 [326   0 172   0]
 [341   0 182   0]
 [  0   0 274   0]
 [730   0  53   0]
 [  0   0 265   0]
 [  0   0 329   0]
 [733   0  52   0]
 [187   0 197   0]
 [245   0 188   0]
 [  0   0 356   0]
 [249   0 192   0]]
train_ball_trajectory_depth_jointly_ongroundflag.py:278: RuntimeWarning:

invalid value encountered in long_scalars

[[  0 371   0   2]
 [  0 430   0   2]
 [  0 555   0   2]
 [  0 411   0   2]
 [  0 354   0   2]
 [  0 331   0   2]
 [  0 244   0   2]
 [  0 536   0   2]
 [  0 481   0   2]
 [  0 292   0   2]
 [  0 701   0   2]
 [  0 442   0   2]
 [  0 620   0   2]
 [  0 534   0   2]
 [  0 381   0   2]
 [  0 561   0   2]
 [  0 557   0   2]
 [  0 507   0   2]
 [  0 500   0   2]
 [  0 302   0   2]
 [  0 368   0   2]
 [  0 569   0   2]
 [  0 329   0   2]
 [  0 413   0   2]
 [  0 294   0   2]
 [  0 497   0   2]
 [  0 814   0   2]
 [  0 516   0   2]
 [  0 607   0   2]
 [  0 553   0   2]
 [  0 648   0   2]
 [  0 311   0   2]
 [  0 325   0   2]
 [  0 572   0   2]
 [  0 265   0   2]
 [  0 596   0   2]
 [  0 571   0   2]
 [  0 491   0   2]
 [  0 541   0   2]
 [  0 311   0   2]
 [  0 491   0   2]
 [  0 832   0   2]
 [  0 319   0   2]
 [  0 491   0   2]
 [  0 468   0   2]
 [  0 311   0   2]
 [  0 275   0   2]
 [  0 476   0   2]
 [  0 303   0   2]
 [  0 455   0   2]
 [  0 319   0   2]
 [  0 367   0   2]
 [  0 476   0   2]
 [  0 361   0   2]
 [  0 439   0   2]
 [  0 725   0   2]
 [  0 330   0   2]
 [  0 526   0   2]
 [  0 444   0   2]
 [  0 437   0   2]
 [  0 493   0   2]
 [  0 547   0   2]
 [  0 291   0   2]
 [  0 512   0   2]
 [  0 535   0   2]
 [  0 597   0   2]
 [  0 323   0   2]
 [  0 272   0   2]
 [  0 332   0   2]
 [  0 351   0   2]
 [  0 312   0   2]
 [  0 312   0   2]
 [  0 312   0   2]
 [  0 447   0   2]
 [  0 690   0   2]
 [  0 424   0   2]
 [  0 333   0   2]
 [  0 639   0   2]
 [  0 518   0   2]
 [  0 293   0   2]
 [  0 353   0   2]
 [  0 257   0   2]
 [  0 491   0   2]
 [  0 523   0   2]
 [  0 564   0   2]
 [  0 604   0   2]
 [  0 702   0   2]
 [  0 546   0   2]
 [  0 556   0   2]
 [  0 301   0   2]
 [  0 652   0   2]
 [  0 378   0   2]
 [  0 272   0   2]
 [  0 450   0   2]
 [  0 405   0   2]
 [  0 498   0   2]
 [  0 692   0   2]
 [  0 335   0   2]
 [  0 258   0   2]
 [  0 350   0   2]
 [  0 247   0   2]
 [  0 602   0   2]
 [  0 596   0   2]
 [  0 333   0   2]
 [  0 617   0   2]
 [  0 290   0   2]
 [  0 430   0   2]
 [  0 413   0   2]
 [  0 489   0   2]
 [  0 475   0   2]
 [  0 637   0   2]
 [  0 521   0   2]
 [  0 395   0   2]
 [  0 457   0   2]
 [  0 388   0   2]
 [  0 421   0   2]
 [  0 564   0   2]
 [  0 496   0   2]
 [  0 521   0   2]
 [  0 272   0   2]
 [  0 781   0   2]
 [  0 263   0   2]
 [  0 327   0   2]
 [  0 783   0   2]
 [  0 382   0   2]
 [  0 431   0   2]
 [  0 354   0   2]
 [  0 439   0   2]]
[[ 704    0  547    0]
 [ 985    0  402    0]
 [ 582    0  349    0]
 [ 540    0  222    0]
 [ 629    0  824    0]
 [ 789    0   92    0]
 [   0    0  156    0]
 [ 387    0  546    0]
 [   0    0  275    0]
 [ 391    0  177    0]
 [   0    0  156    0]
 [   0    0  644    0]
 [ 433    0   22    0]
 [ 371    0  213    0]
 [ 208    0  538    0]
 [1164    0  463    0]
 [   0    0  131    0]
 [1682    0  445    0]
 [ 312    0  482    0]
 [ 930    0  359    0]
 [1099    0  385    0]
 [   0    0  175    0]
 [ 790    0  368    0]
 [ 760    0  542    0]
 [ 856    0  358    0]
 [ 321    0  455    0]
 [ 408    0   29    0]
 [ 812    0  489    0]
 [1283    0  456    0]
 [1513    0  456    0]
 [1455    0  369    0]
 [ 433    0  646    0]
 [   0    0  502    0]
 [1128    0  391    0]
 [ 925    0  584    0]
 [1046    0  491    0]
 [   0    0  424    0]
 [ 545    0  486    0]
 [   0    0  132    0]
 [ 279    0  327    0]
 [1519    0  647    0]
 [ 988    0  685    0]
 [ 775    0  361    0]
 [   0    0  392    0]
 [ 724    0  709    0]
 [ 242    0  479    0]
 [ 289    0  500    0]
 [ 285    0   25    0]
 [   0    0  475    0]
 [ 424    0   25    0]
 [   0    0  601    0]
 [   0    0  170    0]
 [ 173    0  195    0]
 [ 310    0  643    0]
 [ 977    0  667    0]
 [ 634    0  520    0]
 [ 375    0  174    0]
 [ 225    0  817    0]
 [   0    0  134    0]
 [ 205    0   27    0]
 [   0    0  451    0]
 [ 809    0  572    0]
 [ 808    0  567    0]
 [ 301    0  485    0]
 [ 674    0  625    0]
 [ 599    0  375    0]
 [ 211    0  599    0]
 [ 234    0  192    0]
 [ 353    0  682    0]
 [1102    0  390    0]
 [   0    0  472    0]
 [ 305    0  612    0]
 [ 895    0  252    0]
 [ 633    0  692    0]
 [   0    0  489    0]
 [ 395    0  243    0]
 [ 696    0  778    0]
 [ 712    0  441    0]
 [ 341    0   23    0]
 [ 459    0   23    0]
 [ 363    0   22    0]
 [ 410    0   32    0]
 [ 373    0  169    0]
 [ 922    0   73    0]
 [   0    0  147    0]
 [ 281    0   28    0]
 [ 384    0  352    0]
 [ 343    0   30    0]
 [ 196    0   23    0]
 [ 480    0  246    0]
 [ 781    0  542    0]
 [ 256    0   20    0]
 [ 277    0   25    0]
 [   0    0  157    0]
 [ 306    0  210    0]
 [ 858    0  674    0]
 [ 545    0  334    0]
 [ 399    0   49    0]
 [   0    0  308    0]
 [   0    0  135    0]
 [   0    0  194    0]
 [ 780    0  565    0]
 [ 472    0  261    0]
 [ 282    0   24    0]
 [ 690    0  524    0]
 [ 562    0  538    0]
 [ 684    0  352    0]
 [ 792    0  875    0]
 [ 778    0  529    0]
 [   0    0  287    0]
 [ 322    0   22    0]
 [1038    0  778    0]
 [1207    0  700    0]
 [ 191    0  472    0]
 [1463    0  508    0]
 [ 950    0  673    0]
 [   0    0  336    0]
 [ 689    0  517    0]
 [1141    0  254    0]
 [ 794    0  709    0]
 [ 730    0  350    0]
 [ 321    0  644    0]
 [ 731    0  704    0]
 [   0    0  777    0]
 [ 308    0   24    0]
 [   0    0  166    0]
 [ 369    0  428    0]
 [ 877    0  670    0]]
[[   0 1245    0    6]
 [   0 1382    0    5]
 [   0  927    0    4]
 [   0  759    0    3]
 [   0 1446    0    7]
 [   0  878    0    3]
 [   0  155    0    1]
 [   0  929    0    4]
 [   0  273    0    2]
 [   0  566    0    2]
 [   0  155    0    1]
 [   0  640    0    4]
 [   0  454    0    1]
 [   0  582    0    2]
 [   0  742    0    4]
 [   0 1621    0    6]
 [   0  130    0    1]
 [   0 2120    0    7]
 [   0  790    0    4]
 [   0 1284    0    5]
 [   0 1479    0    5]
 [   0  174    0    1]
 [   0 1153    0    5]
 [   0 1297    0    5]
 [   0 1210    0    4]
 [   0  772    0    4]
 [   0  436    0    1]
 [   0 1296    0    5]
 [   0 1733    0    6]
 [   0 1962    0    7]
 [   0 1818    0    6]
 [   0 1074    0    5]
 [   0  499    0    3]
 [   0 1513    0    6]
 [   0 1503    0    6]
 [   0 1531    0    6]
 [   0  421    0    3]
 [   0 1026    0    5]
 [   0  131    0    1]
 [   0  603    0    3]
 [   0 2159    0    7]
 [   0 1666    0    7]
 [   0 1131    0    5]
 [   0  389    0    3]
 [   0 1427    0    6]
 [   0  717    0    4]
 [   0  785    0    4]
 [   0  309    0    1]
 [   0  472    0    3]
 [   0  448    0    1]
 [   0  597    0    4]
 [   0  169    0    1]
 [   0  366    0    2]
 [   0  948    0    5]
 [   0 1637    0    7]
 [   0 1149    0    5]
 [   0  547    0    2]
 [   0 1036    0    6]
 [   0  133    0    1]
 [   0  231    0    1]
 [   0  448    0    3]
 [   0 1375    0    6]
 [   0 1369    0    6]
 [   0  782    0    4]
 [   0 1293    0    6]
 [   0  970    0    4]
 [   0  805    0    5]
 [   0  424    0    2]
 [   0 1030    0    5]
 [   0 1487    0    5]
 [   0  469    0    3]
 [   0  912    0    5]
 [   0 1143    0    4]
 [   0 1319    0    6]
 [   0  486    0    3]
 [   0  636    0    2]
 [   0 1467    0    7]
 [   0 1148    0    5]
 [   0  363    0    1]
 [   0  481    0    1]
 [   0  384    0    1]
 [   0  441    0    1]
 [   0  540    0    2]
 [   0  992    0    3]
 [   0  146    0    1]
 [   0  308    0    1]
 [   0  733    0    3]
 [   0  372    0    1]
 [   0  218    0    1]
 [   0  723    0    3]
 [   0 1318    0    5]
 [   0  275    0    1]
 [   0  301    0    1]
 [   0  156    0    1]
 [   0  514    0    2]
 [   0 1525    0    7]
 [   0  875    0    4]
 [   0  446    0    2]
 [   0  306    0    2]
 [   0  134    0    1]
 [   0  193    0    1]
 [   0 1340    0    5]
 [   0  730    0    3]
 [   0  305    0    1]
 [   0 1209    0    5]
 [   0 1095    0    5]
 [   0 1032    0    4]
 [   0 1660    0    7]
 [   0 1302    0    5]
 [   0  285    0    2]
 [   0  343    0    1]
 [   0 1809    0    7]
 [   0 1900    0    7]
 [   0  659    0    4]
 [   0 1964    0    7]
 [   0 1616    0    7]
 [   0  334    0    2]
 [   0 1201    0    5]
 [   0 1390    0    5]
 [   0 1497    0    6]
 [   0 1076    0    4]
 [   0  960    0    5]
 [   0 1428    0    7]
 [   0  772    0    5]
 [   0  331    0    1]
 [   0  165    0    1]
 [   0  793    0    4]
 [   0 1540    0    7]]
Train Loss : 3545.210, Val Loss : 3308.981
======> Trajectory Loss : 2618.482, Gravity Loss : 5.639, EndOfTrajectory Loss : 1.412, OnGround Loss : 0.685, BelowGroundPenalize Loss : 620.721, Depth Loss : 0.091
===> [Minibatch 2/35].........[[  0   0 303   0]
 [204   0 170   0]
 [371   0 200   0]
 [  0   0 323   0]
 [  0   0 307   0]
 [508   0 192   0]
 [360   0 217   0]
 [858   0  59   0]
 [  0   0 308   0]
 [364   0 159   0]
 [241   0 194   0]
 [331   0 203   0]
 [384   0 179   0]
 [329   0 187   0]
 [467   0 184   0]
 [  0   0 307   0]
 [392   0 190   0]
 [238   0 199   0]
 [195   0 170   0]
 [  0   0 339   0]
 [  0   0 321   0]
 [439   0 221   0]
 [  0   0 278   0]
 [  0   0 310   0]
 [910   0  49   0]
 [  0   0 332   0]
 [  0   0 302   0]
 [529   0  47   0]
 [526   0  55   0]
 [531   0  54   0]
 [258   0 172   0]
 [  0   0 358   0]
 [  0   0 313   0]
 [  0   0 321   0]
 [476   0  59   0]
 [457   0  50   0]
 [213   0 167   0]
 [387   0 189   0]
 [206   0 178   0]
 [375   0 169   0]
 [352   0 180   0]
 [315   0 201   0]
 [  0   0 311   0]
 [589   0  54   0]
 [399   0 191   0]
 [  0   0 320   0]
 [321   0 175   0]
 [  0   0 318   0]
 [255   0 204   0]
 [  0   0 280   0]
 [  0   0 305   0]
 [406   0  47   0]
 [  0   0 286   0]
 [  0   0 302   0]
 [  0   0 338   0]
 [197   0 196   0]
 [697   0  52   0]
 [346   0 179   0]
 [191   0 155   0]
 [636   0  44   0]
 [788   0  49   0]
 [  0   0 298   0]
 [  0   0 294   0]
 [225   0 161   0]
 [512   0 169   0]
 [247   0 169   0]
 [489   0  48   0]
 [315   0 172   0]
 [  0   0 317   0]
 [174   0 183   0]
 [283   0 167   0]
 [332   0 136   0]
 [661   0  58   0]
 [397   0 193   0]
 [  0   0 280   0]
 [257   0 188   0]
 [  0   0 281   0]
 [268   0 175   0]
 [482   0 204   0]
 [469   0 184   0]
 [  0   0 330   0]
 [400   0 185   0]
 [  0   0 264   0]
 [834   0  50   0]
 [447   0  56   0]
 [318   0 169   0]
 [  0   0 337   0]
 [  0   0 332   0]
 [  0   0 384   0]
 [801   0  55   0]
 [263   0 142   0]
 [  0   0 336   0]
 [  0   0 300   0]
 [257   0 199   0]
 [212   0 178   0]
 [318   0 186   0]
 [685   0  50   0]
 [427   0  49   0]
 [  0   0 364   0]
 [708   0  53   0]
 [441   0 135   0]
 [751   0  53   0]
 [  0   0 294   0]
 [436   0 181   0]
 [358   0 160   0]
 [370   0 195   0]
 [303   0 171   0]
 [214   0 178   0]
 [605   0  48   0]
 [  0   0 262   0]
 [293   0 174   0]
 [256   0 180   0]
 [192   0 220   0]
 [658   0  56   0]
 [350   0 161   0]
 [332   0 208   0]
 [303   0 176   0]
 [476   0  48   0]
 [753   0  55   0]
 [273   0 209   0]
 [  0   0 311   0]
 [509   0  50   0]
 [246   0 164   0]
 [350   0 213   0]
 [170   0 201   0]
 [  0   0 310   0]
 [322   0 159   0]
 [440   0  49   0]]
[[  0 301   0   2]
 [  0 372   0   2]
 [  0 569   0   2]
 [  0 321   0   2]
 [  0 305   0   2]
 [  0 698   0   2]
 [  0 575   0   2]
 [  0 915   0   2]
 [  0 306   0   2]
 [  0 521   0   2]
 [  0 433   0   2]
 [  0 532   0   2]
 [  0 561   0   2]
 [  0 514   0   2]
 [  0 649   0   2]
 [  0 305   0   2]
 [  0 580   0   2]
 [  0 435   0   2]
 [  0 363   0   2]
 [  0 337   0   2]
 [  0 319   0   2]
 [  0 658   0   2]
 [  0 276   0   2]
 [  0 308   0   2]
 [  0 957   0   2]
 [  0 330   0   2]
 [  0 300   0   2]
 [  0 574   0   2]
 [  0 579   0   2]
 [  0 583   0   2]
 [  0 428   0   2]
 [  0 356   0   2]
 [  0 311   0   2]
 [  0 319   0   2]
 [  0 533   0   2]
 [  0 505   0   2]
 [  0 378   0   2]
 [  0 574   0   2]
 [  0 382   0   2]
 [  0 542   0   2]
 [  0 530   0   2]
 [  0 514   0   2]
 [  0 309   0   2]
 [  0 641   0   2]
 [  0 588   0   2]
 [  0 318   0   2]
 [  0 494   0   2]
 [  0 316   0   2]
 [  0 457   0   2]
 [  0 278   0   2]
 [  0 303   0   2]
 [  0 451   0   2]
 [  0 284   0   2]
 [  0 300   0   2]
 [  0 336   0   2]
 [  0 391   0   2]
 [  0 747   0   2]
 [  0 523   0   2]
 [  0 344   0   2]
 [  0 678   0   2]
 [  0 835   0   2]
 [  0 296   0   2]
 [  0 292   0   2]
 [  0 384   0   2]
 [  0 679   0   2]
 [  0 414   0   2]
 [  0 535   0   2]
 [  0 485   0   2]
 [  0 315   0   2]
 [  0 355   0   2]
 [  0 448   0   2]
 [  0 466   0   2]
 [  0 717   0   2]
 [  0 588   0   2]
 [  0 278   0   2]
 [  0 443   0   2]
 [  0 279   0   2]
 [  0 441   0   2]
 [  0 684   0   2]
 [  0 651   0   2]
 [  0 328   0   2]
 [  0 583   0   2]
 [  0 262   0   2]
 [  0 882   0   2]
 [  0 501   0   2]
 [  0 485   0   2]
 [  0 335   0   2]
 [  0 330   0   2]
 [  0 382   0   2]
 [  0 854   0   2]
 [  0 403   0   2]
 [  0 334   0   2]
 [  0 298   0   2]
 [  0 454   0   2]
 [  0 388   0   2]
 [  0 502   0   2]
 [  0 733   0   2]
 [  0 474   0   2]
 [  0 362   0   2]
 [  0 759   0   2]
 [  0 574   0   2]
 [  0 802   0   2]
 [  0 292   0   2]
 [  0 615   0   2]
 [  0 516   0   2]
 [  0 563   0   2]
 [  0 472   0   2]
 [  0 390   0   2]
 [  0 651   0   2]
 [  0 260   0   2]
 [  0 465   0   2]
 [  0 434   0   2]
 [  0 410   0   2]
 [  0 712   0   2]
 [  0 509   0   2]
 [  0 538   0   2]
 [  0 477   0   2]
 [  0 522   0   2]
 [  0 806   0   2]
 [  0 480   0   2]
 [  0 309   0   2]
 [  0 557   0   2]
 [  0 408   0   2]
 [  0 561   0   2]
 [  0 369   0   2]
 [  0 308   0   2]
 [  0 479   0   2]
 [  0 487   0   2]]
