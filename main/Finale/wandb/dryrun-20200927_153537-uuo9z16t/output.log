==============================================Features==============================================
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'g-9']
Selected features :  [6, 7, 8]
1. input_col =  [3, 4, 6, 7, 8]
2. input_startpos_col =  [3, 4, 5, 6, 7, 8]
3. output_col =  [5, 6, 7, 8]
4. output_startpos_col =  [0, 1, 2, 6, 7, 8]
5. output_xyz_col =  [0, 1, 2, 6, 7, 8]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                   | 0/3 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 26.13it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 26.07it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                   | 0/1 [00:00<?, ?it/s]Mixed: 100%|███████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 12.05it/s]
===============================Dataset shape===============================
Mixed : (4535,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 990, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 5]), initial position=torch.Size([128, 1, 6])
gt batch [0] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 899, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 5]), initial position=torch.Size([128, 1, 6])
gt batch [1] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 841, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 5]), initial position=torch.Size([128, 1, 6])
gt batch [2] : batch=torch.Size([128, 841, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 794, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 5]), initial position=torch.Size([128, 1, 6])
gt batch [3] : batch=torch.Size([128, 794, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 845, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 5]), initial position=torch.Size([128, 1, 6])
gt batch [4] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 951, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 5]), initial position=torch.Size([128, 1, 6])
gt batch [5] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 904, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 5]), initial position=torch.Size([128, 1, 6])
gt batch [6] : batch=torch.Size([128, 904, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 922, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 5]), initial position=torch.Size([128, 1, 6])
gt batch [7] : batch=torch.Size([128, 922, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 932, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 5]), initial position=torch.Size([128, 1, 6])
gt batch [8] : batch=torch.Size([128, 932, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 846, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 5]), initial position=torch.Size([128, 1, 6])
gt batch [9] : batch=torch.Size([128, 846, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 852, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 5]), initial position=torch.Size([128, 1, 6])
gt batch [10] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 809, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 5]), initial position=torch.Size([128, 1, 6])
gt batch [11] : batch=torch.Size([128, 809, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 853, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 5]), initial position=torch.Size([128, 1, 6])
gt batch [12] : batch=torch.Size([128, 853, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 818, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 5]), initial position=torch.Size([128, 1, 6])
gt batch [13] : batch=torch.Size([128, 818, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 786, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 786, 5]), initial position=torch.Size([128, 1, 6])
gt batch [14] : batch=torch.Size([128, 786, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 836, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 5]), initial position=torch.Size([128, 1, 6])
gt batch [15] : batch=torch.Size([128, 836, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 1002, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 5]), initial position=torch.Size([128, 1, 6])
gt batch [16] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 992, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 5]), initial position=torch.Size([128, 1, 6])
gt batch [17] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 939, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 5]), initial position=torch.Size([128, 1, 6])
gt batch [18] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 915, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 5]), initial position=torch.Size([128, 1, 6])
gt batch [19] : batch=torch.Size([128, 915, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 817, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 5]), initial position=torch.Size([128, 1, 6])
gt batch [20] : batch=torch.Size([128, 817, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 894, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 5]), initial position=torch.Size([128, 1, 6])
gt batch [21] : batch=torch.Size([128, 894, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 883, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 5]), initial position=torch.Size([128, 1, 6])
gt batch [22] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 966, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 5]), initial position=torch.Size([128, 1, 6])
gt batch [23] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 953, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 5]), initial position=torch.Size([128, 1, 6])
gt batch [24] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 962, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 5]), initial position=torch.Size([128, 1, 6])
gt batch [25] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 925, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 5]), initial position=torch.Size([128, 1, 6])
gt batch [26] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 816, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 5]), initial position=torch.Size([128, 1, 6])
gt batch [27] : batch=torch.Size([128, 816, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 863, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 5]), initial position=torch.Size([128, 1, 6])
gt batch [28] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 858, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 5]), initial position=torch.Size([128, 1, 6])
gt batch [29] : batch=torch.Size([128, 858, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 898, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 5]), initial position=torch.Size([128, 1, 6])
gt batch [30] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 876, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 5]), initial position=torch.Size([128, 1, 6])
gt batch [31] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 949, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 5]), initial position=torch.Size([128, 1, 6])
gt batch [32] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 844, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 5]), initial position=torch.Size([128, 1, 6])
gt batch [33] : batch=torch.Size([128, 844, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 959, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 5]), initial position=torch.Size([128, 1, 6])
gt batch [34] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 819, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 5]), initial position=torch.Size([128, 1, 6])
gt batch [35] : batch=torch.Size([128, 819, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 870, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 5]), initial position=torch.Size([128, 1, 6])
gt batch [36] : batch=torch.Size([128, 870, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 900, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 6])
gt batch [37] : batch=torch.Size([128, 900, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 918, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 5]), initial position=torch.Size([128, 1, 6])
gt batch [38] : batch=torch.Size([128, 918, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 885, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 5]), initial position=torch.Size([128, 1, 6])
gt batch [39] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 860, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 5]), initial position=torch.Size([128, 1, 6])
gt batch [40] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 867, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 5]), initial position=torch.Size([128, 1, 6])
gt batch [41] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 819, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 5]), initial position=torch.Size([128, 1, 6])
gt batch [42] : batch=torch.Size([128, 819, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 796, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 5]), initial position=torch.Size([128, 1, 6])
gt batch [43] : batch=torch.Size([128, 796, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 797, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(5, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 1/44].........Train Loss : 2160.606, Val Loss : 1808.667
======> Trajectory Loss : 1949.500, Gravity Loss : 3.674, EndOfTrajectory Loss : 1.467, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.061
Opening in existing browser session.
[0927/223550.751460:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[0927/223551.101006:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[0927/223551.447082:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 2/44].........Train Loss : 1785.307, Val Loss : 1666.681
======> Trajectory Loss : 1579.267, Gravity Loss : 3.613, EndOfTrajectory Loss : 1.450, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.057
===> [Minibatch 3/44].........Train Loss : 1488.298, Val Loss : 1531.740
======> Trajectory Loss : 1290.468, Gravity Loss : 2.867, EndOfTrajectory Loss : 1.433, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.052
===> [Minibatch 4/44].........Train Loss : 1699.435, Val Loss : 1401.192
======> Trajectory Loss : 1507.864, Gravity Loss : 3.002, EndOfTrajectory Loss : 1.411, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.047
