[#]Training : Trajectory Estimation
Mixed:   0%|                                                                              | 0/3 [00:00<?, ?it/s]Mixed: 100%|██████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 31.77it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                              | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|██████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 22.56it/s]
Mixed : (1850,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 959, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 849, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 4]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 817, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 867, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 871, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 871, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 881, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 4]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 899, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 824, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 824, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 787, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 787, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 4]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 990, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 794, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 794, 4]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 794, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 928, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 4]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 953, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 900, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 858, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 4]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 858, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 809, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 809, 4]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 809, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 810, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 4]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 951, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 764, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 764, 4]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 764, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 765, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 874, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 4]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 4]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 844, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 825, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 4]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 1002, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 753, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 753, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 754, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 949, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 4]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 4]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 992, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 868, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 960, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 960, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 962, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 4]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 925, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 932, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/44].........(tensor([156, 305], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[936.6732, 573.7828,   1.0000,   1.0000],
        [745.3013, 495.4423,   1.0000,   1.0000]], device='cuda:0')
(tensor([178, 586], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[604.8845, 317.8983,   1.0000,   1.0000],
        [912.6641, 455.3503,   1.0000,   1.0000]], device='cuda:0')
(tensor([271, 397], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[738.9177, 613.4747,   1.0000,   1.0000],
        [844.2944, 557.3741,   1.0000,   1.0000]], device='cuda:0')
(tensor([233, 677], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[6.9200e+02, 4.8789e+02, 1.0000e+00, 1.0000e+00],
        [1.1142e+03, 6.5789e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([143, 268], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[823.5221, 573.3984,   1.0000,   1.0000],
        [934.0417, 512.3286,   1.0000,   1.0000]], device='cuda:0')
(tensor([131, 484], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[889.8997, 586.9958,   1.0000,   1.0000],
        [513.3094, 451.2501,   1.0000,   1.0000]], device='cuda:0')
(tensor([434, 688], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[652.8044, 565.7188,   1.0000,   1.0000],
        [858.9407, 409.7965,   1.0000,   1.0000]], device='cuda:0')
(tensor([154, 401], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[650.2051, 522.6716,   1.0000,   1.0000],
        [876.2714, 658.7415,   1.0000,   1.0000]], device='cuda:0')
(tensor([386, 660], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[684.6938, 279.3974,   1.0000,   1.0000],
        [974.0227, 398.4754,   1.0000,   1.0000]], device='cuda:0')
(tensor([374, 777], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[678.3657, 656.4048,   1.0000,   1.0000],
        [939.2236, 464.2219,   1.0000,   1.0000]], device='cuda:0')
(tensor([268, 707], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[857.7888, 409.8185,   1.0000,   1.0000],
        [532.1980, 562.8535,   1.0000,   1.0000]], device='cuda:0')
(tensor([246, 366], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[875.4373, 463.6617,   1.0000,   1.0000],
        [777.5438, 526.6078,   1.0000,   1.0000]], device='cuda:0')
(tensor([273, 432], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[679.9266, 384.4126,   1.0000,   1.0000],
        [904.0452, 513.3890,   1.0000,   1.0000]], device='cuda:0')
(tensor([177, 316], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[674.7968, 594.4732,   1.0000,   1.0000],
        [770.3484, 495.7475,   1.0000,   1.0000]], device='cuda:0')
(tensor([196, 320], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[543.0622, 633.6378,   1.0000,   1.0000],
        [634.0422, 582.8210,   1.0000,   1.0000]], device='cuda:0')
(tensor([174, 588], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.2336e+02, 4.1921e+02, 1.0000e+00, 1.0000e+00],
        [1.0693e+03, 5.2846e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([389, 550], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[721.2955, 353.4914,   1.0000,   1.0000],
        [904.2769, 523.8936,   1.0000,   1.0000]], device='cuda:0')
(tensor([300, 552], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[902.7521, 371.2757,   1.0000,   1.0000],
        [720.7585, 573.0545,   1.0000,   1.0000]], device='cuda:0')
(tensor([146, 282], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[890.0245, 418.0797,   1.0000,   1.0000],
        [767.6322, 518.4919,   1.0000,   1.0000]], device='cuda:0')
(tensor([322, 496], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[572.3606, 298.2107,   1.0000,   1.0000],
        [893.4763, 475.3348,   1.0000,   1.0000]], device='cuda:0')
(tensor([177, 524], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0473e+03, 6.4999e+02, 1.0000e+00, 1.0000e+00],
        [8.0138e+02, 4.6425e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([117, 272], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[957.5802, 501.0800,   1.0000,   1.0000],
        [753.1879, 595.7493,   1.0000,   1.0000]], device='cuda:0')
(tensor([137, 302], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[736.7411, 576.2661,   1.0000,   1.0000],
        [914.0722, 404.8982,   1.0000,   1.0000]], device='cuda:0')
(tensor([227, 368], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[932.6837, 619.1834,   1.0000,   1.0000],
        [814.7986, 531.2052,   1.0000,   1.0000]], device='cuda:0')
(tensor([139, 310], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[924.0637, 493.5041,   1.0000,   1.0000],
        [645.4743, 597.3286,   1.0000,   1.0000]], device='cuda:0')
(tensor([144, 516], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[869.1699, 556.1514,   1.0000,   1.0000],
        [634.2936, 354.8042,   1.0000,   1.0000]], device='cuda:0')
(tensor([466, 847], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[966.8661, 291.0162,   1.0000,   1.0000],
        [601.2838, 559.1351,   1.0000,   1.0000]], device='cuda:0')
(tensor([303, 438], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[569.2867, 505.6388,   1.0000,   1.0000],
        [714.0229, 579.9959,   1.0000,   1.0000]], device='cuda:0')
(tensor([168, 318], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[953.3239, 385.5534,   1.0000,   1.0000],
        [776.4210, 512.5067,   1.0000,   1.0000]], device='cuda:0')
(tensor([236, 424], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.8678e+02, 4.1166e+02, 1.0000e+00, 1.0000e+00],
        [1.1391e+03, 5.6688e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([171, 337], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[942.7493, 642.3765,   1.0000,   1.0000],
        [712.1761, 539.8252,   1.0000,   1.0000]], device='cuda:0')
(tensor([146, 271], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[890.6683, 498.0921,   1.0000,   1.0000],
        [796.5597, 568.7866,   1.0000,   1.0000]], device='cuda:0')
(tensor([203, 394], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[851.6130, 472.0083,   1.0000,   1.0000],
        [655.5873, 689.2927,   1.0000,   1.0000]], device='cuda:0')
(tensor([162, 341], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[716.8591, 540.0426,   1.0000,   1.0000],
        [987.1895, 323.5148,   1.0000,   1.0000]], device='cuda:0')
(tensor([181, 325], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[984.2388, 681.8162,   1.0000,   1.0000],
        [845.9968, 615.2989,   1.0000,   1.0000]], device='cuda:0')
(tensor([241, 414], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[913.2227, 568.9614,   1.0000,   1.0000],
        [670.7919, 389.6570,   1.0000,   1.0000]], device='cuda:0')
(tensor([269, 419], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0862e+03, 3.2909e+02, 1.0000e+00, 1.0000e+00],
        [8.4344e+02, 4.2989e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([143, 292], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[786.7584, 460.5744,   1.0000,   1.0000],
        [996.7791, 529.6623,   1.0000,   1.0000]], device='cuda:0')
(tensor([320, 481], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[681.2228, 430.7444,   1.0000,   1.0000],
        [946.1235, 520.5955,   1.0000,   1.0000]], device='cuda:0')
(tensor([179, 419], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[922.0864, 526.4506,   1.0000,   1.0000],
        [804.1946, 393.5172,   1.0000,   1.0000]], device='cuda:0')
(tensor([262, 430], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[982.7955, 512.2371,   1.0000,   1.0000],
        [766.6344, 644.8796,   1.0000,   1.0000]], device='cuda:0')
(tensor([159, 339], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.0670e+02, 5.5418e+02, 1.0000e+00, 1.0000e+00],
        [1.0542e+03, 4.3136e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([160, 311], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[970.0121, 600.6553,   1.0000,   1.0000],
        [878.3679, 464.4402,   1.0000,   1.0000]], device='cuda:0')
(tensor([173, 350], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.4217e+02, 4.7147e+02, 1.0000e+00, 1.0000e+00],
        [1.0386e+03, 6.4367e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([265, 413], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[986.4077, 617.6549,   1.0000,   1.0000],
        [806.3736, 548.6725,   1.0000,   1.0000]], device='cuda:0')
(tensor([229, 535], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.8743e+02, 6.2855e+02, 1.0000e+00, 1.0000e+00],
        [1.0141e+03, 4.9231e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([149, 321], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[709.1147, 489.2348,   1.0000,   1.0000],
        [886.4396, 654.5333,   1.0000,   1.0000]], device='cuda:0')
(tensor([361, 751], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.0850e+02, 5.5775e+02, 1.0000e+00, 1.0000e+00],
        [1.3060e+03, 2.7115e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([148, 468], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[880.3885, 483.8455,   1.0000,   1.0000],
        [762.9587, 673.4238,   1.0000,   1.0000]], device='cuda:0')
(tensor([188, 580], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[486.7780, 336.4965,   1.0000,   1.0000],
        [890.5248, 558.4517,   1.0000,   1.0000]], device='cuda:0')
(tensor([137, 309], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.4050e+02, 4.2582e+02, 1.0000e+00, 1.0000e+00],
        [1.0888e+03, 5.7154e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([316, 502], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.1540e+03, 4.8633e+02, 1.0000e+00, 1.0000e+00],
        [8.4690e+02, 6.5779e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([385, 526], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[937.1909, 236.6174,   1.0000,   1.0000],
        [775.3652, 377.9803,   1.0000,   1.0000]], device='cuda:0')
(tensor([130, 592], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[956.6400, 520.2457,   1.0000,   1.0000],
        [607.7529, 711.6030,   1.0000,   1.0000]], device='cuda:0')
(tensor([345, 509], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.6953e+02, 3.5996e+02, 1.0000e+00, 1.0000e+00],
        [1.0334e+03, 4.8653e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([151, 311], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[972.0903, 417.1143,   1.0000,   1.0000],
        [723.5416, 521.0374,   1.0000,   1.0000]], device='cuda:0')
(tensor([178, 533], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[679.9230, 532.5817,   1.0000,   1.0000],
        [897.9728, 261.0243,   1.0000,   1.0000]], device='cuda:0')
(tensor([166, 345], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0702e+03, 4.6511e+02, 1.0000e+00, 1.0000e+00],
        [8.3621e+02, 6.4361e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([266, 697], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[721.7141, 345.4806,   1.0000,   1.0000],
        [978.5026, 563.5333,   1.0000,   1.0000]], device='cuda:0')
(tensor([497, 655], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.1022e+03, 1.7512e+02, 1.0000e+00, 1.0000e+00],
        [8.8567e+02, 3.9064e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([174, 322], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[927.4271, 622.5436,   1.0000,   1.0000],
        [770.0650, 532.9368,   1.0000,   1.0000]], device='cuda:0')
(tensor([149, 455], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.8656e+02, 4.3351e+02, 1.0000e+00, 1.0000e+00],
        [1.0457e+03, 5.8865e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([250, 440], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[901.8665, 460.8115,   1.0000,   1.0000],
        [620.0897, 648.5740,   1.0000,   1.0000]], device='cuda:0')
(tensor([256, 463], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[759.0075, 518.7360,   1.0000,   1.0000],
        [901.8381, 618.1691,   1.0000,   1.0000]], device='cuda:0')
(tensor([312, 463], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[691.1716, 403.1484,   1.0000,   1.0000],
        [879.6498, 522.0948,   1.0000,   1.0000]], device='cuda:0')
(tensor([159, 318], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[642.0512, 467.5098,   1.0000,   1.0000],
        [891.1143, 558.8495,   1.0000,   1.0000]], device='cuda:0')
(tensor([465, 620], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0250e+03, 6.6652e+02, 1.0000e+00, 1.0000e+00],
        [8.5805e+02, 5.7903e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([130, 485], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[843.3383, 461.7737,   1.0000,   1.0000],
        [518.0319, 639.6621,   1.0000,   1.0000]], device='cuda:0')
(tensor([296, 477], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[684.9933, 478.1225,   1.0000,   1.0000],
        [945.4835, 637.9327,   1.0000,   1.0000]], device='cuda:0')
(tensor([353, 476], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[774.2787, 489.5256,   1.0000,   1.0000],
        [860.7842, 561.2199,   1.0000,   1.0000]], device='cuda:0')
(tensor([163, 295], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[639.3517, 413.7087,   1.0000,   1.0000],
        [757.5525, 511.7014,   1.0000,   1.0000]], device='cuda:0')
(tensor([291, 616], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[6.9556e+02, 6.3910e+02, 1.0000e+00, 1.0000e+00],
        [1.0128e+03, 4.2606e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([146, 276], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[908.2254, 530.0729,   1.0000,   1.0000],
        [819.9843, 434.3495,   1.0000,   1.0000]], device='cuda:0')
(tensor([214, 510], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[781.8372, 471.8503,   1.0000,   1.0000],
        [937.4803, 605.3066,   1.0000,   1.0000]], device='cuda:0')
(tensor([141, 286], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[678.5908, 488.0382,   1.0000,   1.0000],
        [880.5099, 545.6115,   1.0000,   1.0000]], device='cuda:0')
(tensor([357, 635], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0779e+03, 6.2802e+02, 1.0000e+00, 1.0000e+00],
        [7.9835e+02, 5.0258e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([295, 534], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0180e+03, 5.0787e+02, 1.0000e+00, 1.0000e+00],
        [8.2483e+02, 6.3423e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([173, 470], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[722.0966, 572.8848,   1.0000,   1.0000],
        [878.0776, 422.1348,   1.0000,   1.0000]], device='cuda:0')
(tensor([143, 295], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[773.0914, 546.1052,   1.0000,   1.0000],
        [955.8975, 423.9194,   1.0000,   1.0000]], device='cuda:0')
(tensor([160, 355], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.9755e+02, 3.9507e+02, 1.0000e+00, 1.0000e+00],
        [1.1389e+03, 5.9211e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([162, 406], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[733.1469, 509.8243,   1.0000,   1.0000],
        [943.9109, 599.3555,   1.0000,   1.0000]], device='cuda:0')
(tensor([144, 292], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[948.6019, 437.5629,   1.0000,   1.0000],
        [745.5491, 525.7511,   1.0000,   1.0000]], device='cuda:0')
(tensor([156, 410], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[891.4363, 471.4223,   1.0000,   1.0000],
        [750.8113, 591.2736,   1.0000,   1.0000]], device='cuda:0')
(tensor([114, 352], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[761.1643, 561.2290,   1.0000,   1.0000],
        [901.2701, 400.2617,   1.0000,   1.0000]], device='cuda:0')
(tensor([167, 317], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[870.8875, 508.6929,   1.0000,   1.0000],
        [697.6340, 600.8150,   1.0000,   1.0000]], device='cuda:0')
(tensor([403, 561], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[930.2611, 431.9062,   1.0000,   1.0000],
        [708.5832, 547.1540,   1.0000,   1.0000]], device='cuda:0')
(tensor([154, 524], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.2507e+02, 5.5406e+02, 1.0000e+00, 1.0000e+00],
        [1.2075e+03, 3.3708e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([130, 479], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.2854e+02, 5.1248e+02, 1.0000e+00, 1.0000e+00],
        [1.0252e+03, 6.1556e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([343, 712], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.1696e+03, 5.0130e+02, 1.0000e+00, 1.0000e+00],
        [8.6830e+02, 6.6272e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([142, 554], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.8019e+02, 5.3122e+02, 1.0000e+00, 1.0000e+00],
        [1.3030e+03, 1.6237e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([404, 574], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[979.4980, 569.7059,   1.0000,   1.0000],
        [735.8464, 420.3779,   1.0000,   1.0000]], device='cuda:0')
(tensor([239, 437], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[859.6330, 590.4244,   1.0000,   1.0000],
        [486.9570, 336.5413,   1.0000,   1.0000]], device='cuda:0')
(tensor([305, 434], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[722.5281, 619.4496,   1.0000,   1.0000],
        [814.2191, 547.7213,   1.0000,   1.0000]], device='cuda:0')
(tensor([409, 772], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[523.6239, 568.8734,   1.0000,   1.0000],
        [773.2549, 344.1284,   1.0000,   1.0000]], device='cuda:0')
(tensor([271, 592], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[922.2516, 500.8494,   1.0000,   1.0000],
        [730.7114, 663.5817,   1.0000,   1.0000]], device='cuda:0')
(tensor([296, 493], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0175e+03, 5.4939e+02, 1.0000e+00, 1.0000e+00],
        [7.0971e+02, 2.5906e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([284, 594], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[634.1533, 639.6255,   1.0000,   1.0000],
        [878.3428, 421.4780,   1.0000,   1.0000]], device='cuda:0')
(tensor([150, 288], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[682.1500, 551.9091,   1.0000,   1.0000],
        [818.1033, 465.4299,   1.0000,   1.0000]], device='cuda:0')
(tensor([162, 514], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[934.4376, 502.4631,   1.0000,   1.0000],
        [567.1384, 643.7547,   1.0000,   1.0000]], device='cuda:0')
(tensor([227, 389], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[958.2447, 554.9928,   1.0000,   1.0000],
        [723.1912, 441.2009,   1.0000,   1.0000]], device='cuda:0')
(tensor([147, 312], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[895.2192, 500.9899,   1.0000,   1.0000],
        [708.5890, 638.2924,   1.0000,   1.0000]], device='cuda:0')
(tensor([334, 704], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[6.5817e+02, 5.1940e+02, 1.0000e+00, 1.0000e+00],
        [1.0462e+03, 7.3603e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([148, 415], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[930.4435, 517.5911,   1.0000,   1.0000],
        [748.8154, 634.2623,   1.0000,   1.0000]], device='cuda:0')
(tensor([145, 283], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[845.0652, 626.3278,   1.0000,   1.0000],
        [699.6372, 563.0258,   1.0000,   1.0000]], device='cuda:0')
(tensor([213, 546], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[317.4672, 250.8415,   1.0000,   1.0000],
        [677.8803, 424.7839,   1.0000,   1.0000]], device='cuda:0')
(tensor([192, 333], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[745.4266, 422.5110,   1.0000,   1.0000],
        [894.9747, 523.0363,   1.0000,   1.0000]], device='cuda:0')
(tensor([182, 413], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0269e+03, 3.9067e+02, 1.0000e+00, 1.0000e+00],
        [8.6844e+02, 4.8990e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([200, 587], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[953.2621, 469.7067,   1.0000,   1.0000],
        [666.2812, 575.0686,   1.0000,   1.0000]], device='cuda:0')
(tensor([244, 630], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[891.6301, 483.5913,   1.0000,   1.0000],
        [695.6578, 662.2917,   1.0000,   1.0000]], device='cuda:0')
(tensor([196, 457], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.0858e+03, 6.5726e+02, 1.0000e+00, 1.0000e+00],
        [9.2988e+02, 5.3826e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([159, 489], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[915.4755, 410.9495,   1.0000,   1.0000],
        [602.2813, 559.2394,   1.0000,   1.0000]], device='cuda:0')
(tensor([135, 294], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[773.3553, 452.3593,   1.0000,   1.0000],
        [999.6949, 554.8674,   1.0000,   1.0000]], device='cuda:0')
(tensor([133, 304], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[885.7760, 525.9048,   1.0000,   1.0000],
        [594.2725, 370.9589,   1.0000,   1.0000]], device='cuda:0')
(tensor([142, 492], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[889.9776, 445.2370,   1.0000,   1.0000],
        [549.1987, 695.2369,   1.0000,   1.0000]], device='cuda:0')
(tensor([227, 380], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[786.2482, 468.6747,   1.0000,   1.0000],
        [973.5881, 571.6306,   1.0000,   1.0000]], device='cuda:0')
(tensor([363, 690], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[711.1195, 358.8696,   1.0000,   1.0000],
        [986.5659, 545.9856,   1.0000,   1.0000]], device='cuda:0')
(tensor([181, 379], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[577.8686, 623.6229,   1.0000,   1.0000],
        [727.9614, 574.1829,   1.0000,   1.0000]], device='cuda:0')
(tensor([343, 596], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.7502e+02, 3.5204e+02, 1.0000e+00, 1.0000e+00],
        [1.0326e+03, 4.5999e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([206, 663], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.2493e+02, 5.5823e+02, 1.0000e+00, 1.0000e+00],
        [1.3646e+03, 2.6745e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([165, 489], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.5005e+02, 6.6483e+02, 1.0000e+00, 1.0000e+00],
        [1.0581e+03, 4.7980e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([170, 442], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[670.4485, 495.1693,   1.0000,   1.0000],
        [881.0891, 656.6311,   1.0000,   1.0000]], device='cuda:0')
(tensor([183, 620], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[1.1012e+03, 3.1744e+02, 1.0000e+00, 1.0000e+00],
        [6.5489e+02, 5.3506e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([156, 541], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.0349e+02, 5.1951e+02, 1.0000e+00, 1.0000e+00],
        [1.0844e+03, 6.2968e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([117, 337], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[923.1768, 437.8716,   1.0000,   1.0000],
        [819.6111, 541.9475,   1.0000,   1.0000]], device='cuda:0')
(tensor([120, 473], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[849.9958, 555.5968,   1.0000,   1.0000],
        [653.2366, 322.7767,   1.0000,   1.0000]], device='cuda:0')
(tensor([132, 305], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[858.8080, 473.7043,   1.0000,   1.0000],
        [619.4263, 615.7576,   1.0000,   1.0000]], device='cuda:0')
(tensor([250, 454], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[7.6092e+02, 6.0493e+02, 1.0000e+00, 1.0000e+00],
        [1.1752e+03, 3.5016e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
(tensor([124, 561], device='cuda:0'), tensor([0, 0], device='cuda:0'))
tensor([[8.2106e+02, 5.3956e+02, 1.0000e+00, 1.0000e+00],
        [1.3688e+03, 2.7390e+02, 1.0000e+00, 1.0000e+00]], device='cuda:0')
tensor([[  0],
        [156],
        [305],
        [847]], device='cuda:0')
