==============================================Features==============================================
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'g-9']
Selected features :  [6, 7, 8]
1. input_col =  [3, 4, 6, 7, 8]
2. input_startpos_col =  [3, 4, 5, 6, 7, 8]
3. output_col =  [5, 6, 7, 8]
4. output_startpos_col =  [0, 1, 2, 6, 7, 8]
5. output_xyz_col =  [0, 1, 2, 6, 7, 8]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 29.27it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 29.20it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                                | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 11.71it/s]
===============================Dataset shape===============================
Mixed : (4535,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 871, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 5]), initial position=torch.Size([128, 1, 6])
gt batch [0] : batch=torch.Size([128, 871, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 951, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 5]), initial position=torch.Size([128, 1, 6])
gt batch [1] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 853, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 5]), initial position=torch.Size([128, 1, 6])
gt batch [2] : batch=torch.Size([128, 853, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 867, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 5]), initial position=torch.Size([128, 1, 6])
gt batch [3] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 825, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 5]), initial position=torch.Size([128, 1, 6])
gt batch [4] : batch=torch.Size([128, 825, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 990, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 5]), initial position=torch.Size([128, 1, 6])
gt batch [5] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 826, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 5]), initial position=torch.Size([128, 1, 6])
gt batch [6] : batch=torch.Size([128, 826, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 966, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 5]), initial position=torch.Size([128, 1, 6])
gt batch [7] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 892, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 5]), initial position=torch.Size([128, 1, 6])
gt batch [8] : batch=torch.Size([128, 892, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 851, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 5]), initial position=torch.Size([128, 1, 6])
gt batch [9] : batch=torch.Size([128, 851, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 872, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 5]), initial position=torch.Size([128, 1, 6])
gt batch [10] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 852, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 5]), initial position=torch.Size([128, 1, 6])
gt batch [11] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 959, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 5]), initial position=torch.Size([128, 1, 6])
gt batch [12] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 842, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 5]), initial position=torch.Size([128, 1, 6])
gt batch [13] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 894, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 5]), initial position=torch.Size([128, 1, 6])
gt batch [14] : batch=torch.Size([128, 894, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 960, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 5]), initial position=torch.Size([128, 1, 6])
gt batch [15] : batch=torch.Size([128, 960, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 885, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 5]), initial position=torch.Size([128, 1, 6])
gt batch [16] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 842, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 5]), initial position=torch.Size([128, 1, 6])
gt batch [17] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 852, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 5]), initial position=torch.Size([128, 1, 6])
gt batch [18] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 837, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 5]), initial position=torch.Size([128, 1, 6])
gt batch [19] : batch=torch.Size([128, 837, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 838, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 863, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 5]), initial position=torch.Size([128, 1, 6])
gt batch [20] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 928, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 5]), initial position=torch.Size([128, 1, 6])
gt batch [21] : batch=torch.Size([128, 928, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 872, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 5]), initial position=torch.Size([128, 1, 6])
gt batch [22] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 992, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 5]), initial position=torch.Size([128, 1, 6])
gt batch [23] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 823, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 5]), initial position=torch.Size([128, 1, 6])
gt batch [24] : batch=torch.Size([128, 823, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 922, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 5]), initial position=torch.Size([128, 1, 6])
gt batch [25] : batch=torch.Size([128, 922, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 953, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 5]), initial position=torch.Size([128, 1, 6])
gt batch [26] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 962, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 5]), initial position=torch.Size([128, 1, 6])
gt batch [27] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 830, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 5]), initial position=torch.Size([128, 1, 6])
gt batch [28] : batch=torch.Size([128, 830, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 874, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 5]), initial position=torch.Size([128, 1, 6])
gt batch [29] : batch=torch.Size([128, 874, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 1002, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 5]), initial position=torch.Size([128, 1, 6])
gt batch [30] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 875, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 5]), initial position=torch.Size([128, 1, 6])
gt batch [31] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 845, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 5]), initial position=torch.Size([128, 1, 6])
gt batch [32] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 932, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 5]), initial position=torch.Size([128, 1, 6])
gt batch [33] : batch=torch.Size([128, 932, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 891, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 5]), initial position=torch.Size([128, 1, 6])
gt batch [34] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 862, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 5]), initial position=torch.Size([128, 1, 6])
gt batch [35] : batch=torch.Size([128, 862, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 883, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 5]), initial position=torch.Size([128, 1, 6])
gt batch [36] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 842, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 5]), initial position=torch.Size([128, 1, 6])
gt batch [37] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 900, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 5]), initial position=torch.Size([128, 1, 6])
gt batch [38] : batch=torch.Size([128, 900, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 898, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 5]), initial position=torch.Size([128, 1, 6])
gt batch [39] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 891, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 5]), initial position=torch.Size([128, 1, 6])
gt batch [40] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 744, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 744, 5]), initial position=torch.Size([128, 1, 6])
gt batch [41] : batch=torch.Size([128, 744, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 782, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 5]), initial position=torch.Size([128, 1, 6])
gt batch [42] : batch=torch.Size([128, 782, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 783, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 827, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 5]), initial position=torch.Size([128, 1, 6])
gt batch [43] : batch=torch.Size([128, 827, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
{'flag': {'input_size': 2, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [2, 32, 32, 32, 32], 'fc_size': [32, 16, 8, 4, 1]}, 'depth': {'input_size': 5, 'output_size': 1, 'hidden_dim': 32, 'n_layers': 1, 'n_stack': 4, 'recurrent_stacked': [5, 32, 32, 32, 32], 'fc_size': [32, 16, 8, 4, 1]}}
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
GRUResidual(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True)
    (1): GRU(32, 32, batch_first=True)
    (2): GRU(32, 32, batch_first=True)
    (3): GRU(32, 32, batch_first=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
GRUResidual(
  (recurrent_blocks): ModuleList(
    (0): GRU(5, 32, batch_first=True)
    (1): GRU(32, 32, batch_first=True)
    (2): GRU(32, 32, batch_first=True)
    (3): GRU(32, 32, batch_first=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 1/44].........Train Loss : 187.324, Val Loss : 161.362
======> Trajectory Loss : 0.050, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.379, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.049
Opening in existing browser session.
[0927/234230.375019:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[0927/234230.718096:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
Opening in existing browser session.
[0927/234231.052592:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 2/44].........Train Loss : 161.286, Val Loss : 146.960
======> Trajectory Loss : 0.024, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.380, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.023
===> [Minibatch 3/44].........Train Loss : 147.807, Val Loss : 145.697
======> Trajectory Loss : 0.010, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.378, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.010
===> [Minibatch 4/44].........Train Loss : 146.062, Val Loss : 141.588
======> Trajectory Loss : 0.009, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.372, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.009
===> [Minibatch 5/44].........Train Loss : 141.641, Val Loss : 141.283
======> Trajectory Loss : 0.005, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.371, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.005
===> [Minibatch 6/44].........Train Loss : 141.242, Val Loss : 139.728
======> Trajectory Loss : 0.005, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.366, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.005
===> [Minibatch 7/44].........Train Loss : 139.483, Val Loss : 136.633
======> Trajectory Loss : 0.005, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.350, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.005
===> [Minibatch 8/44].........Train Loss : 136.519, Val Loss : 133.704
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.331, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 9/44].........Train Loss : 133.529, Val Loss : 130.478
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.307, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 10/44].........Train Loss : 130.356, Val Loss : 125.706
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.272, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 11/44].........Train Loss : 125.310, Val Loss : 121.194
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.227, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 12/44].........Train Loss : 121.067, Val Loss : 116.245
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.188, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 13/44].........Train Loss : 116.738, Val Loss : 110.626
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.140, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 14/44].........Train Loss : 110.347, Val Loss : 106.921
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.077, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 15/44].........Train Loss : 105.901, Val Loss : 96.106
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.038, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 16/44].........Train Loss : 96.102, Val Loss : 91.370
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.940, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 17/44].........Train Loss : 92.473, Val Loss : 83.657
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.902, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
