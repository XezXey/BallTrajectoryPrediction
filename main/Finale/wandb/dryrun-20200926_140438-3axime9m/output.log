[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                         | 0/3 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 31.55it/s]
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                                         | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed : (1850,)
===========================================================================
Mixed: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 21.63it/s]
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 847, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 4]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 847, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 848, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 4]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 992, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 817, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 817, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 874, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 4]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 829, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 904, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 866, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 866, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 922, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 4]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 4]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 925, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 4]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 4]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 990, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 881, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 4]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 928, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 4]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 959, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 953, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 960, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 960, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 827, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 827, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 4]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 918, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 868, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 867, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 853, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 900, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 4]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 4]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 1002, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 892, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 830, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 951, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 833, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 4]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 828, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 4]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 831, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 831, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 962, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 898, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 870, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 870, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 882, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 775, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 775, 4]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 775, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 776, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 1/44].........Train Loss : 237.394, Val Loss : 48584.898
======> Trajectory Loss : 0.092, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.465, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.091
Opening in existing browser session.
[0926/210447.260339:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 2/44].........Train Loss : 226.870, Val Loss : 43468.016
======> Trajectory Loss : 0.083, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.451, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.082
===> [Minibatch 3/44].........Train Loss : 217.380, Val Loss : 37704.547
======> Trajectory Loss : 0.075, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.433, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.074
===> [Minibatch 4/44].........Train Loss : 205.855, Val Loss : 33286.410
======> Trajectory Loss : 0.065, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.423, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.063
===> [Minibatch 5/44].........Train Loss : 197.355, Val Loss : 29128.105
======> Trajectory Loss : 0.058, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.400, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.057
===> [Minibatch 6/44].........Train Loss : 188.163, Val Loss : 25190.375
======> Trajectory Loss : 0.051, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.379, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.050
===> [Minibatch 7/44].........Train Loss : 176.186, Val Loss : 21475.213
======> Trajectory Loss : 0.045, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.318, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.044
===> [Minibatch 8/44].........Train Loss : 164.245, Val Loss : 17987.588
======> Trajectory Loss : 0.037, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.275, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.037
===> [Minibatch 9/44].........Train Loss : 153.085, Val Loss : 14749.851
======> Trajectory Loss : 0.032, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.212, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.032
===> [Minibatch 10/44].........Train Loss : 143.372, Val Loss : 11760.878
======> Trajectory Loss : 0.028, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.163, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.027
===> [Minibatch 11/44].........Train Loss : 134.614, Val Loss : 8990.762
======> Trajectory Loss : 0.023, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.123, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.022
===> [Minibatch 12/44].........Train Loss : 125.662, Val Loss : 6427.363
======> Trajectory Loss : 0.018, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.079, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.018
===> [Minibatch 13/44].........Train Loss : 114.424, Val Loss : 4133.369
======> Trajectory Loss : 0.014, Gravity Loss : 0.000, EndOfTrajectory Loss : 1.011, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.013
===> [Minibatch 14/44].........Train Loss : 106.596, Val Loss : 2222.526
======> Trajectory Loss : 0.009, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.978, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.009
===> [Minibatch 15/44].........Train Loss : 103.501, Val Loss : 780.686
======> Trajectory Loss : 0.006, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.972, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.006
===> [Minibatch 16/44].........Train Loss : 95.192, Val Loss : 205.022
======> Trajectory Loss : 0.004, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.912, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.004
===> [Minibatch 17/44].........Train Loss : 92.717, Val Loss : 223.613
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.898, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 18/44].........Train Loss : 92.098, Val Loss : 404.943
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.892, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 19/44].........Train Loss : 91.099, Val Loss : 499.848
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.879, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 20/44].........Train Loss : 89.902, Val Loss : 208.558
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.866, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 21/44].........Train Loss : 89.575, Val Loss : 471.107
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.868, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 22/44].........Train Loss : 87.840, Val Loss : 448.617
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.849, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 23/44].........Train Loss : 87.247, Val Loss : 170.274
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.842, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 24/44].........Train Loss : 87.367, Val Loss : 489.812
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.849, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 25/44].........Train Loss : 86.381, Val Loss : 341.134
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.832, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 26/44].........Train Loss : 90.934, Val Loss : 162.268
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.882, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 27/44].........Train Loss : 83.892, Val Loss : 592.083
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.815, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 28/44].........Train Loss : 84.014, Val Loss : 253.943
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.808, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 29/44].........Train Loss : 86.389, Val Loss : 219.762
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.839, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 30/44].........Train Loss : 82.230, Val Loss : 371.410
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.796, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 31/44].........Train Loss : 81.782, Val Loss : 163.928
======> Trajectory Loss : 0.003, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.789, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.003
===> [Minibatch 32/44].........Train Loss : 81.239, Val Loss : 279.947
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.790, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 33/44].........Train Loss : 80.137, Val Loss : 365.085
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.779, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 34/44].........Train Loss : 79.772, Val Loss : 135.071
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.773, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 35/44].........Train Loss : 78.865, Val Loss : 223.481
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.768, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 36/44].........Train Loss : 78.777, Val Loss : 220.778
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.765, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 37/44].........Train Loss : 78.383, Val Loss : 139.472
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.762, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 38/44].........Train Loss : 79.018, Val Loss : 321.982
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.772, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 39/44].........Train Loss : 76.747, Val Loss : 172.499
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.747, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 40/44].........Train Loss : 81.170, Val Loss : 166.155
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.794, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 41/44].........Train Loss : 78.353, Val Loss : 200.542
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.766, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 42/44].........Train Loss : 75.769, Val Loss : 134.087
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.739, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 43/44].........Train Loss : 74.560, Val Loss : 269.778
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.729, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 44/44].........Train Loss : 73.841, Val Loss : 206.776
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.722, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
[#]Finish Epoch : 1/100000.........Train loss : 111.818, Val loss : 7135.286
[+++]Saving the best model checkpoint : Prev loss 20000000000.000 > Curr loss 7135.286
[+++]Saving the best model checkpoint to :  ../../model_checkpoints/test/Decumulate//Decumulate_best.pth
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 2/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/44].........Train Loss : 73.608, Val Loss : 142.137
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.720, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
Opening in existing browser session.
[0926/210620.421860:ERROR:nacl_helper_linux.cc(308)] NaCl helper process running without a sandbox!
Most likely you need to configure your SUID sandbox correctly
/home/puntawat/Mint/Work/Vision/BallTrajectory/BallTrajectoryProject_Branches/end_of_trajectory_flag/BallTrajectoryPrediction/main/Finale/loss.py:95: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 2/44].........Train Loss : 74.120, Val Loss : 174.149
======> Trajectory Loss : 0.001, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.727, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.001
===> [Minibatch 3/44].........Train Loss : 71.645, Val Loss : 130.055
======> Trajectory Loss : 0.002, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.701, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.002
===> [Minibatch 4/44].........Train Loss : 78.589, Val Loss : 168.504
======> Trajectory Loss : 0.001, Gravity Loss : 0.000, EndOfTrajectory Loss : 0.772, BelowGroundPenalize Loss : 0.000, Depth Loss : 0.001
