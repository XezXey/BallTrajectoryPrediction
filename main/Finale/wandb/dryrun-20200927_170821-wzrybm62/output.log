==============================================Features==============================================
Available features :  ['x-0', 'y-1', 'z-2', 'u-3', 'v-4', 'd-5', 'eot-6', 'og-7', 'rad-8', 'g-9']
Selected features :  [6, 7, 8]
1. input_col =  [3, 4, 6, 7, 8]
2. input_startpos_col =  [3, 4, 5, 6, 7, 8]
3. output_col =  [5, 6, 7, 8]
4. output_startpos_col =  [0, 1, 2, 6, 7, 8]
5. output_xyz_col =  [0, 1, 2, 6, 7, 8]
====================================================================================================
[#]Training : Trajectory Estimation
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 30.83it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                                | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 12.61it/s]
===============================Dataset shape===============================
Mixed : (4535,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 990, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 5]), initial position=torch.Size([128, 1, 6])
gt batch [0] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 918, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 5]), initial position=torch.Size([128, 1, 6])
gt batch [1] : batch=torch.Size([128, 918, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 745, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 745, 5]), initial position=torch.Size([128, 1, 6])
gt batch [2] : batch=torch.Size([128, 745, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 746, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 872, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 5]), initial position=torch.Size([128, 1, 6])
gt batch [3] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 827, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 5]), initial position=torch.Size([128, 1, 6])
gt batch [4] : batch=torch.Size([128, 827, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 925, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 5]), initial position=torch.Size([128, 1, 6])
gt batch [5] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 962, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 5]), initial position=torch.Size([128, 1, 6])
gt batch [6] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 867, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 5]), initial position=torch.Size([128, 1, 6])
gt batch [7] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 863, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 5]), initial position=torch.Size([128, 1, 6])
gt batch [8] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 762, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 762, 5]), initial position=torch.Size([128, 1, 6])
gt batch [9] : batch=torch.Size([128, 762, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 763, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 812, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 5]), initial position=torch.Size([128, 1, 6])
gt batch [10] : batch=torch.Size([128, 812, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 813, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 850, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 5]), initial position=torch.Size([128, 1, 6])
gt batch [11] : batch=torch.Size([128, 850, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 849, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 5]), initial position=torch.Size([128, 1, 6])
gt batch [12] : batch=torch.Size([128, 849, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 773, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 773, 5]), initial position=torch.Size([128, 1, 6])
gt batch [13] : batch=torch.Size([128, 773, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 774, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 992, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 5]), initial position=torch.Size([128, 1, 6])
gt batch [14] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 922, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 5]), initial position=torch.Size([128, 1, 6])
gt batch [15] : batch=torch.Size([128, 922, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 817, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 5]), initial position=torch.Size([128, 1, 6])
gt batch [16] : batch=torch.Size([128, 817, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 1002, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 5]), initial position=torch.Size([128, 1, 6])
gt batch [17] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 959, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 5]), initial position=torch.Size([128, 1, 6])
gt batch [18] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 960, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 5]), initial position=torch.Size([128, 1, 6])
gt batch [19] : batch=torch.Size([128, 960, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 851, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 5]), initial position=torch.Size([128, 1, 6])
gt batch [20] : batch=torch.Size([128, 851, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 842, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 5]), initial position=torch.Size([128, 1, 6])
gt batch [21] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 899, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 5]), initial position=torch.Size([128, 1, 6])
gt batch [22] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 883, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 5]), initial position=torch.Size([128, 1, 6])
gt batch [23] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 951, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 5]), initial position=torch.Size([128, 1, 6])
gt batch [24] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 874, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 5]), initial position=torch.Size([128, 1, 6])
gt batch [25] : batch=torch.Size([128, 874, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 860, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 5]), initial position=torch.Size([128, 1, 6])
gt batch [26] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 870, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 5]), initial position=torch.Size([128, 1, 6])
gt batch [27] : batch=torch.Size([128, 870, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 939, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 5]), initial position=torch.Size([128, 1, 6])
gt batch [28] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 966, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 5]), initial position=torch.Size([128, 1, 6])
gt batch [29] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 816, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 5]), initial position=torch.Size([128, 1, 6])
gt batch [30] : batch=torch.Size([128, 816, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 885, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 5]), initial position=torch.Size([128, 1, 6])
gt batch [31] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 824, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 5]), initial position=torch.Size([128, 1, 6])
gt batch [32] : batch=torch.Size([128, 824, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 872, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 5]), initial position=torch.Size([128, 1, 6])
gt batch [33] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 828, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 5]), initial position=torch.Size([128, 1, 6])
gt batch [34] : batch=torch.Size([128, 828, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 915, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 5]), initial position=torch.Size([128, 1, 6])
gt batch [35] : batch=torch.Size([128, 915, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 845, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 5]), initial position=torch.Size([128, 1, 6])
gt batch [36] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 904, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 5]), initial position=torch.Size([128, 1, 6])
gt batch [37] : batch=torch.Size([128, 904, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 871, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 5]), initial position=torch.Size([128, 1, 6])
gt batch [38] : batch=torch.Size([128, 871, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 883, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 5]), initial position=torch.Size([128, 1, 6])
gt batch [39] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 882, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 5]), initial position=torch.Size([128, 1, 6])
gt batch [40] : batch=torch.Size([128, 882, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 949, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 5]), initial position=torch.Size([128, 1, 6])
gt batch [41] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 858, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 858, 5]), initial position=torch.Size([128, 1, 6])
gt batch [42] : batch=torch.Size([128, 858, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 859, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 830, 5]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 5]), initial position=torch.Size([128, 1, 6])
gt batch [43] : batch=torch.Size([128, 830, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 6]), initial position=torch.Size([128, 1, 6])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Traceback (most recent call last):
  File "train_ball_trajectory_depth.py", line 304, in <module>
    model_flag, model_depth, model_cfg = utils_func.get_model(model_arch=args.model_arch, features_cols=features_cols)
TypeError: get_model() missing 1 required positional argument: 'args'
