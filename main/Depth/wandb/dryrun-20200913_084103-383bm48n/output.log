[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/No_noise/train_set
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed:  67%|██████████████████████████████████████████████████████████▋                             | 2/3 [00:00<00:00, 14.03it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 12.73it/s]
Mixed : (7434,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 19.27it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00, 19.23it/s]
===============================Dataset shape===============================
Mixed : (2000,)
===========================================================================
======================================================Summary Batch (batch_size = 512)=========================================================================
Input batch [0] : batch=torch.Size([512, 904, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 904, 3]), initial position=torch.Size([512, 1, 4])
Output batch [0] : batch=torch.Size([512, 905, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 905, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([512, 920, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 920, 3]), initial position=torch.Size([512, 1, 4])
Output batch [1] : batch=torch.Size([512, 921, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 921, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([512, 942, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 942, 3]), initial position=torch.Size([512, 1, 4])
Output batch [2] : batch=torch.Size([512, 943, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 943, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([512, 891, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 891, 3]), initial position=torch.Size([512, 1, 4])
Output batch [3] : batch=torch.Size([512, 892, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 892, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([512, 953, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 953, 3]), initial position=torch.Size([512, 1, 4])
Output batch [4] : batch=torch.Size([512, 954, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 954, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([512, 901, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 901, 3]), initial position=torch.Size([512, 1, 4])
Output batch [5] : batch=torch.Size([512, 902, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 902, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([512, 919, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 919, 3]), initial position=torch.Size([512, 1, 4])
Output batch [6] : batch=torch.Size([512, 920, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 920, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([512, 857, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 857, 3]), initial position=torch.Size([512, 1, 4])
Output batch [7] : batch=torch.Size([512, 858, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 858, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([512, 896, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 896, 3]), initial position=torch.Size([512, 1, 4])
Output batch [8] : batch=torch.Size([512, 897, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 897, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([512, 925, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 925, 3]), initial position=torch.Size([512, 1, 4])
Output batch [9] : batch=torch.Size([512, 926, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 926, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([512, 932, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 932, 3]), initial position=torch.Size([512, 1, 4])
Output batch [10] : batch=torch.Size([512, 933, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 933, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([512, 967, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 967, 3]), initial position=torch.Size([512, 1, 4])
Output batch [11] : batch=torch.Size([512, 968, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 968, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([512, 939, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 939, 3]), initial position=torch.Size([512, 1, 4])
Output batch [12] : batch=torch.Size([512, 940, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 940, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([512, 876, 3]), lengths=torch.Size([512]), mask=torch.Size([512, 876, 3]), initial position=torch.Size([512, 1, 4])
Output batch [13] : batch=torch.Size([512, 877, 2]), lengths=torch.Size([512]), mask=torch.Size([512, 877, 4]), initial position=torch.Size([512, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>Load checkpoint with Optimizer state, Decay and Scheduler state
[#] Loading ... lastest
[#] Checkpoint not found...
