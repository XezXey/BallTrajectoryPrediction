[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/No_noise/train_set
Mixed:   0%|                                                                                                | 0/3 [00:00<?, ?it/s]Mixed:  33%|█████████████████████████████▎                                                          | 1/3 [00:00<00:00,  6.50it/s]Mixed:  67%|██████████████████████████████████████████████████████████▋                             | 2/3 [00:00<00:00,  6.51it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00,  6.05it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00,  6.01it/s]
Mixed : (7434,)
===========================================================================
Mixed:   0%|                                                                                                | 0/2 [00:00<?, ?it/s]Mixed:  50%|████████████████████████████████████████████                                            | 1/2 [00:00<00:00,  7.91it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  8.06it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████| 2/2 [00:00<00:00,  8.16it/s]
===============================Dataset shape===============================
Mixed : (2000,)
===========================================================================
======================================================Summary Batch (batch_size = 256)=========================================================================
Input batch [0] : batch=torch.Size([256, 829, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 829, 3]), initial position=torch.Size([256, 1, 4])
Output batch [0] : batch=torch.Size([256, 830, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 830, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([256, 848, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 848, 3]), initial position=torch.Size([256, 1, 4])
Output batch [1] : batch=torch.Size([256, 849, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 849, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([256, 942, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 942, 3]), initial position=torch.Size([256, 1, 4])
Output batch [2] : batch=torch.Size([256, 943, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 943, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([256, 896, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 896, 3]), initial position=torch.Size([256, 1, 4])
Output batch [3] : batch=torch.Size([256, 897, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 897, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([256, 916, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 916, 3]), initial position=torch.Size([256, 1, 4])
Output batch [4] : batch=torch.Size([256, 917, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 917, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([256, 845, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 845, 3]), initial position=torch.Size([256, 1, 4])
Output batch [5] : batch=torch.Size([256, 846, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 846, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([256, 937, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 937, 3]), initial position=torch.Size([256, 1, 4])
Output batch [6] : batch=torch.Size([256, 938, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 938, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([256, 882, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 882, 3]), initial position=torch.Size([256, 1, 4])
Output batch [7] : batch=torch.Size([256, 883, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 883, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([256, 857, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 857, 3]), initial position=torch.Size([256, 1, 4])
Output batch [8] : batch=torch.Size([256, 858, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 858, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([256, 874, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 874, 3]), initial position=torch.Size([256, 1, 4])
Output batch [9] : batch=torch.Size([256, 875, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 875, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([256, 896, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 896, 3]), initial position=torch.Size([256, 1, 4])
Output batch [10] : batch=torch.Size([256, 897, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 897, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([256, 883, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 883, 3]), initial position=torch.Size([256, 1, 4])
Output batch [11] : batch=torch.Size([256, 884, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 884, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([256, 953, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 953, 3]), initial position=torch.Size([256, 1, 4])
Output batch [12] : batch=torch.Size([256, 954, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 954, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([256, 939, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 939, 3]), initial position=torch.Size([256, 1, 4])
Output batch [13] : batch=torch.Size([256, 940, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 940, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([256, 870, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 870, 3]), initial position=torch.Size([256, 1, 4])
Output batch [14] : batch=torch.Size([256, 871, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 871, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([256, 875, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 875, 3]), initial position=torch.Size([256, 1, 4])
Output batch [15] : batch=torch.Size([256, 876, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 876, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([256, 829, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 829, 3]), initial position=torch.Size([256, 1, 4])
Output batch [16] : batch=torch.Size([256, 830, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 830, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([256, 905, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 905, 3]), initial position=torch.Size([256, 1, 4])
Output batch [17] : batch=torch.Size([256, 906, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 906, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([256, 932, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 932, 3]), initial position=torch.Size([256, 1, 4])
Output batch [18] : batch=torch.Size([256, 933, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 933, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([256, 863, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 863, 3]), initial position=torch.Size([256, 1, 4])
Output batch [19] : batch=torch.Size([256, 864, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 864, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([256, 888, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 888, 3]), initial position=torch.Size([256, 1, 4])
Output batch [20] : batch=torch.Size([256, 889, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 889, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([256, 919, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 919, 3]), initial position=torch.Size([256, 1, 4])
Output batch [21] : batch=torch.Size([256, 920, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 920, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([256, 925, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 925, 3]), initial position=torch.Size([256, 1, 4])
Output batch [22] : batch=torch.Size([256, 926, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 926, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([256, 920, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 920, 3]), initial position=torch.Size([256, 1, 4])
Output batch [23] : batch=torch.Size([256, 921, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 921, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([256, 854, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 854, 3]), initial position=torch.Size([256, 1, 4])
Output batch [24] : batch=torch.Size([256, 855, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 855, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([256, 928, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 928, 3]), initial position=torch.Size([256, 1, 4])
Output batch [25] : batch=torch.Size([256, 929, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 929, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([256, 967, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 967, 3]), initial position=torch.Size([256, 1, 4])
Output batch [26] : batch=torch.Size([256, 968, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 968, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([256, 907, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 907, 3]), initial position=torch.Size([256, 1, 4])
Output batch [27] : batch=torch.Size([256, 908, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 908, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([256, 912, 3]), lengths=torch.Size([256]), mask=torch.Size([256, 912, 3]), initial position=torch.Size([256, 1, 4])
Output batch [28] : batch=torch.Size([256, 913, 2]), lengths=torch.Size([256]), mask=torch.Size([256, 913, 4]), initial position=torch.Size([256, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(3, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/10000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate :  0.005
===> [Minibatch 1/29].........tensor(6258.9404, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(29932.2266, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 11123.114, Val Loss : 53253.375
===> [Minibatch 2/29].........tensor(5236.3765, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(25603.3672, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 9290.947, Val Loss : 45548.641
===> [Minibatch 3/29].........tensor(3624.0891, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(18779.7344, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 6438.372, Val Loss : 33415.094
===> [Minibatch 4/29].........tensor(2231.5310, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(9777.5762, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 3958.299, Val Loss : 17402.279
===> [Minibatch 5/29].........tensor(412.3159, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(1624.8501, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 765.252, Val Loss : 2887.612
===> [Minibatch 6/29].........tensor(3.2764, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(6.8614, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 419.115, Val Loss : 2151.579
===> [Minibatch 7/29].........tensor(nan, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(nan, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : nan, Val Loss : nan
===> [Minibatch 8/29].........tensor(nan, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(nan, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : nan, Val Loss : nan
===> [Minibatch 9/29].........tensor(2.6302, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(3.3522, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 308.428, Val Loss : 1421.480
===> [Minibatch 10/29].........tensor(21.4249, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(18.4607, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 61.857, Val Loss : 85.556
===> [Minibatch 11/29].........tensor(18.5105, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(23.6713, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 45.792, Val Loss : 54.593
===> [Minibatch 12/29].........tensor(10.8696, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(8.4873, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 38.309, Val Loss : 51.839
===> [Minibatch 13/29].........tensor(2.0980, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(3.4146, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 86.786, Val Loss : 372.369
===> [Minibatch 14/29].........tensor(2.5066, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(2.6397, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 99.579, Val Loss : 458.558
===> [Minibatch 15/29].........tensor(3.0090, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(3.4423, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 54.670, Val Loss : 195.058
===> [Minibatch 16/29].........tensor(13.2073, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(17.0085, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 41.398, Val Loss : 48.005
===> [Minibatch 17/29].........tensor(27.9039, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(72.6025, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 69.134, Val Loss : 147.657
===> [Minibatch 18/29].........tensor(11.2472, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(20.6223, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 40.838, Val Loss : 53.892
===> [Minibatch 19/29].........tensor(3.1055, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(2.5416, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 33.341, Val Loss : 80.603
===> [Minibatch 20/29].........tensor(1.9185, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(1.5108, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 33.535, Val Loss : 105.973
===> [Minibatch 21/29].........tensor(2.1337, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(3.0254, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 23.106, Val Loss : 36.234
===> [Minibatch 22/29].........tensor(3.5245, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(2.3434, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 25.096, Val Loss : 47.651
===> [Minibatch 23/29].........tensor(nan, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(1.1933, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : nan, Val Loss : 144.479
===> [Minibatch 24/29].........tensor(1.4542, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(2.1313, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 34.181, Val Loss : 117.259
===> [Minibatch 25/29].........tensor(9.2191, device='cuda:0', grad_fn=<MeanBackward0>)
tensor(6.3729, device='cuda:0', grad_fn=<MeanBackward0>)
Train Loss : 31.580, Val Loss : 32.260
