[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/Latent/train_set
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 31.78it/s]
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed : (1850,)
===========================================================================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 18.46it/s]
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 4]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 1002, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 846, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 846, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 4]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 990, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 881, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 4]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 865, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 865, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 851, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 4]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 851, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 752, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 752, 4]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 752, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 753, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 4]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 900, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 900, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 901, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 898, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 831, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 831, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 777, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 777, 4]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 777, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 778, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 918, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 4]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 829, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 836, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 953, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 866, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 866, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 951, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 824, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 824, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 4]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 870, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 870, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 4]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 992, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 819, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 819, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 820, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 828, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 828, 4]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 828, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 899, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 932, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 855, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 855, 4]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 855, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 856, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 949, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 904, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 928, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 4]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
train_ball_trajectory_depth_jointly_latent_optim.py:276: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 1/44].........recurrent_blocks.0.weight_ih_l0 tensor([[-1.1625e-02,  3.3759e-03],
        [ 5.8399e-05,  1.5420e-03],
        [-2.8504e-04, -1.0536e-03],
        [ 1.2066e-02, -8.7546e-03],
        [-6.0274e-03, -3.6723e-02],
        [ 8.9127e-03, -2.8864e-03],
        [-1.1134e-03,  3.0321e-03],
        [ 2.5622e-03, -1.6298e-02],
        [ 1.6200e-02, -5.7634e-03],
        [ 1.4565e-02, -6.3453e-03],
        [-1.2976e-02, -1.4080e-03],
        [ 7.1356e-03, -1.3374e-03],
        [ 3.5280e-04, -6.8358e-03],
        [-3.1856e-04,  1.5010e-03],
        [-1.9210e-02,  1.0942e-02],
        [ 4.2440e-03,  1.3043e-03],
        [ 1.0520e-02, -8.2739e-03],
        [ 6.9229e-05,  3.0891e-03],
        [ 1.6564e-03,  5.6347e-04],
        [ 8.3461e-03,  8.0223e-03],
        [-1.1843e-02, -2.5775e-03],
        [ 4.5689e-03, -4.1600e-03],
        [-8.4298e-03,  3.6301e-03],
        [ 1.1112e-02, -2.0493e-03],
        [-2.3521e-04, -4.5716e-04],
        [-4.8000e-03, -1.0491e-02],
        [-2.1682e-03, -4.6437e-03],
        [ 3.6015e-03, -1.1551e-02],
        [ 1.6906e-03, -2.8181e-03],
        [ 2.1148e-04,  9.8329e-04],
        [-5.9298e-03,  3.4393e-03],
        [-9.3313e-05, -1.3702e-03],
        [-8.8039e-03, -1.0274e-02],
        [-2.3929e-04, -1.0874e-03],
        [ 3.1817e-03, -3.9625e-03],
        [-2.8873e-04,  2.2999e-03],
        [ 1.0862e-03, -9.9435e-03],
        [-2.6035e-04, -1.3230e-03],
        [-2.2530e-03, -3.3856e-03],
        [-1.5941e-03,  1.6369e-03],
        [ 7.5648e-03,  2.6689e-03],
        [ 7.8482e-04, -1.7461e-03],
        [-6.4076e-03, -3.9524e-04],
        [-4.1294e-04,  6.5110e-04],
        [ 5.4499e-03,  8.5572e-05],
        [ 8.1861e-04,  2.7024e-03],
        [ 1.1212e-03,  3.1049e-03],
        [-1.8264e-03,  9.3488e-04],
        [ 2.5092e-03,  5.5127e-03],
        [ 1.3445e-03,  5.2240e-04],
        [-4.8452e-03,  2.2566e-03],
        [ 8.1281e-04,  5.0366e-04],
        [-1.2955e-03,  2.8943e-03],
        [-2.0899e-04, -3.3434e-03],
        [ 5.4822e-03,  4.7293e-03],
        [ 7.7538e-03,  2.7023e-03],
        [ 1.6733e-03, -1.2500e-03],
        [-7.9966e-04,  7.8889e-03],
        [ 2.7704e-03, -9.4660e-04],
        [ 1.4915e-03, -1.0960e-03],
        [ 6.8862e-03, -8.5558e-03],
        [-2.1071e-03, -3.2274e-05],
        [ 7.3961e-04, -6.4158e-04],
        [-6.3126e-04, -1.4004e-03],
        [-2.7607e-01, -2.1161e-02],
        [ 1.7536e-01, -8.9206e-02],
        [-4.0934e-01,  2.5607e-01],
        [ 2.7590e-01, -1.6506e-01],
        [ 4.0684e-01, -2.5596e-01],
        [ 1.8788e-01, -1.4833e-01],
        [ 7.0495e-02,  6.8266e-04],
        [ 1.5285e-01, -1.0555e-01],
        [ 2.3631e-01,  2.5774e-02],
        [-1.5065e-01,  1.4907e-01],
        [ 1.9583e-01, -5.9327e-02],
        [ 2.6630e-01,  6.2011e-03],
        [-3.3786e-02,  1.8984e-01],
        [-1.2819e-01,  2.2571e-01],
        [ 4.5257e-01, -3.0564e-01],
        [ 2.0556e-01, -7.5424e-02],
        [-3.2123e-01,  4.5725e-01],
        [-1.2820e-01,  2.2232e-01],
        [-1.4475e-01,  3.2162e-02],
        [ 4.9008e-01, -1.5990e-01],
        [ 3.4417e-01, -4.2832e-01],
        [-1.7685e-01,  1.4948e-01],
        [ 6.1593e-03, -3.8418e-02],
        [-7.9094e-01,  5.0996e-01],
        [-9.2889e-02,  2.3421e-02],
        [-1.2260e-01,  8.3312e-02],
        [-3.9490e-02,  7.2014e-02],
        [-7.1465e-02,  2.5534e-01],
        [-3.0706e-01,  2.0584e-01],
        [ 9.8226e-02, -1.5662e-01],
        [-4.0243e-02, -2.4431e-02],
        [-9.3990e-02,  1.1501e-01]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0 tensor([[ 7.2800e-04,  6.2320e-04, -1.3364e-04,  ..., -3.2402e-03,
         -2.5993e-03, -1.2680e-04],
        [ 1.3958e-03,  6.9294e-04, -1.0729e-03,  ..., -8.2044e-04,
         -9.9721e-04, -8.4005e-04],
        [-1.5364e-04,  2.8374e-05, -9.2774e-05,  ..., -1.8798e-05,
          6.5097e-05,  1.3708e-04],
        ...,
        [-1.9296e-03,  5.9458e-03, -1.6601e-02,  ...,  4.0027e-03,
          5.4970e-03,  4.4525e-03],
        [ 1.5656e-03,  3.4509e-03, -4.4779e-03,  ..., -7.1156e-03,
         -5.1212e-03, -6.1136e-05],
        [-2.8711e-04, -5.4465e-03,  1.4586e-02,  ..., -3.3702e-03,
         -4.0522e-03, -2.3978e-03]], device='cuda:0')
recurrent_blocks.0.bias_ih_l0 tensor([-1.5757e-02, -1.0787e-02,  2.0059e-04, -1.8570e-02, -2.5525e-03,
        -9.2536e-03,  5.3502e-03,  8.2966e-03, -1.9427e-02, -1.1363e-02,
         3.1718e-02, -4.9532e-03, -1.8896e-03,  1.7325e-03,  1.9800e-02,
        -6.2770e-04, -7.5912e-03,  1.9568e-04, -1.0861e-02, -1.2364e-02,
         2.3770e-03, -2.0951e-04, -6.9595e-03, -1.0551e-02,  4.4629e-04,
         3.9956e-03, -6.3020e-03,  4.2206e-03,  3.9612e-03,  2.0224e-03,
        -4.7711e-03, -1.1043e-03,  2.9205e-03,  5.4705e-04,  1.0124e-03,
        -4.4674e-04,  1.8307e-03,  1.1063e-05, -2.9633e-04, -1.2313e-03,
         8.7660e-04,  7.8765e-04, -6.2001e-03,  2.6843e-03,  5.3746e-04,
        -7.2347e-04, -1.3392e-03,  6.7329e-04,  2.9729e-03,  4.0371e-04,
        -2.2213e-04, -7.5752e-05, -1.4761e-03, -5.5115e-04,  7.2226e-04,
        -2.5335e-03, -3.6766e-04,  1.9399e-03, -9.3301e-05, -2.0836e-03,
         2.5763e-04, -1.0435e-04,  9.6612e-05, -5.6924e-04,  7.0844e-01,
        -5.1765e-01,  4.8180e-01, -4.5367e-01, -7.1763e-01, -2.4649e-01,
        -1.5379e-01,  1.2758e-01, -3.7127e-01,  2.2591e-01, -6.1550e-01,
        -2.9094e-01,  4.5958e-03,  2.3951e-01, -5.7919e-01, -2.4276e-01,
         4.4057e-01, -4.6478e-02,  3.4706e-01, -5.3748e-01, -3.0574e-01,
         1.9290e-01, -1.7525e-01,  8.1983e-01,  1.2752e-02,  6.1783e-02,
         2.2214e-01, -9.2878e-02,  1.6184e-01, -4.5933e-02, -9.3805e-02,
         4.3942e-02], device='cuda:0')
recurrent_blocks.0.bias_hh_l0 tensor([-1.5757e-02, -1.0787e-02,  2.0059e-04, -1.8570e-02, -2.5525e-03,
        -9.2536e-03,  5.3502e-03,  8.2966e-03, -1.9427e-02, -1.1363e-02,
         3.1718e-02, -4.9532e-03, -1.8896e-03,  1.7325e-03,  1.9800e-02,
        -6.2770e-04, -7.5912e-03,  1.9568e-04, -1.0861e-02, -1.2364e-02,
         2.3770e-03, -2.0951e-04, -6.9595e-03, -1.0551e-02,  4.4629e-04,
         3.9956e-03, -6.3020e-03,  4.2206e-03,  3.9612e-03,  2.0224e-03,
        -4.7711e-03, -1.1043e-03,  2.9205e-03,  5.4705e-04,  1.0124e-03,
        -4.4674e-04,  1.8307e-03,  1.1063e-05, -2.9633e-04, -1.2313e-03,
         8.7660e-04,  7.8765e-04, -6.2001e-03,  2.6843e-03,  5.3746e-04,
        -7.2347e-04, -1.3392e-03,  6.7329e-04,  2.9729e-03,  4.0371e-04,
        -2.2213e-04, -7.5752e-05, -1.4761e-03, -5.5115e-04,  7.2226e-04,
        -2.5335e-03, -3.6766e-04,  1.9399e-03, -9.3301e-05, -2.0836e-03,
         2.5763e-04, -1.0435e-04,  9.6612e-05, -5.6924e-04,  4.0307e-01,
        -2.3734e-01,  2.9501e-01, -1.8646e-01, -3.7903e-01, -1.1435e-01,
        -7.4916e-02,  5.2367e-02, -1.5882e-01,  1.1415e-01, -2.9751e-01,
        -1.3093e-01,  7.7344e-03,  1.1121e-01, -2.7913e-01, -1.2880e-01,
         1.6483e-01, -1.8899e-02,  1.5308e-01, -2.6335e-01, -1.3540e-01,
         8.6786e-02, -8.2538e-02,  3.7229e-01,  1.0255e-02,  3.2837e-02,
         1.1320e-01, -3.9324e-02,  8.5054e-02, -1.4359e-02, -4.9762e-02,
         2.0592e-02], device='cuda:0')
recurrent_blocks.0.weight_ih_l0_reverse tensor([[-1.2376e-02,  9.4893e-03],
        [ 1.9157e-03,  8.0459e-03],
        [ 3.0923e-03,  3.1180e-03],
        [-7.0697e-04, -3.8907e-03],
        [-4.8402e-03,  1.0769e-02],
        [-3.3733e-03,  6.0422e-03],
        [ 5.8174e-03,  1.7105e-03],
        [-1.0734e-02, -2.6711e-03],
        [ 1.0600e-02, -6.5372e-03],
        [ 6.3864e-03,  5.9566e-03],
        [-1.5608e-03, -6.2060e-03],
        [-2.9462e-03,  2.6733e-03],
        [ 3.8248e-03, -7.8566e-03],
        [ 1.6143e-05, -1.6801e-04],
        [ 5.7386e-03,  4.1276e-03],
        [ 7.5100e-03, -2.8486e-04],
        [ 1.4245e-03, -1.2453e-03],
        [-2.8589e-03,  3.8192e-03],
        [ 2.9601e-03, -7.7126e-03],
        [ 3.1820e-03,  1.2088e-03],
        [-5.9276e-03, -3.2629e-03],
        [-1.2908e-02,  1.5764e-02],
        [ 2.9025e-03, -4.9417e-03],
        [ 5.7603e-03, -5.6352e-03],
        [-2.6451e-03, -1.4475e-03],
        [-8.2560e-03, -4.7749e-03],
        [ 7.5209e-05, -6.1282e-04],
        [ 3.1487e-03,  1.1851e-03],
        [-3.1125e-03,  1.2798e-03],
        [ 4.0651e-03,  1.1555e-02],
        [-1.1552e-02,  7.7675e-03],
        [-4.2705e-04, -7.1316e-05],
        [ 6.6809e-04,  1.7241e-03],
        [-2.9245e-04, -1.1180e-04],
        [-2.3318e-03, -5.3028e-03],
        [ 1.7202e-05, -2.5635e-03],
        [ 1.0232e-03, -1.4061e-03],
        [-1.1990e-03,  2.3775e-03],
        [ 6.2763e-03,  1.1090e-02],
        [-3.5907e-03, -3.3732e-03],
        [ 8.8552e-04, -4.9987e-03],
        [ 9.6073e-04, -6.2447e-04],
        [-2.0885e-03,  4.4131e-03],
        [-3.9894e-03,  2.4924e-03],
        [-2.7591e-04,  1.7100e-03],
        [ 1.3367e-03, -3.4877e-03],
        [ 8.8855e-03, -4.8014e-03],
        [-1.5212e-03,  1.7770e-04],
        [ 7.9682e-04,  1.4056e-03],
        [-8.1860e-04,  5.1975e-04],
        [-6.1433e-04, -8.2068e-03],
        [-3.4042e-04, -3.7067e-03],
        [-6.4071e-04, -1.5019e-02],
        [-8.6836e-04, -6.7158e-04],
        [ 1.7255e-03, -3.6690e-03],
        [-2.2997e-03,  8.8670e-04],
        [ 1.4476e-03,  1.0545e-03],
        [-4.9763e-03,  7.9804e-03],
        [-1.3829e-03, -1.9275e-03],
        [ 7.0415e-04, -9.7074e-04],
        [ 9.6392e-06, -3.5145e-04],
        [-4.9052e-03,  1.6243e-03],
        [ 6.6093e-03, -4.7172e-03],
        [ 9.5784e-04, -1.3317e-02],
        [ 4.2626e-01, -2.0516e-01],
        [ 1.1428e-02, -2.6022e-01],
        [ 4.8525e-02,  6.7142e-03],
        [-5.3133e-02, -2.1339e-01],
        [-8.5806e-02,  5.1491e-04],
        [ 2.2297e-01, -2.9115e-01],
        [ 1.5439e-01, -2.4419e-01],
        [ 2.3139e-01, -2.8687e-02],
        [ 4.7810e-02, -1.5427e-01],
        [-1.4971e-01,  3.2305e-02],
        [-4.2841e-02,  1.5755e-01],
        [-2.0977e-01,  1.6340e-01],
        [-1.3458e-01,  3.3761e-01],
        [ 1.4263e-01, -1.7520e-01],
        [ 1.5184e-01,  7.1640e-02],
        [ 2.3318e-01, -2.9945e-02],
        [ 1.2062e-01, -3.9866e-02],
        [-2.1059e-01,  2.9061e-01],
        [-1.8149e-01,  7.6593e-03],
        [-9.3005e-02,  7.3129e-02],
        [-2.0640e-01, -1.3725e-02],
        [-4.0943e-01,  3.6984e-01],
        [-2.2565e-01,  4.6355e-02],
        [ 1.9393e-01, -1.5912e-01],
        [-1.7257e-01, -4.6059e-02],
        [-2.9510e-01,  6.8375e-02],
        [-1.2468e-01,  1.5930e-01],
        [-8.9509e-02, -1.6252e-02],
        [-2.3039e-02,  8.6969e-02],
        [ 4.0550e-01, -3.3501e-01],
        [ 4.2528e-01, -2.2306e-01],
        [-9.3113e-02,  5.8769e-02]], device='cuda:0')
recurrent_blocks.0.weight_hh_l0_reverse tensor([[-2.0797e-03, -6.8238e-04, -8.3402e-04,  ..., -1.3484e-03,
         -4.2814e-03, -5.2354e-04],
        [ 4.8486e-04,  3.0078e-05, -6.9864e-04,  ...,  1.2909e-04,
          4.9533e-04,  9.9183e-04],
        [ 1.6354e-03, -9.6592e-05, -7.1052e-05,  ...,  1.4601e-03,
          2.2442e-03,  2.6609e-03],
        ...,
        [ 5.7550e-02,  1.1110e-02,  1.7073e-02,  ...,  4.1505e-02,
          1.0760e-01,  3.4568e-02],
        [ 3.2751e-02,  1.2853e-02,  3.8632e-03,  ...,  1.5969e-02,
          6.7725e-02,  9.1329e-03],
        [-3.4805e-02, -2.9755e-03, -4.4584e-03,  ..., -2.5975e-02,
         -5.7909e-02, -3.4352e-02]], device='cuda:0')
recurrent_blocks.0.bias_ih_l0_reverse tensor([ 1.4208e-02, -4.4837e-05, -1.2469e-02, -2.4888e-03,  3.2800e-03,
        -1.3162e-02,  1.1614e-02,  2.5130e-02,  1.3586e-03,  9.9675e-03,
        -4.6399e-03,  1.7196e-03, -4.0065e-03, -5.8927e-04, -1.8530e-02,
        -1.2897e-03,  9.6682e-04, -5.3748e-03, -7.0987e-03, -2.5457e-03,
         2.2197e-02, -3.9772e-03, -2.1871e-03, -5.2337e-03,  4.8025e-03,
         1.9292e-02,  6.9384e-03, -1.2089e-03,  2.6682e-03, -1.5959e-02,
         1.0096e-02,  2.3928e-03,  7.0309e-03, -2.1581e-03, -4.1553e-03,
         2.0862e-03,  5.5108e-03, -2.3440e-03,  2.0278e-02, -1.2794e-02,
        -1.3326e-02,  3.3210e-03,  6.7822e-05,  3.7300e-03, -5.1617e-03,
        -3.5997e-03, -3.1862e-03,  1.9203e-03,  3.3802e-03,  1.1902e-03,
         2.4563e-03,  7.1552e-03, -1.2624e-02, -4.2657e-04, -1.1351e-03,
        -2.9178e-05, -8.9335e-04, -4.1631e-03, -6.5603e-04, -3.8380e-04,
        -2.3366e-03,  1.1865e-02, -1.5620e-03, -1.1669e-02, -3.8390e-01,
         1.2793e-04, -2.7262e-01,  2.4244e-01,  1.7573e-01,  2.1898e-01,
        -4.6795e-01, -5.1837e-01, -1.2614e-01, -5.7331e-02,  2.1331e-01,
         1.3324e-01,  1.1907e-02, -1.0380e-01, -4.8948e-01, -9.0922e-02,
        -9.5228e-02,  2.7839e-02,  2.6695e-01, -2.5118e-01,  5.8604e-01,
         1.5438e-02,  3.6714e-01, -1.3952e-01,  2.5905e-01,  7.2437e-01,
        -9.6443e-02,  9.3116e-02, -1.0003e-01, -7.8594e-01, -4.6365e-01,
         3.7689e-01], device='cuda:0')
recurrent_blocks.0.bias_hh_l0_reverse tensor([ 1.4208e-02, -4.4837e-05, -1.2469e-02, -2.4888e-03,  3.2800e-03,
        -1.3162e-02,  1.1614e-02,  2.5130e-02,  1.3586e-03,  9.9675e-03,
        -4.6399e-03,  1.7196e-03, -4.0065e-03, -5.8927e-04, -1.8530e-02,
        -1.2897e-03,  9.6682e-04, -5.3748e-03, -7.0987e-03, -2.5457e-03,
         2.2197e-02, -3.9772e-03, -2.1871e-03, -5.2337e-03,  4.8025e-03,
         1.9292e-02,  6.9384e-03, -1.2089e-03,  2.6682e-03, -1.5959e-02,
         1.0096e-02,  2.3928e-03,  7.0309e-03, -2.1581e-03, -4.1553e-03,
         2.0862e-03,  5.5108e-03, -2.3440e-03,  2.0278e-02, -1.2794e-02,
        -1.3326e-02,  3.3210e-03,  6.7822e-05,  3.7300e-03, -5.1617e-03,
        -3.5997e-03, -3.1862e-03,  1.9203e-03,  3.3802e-03,  1.1902e-03,
         2.4563e-03,  7.1552e-03, -1.2624e-02, -4.2657e-04, -1.1351e-03,
        -2.9178e-05, -8.9335e-04, -4.1631e-03, -6.5603e-04, -3.8380e-04,
        -2.3366e-03,  1.1865e-02, -1.5620e-03, -1.1669e-02, -1.5490e-01,
        -4.0619e-03, -1.2068e-01,  1.3333e-01,  8.5372e-02,  1.0839e-01,
        -2.2278e-01, -2.8905e-01, -7.0119e-02, -2.8027e-02,  1.1469e-01,
         5.2874e-02, -1.1199e-02, -4.2393e-02, -2.9329e-01, -5.4026e-02,
        -4.1595e-02,  1.7877e-02,  1.4969e-01, -1.2096e-01,  2.7655e-01,
         1.5968e-03,  1.6971e-01, -6.8823e-02,  1.2538e-01,  3.6202e-01,
        -5.6361e-02,  5.2159e-02, -4.1987e-02, -3.6550e-01, -2.2996e-01,
         2.0564e-01], device='cuda:0')
recurrent_blocks.1.weight_ih_l0 tensor([[-2.0113e-04,  8.0011e-04, -1.6340e-03,  ...,  1.0210e-03,
          1.5306e-03,  1.2885e-04],
        [-3.3051e-04, -2.3921e-04,  5.7986e-04,  ..., -1.2747e-04,
         -7.1924e-04, -7.7610e-05],
        [-6.5833e-04, -3.5020e-05, -1.6704e-04,  ..., -3.3512e-04,
         -1.6751e-04, -9.1519e-04],
        ...,
        [ 4.9384e-03,  1.1929e-02, -2.6439e-02,  ...,  1.0515e-02,
          3.0905e-02,  4.7391e-03],
        [-3.6784e-02, -3.3532e-02,  7.8990e-02,  ..., -1.9808e-02,
         -8.8390e-02,  2.8698e-03],
        [-1.9238e-02, -2.6755e-02,  5.6931e-02,  ..., -2.6731e-02,
         -6.5927e-02, -2.0670e-02]], device='cuda:0')
recurrent_blocks.1.weight_hh_l0 tensor([[ 1.6087e-04,  2.2165e-03, -1.3809e-03,  ...,  1.1624e-03,
         -1.4658e-03, -2.0775e-04],
        [-4.3882e-05, -3.4359e-04,  4.2002e-04,  ..., -3.8602e-04,
          3.5523e-04,  9.4714e-05],
        [-3.2339e-04,  6.1658e-04,  5.9885e-05,  ...,  2.7602e-04,
          6.0522e-04, -2.0590e-04],
        ...,
        [ 6.6103e-04,  1.2200e-02, -9.7848e-03,  ...,  8.3905e-03,
         -9.8567e-03, -1.5255e-03],
        [-3.5604e-03, -2.6475e-02,  2.8373e-02,  ..., -2.3818e-02,
          2.6666e-02,  4.4396e-03],
        [-3.6765e-03, -2.5444e-02,  2.1900e-02,  ..., -1.7424e-02,
          2.5016e-02,  2.3783e-03]], device='cuda:0')
recurrent_blocks.1.bias_ih_l0 tensor([-7.3637e-03,  1.6036e-03,  2.7683e-03, -2.8983e-03, -1.2256e-02,
        -9.3672e-04, -9.4131e-03,  3.0255e-03, -8.5831e-03, -7.4523e-03,
         1.5020e-03,  5.1051e-03, -5.5796e-03, -1.0899e-03, -1.2996e-02,
        -1.4908e-03,  2.9200e-02, -1.2354e-03,  8.2320e-03, -6.6248e-03,
         4.9184e-03,  2.6110e-03,  1.0002e-03, -3.6222e-04, -1.0601e-02,
        -1.4282e-03,  4.3923e-03, -1.1535e-03,  1.2931e-03,  4.0661e-03,
         1.7926e-02, -9.6493e-03,  3.1779e-04, -1.3991e-03, -1.4117e-03,
         2.3958e-04,  1.1031e-04, -1.8236e-04, -9.0174e-04,  1.9600e-03,
        -8.0836e-04,  2.9232e-04,  7.4400e-04, -1.7003e-03, -9.1188e-05,
         1.9388e-05, -1.3511e-03,  9.7376e-04, -5.2483e-04,  1.6933e-04,
         2.7505e-04, -1.3335e-03,  8.7007e-05, -5.3451e-04, -7.3843e-06,
        -2.3904e-04,  3.5894e-04, -4.0319e-04, -7.1739e-05, -7.1861e-04,
        -7.2975e-05,  8.7726e-04,  4.3516e-04,  6.5983e-04,  4.7592e-01,
        -7.9592e-02, -1.2551e-01, -1.3863e-01, -3.3396e-01, -1.1145e-01,
         2.6281e-01,  2.4884e-01, -3.8173e-01,  2.8072e-01, -1.3746e-01,
        -6.9221e-02, -2.2800e-01, -1.1015e-02, -3.4065e-01, -1.7225e-02,
         4.8219e-01, -2.2852e-01,  3.7229e-01, -2.4603e-01, -1.7193e-01,
        -8.8752e-02, -2.3550e-02,  3.2326e-01, -1.9563e-01,  3.2675e-01,
         1.0609e-01, -2.4182e-03,  3.1834e-01, -9.9782e-02,  2.6931e-01,
         2.4627e-01], device='cuda:0')
recurrent_blocks.1.bias_hh_l0 tensor([-7.3637e-03,  1.6036e-03,  2.7683e-03, -2.8983e-03, -1.2256e-02,
        -9.3672e-04, -9.4131e-03,  3.0255e-03, -8.5831e-03, -7.4523e-03,
         1.5020e-03,  5.1051e-03, -5.5796e-03, -1.0899e-03, -1.2996e-02,
        -1.4908e-03,  2.9200e-02, -1.2354e-03,  8.2320e-03, -6.6248e-03,
         4.9184e-03,  2.6110e-03,  1.0002e-03, -3.6222e-04, -1.0601e-02,
        -1.4282e-03,  4.3923e-03, -1.1535e-03,  1.2931e-03,  4.0661e-03,
         1.7926e-02, -9.6493e-03,  3.1779e-04, -1.3991e-03, -1.4117e-03,
         2.3958e-04,  1.1031e-04, -1.8236e-04, -9.0174e-04,  1.9600e-03,
        -8.0836e-04,  2.9232e-04,  7.4400e-04, -1.7003e-03, -9.1188e-05,
         1.9388e-05, -1.3511e-03,  9.7376e-04, -5.2483e-04,  1.6933e-04,
         2.7505e-04, -1.3335e-03,  8.7007e-05, -5.3451e-04, -7.3843e-06,
        -2.3904e-04,  3.5894e-04, -4.0319e-04, -7.1739e-05, -7.1861e-04,
        -7.2975e-05,  8.7726e-04,  4.3516e-04,  6.5983e-04,  1.8896e-01,
        -3.8997e-02, -6.4447e-02, -7.4720e-02, -1.4010e-01, -6.0997e-02,
         1.2595e-01,  1.3842e-01, -1.9455e-01,  1.4495e-01, -8.1096e-02,
        -3.6269e-02, -1.2325e-01, -9.7273e-03, -1.8189e-01, -7.9025e-03,
         2.8768e-01, -1.3144e-01,  1.8812e-01, -1.3488e-01, -6.8218e-02,
        -4.5282e-02, -1.6194e-02,  1.4333e-01, -1.2118e-01,  1.5447e-01,
         5.5543e-02, -3.9636e-03,  1.7655e-01, -4.8359e-02,  1.2738e-01,
         1.1997e-01], device='cuda:0')
recurrent_blocks.1.weight_ih_l0_reverse tensor([[ 2.8143e-04, -1.3193e-04,  4.1371e-04,  ...,  6.7894e-05,
          1.2046e-04,  6.8109e-04],
        [-3.6476e-03, -4.3751e-04,  6.8089e-05,  ..., -1.7383e-03,
         -2.0283e-03, -4.7058e-03],
        [ 5.4435e-04, -1.3186e-04,  3.4494e-04,  ..., -8.5939e-05,
         -1.3764e-04,  2.6938e-05],
        ...,
        [ 3.7256e-02,  4.2381e-02, -9.1178e-02,  ...,  3.9289e-02,
          1.0423e-01,  1.7081e-02],
        [ 3.0817e-02,  3.0818e-02, -7.4719e-02,  ...,  9.9987e-03,
          7.7040e-02, -1.8404e-02],
        [-1.3056e-02,  4.6848e-03, -2.2956e-02,  ..., -2.1059e-02,
         -2.9310e-03, -6.2705e-02]], device='cuda:0')
recurrent_blocks.1.weight_hh_l0_reverse tensor([[-5.4590e-04, -1.0356e-03,  1.9865e-04,  ..., -3.1705e-05,
          5.5802e-04,  1.7970e-04],
        [ 2.8539e-03,  6.0917e-03, -1.3263e-03,  ...,  1.5472e-03,
         -2.0881e-03, -2.4332e-04],
        [ 2.8821e-04,  4.3209e-04, -1.0046e-04,  ...,  3.6885e-04,
         -1.7176e-04,  2.3549e-05],
        ...,
        [-4.4545e-02, -7.6101e-02,  1.1835e-02,  ..., -3.8153e-02,
          4.1459e-02,  6.3135e-03],
        [-2.1473e-02, -3.6241e-02,  4.0544e-03,  ..., -1.5206e-02,
          2.9405e-02,  9.4659e-03],
        [ 1.9801e-02,  3.5206e-02, -6.2429e-03,  ...,  1.2724e-02,
         -9.9915e-03,  9.0066e-04]], device='cuda:0')
recurrent_blocks.1.bias_ih_l0_reverse tensor([-4.3981e-04,  1.5409e-02,  4.6747e-04,  5.3584e-03, -1.1756e-03,
        -2.9374e-03, -1.9081e-02,  8.4906e-03,  9.6371e-05,  4.7206e-03,
         1.0686e-02,  2.4893e-03, -6.0571e-04,  3.5712e-04, -2.3252e-02,
         3.1850e-03, -7.1323e-03, -1.5127e-02,  8.5224e-03, -2.0992e-02,
        -1.1533e-02,  1.7073e-02, -7.6464e-03, -4.8212e-03,  3.3809e-03,
         3.3108e-03, -2.9613e-03,  8.7736e-03,  1.0654e-03,  1.3038e-02,
         1.2196e-02, -6.3763e-04, -6.3887e-03,  1.0653e-02,  3.0442e-03,
        -3.4387e-03, -1.2799e-02,  7.1846e-04,  1.2556e-02,  2.9728e-03,
         8.5104e-04, -1.0389e-03, -4.5515e-04,  1.8904e-03, -4.7963e-04,
         6.6229e-04, -5.6892e-03, -5.7126e-04,  6.3225e-03, -3.3975e-04,
         6.4639e-03,  8.9476e-03, -8.7511e-03,  3.7741e-03, -2.3692e-03,
        -6.2989e-04,  1.0009e-03,  1.6248e-02,  2.3409e-03,  5.0449e-03,
         3.5048e-03, -9.5599e-03,  1.0390e-04,  1.4403e-03,  2.8997e-02,
         1.9316e-01, -7.2139e-03,  1.7565e-01,  4.8767e-01, -2.0709e-02,
        -4.0159e-01, -2.6764e-01, -4.8649e-02, -2.0112e-01,  3.5228e-01,
         1.6690e-01, -4.7691e-02, -1.0121e-01, -3.6583e-01,  8.0325e-02,
        -2.1457e-01, -1.9960e-01,  2.6413e-01, -3.6548e-01,  2.7912e-01,
        -2.6992e-01,  3.2145e-01,  2.6398e-01, -1.0049e-01,  2.6401e-01,
        -6.1612e-02,  2.3465e-01, -1.5294e-01, -3.7552e-01, -1.9771e-01,
         1.1216e-01], device='cuda:0')
recurrent_blocks.1.bias_hh_l0_reverse tensor([-4.3981e-04,  1.5409e-02,  4.6747e-04,  5.3584e-03, -1.1756e-03,
        -2.9374e-03, -1.9081e-02,  8.4906e-03,  9.6371e-05,  4.7206e-03,
         1.0686e-02,  2.4893e-03, -6.0571e-04,  3.5712e-04, -2.3252e-02,
         3.1850e-03, -7.1323e-03, -1.5127e-02,  8.5224e-03, -2.0992e-02,
        -1.1533e-02,  1.7073e-02, -7.6464e-03, -4.8212e-03,  3.3809e-03,
         3.3108e-03, -2.9613e-03,  8.7736e-03,  1.0654e-03,  1.3038e-02,
         1.2196e-02, -6.3763e-04, -6.3887e-03,  1.0653e-02,  3.0442e-03,
        -3.4387e-03, -1.2799e-02,  7.1846e-04,  1.2556e-02,  2.9728e-03,
         8.5104e-04, -1.0389e-03, -4.5515e-04,  1.8904e-03, -4.7963e-04,
         6.6229e-04, -5.6892e-03, -5.7126e-04,  6.3225e-03, -3.3975e-04,
         6.4639e-03,  8.9476e-03, -8.7511e-03,  3.7741e-03, -2.3692e-03,
        -6.2989e-04,  1.0009e-03,  1.6248e-02,  2.3409e-03,  5.0449e-03,
         3.5048e-03, -9.5599e-03,  1.0390e-04,  1.4403e-03,  1.5011e-02,
         8.9860e-02, -1.0313e-02,  9.0200e-02,  2.4393e-01, -6.3087e-03,
        -2.1816e-01, -1.1687e-01, -2.5774e-02, -1.0314e-01,  1.6136e-01,
         8.8577e-02, -2.9182e-02, -4.4311e-02, -2.0431e-01,  3.6957e-02,
        -1.2027e-01, -9.0717e-02,  1.2488e-01, -1.5577e-01,  1.4722e-01,
        -1.1454e-01,  1.3966e-01,  1.4148e-01, -5.5634e-02,  1.1995e-01,
        -3.1369e-02,  1.0320e-01, -8.0801e-02, -1.9242e-01, -1.0274e-01,
         5.5965e-02], device='cuda:0')
recurrent_blocks.2.weight_ih_l0 tensor([[-6.0211e-05,  1.0367e-04,  8.0706e-05,  ..., -5.4085e-05,
         -6.2578e-04, -1.1758e-04],
        [-5.4029e-04, -1.5273e-03,  1.9333e-03,  ...,  4.0577e-04,
         -2.2715e-03, -5.6676e-04],
        [-9.8536e-04,  1.7732e-03, -1.6865e-03,  ..., -5.5465e-04,
          8.8623e-04, -1.6128e-03],
        ...,
        [-4.4378e-02, -1.7193e-03,  3.3350e-02,  ...,  1.2195e-03,
         -2.0106e-02, -1.4270e-02],
        [ 3.6424e-02,  1.8542e-02, -4.3471e-02,  ..., -3.7379e-03,
          5.2959e-02,  2.8459e-02],
        [-3.3327e-02, -1.2487e-01,  1.7031e-01,  ...,  3.1508e-02,
         -1.9349e-01, -1.1765e-02]], device='cuda:0')
recurrent_blocks.2.weight_hh_l0 tensor([[-8.5967e-05, -1.1176e-04,  3.6589e-04,  ..., -1.4243e-04,
          1.9746e-04,  1.9688e-04],
        [ 3.7166e-04,  4.7188e-04, -1.6217e-03,  ...,  9.1598e-04,
         -9.4429e-04,  2.5772e-04],
        [ 4.5910e-04, -1.0183e-03, -8.3787e-04,  ..., -2.0363e-04,
          9.2193e-05, -3.8618e-04],
        ...,
        [ 7.7628e-03, -6.7896e-03, -2.0800e-02,  ...,  7.4349e-03,
         -5.3600e-03,  3.4151e-03],
        [-1.0510e-02,  2.2891e-03,  3.2394e-02,  ..., -1.2150e-02,
          1.2058e-02, -3.0462e-03],
        [ 1.0718e-02,  1.7753e-02, -4.7040e-02,  ...,  2.7607e-02,
         -2.6157e-02,  1.9797e-02]], device='cuda:0')
recurrent_blocks.2.bias_ih_l0 tensor([-7.6821e-04,  4.8305e-03,  1.1833e-03,  3.5257e-04,  7.1093e-03,
         1.4934e-03,  2.1869e-02, -7.7774e-03,  6.0807e-04, -2.5291e-02,
         5.4126e-03, -2.5798e-03,  9.1909e-03, -3.6659e-03,  3.6791e-02,
         4.1243e-03, -3.8978e-04,  4.2697e-04, -5.8815e-03,  2.1770e-04,
        -3.4297e-03, -3.6507e-04,  3.1862e-03, -1.9986e-03, -6.2552e-03,
         4.9609e-03, -1.9948e-03,  3.5207e-03, -6.0196e-03, -4.8459e-03,
        -2.8878e-03, -9.3449e-03,  3.6766e-04,  9.7026e-04, -2.3374e-03,
         4.6861e-04, -2.6756e-03, -9.7113e-04,  6.8049e-05,  2.0204e-03,
         1.5846e-03,  1.2309e-03,  2.0309e-03, -1.9274e-03, -7.7127e-04,
         3.5720e-04, -2.2776e-03, -1.5723e-03, -7.2853e-06, -1.4606e-03,
         3.0463e-05,  3.4916e-05,  7.4801e-04, -1.5291e-03, -1.0659e-03,
        -2.0113e-03, -3.4187e-04,  1.9557e-04,  1.7461e-03, -2.2765e-04,
         5.4590e-05,  6.0056e-04, -3.7087e-04,  1.3049e-04,  3.0564e-02,
        -1.8013e-01, -4.4090e-03,  2.9304e-02, -2.7706e-01,  8.8355e-02,
         2.8784e-01,  1.6974e-01, -1.2448e-01,  3.8656e-01, -1.1917e-01,
         5.9089e-02,  2.0985e-01, -2.2875e-01, -3.3582e-01,  2.0822e-01,
         4.5911e-02, -6.7895e-02,  4.0202e-01, -9.0064e-02,  1.2932e-01,
        -9.3528e-03, -1.2712e-01,  8.0558e-02, -1.8227e-01,  9.2159e-02,
         1.6725e-01, -2.0230e-01, -9.4257e-02,  1.3178e-01, -1.6268e-01,
         3.1217e-01], device='cuda:0')
recurrent_blocks.2.bias_hh_l0 tensor([-7.6821e-04,  4.8305e-03,  1.1833e-03,  3.5257e-04,  7.1093e-03,
         1.4934e-03,  2.1869e-02, -7.7774e-03,  6.0807e-04, -2.5291e-02,
         5.4126e-03, -2.5798e-03,  9.1909e-03, -3.6659e-03,  3.6791e-02,
         4.1243e-03, -3.8978e-04,  4.2697e-04, -5.8815e-03,  2.1770e-04,
        -3.4297e-03, -3.6507e-04,  3.1862e-03, -1.9986e-03, -6.2552e-03,
         4.9609e-03, -1.9948e-03,  3.5207e-03, -6.0196e-03, -4.8459e-03,
        -2.8878e-03, -9.3449e-03,  3.6766e-04,  9.7026e-04, -2.3374e-03,
         4.6861e-04, -2.6756e-03, -9.7113e-04,  6.8049e-05,  2.0204e-03,
         1.5846e-03,  1.2309e-03,  2.0309e-03, -1.9274e-03, -7.7127e-04,
         3.5720e-04, -2.2776e-03, -1.5723e-03, -7.2853e-06, -1.4606e-03,
         3.0463e-05,  3.4916e-05,  7.4801e-04, -1.5291e-03, -1.0659e-03,
        -2.0113e-03, -3.4187e-04,  1.9557e-04,  1.7461e-03, -2.2765e-04,
         5.4590e-05,  6.0056e-04, -3.7087e-04,  1.3049e-04,  1.8494e-02,
        -8.8492e-02, -1.0085e-02,  1.4211e-02, -1.4248e-01,  3.9200e-02,
         1.3796e-01,  9.3137e-02, -5.9215e-02,  1.9774e-01, -6.4838e-02,
         3.1079e-02,  1.1693e-01, -1.0393e-01, -1.9388e-01,  1.2881e-01,
         1.9066e-02, -3.8091e-02,  1.7319e-01, -5.3955e-02,  7.0226e-02,
        -6.3072e-03, -6.6211e-02,  3.5472e-02, -9.8310e-02,  3.9350e-02,
         9.3191e-02, -9.1153e-02, -5.2549e-02,  5.4615e-02, -8.6590e-02,
         1.5330e-01], device='cuda:0')
recurrent_blocks.2.weight_ih_l0_reverse tensor([[-2.3359e-03, -4.0083e-04,  1.8797e-03,  ...,  1.5719e-04,
         -3.8527e-03, -1.9630e-03],
        [ 8.4808e-04, -1.7228e-04, -3.5687e-04,  ...,  5.0800e-05,
          1.1661e-03,  8.7363e-04],
        [ 6.6362e-04, -1.3904e-03,  9.1248e-04,  ...,  3.7625e-04,
         -2.8474e-04,  7.7916e-05],
        ...,
        [ 6.6217e-02,  9.5553e-02, -1.5489e-01,  ..., -2.3849e-02,
          1.8460e-01,  4.7380e-02],
        [ 5.2812e-02,  8.3995e-02, -1.4462e-01,  ..., -2.0179e-02,
          1.5431e-01,  1.0830e-02],
        [-5.5571e-02, -1.1744e-02,  3.5409e-02,  ...,  3.1429e-03,
         -6.9054e-02, -7.5860e-02]], device='cuda:0')
recurrent_blocks.2.weight_hh_l0_reverse tensor([[-2.7644e-03,  1.6756e-03,  2.0308e-03,  ...,  2.1238e-03,
          2.8752e-03, -2.6089e-06],
        [ 1.0852e-03, -3.2684e-04, -7.1132e-04,  ..., -4.0238e-04,
         -7.2709e-04, -2.4808e-04],
        [-1.1997e-03,  5.2504e-04,  9.2225e-04,  ...,  6.9900e-04,
          1.6265e-03, -6.0407e-04],
        ...,
        [ 4.1923e-02, -4.2438e-02, -3.8875e-02,  ..., -3.3404e-02,
         -5.3614e-02,  2.2700e-02],
        [ 5.1150e-03, -4.0048e-02, -1.8236e-02,  ..., -1.8582e-02,
         -1.4851e-02,  2.6654e-02],
        [-7.6390e-02,  1.3964e-02,  4.5740e-02,  ...,  2.9164e-02,
          6.3747e-02,  9.4306e-03]], device='cuda:0')
recurrent_blocks.2.bias_ih_l0_reverse tensor([ 9.6292e-03, -2.1381e-03,  2.7057e-03, -4.6709e-03,  4.0260e-03,
        -1.5828e-02,  1.6995e-03, -5.6399e-03,  1.7868e-03, -3.6054e-03,
        -3.6086e-03, -1.1679e-03,  4.5249e-03,  5.7230e-03,  1.3678e-03,
         1.7916e-02, -1.4477e-02,  3.9365e-03, -7.1442e-04,  1.2956e-03,
         5.3982e-03, -2.4219e-03,  8.7289e-04, -9.2630e-03,  2.1287e-03,
        -1.7635e-03,  7.5944e-04,  1.4098e-03, -1.0805e-02, -5.0408e-03,
        -4.2117e-03,  2.2662e-02,  1.3582e-02,  9.1928e-03, -5.8891e-03,
         1.1903e-02,  1.5183e-03, -2.1999e-05,  3.9123e-03,  3.0926e-03,
         1.8243e-04, -5.4703e-03,  1.3091e-03, -1.9406e-03, -4.4130e-04,
        -8.0951e-04, -5.0264e-03,  2.4991e-02, -3.9802e-03,  1.1172e-03,
        -1.7373e-03, -6.6777e-03, -3.5645e-04,  3.4273e-03, -4.3879e-03,
         2.2866e-03, -4.6077e-04, -5.8617e-04,  3.6648e-03, -1.3013e-02,
        -3.5715e-03, -6.6951e-03,  2.1708e-03, -8.3362e-04, -1.4679e-01,
         1.8891e-01, -2.7143e-02,  2.3608e-01,  2.2317e-01, -3.9488e-01,
        -2.6636e-01, -4.4207e-01,  7.6160e-02,  2.0900e-01, -2.7695e-02,
        -3.7093e-02, -1.2352e-02, -2.5814e-01, -5.3137e-02,  2.7290e-01,
        -3.3830e-01, -3.0623e-01,  3.7642e-01, -5.2727e-01,  3.8343e-01,
         1.0541e-01,  6.2086e-02,  7.3675e-02,  3.2047e-02,  1.2062e-01,
         1.8401e-01,  9.0387e-02, -3.1124e-01, -3.8390e-01, -2.4227e-01,
         2.8324e-01], device='cuda:0')
recurrent_blocks.2.bias_hh_l0_reverse tensor([ 9.6292e-03, -2.1381e-03,  2.7057e-03, -4.6709e-03,  4.0260e-03,
        -1.5828e-02,  1.6995e-03, -5.6399e-03,  1.7868e-03, -3.6054e-03,
        -3.6086e-03, -1.1679e-03,  4.5249e-03,  5.7230e-03,  1.3678e-03,
         1.7916e-02, -1.4477e-02,  3.9365e-03, -7.1442e-04,  1.2956e-03,
         5.3982e-03, -2.4219e-03,  8.7289e-04, -9.2630e-03,  2.1287e-03,
        -1.7635e-03,  7.5944e-04,  1.4098e-03, -1.0805e-02, -5.0408e-03,
        -4.2117e-03,  2.2662e-02,  1.3582e-02,  9.1928e-03, -5.8891e-03,
         1.1903e-02,  1.5183e-03, -2.1999e-05,  3.9123e-03,  3.0926e-03,
         1.8243e-04, -5.4703e-03,  1.3091e-03, -1.9406e-03, -4.4130e-04,
        -8.0951e-04, -5.0264e-03,  2.4991e-02, -3.9802e-03,  1.1172e-03,
        -1.7373e-03, -6.6777e-03, -3.5645e-04,  3.4273e-03, -4.3879e-03,
         2.2866e-03, -4.6077e-04, -5.8617e-04,  3.6648e-03, -1.3013e-02,
        -3.5715e-03, -6.6951e-03,  2.1708e-03, -8.3362e-04, -7.8230e-02,
         9.7574e-02, -1.9989e-02,  1.1552e-01,  1.1158e-01, -2.1127e-01,
        -1.2484e-01, -2.8893e-01,  3.4355e-02,  1.0779e-01, -1.5143e-02,
        -1.7704e-02, -1.1296e-02, -1.3092e-01, -2.6529e-02,  1.4184e-01,
        -1.2413e-01, -1.9668e-01,  2.0437e-01, -3.0887e-01,  2.0693e-01,
         5.7309e-02,  2.9357e-02,  3.5595e-02,  1.9457e-02,  6.5059e-02,
         8.0318e-02,  3.9871e-02, -1.6390e-01, -1.5445e-01, -1.1780e-01,
         1.6955e-01], device='cuda:0')
recurrent_blocks.3.weight_ih_l0 tensor([[ 2.1591e-06,  3.0680e-04,  1.1179e-03,  ..., -9.5016e-04,
         -8.8245e-04,  1.1746e-03],
        [-5.5699e-04,  3.1445e-04, -3.3671e-03,  ...,  1.6004e-05,
          1.5185e-03, -1.0092e-03],
        [-1.2091e-03,  4.2765e-04, -4.8830e-04,  ..., -1.1167e-03,
         -2.5291e-03,  4.7109e-04],
        ...,
        [-1.3943e-02, -4.1031e-02,  1.4452e-02,  ...,  4.0003e-02,
         -2.5727e-02, -4.0351e-02],
        [ 1.4659e-02,  2.8231e-02,  4.5688e-03,  ..., -2.9458e-02,
          1.4455e-02,  3.4633e-02],
        [ 1.5753e-02, -1.7296e-03, -1.0355e-02,  ...,  9.5844e-03,
          3.6621e-02, -1.6294e-02]], device='cuda:0')
recurrent_blocks.3.weight_hh_l0 tensor([[-6.1862e-04, -6.3629e-04,  9.3530e-04,  ...,  1.1562e-03,
          1.5643e-04, -7.3318e-04],
        [ 3.7512e-05, -3.6458e-04, -1.4085e-03,  ..., -4.0250e-03,
         -6.8069e-04,  1.6021e-03],
        [-7.7369e-04, -8.3790e-04, -6.9201e-04,  ..., -4.8315e-04,
         -4.3323e-05,  8.4399e-04],
        ...,
        [ 1.4177e-02,  2.6203e-02, -2.4098e-02,  ...,  7.7522e-03,
          1.9683e-02,  1.6446e-02],
        [-9.6707e-03, -1.7742e-02,  2.3952e-02,  ...,  6.0101e-03,
         -1.3526e-02, -1.8161e-02],
        [ 3.7476e-03,  2.8685e-03, -2.5153e-03,  ..., -6.9296e-03,
         -3.8466e-03, -6.1141e-05]], device='cuda:0')
recurrent_blocks.3.bias_ih_l0 tensor([-3.6526e-03,  4.7972e-03, -4.2627e-04,  3.2704e-03,  1.8015e-02,
         4.6414e-04, -5.5926e-03,  6.4531e-03,  2.6529e-03, -3.1054e-04,
        -5.7910e-04, -4.2253e-04,  4.3291e-03, -2.8245e-03,  4.9245e-04,
        -2.4093e-05, -1.3466e-03, -1.2698e-03, -6.5336e-03, -1.3971e-03,
        -1.7415e-03,  5.4226e-03, -2.6420e-03, -2.3902e-03,  1.0277e-02,
        -2.7779e-03, -9.3690e-03,  1.2125e-02,  1.8462e-03, -1.6205e-03,
        -1.1936e-02, -1.0419e-03,  1.2004e-03, -7.6059e-04, -2.8950e-03,
         7.5204e-04, -4.6244e-04, -2.1951e-03, -2.5884e-03,  6.3266e-03,
        -1.4014e-03,  4.3118e-04,  1.3962e-03, -2.8475e-03, -4.2338e-03,
         7.2690e-04, -1.9719e-03, -2.9722e-03, -2.7934e-03,  2.1749e-04,
         3.5745e-04,  3.7258e-04,  2.5643e-04, -1.9244e-03,  1.0284e-03,
        -8.5731e-04,  2.2655e-04,  1.3115e-03,  2.1323e-03, -1.0070e-03,
         2.4877e-04, -1.1635e-03, -2.2766e-04, -4.9541e-03,  1.2934e-01,
        -1.2606e-01, -8.2797e-02, -3.7627e-02, -2.2379e-01, -5.1055e-03,
         7.4774e-02,  1.5804e-01,  1.3066e-01,  1.1428e-01,  4.3750e-03,
         6.1492e-02,  1.9959e-01, -7.2492e-02, -1.2539e-01,  2.7414e-02,
         8.2700e-02,  2.7604e-02,  7.1383e-02, -4.1937e-02,  1.2872e-01,
         6.9232e-02, -1.8649e-01, -3.5292e-02, -1.3218e-01,  9.9982e-02,
         1.3576e-01, -1.8445e-01,  3.1795e-02,  1.8545e-01, -1.5966e-01,
         2.8947e-02], device='cuda:0')
recurrent_blocks.3.bias_hh_l0 tensor([-3.6526e-03,  4.7972e-03, -4.2627e-04,  3.2704e-03,  1.8015e-02,
         4.6414e-04, -5.5926e-03,  6.4531e-03,  2.6529e-03, -3.1054e-04,
        -5.7910e-04, -4.2253e-04,  4.3291e-03, -2.8245e-03,  4.9245e-04,
        -2.4093e-05, -1.3466e-03, -1.2698e-03, -6.5336e-03, -1.3971e-03,
        -1.7415e-03,  5.4226e-03, -2.6420e-03, -2.3902e-03,  1.0277e-02,
        -2.7779e-03, -9.3690e-03,  1.2125e-02,  1.8462e-03, -1.6205e-03,
        -1.1936e-02, -1.0419e-03,  1.2004e-03, -7.6059e-04, -2.8950e-03,
         7.5204e-04, -4.6244e-04, -2.1951e-03, -2.5884e-03,  6.3266e-03,
        -1.4014e-03,  4.3118e-04,  1.3962e-03, -2.8475e-03, -4.2338e-03,
         7.2690e-04, -1.9719e-03, -2.9722e-03, -2.7934e-03,  2.1749e-04,
         3.5745e-04,  3.7258e-04,  2.5643e-04, -1.9244e-03,  1.0284e-03,
        -8.5731e-04,  2.2655e-04,  1.3115e-03,  2.1323e-03, -1.0070e-03,
         2.4877e-04, -1.1635e-03, -2.2766e-04, -4.9541e-03,  4.0110e-02,
        -4.6458e-02, -3.7812e-02, -1.6950e-02, -1.2852e-01, -3.0848e-03,
         3.7733e-02,  1.0241e-01,  6.9044e-02,  5.1441e-02,  1.3225e-04,
         4.0064e-02,  9.7535e-02, -2.6734e-02, -7.1007e-02,  1.7457e-02,
         3.4877e-02,  1.1230e-02,  3.2300e-02, -2.0996e-02,  7.4292e-02,
         4.1988e-02, -7.3346e-02, -2.6733e-02, -6.9503e-02,  4.6845e-02,
         6.5144e-02, -9.7721e-02,  2.2138e-02,  8.7975e-02, -7.9255e-02,
         1.1979e-02], device='cuda:0')
recurrent_blocks.3.weight_ih_l0_reverse tensor([[ 4.4091e-04, -4.4249e-05,  9.7196e-04,  ...,  1.3321e-04,
          2.1274e-04,  9.6904e-05],
        [-4.2957e-04, -2.8692e-04, -2.4454e-04,  ...,  3.9600e-04,
         -6.3287e-04, -4.9941e-04],
        [ 2.7681e-04, -6.5288e-04,  1.1953e-03,  ...,  9.9420e-04,
         -1.9354e-04, -6.3892e-04],
        ...,
        [ 1.8557e-02,  4.5153e-02, -4.7930e-03,  ..., -5.5397e-02,
          2.9273e-02,  5.7217e-02],
        [ 1.3427e-02,  6.8339e-02, -7.7939e-02,  ..., -6.6150e-02,
          8.8249e-02,  6.9003e-02],
        [ 1.0669e-02,  4.4495e-02, -3.5233e-02,  ..., -4.0534e-02,
          4.2783e-02,  4.5166e-02]], device='cuda:0')
recurrent_blocks.3.weight_hh_l0_reverse tensor([[-0.0002, -0.0005,  0.0011,  ...,  0.0007,  0.0009,  0.0013],
        [-0.0002,  0.0007, -0.0018,  ..., -0.0011, -0.0007, -0.0009],
        [-0.0006,  0.0003, -0.0009,  ..., -0.0003,  0.0002,  0.0003],
        ...,
        [ 0.0132, -0.0287,  0.0895,  ...,  0.0467,  0.0258,  0.0321],
        [ 0.0224, -0.0279,  0.0611,  ...,  0.0365,  0.0136,  0.0110],
        [ 0.0117, -0.0193,  0.0521,  ...,  0.0283,  0.0154,  0.0164]],
       device='cuda:0')
recurrent_blocks.3.bias_ih_l0_reverse tensor([-1.3121e-03,  1.8967e-03,  6.1771e-04, -8.3937e-04, -2.8921e-03,
        -6.2583e-04,  1.5183e-02, -8.2199e-04,  1.8188e-02, -3.1700e-03,
        -1.1769e-02, -9.8773e-04, -1.6053e-02,  4.2658e-03,  3.7005e-04,
        -3.1008e-04,  2.5418e-03,  6.3396e-03,  1.9601e-02, -7.9803e-03,
         1.2121e-02,  7.9729e-03, -1.8965e-02,  2.8413e-03, -6.7080e-03,
         2.6036e-02, -8.5356e-03,  1.1275e-03,  3.9078e-04,  1.5557e-02,
         2.6914e-03, -4.9035e-03, -1.8899e-04,  5.4053e-03,  4.4797e-03,
         1.5936e-03, -1.5822e-02,  2.5724e-05,  6.1095e-03,  7.9016e-04,
         1.3704e-02, -2.7500e-03,  6.9628e-04, -8.1624e-04, -3.0073e-03,
        -1.5384e-03,  7.2506e-04,  1.2970e-02,  5.2662e-04,  1.1295e-03,
        -3.0805e-03, -2.0123e-02,  4.1219e-03, -1.1797e-04,  4.8008e-03,
        -2.0750e-04, -1.2684e-03,  2.6257e-03,  1.2955e-04,  1.5630e-03,
        -1.2404e-03,  6.1016e-03,  1.9983e-03,  3.7326e-03,  8.1668e-03,
         9.9335e-02, -2.5589e-02, -5.6146e-02,  1.2960e-01, -3.6407e-02,
        -2.4910e-01,  3.8590e-02, -2.0973e-01,  1.0170e-01,  1.5520e-01,
        -1.0647e-01,  3.9974e-01, -1.5045e-01,  6.2475e-03,  3.1724e-01,
        -1.2728e-01, -2.0645e-01,  3.4726e-01, -4.2426e-01,  4.0453e-01,
         1.0094e-01,  2.1720e-01,  5.1791e-02, -1.1692e-01,  2.3419e-01,
        -1.9609e-01,  1.9192e-01, -2.3786e-01, -2.2165e-01, -2.0085e-01,
        -1.5804e-01], device='cuda:0')
recurrent_blocks.3.bias_hh_l0_reverse tensor([-1.3121e-03,  1.8967e-03,  6.1771e-04, -8.3937e-04, -2.8921e-03,
        -6.2583e-04,  1.5183e-02, -8.2199e-04,  1.8188e-02, -3.1700e-03,
        -1.1769e-02, -9.8773e-04, -1.6053e-02,  4.2658e-03,  3.7005e-04,
        -3.1008e-04,  2.5418e-03,  6.3396e-03,  1.9601e-02, -7.9803e-03,
         1.2121e-02,  7.9729e-03, -1.8965e-02,  2.8413e-03, -6.7080e-03,
         2.6036e-02, -8.5356e-03,  1.1275e-03,  3.9078e-04,  1.5557e-02,
         2.6914e-03, -4.9035e-03, -1.8899e-04,  5.4053e-03,  4.4797e-03,
         1.5936e-03, -1.5822e-02,  2.5724e-05,  6.1095e-03,  7.9016e-04,
         1.3704e-02, -2.7500e-03,  6.9628e-04, -8.1624e-04, -3.0073e-03,
        -1.5384e-03,  7.2506e-04,  1.2970e-02,  5.2662e-04,  1.1295e-03,
        -3.0805e-03, -2.0123e-02,  4.1219e-03, -1.1797e-04,  4.8008e-03,
        -2.0750e-04, -1.2684e-03,  2.6257e-03,  1.2955e-04,  1.5630e-03,
        -1.2404e-03,  6.1016e-03,  1.9983e-03,  3.7326e-03,  1.0551e-02,
         5.1000e-02, -1.4512e-02, -2.5514e-02,  5.0498e-02, -1.7578e-02,
        -1.0806e-01,  1.7302e-02, -1.2123e-01,  4.6496e-02,  9.1456e-02,
        -3.9003e-02,  1.9884e-01, -8.8839e-02,  2.6158e-03,  1.3022e-01,
        -6.2681e-02, -1.0595e-01,  1.4240e-01, -1.7128e-01,  2.5981e-01,
         4.7959e-02,  9.9369e-02,  2.7676e-02, -4.4900e-02,  1.2768e-01,
        -8.8510e-02,  7.8617e-02, -1.4145e-01, -1.2903e-01, -8.3717e-02,
        -8.5312e-02], device='cuda:0')
fc_blocks.0.0.weight tensor([[-0.0074, -0.0017,  0.0006,  ..., -0.0070, -0.0131, -0.0012],
        [ 0.0850,  0.0610,  0.0584,  ..., -0.0137, -0.2162, -0.1436],
        [ 0.0239,  0.0063,  0.0624,  ...,  0.0334,  0.0319,  0.0375],
        ...,
        [ 0.0022, -0.0005, -0.0004,  ...,  0.0023,  0.0086,  0.0033],
        [ 0.0538, -0.0068,  0.3048,  ...,  0.1347,  0.1869,  0.3206],
        [ 0.1430,  0.1039, -0.0540,  ..., -0.0345, -0.3347, -0.3607]],
       device='cuda:0')
fc_blocks.0.0.bias tensor([-0.0177,  0.4137, -0.0697, -0.4606,  0.6024,  0.0625,  0.0335,  0.0183,
        -0.1106,  0.1456,  0.0060, -0.6513,  0.0130, -0.0583,  0.0060,  0.3459,
         0.0103,  0.1069,  0.2708,  0.0407,  0.5583, -0.0649,  0.5361,  0.2970,
        -0.1664, -0.0194, -0.1241,  0.1492, -0.1160, -0.0062, -0.5508,  0.9391],
       device='cuda:0')
fc_blocks.1.0.weight tensor([[ 6.5696e-06,  0.0000e+00,  1.8443e-03,  1.0883e-03,  2.0535e-05,
          5.8920e-05,  3.3382e-05,  1.6118e-04,  3.0986e-04,  1.4335e-03,
          1.3094e-04,  1.3668e-04,  3.5997e-06,  5.5130e-05,  2.5203e-05,
          1.1336e-03,  8.5452e-05,  1.8211e-03,  4.1451e-05,  1.6405e-04,
          2.0747e-03,  6.7344e-04,  5.4175e-07,  6.3471e-04,  0.0000e+00,
          6.2106e-04,  8.7557e-04,  2.9867e-05,  1.7682e-03,  0.0000e+00,
          2.7773e-03,  0.0000e+00],
        [-1.8409e-02, -1.0700e-01, -9.8554e-02, -3.3155e-01, -4.1733e-01,
         -2.2248e-02, -1.7376e-02, -1.9835e-03, -3.3313e-01, -3.0580e-01,
         -6.3274e-02, -3.5131e-01, -1.4128e-01, -1.1098e-02, -3.3468e-02,
         -5.9323e-01, -2.0585e-03, -8.9619e-02, -5.1823e-03, -1.5196e-01,
         -7.1045e-01, -2.9199e-02, -2.7877e-01, -7.4619e-01, -2.6084e-01,
         -7.6760e-03, -1.9948e-01, -3.0745e-02, -7.1777e-02, -5.4834e-04,
         -3.9735e-01, -1.8763e-01],
        [ 1.8960e-02,  6.0013e-03,  8.9468e-02,  7.6252e-02,  2.5553e-02,
          2.9698e-02,  2.4021e-02,  1.4086e-03,  1.3745e-02,  2.0313e-01,
          3.6174e-02,  6.6667e-02,  1.3826e-01,  1.8345e-02,  5.0357e-02,
          5.0350e-02,  3.9010e-03,  1.0127e-01,  4.8881e-02,  1.1867e-01,
          7.3114e-02,  5.7277e-02,  7.2187e-02,  6.8002e-02,  1.2008e-01,
          1.2076e-02,  2.0953e-01,  7.1207e-02,  3.7291e-02,  0.0000e+00,
          1.1657e-01,  7.9776e-03],
        [ 0.0000e+00, -7.9420e-03, -2.9219e-02, -2.4812e-02, -2.1465e-02,
          0.0000e+00,  0.0000e+00, -1.7845e-03, -2.8024e-02, -2.0292e-02,
         -1.2336e-02, -2.1968e-02, -7.8473e-06,  0.0000e+00,  0.0000e+00,
         -6.2033e-02, -5.3908e-05, -2.2504e-02,  0.0000e+00, -9.1527e-05,
         -7.9836e-02, -2.0387e-03, -9.6801e-03, -4.6006e-02, -7.6881e-03,
         -3.8690e-03, -9.8833e-03, -6.6870e-04, -2.8756e-02, -2.4582e-04,
         -6.6362e-02, -9.5813e-03],
        [ 7.4624e-03,  3.0012e-02,  1.6511e-02,  1.1578e-01,  1.3552e-01,
          2.0130e-03,  2.3429e-03,  4.4459e-04,  1.1217e-01,  8.8463e-02,
         -8.2304e-03,  1.0585e-01,  5.7514e-02,  2.7845e-04,  7.6687e-03,
          1.7279e-01,  0.0000e+00,  9.3221e-03, -1.0541e-02,  4.9040e-02,
          2.3620e-01, -4.6583e-03,  8.3993e-02,  2.6609e-01,  6.9076e-02,
          2.1046e-04,  4.0314e-02, -7.8208e-03,  2.1303e-02,  2.0687e-04,
          1.4674e-01,  5.7276e-02],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 3.2050e-02,  1.9063e-01,  1.6805e-01,  5.7573e-01,  7.3761e-01,
          3.7934e-02,  2.9626e-02,  3.4029e-03,  5.8685e-01,  5.2165e-01,
          1.2067e-01,  6.2260e-01,  2.4449e-01,  1.8922e-02,  5.7064e-02,
          1.0521e+00,  3.5099e-03,  1.5280e-01,  8.8482e-03,  2.5931e-01,
          1.2430e+00,  4.9455e-02,  4.9479e-01,  1.3080e+00,  4.6598e-01,
          1.3086e-02,  3.4041e-01,  5.2419e-02,  1.2307e-01,  9.6002e-04,
          6.8064e-01,  3.3279e-01],
        [-4.1575e-02, -2.3328e-01, -1.9416e-01, -7.4237e-01, -9.5090e-01,
         -4.5563e-02, -3.6257e-02, -1.8188e-03, -7.6113e-01, -6.5183e-01,
         -1.6240e-01, -8.1827e-01, -3.2403e-01, -2.1950e-02, -7.0678e-02,
         -1.3519e+00, -3.4044e-03, -1.7467e-01, -8.6563e-03, -3.3202e-01,
         -1.5966e+00, -5.1543e-02, -6.4107e-01, -1.6961e+00, -6.1381e-01,
         -1.0395e-02, -4.2609e-01, -6.5810e-02, -1.3322e-01, -9.3067e-04,
         -8.4566e-01, -4.2407e-01],
        [ 1.0592e-02,  8.2443e-02,  3.9709e-02,  1.8346e-01,  2.9323e-01,
          8.9367e-03,  6.9795e-03,  9.0513e-04,  2.2480e-01,  1.2410e-01,
          8.7077e-02,  2.5493e-01,  7.4152e-02,  4.4579e-03,  1.3444e-02,
          4.3418e-01,  8.2688e-04,  3.6003e-02,  2.1412e-03,  6.2046e-02,
          4.3801e-01,  1.0133e-02,  2.0591e-01,  4.7215e-01,  2.0723e-01,
          3.0851e-03,  8.1569e-02,  1.2338e-02,  3.2195e-02,  3.4121e-04,
          1.7485e-01,  1.3745e-01],
        [ 0.0000e+00,  7.0220e-04,  1.7682e-02,  1.1131e-02,  2.3475e-03,
          5.6750e-04,  2.8828e-04,  8.7505e-04,  6.1476e-03,  1.4857e-02,
          2.5801e-03,  4.0063e-03,  0.0000e+00,  4.6049e-04,  2.5426e-04,
          1.5061e-02,  6.5163e-04,  1.6224e-02,  1.0796e-03,  1.9541e-03,
          2.6807e-02,  4.2967e-03,  3.1101e-04,  1.0043e-02,  4.7231e-07,
          3.8816e-03,  9.7571e-03,  2.3551e-03,  1.4855e-02,  7.8705e-05,
          3.0843e-02,  8.5368e-04],
        [-4.5712e-04,  8.6849e-04, -1.2808e-01, -1.9055e-01, -1.1854e-01,
         -1.1404e-02, -7.1048e-03, -2.0950e-03, -2.8347e-02, -2.4452e-01,
          1.5102e-01,  1.2859e-02, -2.9555e-03, -5.0200e-03, -7.8948e-03,
         -4.9666e-02, -2.3887e-03, -1.0619e-01, -9.2098e-04, -1.0302e-01,
         -2.4742e-01, -4.5624e-02, -1.6447e-02, -2.4844e-01,  1.6853e-01,
         -1.0246e-02, -8.6590e-02, -4.8388e-03, -1.0568e-01, -3.1957e-04,
         -4.2843e-01, -1.6084e-02],
        [ 5.0513e-03,  1.5459e-01,  8.4936e-04,  9.6973e-02,  3.5473e-01,
          0.0000e+00,  0.0000e+00,  5.4182e-04,  2.2656e-01,  1.0612e-05,
          1.3641e-01,  2.6346e-01,  3.2906e-02,  0.0000e+00,  0.0000e+00,
          4.6130e-01,  0.0000e+00,  2.2696e-04,  0.0000e+00,  7.9864e-06,
          3.1802e-01,  0.0000e+00,  2.7313e-01,  4.0477e-01,  2.8786e-01,
         -2.4558e-07,  1.9372e-05,  0.0000e+00,  9.3050e-03,  3.9753e-04,
          1.9081e-02,  1.9928e-01],
        [-3.4368e-03,  5.2276e-03, -6.6712e-02, -1.2730e-01, -2.8944e-02,
         -1.5259e-02, -1.1906e-02, -1.1004e-03, -4.9003e-02, -2.0724e-01,
          8.4710e-02, -3.9185e-03, -3.5733e-02, -7.6131e-03, -2.1760e-02,
         -2.1840e-02, -1.4121e-03, -6.1293e-02, -2.7886e-03, -9.3248e-02,
         -2.0072e-01, -2.1066e-02,  1.2989e-02, -1.6352e-01,  5.2197e-02,
         -5.2618e-03, -1.2544e-01, -2.0949e-02, -4.1985e-02, -1.2248e-04,
         -2.4798e-01, -6.2514e-03],
        [-2.9029e-04, -1.3150e-03, -1.2814e-01, -9.2615e-02, -1.6249e-02,
         -2.7051e-02, -1.8913e-02, -2.3285e-03, -2.9469e-02, -2.2368e-01,
         -1.0180e-02, -2.4285e-02, -1.2406e-02, -1.5742e-02, -2.6633e-02,
         -7.1819e-02, -3.4152e-03, -1.3103e-01, -3.4467e-02, -8.8359e-02,
         -1.5930e-01, -6.8471e-02, -2.5744e-03, -7.2621e-02, -5.9158e-04,
         -1.2724e-02, -1.9163e-01, -5.9561e-02, -7.3104e-02, -3.4152e-04,
         -2.1408e-01, -5.3228e-03],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  2.0111e-03,  9.5230e-04,  7.3169e-03, -4.1432e-02,
          0.0000e+00, -3.1543e-07, -6.8983e-08,  3.6919e-02,  5.9337e-02,
          1.0764e-01,  8.0240e-02,  2.0090e-03, -5.1328e-06, -1.0221e-05,
          1.1842e-01, -4.4120e-06, -5.6485e-05,  1.2935e-02,  2.1485e-02,
          1.1887e-01,  1.8860e-03, -2.2099e-02,  3.2522e-02,  6.4477e-02,
         -2.8024e-06,  1.1029e-01,  3.1958e-02, -5.2840e-04,  0.0000e+00,
          6.5951e-03, -1.3254e-02]], device='cuda:0')
fc_blocks.1.0.bias tensor([ 0.0037, -1.4354,  0.5529, -0.1240,  0.3975,  0.0000,  2.5170, -3.2679,
         0.9123,  0.0468, -0.1157,  0.6843, -0.2780, -0.4936,  0.0000,  0.5610],
       device='cuda:0')
fc_blocks.2.0.weight tensor([[ 0.0000e+00, -4.2413e-01, -4.3559e-04, -6.5653e-04, -3.5666e-01,
          0.0000e+00, -6.4888e-01, -1.0072e-01, -5.1916e-01, -1.3519e-05,
         -1.8084e-03, -3.6227e-02,  9.1922e-04, -2.7157e-04,  0.0000e+00,
         -3.4859e-04],
        [-3.4316e-04, -8.8354e-01, -1.4685e-02, -4.3032e-03, -4.2812e-01,
          0.0000e+00, -1.2572e+00, -1.7840e-01, -1.0451e+00, -5.6480e-03,
         -5.9225e-02, -4.4790e-02, -4.7382e-02, -1.6777e-02,  0.0000e+00,
          1.0175e-01],
        [-3.6958e-04, -9.5157e-01, -1.5816e-02, -4.6345e-03, -4.6109e-01,
          0.0000e+00, -1.3540e+00, -1.9213e-01, -1.1256e+00, -6.0829e-03,
         -6.3786e-02, -4.8238e-02, -5.1030e-02, -1.8068e-02,  0.0000e+00,
          1.0958e-01],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 7.0851e-04,  1.8242e+00,  3.0320e-02,  8.8847e-03,  8.8394e-01,
          0.0000e+00,  2.5958e+00,  3.6833e-01,  2.1579e+00,  1.1661e-02,
          1.2228e-01,  9.2476e-02,  9.7828e-02,  3.4638e-02,  0.0000e+00,
         -2.1007e-01],
        [ 5.1819e-04,  1.3343e+00,  2.2177e-02,  6.5042e-03,  6.4654e-01,
          0.0000e+00,  1.8987e+00,  2.6941e-01,  1.5783e+00,  8.5387e-03,
          8.9455e-02,  6.7640e-02,  7.1555e-02,  2.5338e-02,  0.0000e+00,
         -1.5365e-01],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00]], device='cuda:0')
fc_blocks.2.0.bias tensor([-2.0644, -3.5466, -3.8197,  0.0000,  7.3226,  5.3560,  0.0000,  0.0000],
       device='cuda:0')
fc_blocks.3.0.weight tensor([[-0.0290, -0.4901, -0.2781,  0.0000, -0.5640, -0.3418,  0.0000,  0.0000],
        [-0.2120, -3.5822, -2.0323,  0.0000, -4.1223, -2.4984,  0.0000,  0.0000],
        [-0.1398, -2.3617, -1.3399,  0.0000, -2.7178, -1.6472,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000]],
       device='cuda:0')
fc_blocks.3.0.bias tensor([ -2.9351, -21.4515, -14.1429,   0.0000], device='cuda:0')
fc_blocks.4.0.weight tensor([[ 6.9295, 10.3026,  2.1543,  0.0000]], device='cuda:0')
fc_blocks.4.0.bias tensor([43.1506], device='cuda:0')
