[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/Latent/train_set
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 30.86it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]===============================Dataset shape===============================
Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 18.24it/s]
Mixed : (1850,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 959, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 882, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 953, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 825, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 866, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 866, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 871, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 871, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 4]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 4]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 962, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 849, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 849, 4]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 849, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 867, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 4]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 992, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 787, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 787, 4]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 787, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 788, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 846, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 846, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 899, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 899, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 900, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 894, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 4]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 915, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 949, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 862, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 865, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 865, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 816, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 816, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 817, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 4]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 1002, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 868, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 781, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 781, 4]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 781, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 782, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 812, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 812, 4]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 812, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 813, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 850, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 850, 4]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 850, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 851, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 853, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 853, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 854, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 795, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 4]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 990, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 928, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 928, 4]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 928, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 929, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 829, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 829, 4]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 829, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 960, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 960, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
===> [Minibatch 1/44].........<bound method Tensor.norm of tensor([[-6.6826e-05,  8.6883e-04],
        [-1.2770e-03,  1.7681e-04],
        [ 7.4429e-04,  1.5024e-03],
        [ 4.5087e-03, -5.5394e-04],
        [-2.7721e-03, -9.2885e-04],
        [-8.6455e-05, -7.4115e-04],
        [ 2.8929e-03, -6.0678e-04],
        [ 2.0010e-03,  3.7689e-04],
        [ 1.8436e-03, -1.4003e-03],
        [-9.8145e-04, -4.2832e-04],
        [ 1.7733e-03, -1.7858e-03],
        [ 1.1521e-03,  2.2670e-03],
        [ 5.5274e-04,  6.3765e-04],
        [ 2.2085e-04, -3.2155e-03],
        [-5.7339e-04, -3.1259e-04],
        [-6.8692e-03,  2.2894e-03],
        [-1.7796e-04, -1.4706e-03],
        [ 7.1667e-03,  5.3588e-03],
        [ 1.3620e-03,  4.3256e-04],
        [ 8.9958e-04,  1.9391e-03],
        [ 1.0319e-03, -7.7225e-04],
        [ 4.3019e-03, -2.8508e-03],
        [-4.7482e-03, -2.8447e-03],
        [-8.4650e-04,  3.5721e-04],
        [-1.7754e-03,  2.2452e-03],
        [ 8.4203e-04, -2.6655e-03],
        [-2.2221e-03, -3.1787e-04],
        [-7.8057e-04,  1.7404e-03],
        [ 3.1892e-04,  4.5222e-04],
        [-3.0798e-03,  1.2690e-03],
        [-3.8774e-04, -1.2716e-03],
        [ 1.7998e-04,  2.3749e-04],
        [ 4.0844e-04, -5.1244e-04],
        [ 4.9337e-04,  9.5863e-04],
        [ 3.8958e-03, -2.3616e-03],
        [ 1.1133e-03, -1.1217e-03],
        [ 1.7738e-04,  8.3493e-04],
        [ 1.7212e-03, -1.2737e-03],
        [-1.0884e-03, -2.8018e-03],
        [ 3.7517e-04, -3.4642e-05],
        [ 1.2120e-03, -3.2057e-03],
        [ 2.8454e-03,  2.9883e-03],
        [-6.7785e-04, -1.0044e-03],
        [-4.5232e-04,  2.7810e-03],
        [ 1.8308e-03,  8.1368e-04],
        [-1.5825e-03,  3.8723e-03],
        [-4.4285e-03,  2.5152e-03],
        [ 2.3364e-03, -7.3892e-04],
        [-5.5345e-04, -4.0084e-04],
        [-8.4640e-04, -5.9872e-04],
        [-5.7141e-04, -1.8172e-04],
        [-9.1060e-06,  4.7859e-04],
        [ 1.0540e-04, -2.0525e-03],
        [-1.4774e-03,  7.0156e-04],
        [-4.4628e-04,  2.4891e-04],
        [-1.0624e-03, -3.5606e-03],
        [ 2.3436e-03, -7.2676e-04],
        [ 5.8637e-03, -3.4656e-03],
        [ 8.8122e-05,  6.7231e-04],
        [-1.6559e-03, -3.2097e-03],
        [-5.7101e-04,  1.7539e-04],
        [-3.0438e-03,  2.0208e-03],
        [-2.5812e-04,  2.9712e-04],
        [-1.2173e-04,  4.0441e-04],
        [-7.7308e-02, -3.1994e-02],
        [ 1.8901e-02,  1.8003e-02],
        [-3.4936e-03,  5.9748e-02],
        [-6.9172e-02, -7.4010e-02],
        [-1.5227e-01, -8.0886e-02],
        [ 3.9818e-03,  1.5016e-02],
        [-5.9095e-02, -6.4461e-04],
        [ 5.6911e-02,  1.8792e-02],
        [ 2.4848e-02, -1.7636e-02],
        [-1.6500e-02,  1.8206e-02],
        [-6.6801e-03, -3.4853e-02],
        [-4.9239e-02, -6.6938e-02],
        [ 4.0002e-02, -1.3597e-02],
        [-1.1164e-01, -1.2486e-01],
        [ 2.6202e-02, -3.2114e-02],
        [ 2.9903e-02, -9.0047e-02],
        [ 3.0674e-02,  4.6285e-02],
        [ 8.7083e-02,  6.8390e-02],
        [ 6.5943e-02,  2.1217e-02],
        [-6.2440e-03, -2.6923e-02],
        [-6.0476e-02,  6.6249e-03],
        [ 3.5479e-02, -3.5761e-02],
        [-5.8205e-02, -5.8392e-02],
        [ 1.7826e-02, -4.2952e-02],
        [-5.5776e-02, -3.5110e-02],
        [ 1.2019e-01,  1.1224e-01],
        [-2.4969e-03,  6.1300e-03],
        [ 1.5217e-02, -1.5109e-02],
        [-1.0253e-02, -5.8477e-02],
        [ 5.8083e-02, -1.7069e-02],
        [-7.8686e-02, -9.6626e-02],
        [ 3.3301e-02,  9.8446e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.6856e-04, -2.6546e-04, -3.0252e-04,  ..., -9.6895e-05,
         -4.4224e-05,  1.3643e-04],
        [ 9.6854e-05,  7.6844e-06,  1.7925e-04,  ..., -2.2368e-04,
          2.6460e-05,  2.6754e-05],
        [-4.2707e-04, -3.6776e-04, -5.6330e-04,  ...,  1.1609e-04,
         -1.0137e-04,  1.5745e-04],
        ...,
        [ 1.2570e-02,  1.0025e-02,  1.4560e-02,  ...,  6.6004e-03,
          6.6103e-03, -9.1996e-03],
        [ 8.1945e-03,  7.3354e-03,  1.0638e-02,  ..., -5.1548e-03,
          1.4170e-04, -1.5252e-03],
        [-5.7123e-03, -2.5855e-03, -7.5963e-03,  ...,  4.0368e-03,
         -2.7461e-03,  1.9445e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.7031e-03, -1.3943e-04, -2.0910e-03,  2.1215e-05,  2.5805e-03,
        -3.4326e-03, -2.2701e-03, -2.6185e-03, -4.8682e-03,  1.7409e-04,
        -2.1239e-03, -2.7507e-03, -1.4612e-03, -3.3575e-03,  5.2342e-04,
         7.5902e-04, -9.9134e-04, -7.9485e-03,  5.6627e-04,  9.4713e-04,
         6.2387e-03, -1.8191e-03,  4.6015e-04, -9.9440e-04, -2.2791e-03,
        -2.3156e-03, -8.7823e-04,  1.9853e-03, -2.0418e-03, -3.3148e-03,
         6.3235e-04, -5.3845e-04,  8.1612e-06,  5.0437e-04, -4.3538e-04,
         4.0794e-04, -2.1521e-04, -7.7693e-04, -1.4455e-03, -4.5179e-05,
        -1.3434e-03,  1.1653e-03, -7.2881e-04,  5.1916e-04,  7.4845e-04,
         1.4805e-03,  9.1105e-04, -2.4882e-04, -9.8232e-05,  9.6736e-04,
        -3.1766e-04,  2.4220e-05, -9.0689e-04, -4.5847e-04,  1.4011e-04,
        -9.5509e-04, -4.8698e-04, -7.9732e-04,  8.6342e-05, -3.3314e-04,
         2.8042e-04, -7.7783e-04,  3.4203e-04,  2.9257e-04,  4.2205e-03,
         1.3553e-05, -5.1998e-02, -2.7144e-02,  8.4449e-02,  5.9203e-02,
         4.9144e-02, -1.1023e-01, -6.9435e-02,  1.1638e-03, -9.0598e-02,
         7.7833e-02,  3.7093e-02, -3.8057e-02, -3.9597e-02, -1.6155e-01,
         5.7206e-02, -1.0118e-01,  3.5334e-02, -2.3867e-02, -7.2750e-02,
        -1.3650e-01, -7.0448e-02, -7.7229e-02,  1.2346e-01, -2.6990e-02,
         4.8526e-02, -1.0342e-01,  1.2528e-01,  1.7037e-01,  6.9815e-02,
        -3.8823e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.7031e-03, -1.3943e-04, -2.0910e-03,  2.1215e-05,  2.5805e-03,
        -3.4326e-03, -2.2701e-03, -2.6185e-03, -4.8682e-03,  1.7409e-04,
        -2.1239e-03, -2.7507e-03, -1.4612e-03, -3.3575e-03,  5.2342e-04,
         7.5902e-04, -9.9134e-04, -7.9485e-03,  5.6627e-04,  9.4713e-04,
         6.2387e-03, -1.8191e-03,  4.6015e-04, -9.9440e-04, -2.2791e-03,
        -2.3156e-03, -8.7823e-04,  1.9853e-03, -2.0418e-03, -3.3148e-03,
         6.3235e-04, -5.3845e-04,  8.1612e-06,  5.0437e-04, -4.3538e-04,
         4.0794e-04, -2.1521e-04, -7.7693e-04, -1.4455e-03, -4.5179e-05,
        -1.3434e-03,  1.1653e-03, -7.2881e-04,  5.1916e-04,  7.4845e-04,
         1.4805e-03,  9.1105e-04, -2.4882e-04, -9.8232e-05,  9.6736e-04,
        -3.1766e-04,  2.4220e-05, -9.0689e-04, -4.5847e-04,  1.4011e-04,
        -9.5509e-04, -4.8698e-04, -7.9732e-04,  8.6342e-05, -3.3314e-04,
         2.8042e-04, -7.7783e-04,  3.4203e-04,  2.9257e-04, -5.9103e-04,
        -7.2775e-04, -2.9344e-02, -8.8193e-03,  4.5613e-02,  2.9414e-02,
         2.4969e-02, -6.1813e-02, -3.7097e-02, -6.0232e-04, -4.6320e-02,
         3.9430e-02,  1.8091e-02, -2.1897e-02, -2.0108e-02, -7.4228e-02,
         3.0978e-02, -5.2564e-02,  1.7740e-02, -1.1757e-02, -3.4477e-02,
        -6.8541e-02, -2.9549e-02, -3.9245e-02,  6.5057e-02, -1.2664e-02,
         2.5114e-02, -5.7027e-02,  6.7926e-02,  8.5374e-02,  3.2765e-02,
        -1.7335e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.5286e-03, -1.4142e-03],
        [ 5.1541e-05, -4.6661e-04],
        [-1.2142e-03, -1.4864e-03],
        [-1.9736e-04,  4.5974e-04],
        [ 1.8984e-04,  1.3056e-03],
        [ 1.0611e-03,  2.8635e-04],
        [-5.1131e-04,  1.4961e-03],
        [-3.5061e-04, -6.1983e-04],
        [ 5.8043e-04, -6.7504e-04],
        [ 8.7001e-04,  5.0689e-03],
        [ 7.5522e-04,  2.5877e-03],
        [ 2.3760e-04,  5.0732e-04],
        [ 7.4064e-04,  1.0934e-04],
        [-4.2258e-04, -7.5767e-04],
        [ 4.4621e-03,  6.1277e-04],
        [ 4.1351e-04,  2.8499e-03],
        [ 1.9334e-05,  2.4134e-03],
        [ 5.4387e-04,  2.0160e-03],
        [ 1.0578e-03,  1.0256e-04],
        [-5.3119e-05,  4.6182e-03],
        [ 1.8998e-04,  1.3515e-04],
        [-8.1814e-04, -1.7118e-04],
        [ 1.5003e-03, -9.2716e-04],
        [-4.2612e-03,  9.7431e-03],
        [ 5.4831e-03,  3.3784e-03],
        [ 7.4090e-04,  1.6907e-03],
        [-8.7145e-04, -1.0755e-03],
        [-6.0949e-03, -6.7607e-03],
        [ 3.0579e-03, -1.0467e-03],
        [-9.7846e-04,  1.8007e-03],
        [-1.7208e-03,  2.1230e-03],
        [ 5.1303e-04,  1.0023e-03],
        [ 1.8621e-03, -1.6342e-03],
        [ 1.6726e-04, -6.2999e-04],
        [-7.6306e-04, -1.3954e-03],
        [ 8.3720e-04,  1.5314e-03],
        [-6.2280e-04,  1.7764e-04],
        [-2.1932e-03, -1.3657e-03],
        [ 1.2634e-03, -9.0351e-04],
        [ 4.9616e-04, -5.2461e-04],
        [ 3.2650e-04,  9.6056e-06],
        [ 9.2389e-04, -2.1001e-03],
        [ 6.3768e-04,  8.8066e-04],
        [ 3.8104e-04, -1.8596e-04],
        [-4.3304e-04,  3.4071e-04],
        [-5.8165e-05, -9.2057e-04],
        [-2.4738e-04,  1.1418e-04],
        [ 8.9832e-04, -3.9167e-03],
        [-8.2709e-04, -1.5961e-03],
        [ 1.0176e-04, -1.1688e-04],
        [-1.2832e-04,  6.9055e-04],
        [ 1.7108e-04,  9.2532e-04],
        [ 4.5203e-04,  1.5157e-04],
        [-9.4844e-04, -9.6117e-04],
        [ 5.6611e-04,  3.5324e-04],
        [-1.0574e-03,  1.8521e-04],
        [ 5.5354e-05,  5.3505e-04],
        [ 3.4621e-04,  7.1692e-04],
        [ 7.8345e-05,  2.7058e-04],
        [-2.5191e-06,  1.1962e-03],
        [-2.6996e-04, -1.2525e-03],
        [-4.7065e-04, -3.1604e-04],
        [-5.7978e-04, -6.1834e-04],
        [ 1.6520e-04, -1.2535e-04],
        [-9.0239e-03,  2.2849e-03],
        [-1.1806e-04, -5.0444e-03],
        [-2.0621e-02, -3.2427e-02],
        [ 1.1917e-02,  4.8403e-02],
        [-7.0271e-03,  5.2846e-02],
        [-1.3477e-02,  4.1232e-02],
        [ 1.9040e-02,  4.0638e-02],
        [ 1.9515e-02,  3.0180e-02],
        [-3.3953e-02, -5.2564e-02],
        [ 4.1343e-02,  6.9312e-02],
        [-1.8167e-02, -2.8113e-02],
        [ 3.8739e-02,  1.3779e-01],
        [-3.9774e-02, -8.3255e-02],
        [-5.4308e-02,  4.2356e-04],
        [-9.0184e-02, -1.6982e-01],
        [-2.6247e-02,  1.5719e-02],
        [-7.4129e-02, -3.3040e-02],
        [-4.3864e-02, -4.7235e-02],
        [-6.6337e-02, -7.2235e-02],
        [ 3.0873e-02,  9.8076e-02],
        [-8.6861e-02, -1.0356e-01],
        [ 6.0854e-02,  8.2306e-02],
        [ 5.2298e-03, -6.2885e-02],
        [ 3.7774e-02, -1.3912e-01],
        [ 1.8934e-01,  1.4047e-01],
        [-3.8706e-04, -1.1316e-01],
        [-5.8272e-02, -2.1311e-02],
        [ 1.0000e-01,  5.1108e-02],
        [ 7.3150e-02,  8.6726e-03],
        [ 6.9465e-02,  1.5814e-01],
        [ 6.4184e-02,  8.9520e-04],
        [ 1.0085e-02,  5.7353e-02]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-4.5659e-04,  2.1613e-04,  2.5287e-04,  ...,  7.0367e-05,
         -2.7067e-04, -2.4359e-04],
        [ 3.1525e-04,  1.9070e-04, -3.1235e-04,  ..., -7.2255e-05,
          2.3821e-04,  2.9354e-05],
        [-5.6709e-04,  8.5948e-04,  5.1056e-04,  ...,  4.2966e-04,
         -4.4389e-04, -5.0336e-04],
        ...,
        [-8.6759e-03, -2.7583e-02,  1.0054e-02,  ..., -4.8749e-03,
         -5.9398e-03,  5.6434e-03],
        [ 1.1840e-02, -4.2611e-03, -3.7432e-03,  ..., -5.5578e-05,
          5.7263e-03,  6.5162e-03],
        [-2.9770e-05, -7.0044e-03, -1.3277e-03,  ..., -2.9264e-03,
          5.4804e-04,  1.5325e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.4974e-03, -9.1290e-05,  2.9703e-03,  1.7276e-06,  1.3649e-04,
         1.3293e-03,  3.0726e-03,  1.0647e-03, -1.1974e-05,  7.0866e-03,
        -2.1317e-03, -1.5818e-03,  1.4813e-03, -6.4293e-05, -7.9047e-03,
        -9.9493e-05,  6.9172e-03,  2.7056e-03, -1.8064e-03,  2.5936e-03,
        -1.6451e-03, -9.5299e-04,  5.2547e-04,  5.6262e-03, -1.7311e-03,
         1.9658e-04,  2.6315e-04,  1.0910e-02, -2.3496e-03,  2.7185e-03,
         3.7283e-03,  6.8030e-04,  7.6651e-04,  4.5479e-03,  3.4581e-03,
        -1.6360e-04, -5.7711e-03, -3.8329e-03,  1.1915e-03,  2.6177e-03,
         2.2184e-03,  1.9780e-03,  3.3015e-07, -8.5690e-04,  1.0194e-03,
        -3.1444e-04, -3.2795e-03,  4.4708e-03,  1.0507e-03,  4.4210e-04,
         3.0375e-03,  2.2925e-03,  7.5415e-03, -9.6617e-03, -3.9347e-03,
        -1.3020e-03,  8.0573e-04, -3.2653e-03, -2.3653e-04,  4.0008e-03,
        -4.2667e-03, -1.0376e-02,  1.0819e-03,  5.9718e-06, -9.0145e-02,
        -4.4350e-02,  4.6639e-02, -7.1050e-02,  1.4220e-02,  1.0139e-01,
         9.3025e-02, -3.8930e-02, -4.1784e-02,  1.2918e-01,  4.3064e-02,
        -8.6575e-03, -4.1964e-02,  4.5279e-02,  5.7874e-02,  1.7611e-01,
         1.7320e-01, -5.2706e-02, -1.7534e-02, -1.7408e-02, -7.0340e-03,
        -3.5617e-02, -5.2141e-02, -3.1660e-02, -4.6470e-02,  7.5520e-04,
         1.6187e-02, -1.4854e-01, -6.9236e-02, -3.2377e-02, -6.9912e-02,
        -1.0702e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.4974e-03, -9.1290e-05,  2.9703e-03,  1.7276e-06,  1.3649e-04,
         1.3293e-03,  3.0726e-03,  1.0647e-03, -1.1974e-05,  7.0866e-03,
        -2.1317e-03, -1.5818e-03,  1.4813e-03, -6.4293e-05, -7.9047e-03,
        -9.9493e-05,  6.9172e-03,  2.7056e-03, -1.8064e-03,  2.5936e-03,
        -1.6451e-03, -9.5299e-04,  5.2547e-04,  5.6262e-03, -1.7311e-03,
         1.9658e-04,  2.6315e-04,  1.0910e-02, -2.3496e-03,  2.7185e-03,
         3.7283e-03,  6.8030e-04,  7.6651e-04,  4.5479e-03,  3.4581e-03,
        -1.6360e-04, -5.7711e-03, -3.8329e-03,  1.1915e-03,  2.6177e-03,
         2.2184e-03,  1.9780e-03,  3.3015e-07, -8.5690e-04,  1.0194e-03,
        -3.1444e-04, -3.2795e-03,  4.4708e-03,  1.0507e-03,  4.4210e-04,
         3.0375e-03,  2.2925e-03,  7.5415e-03, -9.6617e-03, -3.9347e-03,
        -1.3020e-03,  8.0573e-04, -3.2653e-03, -2.3653e-04,  4.0008e-03,
        -4.2667e-03, -1.0376e-02,  1.0819e-03,  5.9718e-06, -5.0678e-02,
        -1.9145e-02,  2.0100e-02, -3.4962e-02,  7.4339e-03,  5.0608e-02,
         4.7691e-02, -2.0463e-02, -2.5135e-02,  6.6291e-02,  2.1543e-02,
        -1.8398e-04, -2.2196e-02,  2.1471e-02,  3.2498e-02,  8.1824e-02,
         8.0439e-02, -3.0086e-02, -1.0170e-02, -4.6491e-03,  5.9401e-03,
        -1.1893e-02, -2.1856e-02, -1.4407e-02, -3.1246e-02, -2.5083e-03,
         8.2701e-03, -7.8109e-02, -4.0912e-02, -1.2143e-02, -3.8563e-02,
        -7.6731e-03], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 1.2813e-05,  3.7321e-05,  3.7499e-05,  ..., -1.6635e-04,
          1.3011e-04, -9.8772e-05],
        [-1.7392e-04, -1.1063e-04, -2.0799e-04,  ..., -9.7424e-05,
          1.4464e-04,  7.0404e-05],
        [ 6.3780e-04,  2.7134e-04,  8.5929e-04,  ...,  4.4481e-05,
         -3.9640e-04, -3.4077e-04],
        ...,
        [ 2.3389e-02,  1.5651e-02,  2.8328e-02,  ...,  2.1360e-02,
         -2.1071e-02, -7.1902e-03],
        [ 3.2940e-03,  7.5184e-03,  3.9852e-03,  ...,  9.9045e-04,
          6.5230e-03, -4.7503e-03],
        [ 4.4371e-04,  8.4703e-04,  4.8770e-04,  ..., -5.3428e-04,
         -1.6645e-03, -4.1754e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.0949e-04, -2.2132e-04,  1.4735e-04,  ..., -5.3838e-05,
          1.4756e-04, -4.7611e-06],
        [ 3.3679e-06, -2.1924e-04,  1.3833e-04,  ..., -2.8469e-05,
          2.0677e-04, -1.3900e-04],
        [-1.7107e-04,  5.0855e-04, -3.3627e-04,  ...,  3.0001e-05,
         -6.2282e-04,  1.8563e-04],
        ...,
        [ 8.1239e-04,  1.8787e-02, -1.1346e-02,  ...,  3.4216e-03,
         -1.7472e-02,  1.0730e-02],
        [-1.9237e-03, -2.0048e-03,  1.7188e-03,  ..., -7.5522e-04,
          8.2774e-04,  3.6364e-03],
        [-1.3999e-03, -6.0835e-04,  1.5223e-03,  ...,  2.6110e-04,
          6.9255e-04,  3.2232e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([-2.8175e-04, -9.4397e-04,  2.2377e-03, -2.8113e-04,  4.1173e-03,
        -1.0999e-04, -4.1534e-04,  5.5443e-03,  1.6680e-03, -2.5090e-03,
         1.7147e-03, -9.6485e-05,  6.8013e-04, -1.9045e-04,  6.1307e-04,
        -2.9316e-04, -9.5401e-04, -1.0238e-03, -1.0522e-03, -6.4062e-04,
         2.8021e-03, -2.7335e-03, -6.4669e-04, -1.9696e-03,  1.7770e-03,
         3.3281e-05, -1.3767e-03,  4.3872e-03, -2.9299e-03,  2.5109e-03,
         1.9192e-03,  3.4253e-04,  9.4162e-04, -2.3854e-04, -9.3487e-04,
         6.4225e-04, -6.8260e-04,  3.4100e-04,  6.7632e-04,  6.2254e-05,
         6.9588e-05, -4.1705e-04,  4.4177e-04, -5.9683e-04,  4.7237e-04,
        -3.6688e-05,  6.2300e-04, -1.0714e-03,  2.6962e-06,  3.3437e-04,
        -8.7349e-04, -2.9943e-07,  1.2567e-04,  3.5857e-04,  3.7214e-04,
         5.6692e-04, -7.9219e-05, -1.1488e-03, -1.4356e-04,  3.8648e-04,
         9.9345e-04,  6.5037e-04,  9.1815e-05,  9.8559e-04,  9.9945e-03,
         7.5032e-02, -9.1701e-02, -6.6349e-04,  7.9070e-02,  1.4977e-02,
         5.7319e-02, -1.1685e-01, -4.5500e-02,  8.7235e-02, -2.3249e-02,
         4.3569e-02, -5.1317e-02, -5.0926e-02, -8.2204e-03, -8.1628e-02,
         3.0062e-02, -2.7599e-02,  5.6870e-02, -4.6293e-02,  3.9469e-02,
        -1.3413e-01, -3.2295e-02, -9.8349e-02,  8.1760e-02,  1.9804e-02,
        -2.9478e-02, -6.6512e-02,  1.2704e-01,  1.3719e-01,  2.1222e-02,
        -5.5382e-04], device='cuda:0')>
<bound method Tensor.norm of tensor([-2.8175e-04, -9.4397e-04,  2.2377e-03, -2.8113e-04,  4.1173e-03,
        -1.0999e-04, -4.1534e-04,  5.5443e-03,  1.6680e-03, -2.5090e-03,
         1.7147e-03, -9.6485e-05,  6.8013e-04, -1.9045e-04,  6.1307e-04,
        -2.9316e-04, -9.5401e-04, -1.0238e-03, -1.0522e-03, -6.4062e-04,
         2.8021e-03, -2.7335e-03, -6.4669e-04, -1.9696e-03,  1.7770e-03,
         3.3281e-05, -1.3767e-03,  4.3872e-03, -2.9299e-03,  2.5109e-03,
         1.9192e-03,  3.4253e-04,  9.4162e-04, -2.3854e-04, -9.3487e-04,
         6.4225e-04, -6.8260e-04,  3.4100e-04,  6.7632e-04,  6.2254e-05,
         6.9588e-05, -4.1705e-04,  4.4177e-04, -5.9683e-04,  4.7237e-04,
        -3.6688e-05,  6.2300e-04, -1.0714e-03,  2.6962e-06,  3.3437e-04,
        -8.7349e-04, -2.9943e-07,  1.2567e-04,  3.5857e-04,  3.7214e-04,
         5.6692e-04, -7.9219e-05, -1.1488e-03, -1.4356e-04,  3.8648e-04,
         9.9345e-04,  6.5037e-04,  9.1815e-05,  9.8559e-04,  3.7441e-03,
         4.3346e-02, -4.4006e-02, -1.3435e-03,  4.7712e-02,  7.1753e-03,
         2.9069e-02, -5.5362e-02, -1.8514e-02,  4.8096e-02, -1.1971e-02,
         2.3418e-02, -2.7653e-02, -2.4841e-02, -6.0466e-03, -4.5199e-02,
         1.3070e-02, -1.3330e-02,  3.4806e-02, -2.3867e-02,  1.9276e-02,
        -6.0531e-02, -1.6212e-02, -5.6714e-02,  3.6327e-02,  5.8884e-03,
        -1.5914e-02, -3.1233e-02,  8.0378e-02,  7.3684e-02,  1.0531e-02,
         9.7033e-05], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.0180e-04, -2.0129e-04, -3.0983e-04,  ...,  1.4997e-04,
         -1.6701e-04,  1.6422e-04],
        [ 1.8034e-04,  1.3773e-04,  2.2647e-04,  ...,  1.9477e-04,
         -1.7841e-04, -6.8648e-05],
        [ 4.0017e-04,  3.2767e-04,  5.0463e-04,  ...,  2.2819e-04,
         -1.5807e-04, -2.2729e-04],
        ...,
        [-6.1404e-03, -1.4095e-02, -9.1219e-03,  ..., -1.7982e-03,
         -1.0791e-02,  9.9249e-03],
        [-4.9042e-03,  1.6842e-03, -7.3051e-03,  ...,  1.8368e-03,
          7.1259e-03,  2.2674e-03],
        [-8.0663e-03, -1.0554e-02, -1.0981e-02,  ..., -2.1718e-03,
         -2.5306e-03,  8.6189e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.1274e-04,  3.0888e-04,  2.0212e-04,  ...,  4.2583e-04,
         -1.7667e-04, -4.6389e-04],
        [-1.2653e-04, -2.4315e-05, -8.0287e-05,  ...,  2.0427e-05,
          4.6896e-05,  2.6754e-05],
        [-1.7164e-04, -3.4278e-04, -2.5593e-04,  ..., -3.1194e-04,
          2.5566e-04,  4.2313e-04],
        ...,
        [-4.7989e-04,  1.7688e-02,  5.9180e-03,  ...,  2.1373e-02,
         -1.0195e-02, -1.9903e-02],
        [ 2.3421e-03, -4.0929e-03,  1.0070e-03,  ..., -5.7540e-03,
          1.0698e-03,  3.3083e-03],
        [ 1.2293e-03,  9.6478e-03,  4.3378e-03,  ...,  1.1070e-02,
         -6.2406e-03, -1.1614e-02]], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.2452e-04,  1.3015e-03,  2.1101e-03,  6.8341e-04, -6.6962e-04,
        -2.1835e-04,  9.2223e-04, -1.3485e-04, -2.2820e-03,  2.5326e-03,
        -6.8251e-04, -1.0785e-03, -1.5302e-03, -1.1528e-03, -6.7985e-04,
        -4.7775e-03, -6.3595e-03,  2.3231e-03,  3.8218e-03, -9.5335e-04,
        -3.3623e-04,  1.3525e-03,  4.8261e-04,  1.7985e-03,  7.3555e-04,
         7.0752e-04, -2.2651e-03, -7.4273e-03,  1.7498e-03,  1.6469e-03,
         2.7942e-04,  1.5939e-03,  2.4609e-04, -2.5828e-03, -1.5823e-03,
         3.4081e-05, -9.4917e-05,  1.7283e-03,  4.3164e-04,  1.4264e-03,
        -1.1298e-03, -2.3232e-03,  6.0807e-04,  2.1237e-03, -3.0287e-04,
         1.9976e-03, -8.0452e-03,  3.9584e-05,  6.2962e-04, -9.1533e-04,
        -6.3660e-04, -5.0805e-03,  3.7232e-03, -1.8123e-03, -1.1285e-03,
        -2.1080e-03, -4.5349e-04,  9.3746e-04, -2.7573e-04, -1.9976e-05,
        -5.1706e-03,  4.5809e-03,  3.7125e-04, -3.7585e-03, -6.6579e-02,
        -7.3309e-02,  1.5348e-01, -2.0207e-02,  1.7901e-02,  1.6421e-02,
         4.0535e-02, -5.9090e-02,  1.2473e-02,  5.4783e-02,  3.0559e-02,
         1.0629e-02, -1.2999e-02, -1.5485e-02,  4.9211e-02,  1.0088e-01,
         1.3913e-01, -5.6972e-02,  8.8641e-03,  1.7301e-02, -9.8679e-04,
        -4.4287e-02,  6.8138e-03, -6.8306e-03, -4.4629e-02, -6.1528e-02,
         6.2588e-02, -1.4999e-01,  2.4503e-02, -3.3249e-02, -5.9963e-03,
        -3.5579e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.2452e-04,  1.3015e-03,  2.1101e-03,  6.8341e-04, -6.6962e-04,
        -2.1835e-04,  9.2223e-04, -1.3485e-04, -2.2820e-03,  2.5326e-03,
        -6.8251e-04, -1.0785e-03, -1.5302e-03, -1.1528e-03, -6.7985e-04,
        -4.7775e-03, -6.3595e-03,  2.3231e-03,  3.8218e-03, -9.5335e-04,
        -3.3623e-04,  1.3525e-03,  4.8261e-04,  1.7985e-03,  7.3555e-04,
         7.0752e-04, -2.2651e-03, -7.4273e-03,  1.7498e-03,  1.6469e-03,
         2.7942e-04,  1.5939e-03,  2.4609e-04, -2.5828e-03, -1.5823e-03,
         3.4081e-05, -9.4917e-05,  1.7283e-03,  4.3164e-04,  1.4264e-03,
        -1.1298e-03, -2.3232e-03,  6.0807e-04,  2.1237e-03, -3.0287e-04,
         1.9976e-03, -8.0452e-03,  3.9584e-05,  6.2962e-04, -9.1533e-04,
        -6.3660e-04, -5.0805e-03,  3.7232e-03, -1.8123e-03, -1.1285e-03,
        -2.1080e-03, -4.5349e-04,  9.3746e-04, -2.7573e-04, -1.9976e-05,
        -5.1706e-03,  4.5809e-03,  3.7125e-04, -3.7585e-03, -3.3038e-02,
        -4.0455e-02,  8.0507e-02, -9.7057e-03,  8.5820e-03,  7.9352e-03,
         2.0232e-02, -3.3332e-02,  5.7726e-03,  2.6102e-02,  1.7813e-02,
         5.6561e-03, -7.3989e-03, -7.6351e-03,  3.3724e-02,  5.4237e-02,
         7.6146e-02, -2.8224e-02,  6.9064e-03,  6.1756e-03,  5.1929e-04,
        -1.3786e-02,  3.7387e-03, -3.7463e-03, -2.2730e-02, -3.2711e-02,
         3.6404e-02, -8.5172e-02,  1.0652e-02, -1.8870e-02, -3.5031e-03,
        -1.5531e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 4.2085e-05,  2.4180e-05,  2.3002e-04,  ..., -2.3691e-04,
          7.3415e-05,  2.6815e-06],
        [-2.5760e-04, -5.1352e-04, -2.4271e-05,  ..., -1.9842e-04,
          1.3595e-04,  1.2368e-05],
        [ 1.9512e-05,  2.7699e-05,  1.0255e-04,  ..., -1.3228e-04,
          5.6350e-05,  3.8173e-05],
        ...,
        [ 1.3333e-02,  2.3588e-02, -2.1521e-03,  ...,  1.8982e-02,
         -1.1040e-02, -3.6498e-03],
        [-8.8300e-04,  2.2335e-03,  1.6552e-03,  ..., -1.1093e-02,
          1.0571e-02,  1.0147e-02],
        [-9.6573e-03, -1.3515e-02,  2.7598e-03,  ..., -1.1433e-02,
          5.0653e-03, -1.9613e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-7.8424e-05, -1.4161e-04,  7.5608e-05,  ..., -1.4205e-04,
         -1.7697e-04, -1.1593e-04],
        [ 1.8831e-05, -1.5064e-04, -1.0454e-05,  ...,  9.4491e-05,
          1.1658e-04,  1.7684e-04],
        [-4.0230e-05, -5.5077e-05,  2.2374e-05,  ..., -9.2797e-05,
         -1.2569e-04, -9.3535e-05],
        ...,
        [ 4.9245e-04,  5.6055e-03, -1.2912e-05,  ...,  7.8894e-04,
          9.8044e-04, -1.8706e-03],
        [-2.4348e-04,  8.6711e-04, -1.6064e-03,  ..., -3.3627e-03,
         -5.3879e-03, -5.1346e-03],
        [-7.5623e-04, -4.5971e-03,  1.3403e-03,  ..., -1.2544e-03,
         -8.7711e-04,  1.3178e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.6629e-04, -1.3947e-03,  1.7410e-04, -2.7239e-03,  3.4968e-03,
        -2.7847e-03,  2.2967e-03,  3.5493e-03, -3.8761e-04,  6.4159e-05,
        -8.8611e-05, -5.1108e-04, -1.7100e-03, -9.6484e-04,  6.3045e-04,
        -2.5987e-03, -7.8527e-04, -1.0918e-03,  2.8628e-04,  4.1665e-05,
         8.8713e-04, -8.2379e-03, -2.1719e-04,  7.0676e-04,  2.4290e-03,
        -1.6609e-04, -6.0761e-04, -1.0500e-04,  5.3171e-03,  1.9268e-03,
        -1.9235e-03,  1.2518e-03, -1.5685e-04,  1.7205e-03,  4.1483e-04,
         8.9123e-04, -2.7179e-04, -2.3231e-04,  1.4050e-03, -5.6405e-05,
         1.9365e-04, -4.8539e-04,  2.9502e-04,  1.1695e-03, -1.3272e-04,
        -9.2775e-04,  1.1520e-04,  8.0243e-05, -1.3039e-03,  4.1981e-04,
         3.5696e-04,  4.8850e-05,  2.9440e-04, -7.1780e-04,  7.7063e-04,
         1.2086e-04,  3.6734e-05, -2.8969e-04,  4.6094e-04,  1.9524e-04,
         1.3331e-04, -1.4389e-03,  1.7694e-03,  7.1213e-04,  1.7632e-02,
         4.9882e-02, -8.0885e-02, -4.1961e-02,  3.1125e-02, -2.9106e-02,
         4.2201e-02, -7.5164e-02, -4.3592e-02,  3.3681e-02, -4.3407e-02,
         5.0332e-03, -2.5199e-02, -3.4765e-03, -1.2505e-02, -7.2786e-02,
         4.3017e-02, -1.9797e-02,  3.2641e-02, -2.6117e-02,  4.4061e-02,
        -1.1856e-01, -6.9372e-02, -2.5083e-02,  3.2836e-02,  2.8163e-02,
         3.5277e-03, -2.4996e-02,  9.1421e-02,  6.0437e-02,  1.2268e-02,
        -3.8390e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.6629e-04, -1.3947e-03,  1.7410e-04, -2.7239e-03,  3.4968e-03,
        -2.7847e-03,  2.2967e-03,  3.5493e-03, -3.8761e-04,  6.4159e-05,
        -8.8611e-05, -5.1108e-04, -1.7100e-03, -9.6484e-04,  6.3045e-04,
        -2.5987e-03, -7.8527e-04, -1.0918e-03,  2.8628e-04,  4.1665e-05,
         8.8713e-04, -8.2379e-03, -2.1719e-04,  7.0676e-04,  2.4290e-03,
        -1.6609e-04, -6.0761e-04, -1.0500e-04,  5.3171e-03,  1.9268e-03,
        -1.9235e-03,  1.2518e-03, -1.5685e-04,  1.7205e-03,  4.1483e-04,
         8.9123e-04, -2.7179e-04, -2.3231e-04,  1.4050e-03, -5.6405e-05,
         1.9365e-04, -4.8539e-04,  2.9502e-04,  1.1695e-03, -1.3272e-04,
        -9.2775e-04,  1.1520e-04,  8.0243e-05, -1.3039e-03,  4.1981e-04,
         3.5696e-04,  4.8850e-05,  2.9440e-04, -7.1780e-04,  7.7063e-04,
         1.2086e-04,  3.6734e-05, -2.8969e-04,  4.6094e-04,  1.9524e-04,
         1.3331e-04, -1.4389e-03,  1.7694e-03,  7.1213e-04,  8.2877e-03,
         2.6513e-02, -4.1779e-02, -1.7532e-02,  1.8726e-02, -1.3880e-02,
         2.5695e-02, -3.7147e-02, -2.0090e-02,  1.5183e-02, -2.5975e-02,
         1.1836e-03, -9.8930e-03, -2.2762e-03, -7.8150e-03, -3.9459e-02,
         1.5279e-02, -8.8231e-03,  1.2581e-02, -1.4088e-02,  2.1137e-02,
        -5.2649e-02, -3.6532e-02, -1.4921e-02,  1.4056e-02,  1.5541e-02,
         2.0982e-03, -1.2741e-02,  5.5288e-02,  3.2312e-02,  5.4638e-03,
        -1.9923e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.9597e-04, -3.4031e-04, -4.7484e-04,  ...,  4.1803e-04,
         -3.0283e-04, -2.4598e-04],
        [-2.6094e-04, -4.4074e-04, -3.3460e-04,  ..., -4.3488e-05,
          1.3275e-04,  1.2338e-04],
        [-6.1233e-05, -1.9945e-04, -1.8570e-04,  ...,  2.6195e-04,
         -1.5402e-04, -1.3765e-04],
        ...,
        [-2.5363e-03, -1.3701e-02, -1.8581e-02,  ...,  2.4773e-02,
         -1.7518e-02, -1.5605e-02],
        [ 3.4534e-04,  7.7375e-03, -5.7191e-03,  ...,  1.7392e-04,
          3.8243e-03,  6.4756e-03],
        [-1.3267e-02, -3.1488e-02, -2.0107e-02,  ...,  7.1338e-03,
         -3.8499e-03, -7.9180e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.4978e-04,  4.3630e-06,  5.4809e-04,  ...,  1.1933e-04,
         -1.1793e-04, -3.6401e-04],
        [ 4.5496e-06,  1.2157e-04,  5.7454e-05,  ..., -2.0410e-04,
          1.8962e-04,  5.1385e-05],
        [-1.0402e-04,  1.4718e-05,  3.0804e-04,  ...,  4.9132e-05,
         -6.4736e-05, -1.9912e-04],
        ...,
        [-4.3332e-03, -2.0625e-04,  1.1556e-02,  ...,  2.9265e-03,
         -3.3916e-03, -7.7614e-03],
        [-5.4026e-04, -5.1411e-05, -6.1393e-03,  ..., -5.6264e-03,
          1.5065e-03,  1.8184e-03],
        [-1.9531e-03,  3.5476e-03,  1.1518e-02,  ...,  7.4237e-04,
          9.4610e-04, -3.3269e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.4126e-03, -1.3533e-03, -6.7498e-04, -6.1142e-05, -3.0814e-04,
         1.8263e-03, -1.5563e-05,  4.6675e-04,  5.0821e-04,  2.5250e-03,
        -1.4171e-03, -2.3150e-04, -8.1689e-04, -1.1569e-03, -3.5146e-03,
        -1.2449e-03,  7.9562e-04,  6.6144e-05, -3.4474e-03, -1.0500e-03,
         2.2258e-03, -1.5903e-03,  5.6538e-04,  9.1901e-04, -3.8679e-03,
        -4.6284e-03,  1.2822e-03,  3.0611e-03, -2.8786e-03,  4.1214e-03,
         6.4075e-04, -8.5299e-04,  1.3975e-03, -4.1178e-04, -2.4118e-03,
        -4.2411e-04, -2.0536e-03, -2.2896e-03, -2.1161e-07,  8.5624e-04,
         6.4562e-04,  3.0887e-03, -1.2904e-03, -5.1108e-03, -1.5466e-03,
        -2.8453e-04,  5.1044e-03, -3.6840e-04, -4.7558e-03,  7.3881e-04,
        -2.4505e-03,  1.5699e-03,  9.7323e-04, -1.1723e-03, -1.8707e-04,
         1.2908e-04, -3.6884e-03, -2.2404e-03,  2.4260e-04, -3.3690e-04,
         4.2386e-03,  2.4865e-03,  8.4598e-05,  1.9349e-03,  9.6423e-04,
         3.3368e-02,  3.6363e-02, -1.2106e-02,  9.8446e-03, -5.7641e-03,
         2.6726e-02, -3.2255e-03, -1.2638e-02,  1.0840e-01, -2.3424e-02,
         1.3257e-02, -1.1593e-02,  4.7139e-02, -3.4777e-02,  3.1419e-02,
         9.6893e-02, -1.1624e-02, -7.2799e-02,  3.2675e-02,  3.0566e-02,
        -5.1955e-02,  2.0032e-02, -4.1916e-02, -5.1329e-02, -8.0045e-02,
         3.3023e-02, -1.0707e-01,  2.2059e-02, -4.9510e-02,  1.7827e-02,
        -9.4472e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.4126e-03, -1.3533e-03, -6.7498e-04, -6.1142e-05, -3.0814e-04,
         1.8263e-03, -1.5563e-05,  4.6675e-04,  5.0821e-04,  2.5250e-03,
        -1.4171e-03, -2.3150e-04, -8.1689e-04, -1.1569e-03, -3.5146e-03,
        -1.2449e-03,  7.9562e-04,  6.6144e-05, -3.4474e-03, -1.0500e-03,
         2.2258e-03, -1.5903e-03,  5.6538e-04,  9.1901e-04, -3.8679e-03,
        -4.6284e-03,  1.2822e-03,  3.0611e-03, -2.8786e-03,  4.1214e-03,
         6.4075e-04, -8.5299e-04,  1.3975e-03, -4.1178e-04, -2.4118e-03,
        -4.2411e-04, -2.0536e-03, -2.2896e-03, -2.1161e-07,  8.5624e-04,
         6.4562e-04,  3.0887e-03, -1.2904e-03, -5.1108e-03, -1.5466e-03,
        -2.8453e-04,  5.1044e-03, -3.6840e-04, -4.7558e-03,  7.3881e-04,
        -2.4505e-03,  1.5699e-03,  9.7323e-04, -1.1723e-03, -1.8707e-04,
         1.2908e-04, -3.6884e-03, -2.2404e-03,  2.4260e-04, -3.3690e-04,
         4.2386e-03,  2.4865e-03,  8.4598e-05,  1.9349e-03,  2.3356e-03,
         1.7387e-02,  1.8777e-02, -4.4317e-03,  2.8799e-03, -4.2485e-03,
         1.3030e-02, -1.5882e-03, -7.6008e-03,  6.5138e-02, -1.4487e-02,
         7.5905e-03, -3.3483e-03,  2.9170e-02, -2.2412e-02,  1.6007e-02,
         4.4363e-02, -5.9857e-03, -3.9442e-02,  1.4047e-02,  1.3888e-02,
        -2.4755e-02,  1.2648e-02, -1.8220e-02, -2.6492e-02, -3.8683e-02,
         1.7273e-02, -6.0618e-02,  1.1062e-02, -1.6490e-02,  9.5168e-03,
        -5.1308e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 3.7688e-05, -2.4116e-04,  1.2640e-04,  ...,  3.6503e-04,
         -2.7017e-04, -3.9341e-04],
        [-2.7505e-04, -6.5629e-04, -3.4460e-04,  ..., -1.2626e-04,
          2.0161e-04,  2.6548e-05],
        [ 6.8524e-04,  1.9684e-03,  1.4367e-04,  ...,  2.4645e-04,
         -5.4440e-04, -1.7787e-04],
        ...,
        [ 5.4904e-03,  1.2272e-02, -1.2895e-03,  ...,  4.5876e-03,
         -6.3616e-03, -5.2494e-03],
        [ 2.2624e-03,  5.9766e-03, -4.0634e-03,  ..., -2.1263e-03,
          4.6526e-04,  1.5577e-03],
        [-1.0555e-02, -2.5977e-02,  2.7173e-03,  ..., -7.7426e-03,
          1.1619e-02,  8.1526e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 1.2868e-05, -8.4933e-05,  9.8909e-05,  ..., -1.0842e-04,
         -1.1505e-04, -1.9013e-04],
        [ 4.7012e-04, -3.6977e-04,  1.3530e-04,  ...,  5.1532e-04,
         -8.3926e-04, -2.9627e-04],
        [-8.3399e-04,  7.8956e-04,  9.2608e-05,  ..., -7.9685e-04,
          1.4846e-03,  1.2212e-03],
        ...,
        [-1.6519e-03,  1.9048e-03,  1.3626e-03,  ..., -1.5430e-03,
          2.9397e-03,  4.2483e-03],
        [-2.4263e-04,  6.9853e-04, -6.4165e-06,  ...,  1.5014e-04,
          1.2284e-03,  2.2873e-03],
        [ 4.6500e-03, -5.3429e-03, -1.7890e-03,  ...,  4.0211e-03,
         -8.6314e-03, -9.1740e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([-4.1264e-04, -1.9084e-03,  4.0702e-03, -1.4108e-03, -6.4189e-04,
        -1.6929e-03,  1.4576e-03, -6.1419e-04, -1.6129e-04, -2.0442e-04,
         9.6877e-04,  2.0030e-03, -5.1664e-04, -6.5992e-04,  8.8264e-04,
         2.4820e-03,  1.3726e-03,  5.4450e-04,  4.0623e-04,  5.2935e-04,
        -6.2820e-04, -1.8607e-04, -5.4761e-04,  6.1363e-04, -3.9706e-03,
        -1.7843e-04,  1.6521e-04,  3.7587e-03, -1.3842e-03, -2.0158e-03,
         2.5258e-04,  7.2549e-04, -9.6787e-04,  8.9666e-04, -5.9884e-04,
         1.1772e-03,  1.0392e-04, -1.2260e-03, -1.1328e-03, -1.5528e-03,
         5.1207e-05, -2.4838e-04, -2.2591e-03,  1.9364e-03,  5.2283e-05,
         2.2636e-04,  7.2722e-04,  3.1282e-03,  2.2226e-04, -3.9588e-06,
         4.3686e-04, -3.6761e-04,  1.5410e-04, -1.7546e-03, -6.3167e-04,
        -1.0606e-04, -6.3347e-05, -2.4028e-04, -3.5430e-05, -1.4598e-05,
         4.6362e-04,  3.7708e-05, -3.6670e-05, -2.1943e-03,  3.2176e-03,
         5.2351e-02, -8.6548e-02, -3.8280e-02,  3.4990e-02,  1.2822e-02,
        -2.9506e-02, -8.8702e-02, -3.5064e-02,  8.7029e-03, -1.8722e-02,
         3.7767e-02, -2.1713e-02, -4.5903e-03,  1.6351e-02, -5.2217e-02,
        -5.8894e-03, -2.4515e-02,  3.4052e-03,  1.7705e-03,  9.5271e-03,
        -5.7769e-02, -1.9434e-02, -2.2788e-02,  5.9092e-02, -6.0940e-02,
        -1.8285e-02, -4.6341e-02,  8.2306e-02,  2.2600e-02,  1.0758e-02,
        -5.0811e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([-4.1264e-04, -1.9084e-03,  4.0702e-03, -1.4108e-03, -6.4189e-04,
        -1.6929e-03,  1.4576e-03, -6.1419e-04, -1.6129e-04, -2.0442e-04,
         9.6877e-04,  2.0030e-03, -5.1664e-04, -6.5992e-04,  8.8264e-04,
         2.4820e-03,  1.3726e-03,  5.4450e-04,  4.0623e-04,  5.2935e-04,
        -6.2820e-04, -1.8607e-04, -5.4761e-04,  6.1363e-04, -3.9706e-03,
        -1.7843e-04,  1.6521e-04,  3.7587e-03, -1.3842e-03, -2.0158e-03,
         2.5258e-04,  7.2549e-04, -9.6787e-04,  8.9666e-04, -5.9884e-04,
         1.1772e-03,  1.0392e-04, -1.2260e-03, -1.1328e-03, -1.5528e-03,
         5.1207e-05, -2.4838e-04, -2.2591e-03,  1.9364e-03,  5.2283e-05,
         2.2636e-04,  7.2722e-04,  3.1282e-03,  2.2226e-04, -3.9588e-06,
         4.3686e-04, -3.6761e-04,  1.5410e-04, -1.7546e-03, -6.3167e-04,
        -1.0606e-04, -6.3347e-05, -2.4028e-04, -3.5430e-05, -1.4598e-05,
         4.6362e-04,  3.7708e-05, -3.6670e-05, -2.1943e-03,  3.5752e-03,
         2.5227e-02, -4.4618e-02, -1.6306e-02,  1.5562e-02,  4.3664e-03,
        -9.4997e-03, -3.3905e-02, -1.9066e-02,  5.4245e-03, -1.0121e-02,
         1.8203e-02, -1.3722e-02,  2.9834e-05,  7.6521e-03, -2.4845e-02,
        -1.5918e-03, -1.0812e-02,  2.0904e-03, -3.0775e-04,  3.7067e-03,
        -2.2515e-02, -7.3020e-03, -1.0372e-02,  2.8647e-02, -3.1676e-02,
        -8.2146e-03, -2.8055e-02,  3.7562e-02,  1.0429e-02,  5.4253e-03,
        -2.7306e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-5.0527e-04, -2.1460e-03, -2.1759e-04,  ...,  3.8297e-04,
          6.5558e-05, -5.1610e-04],
        [ 8.4224e-05, -2.9787e-06, -6.8883e-05,  ...,  1.8203e-04,
         -1.9822e-04, -2.5759e-04],
        [-9.7290e-05, -4.8789e-04, -6.2467e-04,  ...,  6.8666e-05,
          3.6689e-05, -2.0659e-04],
        ...,
        [ 5.2317e-03,  1.9626e-03,  1.7696e-03,  ...,  2.0249e-02,
         -1.8623e-02, -2.0806e-02],
        [-5.7577e-03, -1.6131e-02, -1.7243e-02,  ..., -4.3037e-03,
          5.2948e-03, -4.8638e-04],
        [-6.2207e-03, -2.7668e-02, -1.5345e-02,  ...,  3.5036e-03,
          6.4078e-04, -8.6442e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 5.2061e-04,  1.5184e-03,  7.7561e-04,  ...,  2.2592e-04,
          1.8288e-03, -1.0954e-03],
        [ 1.0966e-04,  2.5831e-04,  3.1298e-04,  ...,  5.2562e-06,
          8.3490e-05, -2.1836e-04],
        [ 2.1114e-04,  7.4751e-04,  1.9253e-04,  ...,  7.1992e-05,
          1.1331e-03, -3.9309e-04],
        ...,
        [-1.4893e-03,  6.1913e-03,  1.2874e-02,  ...,  1.9825e-03,
         -1.7855e-03, -3.7654e-03],
        [ 1.4437e-03,  5.6774e-03, -7.6174e-04,  ..., -7.8156e-05,
          1.2828e-02, -2.8740e-03],
        [ 2.8300e-03,  1.0113e-02,  3.6487e-03,  ...,  2.4458e-04,
          1.6159e-02, -6.6590e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([-4.2652e-03, -4.1707e-05, -1.5547e-03, -3.7700e-03, -4.0625e-04,
        -4.3873e-03, -1.1726e-03, -1.2480e-03, -1.4430e-03, -6.3343e-04,
         3.5192e-04,  1.8862e-03,  2.9390e-03,  1.9664e-03, -1.0711e-03,
         2.3921e-04,  1.4829e-04,  1.7458e-03, -4.1308e-04,  1.1203e-03,
         2.3074e-03,  7.5930e-05, -9.8525e-04,  1.0210e-04, -6.7267e-04,
        -1.2339e-03,  1.0044e-02, -5.2999e-03,  1.5053e-03, -5.0812e-04,
        -8.3842e-04, -7.2934e-04, -1.9886e-03, -3.5114e-04, -9.1065e-04,
         9.5845e-04,  5.3400e-03, -1.0208e-03, -2.2290e-03, -2.2659e-03,
        -2.1309e-03,  8.4922e-04, -1.0036e-03,  3.9308e-03,  4.9243e-04,
         5.0144e-03,  1.7819e-03, -1.6533e-04, -1.1721e-03,  2.5829e-03,
        -6.5219e-04,  1.3864e-04, -3.5520e-03, -1.5808e-03,  2.8543e-04,
        -2.3617e-04,  3.2277e-03, -4.2410e-03,  5.3932e-04, -2.0491e-03,
         2.9335e-03,  8.4594e-04, -3.0027e-04,  4.8028e-04,  1.2893e-03,
         2.0698e-02,  3.0938e-02,  5.5284e-02, -4.8269e-03, -9.8835e-02,
         7.5576e-03, -2.4325e-02,  3.0737e-02,  3.4668e-02, -2.3587e-02,
        -2.9220e-02,  4.9297e-02,  1.0221e-02,  5.2760e-03, -6.6969e-03,
         4.0288e-02, -1.7468e-02, -2.7628e-02, -1.9895e-02,  1.8299e-03,
         1.7743e-03,  1.8374e-02,  1.0712e-02,  1.1009e-02,  2.3730e-02,
         4.4599e-02, -1.5719e-02,  4.8050e-02,  1.2954e-03, -5.5493e-02,
        -7.2715e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([-4.2652e-03, -4.1707e-05, -1.5547e-03, -3.7700e-03, -4.0625e-04,
        -4.3873e-03, -1.1726e-03, -1.2480e-03, -1.4430e-03, -6.3343e-04,
         3.5192e-04,  1.8862e-03,  2.9390e-03,  1.9664e-03, -1.0711e-03,
         2.3921e-04,  1.4829e-04,  1.7458e-03, -4.1308e-04,  1.1203e-03,
         2.3074e-03,  7.5930e-05, -9.8525e-04,  1.0210e-04, -6.7267e-04,
        -1.2339e-03,  1.0044e-02, -5.2999e-03,  1.5053e-03, -5.0812e-04,
        -8.3842e-04, -7.2934e-04, -1.9886e-03, -3.5114e-04, -9.1065e-04,
         9.5845e-04,  5.3400e-03, -1.0208e-03, -2.2290e-03, -2.2659e-03,
        -2.1309e-03,  8.4922e-04, -1.0036e-03,  3.9308e-03,  4.9243e-04,
         5.0144e-03,  1.7819e-03, -1.6533e-04, -1.1721e-03,  2.5829e-03,
        -6.5219e-04,  1.3864e-04, -3.5520e-03, -1.5808e-03,  2.8543e-04,
        -2.3617e-04,  3.2277e-03, -4.2410e-03,  5.3932e-04, -2.0491e-03,
         2.9335e-03,  8.4594e-04, -3.0027e-04,  4.8028e-04,  5.5851e-03,
         7.9651e-03,  1.8026e-02,  2.2366e-02, -2.0805e-03, -4.5685e-02,
         5.6015e-03, -1.1026e-02,  2.1016e-02,  1.7124e-02, -1.1562e-02,
        -1.5026e-02,  3.1318e-02,  4.0867e-03, -1.4179e-02, -4.3620e-03,
         2.2593e-02, -8.6944e-03, -1.3420e-02, -1.1775e-02, -4.2747e-03,
         2.5309e-03,  7.3212e-03,  6.7303e-03,  9.6403e-03,  1.1269e-02,
         2.4375e-02, -1.0640e-02,  3.0520e-02,  1.5782e-03, -2.7821e-02,
        -3.4348e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-0.0033,  0.0119,  0.0123,  ..., -0.0078, -0.0025,  0.0038],
        [ 0.0077, -0.0881, -0.0286,  ..., -0.0290,  0.0893,  0.0200],
        [ 0.0057,  0.0172, -0.0113,  ..., -0.0065, -0.0006,  0.0095],
        ...,
        [ 0.0026,  0.0204, -0.0046,  ...,  0.0024, -0.0101, -0.0014],
        [-0.0252,  0.0300,  0.0061,  ..., -0.0182, -0.0205,  0.0532],
        [ 0.0006, -0.0102,  0.0208,  ..., -0.0046, -0.0008, -0.0184]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([ 4.5115e-02, -1.7092e-01,  1.6875e-02, -9.5469e-02,  2.3691e-02,
        -2.5302e-03, -9.7709e-02,  6.4497e-02, -3.9283e-02, -7.3446e-02,
        -2.1809e-02, -1.3445e-02,  2.4033e-01, -1.3206e-01,  6.3391e-02,
         2.0147e-01,  5.7421e-02, -2.1562e-05,  7.5522e-02,  2.7011e-02,
        -2.2828e-02, -4.9370e-03,  7.6951e-02, -5.2430e-03,  4.6215e-04,
        -6.7430e-02,  1.4139e-02,  1.4258e-01,  1.8135e-01,  2.8769e-02,
         4.9433e-02,  2.9314e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 8.6545e-02, -5.8332e-02,  3.2175e-02, -1.1237e-01,  1.7156e-02,
          5.7473e-03, -2.8291e-01,  1.5696e-01,  3.7996e-02, -2.6110e-03,
          9.3795e-03, -2.8041e-02, -9.5220e-02,  3.9906e-02,  1.0979e-01,
         -5.7600e-02,  5.5192e-04,  3.7720e-05, -3.1419e-02,  5.9323e-02,
         -1.0394e-01,  1.3391e-03,  2.0004e-01,  5.5156e-03, -5.4030e-04,
          5.7640e-02, -7.0670e-02,  1.1450e-02, -1.6061e-02, -3.9963e-02,
         -1.2566e-02,  5.4799e-03],
        [ 4.4598e-04, -5.1864e-02, -3.6350e-04, -1.3110e-01, -4.8481e-03,
         -2.8714e-03, -2.0473e-01, -2.0798e-02, -5.5122e-02, -8.8638e-02,
         -1.2254e-04, -5.8112e-02, -9.8171e-02,  6.8234e-04,  1.3399e-02,
         -4.5038e-02, -4.2331e-02,  3.7356e-06, -1.7400e-02,  1.3641e-04,
         -9.7993e-02, -8.2483e-04, -7.8138e-03,  6.1678e-06,  1.6004e-05,
          4.7802e-03, -1.0556e-01, -1.2159e-01, -3.7535e-02, -2.7381e-02,
         -7.3959e-02, -6.3335e-03],
        [-9.5308e-03,  5.2749e-03, -6.8681e-04, -4.0536e-02,  7.7252e-03,
         -1.8566e-04, -1.5745e-02, -2.8957e-02, -2.6868e-02,  2.0346e-03,
         -2.5087e-03, -2.6109e-02, -3.9836e-02,  1.0461e-03, -1.0356e-02,
         -6.3144e-03, -4.4971e-03,  0.0000e+00, -7.6804e-03,  2.2183e-02,
         -1.0035e-02, -1.1454e-03, -1.7079e-02,  3.2908e-04, -1.4565e-03,
         -1.6830e-02, -1.1618e-02, -3.3036e-02,  1.3941e-03, -1.4519e-02,
         -3.4172e-02, -8.2241e-03],
        [-3.0829e-04, -3.3273e-06, -2.5574e-04, -2.0050e-04, -4.5990e-06,
          0.0000e+00,  0.0000e+00, -2.9886e-04, -4.2132e-04, -1.2461e-04,
         -2.2770e-04,  0.0000e+00, -6.3090e-05, -5.5102e-05, -1.4923e-04,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -1.9227e-04,
         -2.6326e-05,  0.0000e+00, -3.3558e-04, -1.3654e-04, -4.5349e-05,
         -2.4528e-04, -2.9313e-09, -1.2341e-04, -2.2106e-05,  0.0000e+00,
         -3.2830e-04, -2.0877e-05],
        [-5.9180e-02,  3.5476e-02, -1.9197e-02,  7.5105e-02, -9.6197e-03,
          2.9828e-03,  1.8733e-01, -1.0867e-01, -4.2006e-02, -7.3947e-03,
         -5.4179e-03,  3.5668e-02,  7.0335e-02, -3.1940e-02, -6.9386e-02,
          4.6965e-02,  1.0802e-02, -2.2348e-05,  3.4275e-02, -3.5129e-02,
          7.1593e-02,  3.5481e-03, -1.2840e-01, -3.4754e-03,  1.5042e-04,
         -4.4336e-02,  4.4159e-02,  8.9436e-04,  1.4780e-02,  4.8363e-02,
          3.9542e-03,  1.3334e-03],
        [-2.8780e-02,  1.6617e-02, -8.9991e-03,  3.4818e-02, -4.5087e-03,
          2.1925e-03,  8.5569e-02, -5.7175e-02, -2.3231e-02, -1.1181e-02,
         -2.5397e-03,  1.2870e-02,  3.4046e-02, -1.6628e-02, -3.5123e-02,
          2.2360e-02, -4.0618e-03, -1.0476e-05,  1.3320e-02, -1.6467e-02,
          3.2327e-02,  2.3390e-03, -6.6393e-02, -1.6309e-03,  5.8906e-05,
         -2.2321e-02,  1.6723e-02, -6.8561e-03,  7.0181e-03,  2.0811e-02,
          1.6971e-03,  7.4003e-04],
        [-1.9295e-02,  1.1141e-02, -6.0333e-03,  2.3343e-02, -3.0228e-03,
          1.4699e-03,  5.7369e-02, -3.8332e-02, -1.5575e-02, -7.4963e-03,
         -1.7027e-03,  8.6282e-03,  2.2826e-02, -1.1148e-02, -2.3548e-02,
          1.4991e-02, -2.7232e-03, -7.0235e-06,  8.9299e-03, -1.1040e-02,
          2.1673e-02,  1.5682e-03, -4.4512e-02, -1.0934e-03,  3.9493e-05,
         -1.4965e-02,  1.1211e-02, -4.5966e-03,  4.7052e-03,  1.3953e-02,
          1.1378e-03,  4.9614e-04],
        [ 1.0043e-04,  6.1861e-03,  8.3852e-04,  5.6675e-03,  9.2484e-03,
          4.8673e-03,  1.2394e-03, -5.0599e-06,  3.7350e-05,  6.4167e-05,
          5.5452e-03, -1.9264e-03,  1.2199e-02,  1.5726e-05,  3.4107e-05,
          1.2053e-03, -2.3410e-03,  3.1608e-05, -6.3900e-03,  1.5063e-02,
          2.4755e-03, -4.2858e-04,  9.7736e-04,  8.6232e-06,  4.2778e-06,
         -8.6809e-06, -4.8003e-05,  2.2644e-03,  5.5542e-03, -6.4480e-03,
          4.1505e-03,  5.1660e-03],
        [ 9.0742e-02, -5.9545e-02,  7.5688e-03, -6.4329e-02, -8.1545e-04,
         -4.0230e-03, -2.2438e-01,  2.0581e-01,  9.6053e-02,  4.5959e-02,
          2.7609e-03,  1.0495e-02, -7.1032e-02,  5.4129e-02,  1.2153e-01,
         -4.9903e-02,  3.5410e-02,  5.8318e-08, -2.7742e-02,  2.8089e-03,
         -8.6431e-02, -4.4759e-03,  2.3427e-01,  1.2711e-03,  6.5199e-04,
          8.7457e-02, -3.4624e-02,  8.2922e-02, -2.2024e-02, -3.3700e-02,
          6.1343e-03,  2.3703e-03],
        [ 5.9669e-05,  0.0000e+00,  4.9968e-07,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  2.7097e-04,  1.6055e-04,  3.6804e-04,
          0.0000e+00,  1.8575e-05,  0.0000e+00,  1.5527e-04,  1.5499e-04,
          0.0000e+00,  1.6941e-04,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  2.6011e-04,  8.7827e-06,  0.0000e+00,
          6.9628e-06,  1.1458e-04,  1.8678e-04,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [-2.4866e-05, -1.6683e-06, -3.6219e-05, -2.9166e-05, -6.9224e-06,
          0.0000e+00,  0.0000e+00, -2.6271e-05, -4.5302e-05, -8.0525e-06,
         -2.3966e-05, -3.0881e-06, -2.7585e-05, -2.0250e-06, -1.3066e-05,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00, -4.0027e-05,
         -1.2918e-05,  0.0000e+00, -2.1845e-05, -2.1602e-05, -9.8632e-06,
         -2.4358e-05, -5.6856e-07, -1.2632e-05, -1.2688e-05,  0.0000e+00,
         -4.5076e-05, -1.9639e-05],
        [ 1.6200e-03, -8.3525e-03,  4.2514e-03, -3.4742e-02,  2.7897e-03,
         -8.7328e-04, -4.7956e-02, -1.5375e-02, -1.6052e-02, -2.3146e-02,
          5.2190e-03, -2.1676e-02, -2.3156e-02, -1.6642e-04, -8.6680e-04,
         -8.3911e-03, -1.9356e-02,  5.6349e-06, -4.9060e-03,  9.2890e-03,
         -2.4188e-02, -9.8759e-04, -7.7523e-03,  7.2966e-04, -1.2770e-04,
          2.1311e-03, -3.2129e-02, -3.6087e-02, -4.1282e-03, -1.1430e-02,
         -1.8728e-02,  7.1602e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 2.4441e-03,  9.0818e-04,  1.9351e-03,  1.3049e-03,  1.2693e-03,
         -2.3679e-04, -1.2708e-03,  2.8337e-03,  2.2518e-03,  2.3812e-03,
          2.0779e-03, -1.5529e-03,  1.1757e-03,  1.0175e-03,  1.3955e-03,
         -9.1134e-04,  3.1428e-04,  1.3726e-07, -1.1554e-03,  3.6458e-03,
          6.9064e-04, -3.2110e-04,  4.4042e-03,  3.4042e-04, -6.8485e-05,
          1.4042e-03,  2.9659e-04,  1.8947e-03,  1.4155e-03, -1.9391e-03,
          2.0513e-03,  7.2357e-04],
        [ 5.4257e-03, -3.1327e-03,  1.6965e-03, -6.5639e-03,  8.4999e-04,
         -4.1333e-04, -1.6132e-02,  1.0779e-02,  4.3796e-03,  2.1079e-03,
          4.7879e-04, -2.4262e-03, -6.4185e-03,  3.1347e-03,  6.6215e-03,
         -4.2154e-03,  7.6575e-04,  1.9750e-06, -2.5110e-03,  3.1044e-03,
         -6.0944e-03, -4.4096e-04,  1.2517e-02,  3.0746e-04, -1.1105e-05,
          4.2080e-03, -3.1526e-03,  1.2925e-03, -1.3231e-03, -3.9234e-03,
         -3.1994e-04, -1.3951e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([-3.2077e-01, -6.0599e-01, -1.1527e-01, -6.1973e-04,  2.1567e-01,
         7.8537e-02,  5.2654e-02,  5.2083e-03, -7.4325e-02,  6.3424e-04,
        -7.3179e-05, -1.7423e-01,  0.0000e+00,  0.0000e+00,  5.3750e-03,
        -1.4806e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.4390e-01, -7.1776e-02, -3.0374e-03,  1.8514e-05, -6.4379e-02,
         -1.2504e-01, -5.9381e-02,  2.0284e-03, -2.3517e-02,  6.9762e-06,
          1.6707e-06, -3.7480e-02,  0.0000e+00,  0.0000e+00,  5.5210e-03,
         -7.4185e-02],
        [ 3.7044e-01,  1.8477e-01,  7.8189e-03, -4.7659e-05,  1.6573e-01,
          3.2189e-01,  1.5286e-01, -5.2216e-03,  6.0538e-02, -1.7958e-05,
         -4.3009e-06,  9.6483e-02,  0.0000e+00,  0.0000e+00, -1.4212e-02,
          1.9097e-01],
        [ 3.1274e-01,  1.5598e-01,  6.6009e-03, -4.0235e-05,  1.3991e-01,
          2.7175e-01,  1.2905e-01, -4.4082e-03,  5.1107e-02, -1.5161e-05,
         -3.6309e-06,  8.1453e-02,  0.0000e+00,  0.0000e+00, -1.1998e-02,
          1.6122e-01],
        [ 1.0078e-02,  5.0266e-03,  2.1271e-04, -1.2966e-06,  4.5086e-03,
          8.7571e-03,  4.1586e-03, -1.4205e-04,  1.6469e-03, -4.8856e-07,
         -1.1700e-07,  2.6248e-03,  0.0000e+00,  0.0000e+00, -3.8665e-04,
          5.1953e-03],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 1.8085e-02,  9.0204e-03,  3.8172e-04, -2.3267e-06,  8.0908e-03,
          1.5715e-02,  7.4627e-03, -2.5492e-04,  2.9555e-03, -8.7674e-07,
         -2.0997e-07,  4.7104e-03,  0.0000e+00,  0.0000e+00, -6.9385e-04,
          9.3232e-03],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([-0.3294,  0.8479,  0.7158,  0.0231,  0.0000,  0.0414,  0.0000,  0.0000],
       device='cuda:0')>
<bound method Tensor.norm of tensor([[ 0.2262,  0.3466, -0.0983,  0.3298,  0.0000,  0.4946,  0.0000,  0.0000],
        [ 0.1608,  0.2463, -0.0699,  0.2344,  0.0000,  0.3515,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000],
        [ 0.0683,  0.1046, -0.0297,  0.0995,  0.0000,  0.1492,  0.0000,  0.0000]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([2.1454, 1.5247, 0.0000, 0.6472], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.8851, -1.8817,  0.0000, -0.7797]], device='cuda:0')>
<bound method Tensor.norm of tensor([-7.2615], device='cuda:0')>
<bound method Tensor.norm of tensor([[-9.6188e-01,  4.1125e+00,  2.4867e+00,  2.0337e+01],
        [ 6.0909e-03,  1.0380e+00, -6.4202e-01, -3.6756e+00],
        [ 1.3367e+00,  3.5310e+00,  1.7574e+00,  1.3952e+01],
        [ 7.3459e+00, -4.1211e+00, -5.5300e+00, -4.3339e+01],
        [-3.6080e+00, -2.3134e+00, -3.5905e-01, -4.5197e+00],
        [ 3.4624e-01, -6.3173e-01, -3.2155e-01, -3.5616e+00],
        [ 6.2678e-01, -4.3345e-01, -1.4406e-01, -1.3355e+00],
        [-1.6169e+00, -3.9069e+00, -1.6992e+00, -1.3777e+01],
        [ 1.0664e+00, -9.4904e-01, -6.1174e-02,  3.2264e-01],
        [ 5.8736e-01, -1.8281e-01, -1.5206e-01,  4.3761e-01],
        [ 2.1551e+00,  2.6023e+00,  1.3388e+00,  1.2553e+01],
        [-2.1762e+00, -6.7910e+00,  1.3766e+00,  5.8452e+00],
        [ 1.1315e+00,  2.2652e+00, -1.1728e+00, -1.0397e+01],
        [-1.7901e+00, -1.0684e+00, -1.2276e+00, -8.3291e+00],
        [ 5.6518e-01,  1.1861e+00,  4.5871e-01,  3.6112e+00],
        [-2.1656e+00, -1.4054e+00,  8.4644e-01,  2.7936e+00],
        [ 1.3633e+00, -8.8681e-01,  4.0953e+00,  2.4446e+01],
        [-4.1949e+00, -1.9939e+00, -8.5303e-01, -8.0881e+00],
        [-3.9411e+00, -3.3787e-01, -5.0834e+00, -2.7989e+01],
        [ 9.9976e+00,  5.9977e+00, -4.5204e+00, -1.5279e+01],
        [-6.8492e-01, -3.9115e+00, -1.1115e+00, -9.4884e+00],
        [ 2.0531e+00, -2.8935e+00, -7.6101e-01, -8.0137e+00],
        [-3.2432e+00,  6.4241e+00, -1.3951e+00, -2.5156e+00],
        [ 2.3001e+00, -1.6227e+00, -6.9677e-02, -3.7668e+00],
        [ 2.4994e+00,  1.6828e+00,  1.0070e+00,  6.8597e+00],
        [ 9.1834e+00,  2.1077e+00,  2.5049e+00,  2.6160e+01],
        [ 3.0419e+00, -1.7366e+00, -1.9123e-01, -4.5689e+00],
        [-9.3864e-01, -5.9536e+00, -2.5902e+00, -2.0593e+01],
        [-1.3205e+00, -4.3602e+00, -1.9009e+00, -1.4731e+01],
        [ 2.5113e+00, -3.1882e+00, -1.2466e+01, -8.2968e+01],
        [-3.5977e+00,  3.6572e+00, -7.5926e-01, -3.0459e+00],
        [ 5.1321e-01, -1.5690e+00, -8.1590e-01, -8.2398e+00],
        [-5.4590e-01, -3.2533e+00, -5.6146e-01, -4.3364e+00],
        [-8.7276e-01,  3.0491e+00,  1.7158e-01,  2.3665e+00],
        [-3.2032e+00, -8.1813e+00, -2.8526e-01, -3.4238e+00],
        [ 1.2446e+00,  3.8097e-01, -1.4246e-01, -9.4363e-01],
        [ 5.8821e-01, -1.2228e+00, -1.3547e-02,  1.5012e-01],
        [-1.0057e+00, -8.9229e-01, -4.4830e-03, -1.5963e-01],
        [ 5.6275e-01, -5.1775e-01,  6.7675e-02,  8.3275e-01],
        [-1.7854e-01,  7.2553e-02, -5.1575e-02, -1.6019e-01],
        [-1.6427e+00, -5.8775e-01, -7.6642e-03,  1.0557e-01],
        [ 6.1365e-01, -6.7389e-01, -9.4750e-02, -1.4899e+00],
        [ 1.7115e+00, -1.0046e+00,  7.0186e-02,  4.5600e-01],
        [ 6.2556e-02,  1.8645e-01,  2.8865e-02,  2.6519e-01],
        [ 2.1481e+00,  2.1816e+00, -2.2360e-01, -1.2236e+00],
        [-1.2815e+00,  1.4968e-01,  9.0818e-02,  7.2751e-01],
        [-8.7325e-01,  6.3614e-01, -1.1238e-03,  6.6060e-02],
        [ 3.8801e+00, -1.3652e+00,  1.0945e-01,  7.1558e-01],
        [ 1.9029e-01, -2.6261e+00, -5.7741e-02, -2.1011e-01],
        [ 5.6934e-02, -3.0071e-01, -8.3347e-02, -1.1085e-01],
        [-4.2381e+00, -5.4880e+00, -6.1342e-01, -4.1298e+00],
        [ 5.2385e+00, -7.9909e+00, -4.5727e-01, -2.7073e+00],
        [-1.5878e+00, -1.2634e+00,  1.3646e-01,  1.2004e+00],
        [ 7.2842e-01, -1.0211e+00,  4.4186e-03, -1.0093e-01],
        [ 8.9287e-01, -7.2509e+00, -4.1930e-01, -4.1716e+00],
        [-1.0772e+00, -8.3876e-01, -1.4582e-01, -1.0764e+00],
        [ 1.3401e+00,  1.9321e-01,  2.3232e-03, -1.4338e-04],
        [-3.4938e+00,  3.1703e+00, -5.6495e-02, -6.0980e-01],
        [-5.1122e-01,  4.4343e-01, -1.3749e-01, -9.4400e-01],
        [ 6.0982e-01, -2.6767e-01,  1.3494e-01,  1.1354e+00],
        [-1.7180e-01,  4.3008e-01,  7.5834e-02,  7.3315e-01],
        [-1.6239e+00,  6.8799e+00, -1.3303e-01, -3.3205e-01],
        [ 1.1281e+00, -1.0400e+00,  1.1751e-01,  1.5395e+00],
        [-6.7063e-01, -3.5021e+00,  4.2932e-02, -4.1154e-01],
        [ 1.6333e+01, -5.4708e+01, -3.0482e+01, -2.5714e+02],
        [-2.1766e+01,  1.0446e+01, -2.0913e+01, -1.3074e+02],
        [ 8.4831e+01, -1.1566e+02, -1.4910e+02, -1.0424e+03],
        [-5.3761e+01,  1.2051e+01,  4.7582e+01,  3.3034e+02],
        [ 8.8062e+01,  5.5103e+01, -1.9414e+01,  1.1752e+01],
        [-4.8499e+00,  2.4784e+01,  2.0211e+01,  1.2877e+02],
        [ 3.8167e+01,  1.1724e+02,  4.1937e+01,  3.1764e+02],
        [-8.1497e+00, -2.5800e+01, -1.3816e+01, -1.1519e+02],
        [-2.3189e+01, -2.4637e+01,  4.5746e+01,  2.1640e+02],
        [ 7.7557e+00, -8.1512e-01, -2.1766e+00,  1.3805e+01],
        [ 7.4262e+01,  6.6811e+01,  3.8452e+01,  3.1570e+02],
        [ 2.6347e+01,  6.7427e+01, -9.3430e+00, -1.8283e+01],
        [-3.4012e+01, -8.8274e+01, -9.0088e+01, -7.2122e+02],
        [ 7.5382e+01,  4.6272e+01,  4.2589e+01,  2.6628e+02],
        [ 5.5491e+01, -2.1434e+01,  5.0510e+01,  2.9714e+02],
        [-9.8456e+01, -1.3676e+01, -9.9092e+01, -5.8255e+02],
        [ 5.6235e+01, -1.9216e+01,  1.1052e+02,  5.9979e+02],
        [ 6.3586e+01,  7.6768e+01,  2.3597e+01,  1.6877e+02],
        [-2.9021e+01, -3.5772e+01, -1.1131e+02, -6.2069e+02],
        [-1.2585e+02,  1.7366e+01,  1.3028e+02,  7.3586e+02],
        [-6.8010e+00, -8.4279e+00, -4.3641e+01, -2.4897e+02],
        [ 2.1585e+01, -1.8999e+01, -3.3540e+01, -2.0067e+02],
        [-1.4148e+01,  2.4278e+01, -1.2351e+02, -6.5877e+02],
        [ 1.0412e+02, -2.2095e+01, -1.2489e+01, -5.1707e+01],
        [ 6.0811e+01,  5.1002e+01,  3.8301e+01,  2.4424e+02],
        [ 6.1341e+01, -2.8106e+01,  1.3252e+02,  6.9156e+02],
        [-5.7853e+01,  5.1344e+01, -1.5192e+01,  5.9060e+00],
        [-1.8709e+01, -6.2179e+01, -2.5250e+01, -1.8473e+02],
        [-4.3433e+01, -9.2209e+01, -2.1122e+01, -2.3375e+02],
        [ 1.3162e+01,  5.6238e+01, -1.4150e+02, -7.9885e+02],
        [ 1.2181e+01, -7.2411e+01,  4.1420e+01,  1.1341e+02],
        [ 1.2672e+01, -5.0864e+01,  6.4406e+01,  3.4540e+02]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.8807e+00,  3.2895e+00, -1.2370e+00,  ...,  1.4980e+00,
          2.4477e+00,  3.3654e+00],
        [ 4.6240e-01, -4.3823e-01,  2.3050e-02,  ..., -4.3735e-02,
         -3.1743e-01, -4.7333e-01],
        [-2.2192e+00,  2.2939e+00, -1.1703e+00,  ...,  1.0581e+00,
          1.4486e+00,  2.5124e+00],
        ...,
        [ 6.1208e+01, -5.9995e+01,  1.1442e+01,  ..., -1.9158e+01,
         -4.3626e+01, -6.5075e+01],
        [-1.3339e+01,  8.6033e+00,  2.9842e+00,  ...,  1.6785e+00,
          6.6084e+00,  1.1587e+01],
        [-2.4151e+01,  2.1795e+01, -2.9274e+00,  ...,  5.7102e+00,
          1.5274e+01,  2.4664e+01]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 4.6413e+00, -1.1987e+00,  3.2822e+00, -1.0317e+01, -6.7625e-01,
        -5.9963e-01, -2.6785e-01, -3.1765e+00, -1.1348e-01, -2.8209e-01,
         2.5002e+00,  2.5660e+00, -2.1864e+00, -2.2924e+00,  8.5802e-01,
         1.5775e+00,  7.6425e+00, -1.5957e+00, -9.4880e+00, -8.4301e+00,
        -2.0761e+00, -1.4201e+00, -2.6041e+00, -1.2880e-01,  1.8820e+00,
         4.6795e+00, -3.5549e-01, -4.8366e+00, -3.5494e+00, -2.3262e+01,
        -1.4165e+00, -1.5221e+00, -1.0490e+00,  3.2112e-01, -5.3504e-01,
        -2.6566e-01, -2.5646e-02, -8.7069e-03,  1.2643e-01, -9.6275e-02,
        -1.4258e-02, -1.7693e-01,  1.3127e-01,  5.4098e-02, -4.1688e-01,
         1.6951e-01, -2.3209e-03,  2.0489e-01, -1.0766e-01, -1.5547e-01,
        -1.1464e+00, -8.5454e-01,  2.5482e-01,  8.3500e-03, -7.8387e-01,
        -2.7240e-01,  4.5292e-03, -1.0562e-01, -2.5688e-01,  2.5201e-01,
         1.4168e-01, -2.4833e-01,  2.1951e-01,  8.0048e-02, -5.6894e+01,
        -3.9063e+01, -2.7821e+02,  8.8777e+01, -3.6136e+01,  3.7720e+01,
         7.8315e+01, -2.5826e+01,  8.5342e+01, -4.0283e+00,  7.1838e+01,
        -1.7400e+01, -1.6819e+02,  7.9540e+01,  9.4326e+01, -1.8499e+02,
         2.0627e+02,  4.4090e+01, -2.0773e+02,  2.4303e+02, -8.1471e+01,
        -6.2603e+01, -2.3049e+02, -2.3233e+01,  7.1547e+01,  2.4732e+02,
        -2.8372e+01, -4.7145e+01, -3.9476e+01, -2.6405e+02,  7.7260e+01,
         1.2021e+02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 4.6413e+00, -1.1987e+00,  3.2822e+00, -1.0317e+01, -6.7625e-01,
        -5.9963e-01, -2.6785e-01, -3.1765e+00, -1.1348e-01, -2.8209e-01,
         2.5002e+00,  2.5660e+00, -2.1864e+00, -2.2924e+00,  8.5802e-01,
         1.5775e+00,  7.6425e+00, -1.5957e+00, -9.4880e+00, -8.4301e+00,
        -2.0761e+00, -1.4201e+00, -2.6041e+00, -1.2880e-01,  1.8820e+00,
         4.6795e+00, -3.5549e-01, -4.8366e+00, -3.5494e+00, -2.3262e+01,
        -1.4165e+00, -1.5221e+00, -1.0490e+00,  3.2112e-01, -5.3504e-01,
        -2.6566e-01, -2.5646e-02, -8.7069e-03,  1.2643e-01, -9.6275e-02,
        -1.4258e-02, -1.7693e-01,  1.3127e-01,  5.4098e-02, -4.1688e-01,
         1.6951e-01, -2.3209e-03,  2.0489e-01, -1.0766e-01, -1.5547e-01,
        -1.1464e+00, -8.5454e-01,  2.5482e-01,  8.3500e-03, -7.8387e-01,
        -2.7240e-01,  4.5292e-03, -1.0562e-01, -2.5688e-01,  2.5201e-01,
         1.4168e-01, -2.4833e-01,  2.1951e-01,  8.0048e-02, -1.9064e+01,
        -2.6444e+01, -1.4464e+02,  3.9356e+01, -1.5873e+01,  1.5845e+01,
         4.8418e+01, -9.1968e+00,  4.6649e+01, -2.4793e+00,  1.9896e+01,
        -7.4234e+00, -6.9897e+01,  3.6849e+01,  4.7864e+01, -5.5160e+01,
         1.0123e+02,  2.6370e+01, -1.3680e+02,  1.2182e+02, -5.1040e+01,
        -4.1296e+01, -1.2875e+02, -1.4197e+01,  2.7200e+01,  1.0378e+02,
        -1.5109e+01, -2.4078e+01, -3.4743e+01, -1.3652e+02,  4.3649e+01,
         5.8091e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([[-4.2328e+00,  1.4605e+00,  1.5465e+00,  1.4937e+01],
        [-2.6452e+00, -3.5182e+00, -2.4447e+00, -1.8844e+01],
        [-1.1480e+00, -2.0001e-01,  2.3934e-01, -7.7843e-01],
        [ 4.4696e+00,  4.3686e+00,  1.3622e+00,  1.0084e+01],
        [-5.4694e+00, -1.0087e+01, -7.1601e+00, -5.5204e+01],
        [ 2.9350e-01,  9.7324e-01,  4.3041e-01, -1.6036e-01],
        [-2.2648e+00,  7.6540e-01,  1.7504e+00,  1.5225e+01],
        [-2.8020e+00, -1.9104e+00,  1.3544e+00,  3.1177e+00],
        [-9.9740e-02, -1.3398e+00,  1.4698e-01,  2.0359e-01],
        [-3.3032e-02,  1.8892e+00, -3.3476e+00, -1.7438e+01],
        [ 4.3753e+00, -1.8867e+00, -3.5708e-01, -5.2184e+00],
        [ 5.7985e+00,  9.0411e+00,  2.8962e+00,  2.2466e+01],
        [ 3.2811e+00, -1.2063e+00, -1.0911e+00, -1.0358e+01],
        [-1.2882e+00,  4.8885e+00,  1.6783e-01,  7.0758e+00],
        [-4.9436e+00, -5.9094e+00, -7.0559e+00, -5.0165e+01],
        [ 5.1755e-01,  4.1814e+00,  2.1955e+00,  1.5923e+01],
        [-4.3056e-01,  6.4858e-01, -7.9385e-01, -2.5723e+00],
        [ 7.6517e+00,  3.8651e+00,  1.9046e+00,  1.1719e+01],
        [-1.5655e+00, -6.7556e-01, -2.5874e-01, -1.9175e+00],
        [-1.6786e+00,  1.8325e+00,  2.2449e+00,  1.1546e+01],
        [-2.6244e+00,  2.2697e+00,  1.3492e-01,  4.3438e+00],
        [ 9.5795e-01, -2.6032e+00,  3.2267e-01, -1.4517e+00],
        [-4.1468e+00, -5.5454e+00, -8.7445e-01, -9.8673e+00],
        [-2.2016e+00,  2.6978e+00,  6.9992e-01,  7.9936e+00],
        [ 1.3192e-01,  1.5450e+00, -1.1723e-01,  3.1523e+00],
        [ 1.3399e+00, -7.2233e+00, -1.3070e+00, -1.4780e+01],
        [-8.4799e-01, -7.6494e-01, -1.3406e-01, -3.4776e+00],
        [-8.9944e-01, -2.7090e+00, -1.5557e+00, -1.1397e+01],
        [-3.8605e-01,  2.7168e-01,  3.4871e-01,  2.8858e+00],
        [-2.2395e+00,  3.5098e+00, -1.0312e+00,  3.9935e-01],
        [-3.9451e-01, -1.6547e-02, -7.9216e-02, -1.2110e+00],
        [ 1.3171e+00,  1.2985e+00,  5.2688e-01,  4.0706e+00],
        [-4.2010e-01,  5.2723e-01,  6.1315e-02,  7.7637e-01],
        [ 7.5362e-01, -6.2184e-01, -2.2325e-02, -1.0613e-01],
        [ 4.6376e-01,  1.4994e+00, -2.0607e-01, -1.5492e+00],
        [ 9.3320e-01,  8.7584e-03,  2.8091e-02,  2.6385e-01],
        [-2.0332e-01,  1.6439e+00,  1.9070e-01,  1.5945e+00],
        [-2.8631e+00, -1.3751e-01, -1.3288e-01, -5.6924e-01],
        [ 3.2700e-01,  1.3110e+00,  1.0888e-01,  1.1502e+00],
        [ 3.2455e-01, -4.8030e-01,  4.0694e-02,  7.2929e-01],
        [ 7.2404e-02,  3.1067e-02,  1.5820e-02,  2.1447e-01],
        [-1.6077e-01,  9.6661e-01, -3.9229e-02, -1.2332e-01],
        [ 1.0246e-01, -6.5671e-01,  9.2644e-02,  5.0033e-01],
        [ 2.4068e-01,  1.2769e-01,  5.0296e-03,  1.0757e-01],
        [-1.9033e-01,  1.2644e-02, -4.0716e-02, -1.2841e-01],
        [-6.6217e-03, -4.7603e+00, -1.9080e-01, -6.1487e-01],
        [ 1.2716e+00, -2.5038e+00,  5.6473e-02,  4.4726e-01],
        [-3.4292e-01, -4.1709e-01, -1.1623e-01, -6.2185e-01],
        [-1.1942e-02,  1.6889e+00,  7.6240e-02,  4.1707e-01],
        [ 7.4743e-01,  4.3178e-01,  8.5804e-02,  5.6732e-01],
        [ 8.5081e-02,  2.1775e-01,  9.0072e-03,  7.9930e-02],
        [ 1.3503e+00,  1.9500e+00,  5.8615e-02,  6.3882e-01],
        [-2.8865e-01,  4.4898e-01,  1.4304e-02,  1.8794e-01],
        [ 2.2720e-01,  2.1035e-01, -1.9001e-02, -3.4129e-02],
        [ 1.6636e+00,  2.0734e+00,  1.5685e-01,  1.1440e+00],
        [-1.3949e+00, -6.2952e-01, -1.4847e-02,  6.2489e-02],
        [-1.7832e-01,  2.2054e-01, -3.0148e-02, -1.1564e-01],
        [-2.3548e-02,  1.6882e-01, -3.1757e-02, -6.0980e-02],
        [ 4.0668e-01, -2.4124e-02, -2.0764e-02, -1.6827e-01],
        [-7.3064e-02, -5.8840e-04, -1.2751e-01, -9.2695e-01],
        [-3.4891e-02, -1.4742e+00, -7.8940e-01, -6.3155e+00],
        [-1.3567e+00, -4.6383e+00,  1.1765e-01,  4.3907e-03],
        [-1.7470e-01,  8.6429e-01,  2.0001e-02, -1.4688e-01],
        [-3.3297e-01,  1.3980e+00,  1.1329e-01,  6.0185e-01],
        [ 4.4829e+01, -8.6898e+00, -1.5283e+01, -1.3855e+02],
        [ 3.8495e+00,  4.6987e+00, -5.8454e+01, -2.7769e+02],
        [ 1.1777e+00, -5.5689e+01,  2.2052e+01,  1.9284e+01],
        [ 9.4044e+01,  7.2383e+01,  2.3366e+01,  1.9596e+02],
        [ 4.1927e+01,  7.9138e+01,  5.0900e+01,  4.2344e+02],
        [-1.3012e-02,  1.4695e+01,  8.4977e+01,  4.6344e+02],
        [ 3.4401e+00, -5.5029e+00, -5.2106e+01, -4.0449e+02],
        [-1.1410e+02, -7.6892e+01,  2.8142e+01, -3.9111e+00],
        [-9.8936e+00, -7.3651e+01,  6.7082e+00, -7.4281e+01],
        [ 1.4052e+01, -1.1268e+01,  6.0553e+01,  3.1622e+02],
        [ 9.1873e+01, -2.5725e+01,  9.7285e+00,  2.8375e+01],
        [-1.2238e+02, -1.1710e+02, -6.7901e+00, -2.0189e+02],
        [-7.8113e+01, -1.9304e+01, -7.0251e-01,  2.5726e+01],
        [-4.9846e+01, -1.9660e+01, -1.5503e+02, -8.2772e+02],
        [-6.2084e+01, -4.2483e+01, -5.9716e+01, -3.8116e+02],
        [ 5.2506e+00, -5.8240e+01, -4.3467e+01, -2.7796e+02],
        [ 1.3588e+01, -1.2926e+01,  3.6317e+01,  1.7868e+02],
        [ 7.9931e+01,  6.1995e+01,  1.3786e+01,  1.0537e+02],
        [-1.8992e-01,  9.4443e-01,  1.2744e+01,  3.8428e+01],
        [ 3.7349e+01, -3.2041e+01, -5.0865e+01, -2.5865e+02],
        [ 1.6095e+01,  3.4521e+01,  2.8807e+01,  1.9711e+02],
        [-4.6169e+01,  1.5599e+01, -1.3969e+01, -4.2922e+01],
        [ 6.2433e+01,  6.1097e+01,  1.2003e+02,  7.4383e+02],
        [ 4.0513e+01,  1.1491e+01, -5.0196e+01, -2.7383e+02],
        [-9.1131e+00, -3.1504e+01,  2.8348e+00, -7.7443e+01],
        [ 2.6352e+00,  8.5548e+01,  1.0001e+01,  1.4904e+02],
        [ 6.2467e+01,  5.2097e+01,  2.5939e+01,  2.3257e+02],
        [ 7.3456e+01,  6.7302e+01,  9.3262e+00,  1.7598e+02],
        [ 2.2219e+01,  9.2937e+01,  2.0935e+01,  2.5896e+02],
        [ 5.9594e+00,  3.0063e+01, -9.1987e+01, -4.4815e+02],
        [-3.0259e+01,  1.2810e+01, -2.2548e+01, -1.0179e+02],
        [ 7.0978e+01, -7.8390e+00,  4.6726e+01,  2.6228e+02]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.2959e+00, -1.2164e+00,  3.0601e-01,  ..., -1.9541e+00,
         -1.9528e+00, -1.8127e+00],
        [ 1.9407e+00,  1.0098e+00,  2.7587e-01,  ...,  3.1419e+00,
          2.7153e+00,  2.2084e+00],
        [-6.9188e-02, -2.4845e-03,  1.2563e-01,  ...,  1.0693e-01,
         -1.5324e-02,  3.8466e-02],
        ...,
        [ 3.1445e+01,  1.0007e+01, -8.6518e+00,  ...,  2.5450e+01,
          4.0661e+01,  1.7692e+01],
        [ 7.9198e+00,  1.4155e+00, -1.5867e+00,  ...,  6.8914e+00,
          1.0059e+01,  3.7241e+00],
        [-1.9987e+01, -5.5329e+00,  8.1129e-01,  ..., -2.2040e+01,
         -2.6670e+01, -1.3763e+01]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.8820e+00, -4.5651e+00,  4.4574e-01,  2.5482e+00, -1.3369e+01,
         8.0319e-01,  3.2658e+00,  2.5265e+00,  2.7385e-01, -6.2469e+00,
        -6.6384e-01,  5.4133e+00, -2.0341e+00,  3.1291e-01, -1.3173e+01,
         4.0989e+00, -1.4818e+00,  3.5616e+00, -4.8457e-01,  4.1878e+00,
         2.5100e-01,  6.0289e-01, -1.6365e+00,  1.3053e+00, -2.1759e-01,
        -2.4410e+00, -2.5008e-01, -2.9051e+00,  6.5106e-01, -1.9254e+00,
        -1.4839e-01,  9.8451e-01,  1.1437e-01, -4.1762e-02, -3.8397e-01,
         5.2757e-02,  3.5662e-01, -2.4824e-01,  2.0388e-01,  7.6096e-02,
         2.9493e-02, -7.2854e-02,  1.7265e-01,  9.6819e-03, -7.6254e-02,
        -3.5755e-01,  1.0453e-01, -2.1704e-01,  1.4297e-01,  1.6060e-01,
         1.6887e-02,  1.1031e-01,  2.6775e-02, -3.5270e-02,  2.9375e-01,
        -2.8025e-02, -5.6220e-02, -5.9232e-02, -3.8648e-02, -2.3810e-01,
        -1.4740e+00,  2.1818e-01,  3.7466e-02,  2.1196e-01, -2.8476e+01,
        -1.0910e+02,  4.1145e+01,  4.3714e+01,  9.5048e+01,  1.5855e+02,
        -9.7273e+01,  5.2403e+01,  1.2490e+01,  1.1301e+02,  1.8210e+01,
        -1.2814e+01, -1.3821e+00, -2.8935e+02, -1.1151e+02, -8.1116e+01,
         6.7796e+01,  2.5791e+01,  2.3791e+01, -9.4882e+01,  5.3809e+01,
        -2.6115e+01,  2.2406e+02, -9.3651e+01,  5.2590e+00,  1.8708e+01,
         4.8470e+01,  1.7487e+01,  3.9092e+01, -1.7163e+02, -4.2069e+01,
         8.7263e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.8820e+00, -4.5651e+00,  4.4574e-01,  2.5482e+00, -1.3369e+01,
         8.0319e-01,  3.2658e+00,  2.5265e+00,  2.7385e-01, -6.2469e+00,
        -6.6384e-01,  5.4133e+00, -2.0341e+00,  3.1291e-01, -1.3173e+01,
         4.0989e+00, -1.4818e+00,  3.5616e+00, -4.8457e-01,  4.1878e+00,
         2.5100e-01,  6.0289e-01, -1.6365e+00,  1.3053e+00, -2.1759e-01,
        -2.4410e+00, -2.5008e-01, -2.9051e+00,  6.5106e-01, -1.9254e+00,
        -1.4839e-01,  9.8451e-01,  1.1437e-01, -4.1762e-02, -3.8397e-01,
         5.2757e-02,  3.5662e-01, -2.4824e-01,  2.0388e-01,  7.6096e-02,
         2.9493e-02, -7.2854e-02,  1.7265e-01,  9.6819e-03, -7.6254e-02,
        -3.5755e-01,  1.0453e-01, -2.1704e-01,  1.4297e-01,  1.6060e-01,
         1.6887e-02,  1.1031e-01,  2.6775e-02, -3.5270e-02,  2.9375e-01,
        -2.8025e-02, -5.6220e-02, -5.9232e-02, -3.8648e-02, -2.3810e-01,
        -1.4740e+00,  2.1818e-01,  3.7466e-02,  2.1196e-01, -1.3849e+01,
        -5.3178e+01,  2.3791e+01,  2.9346e+01,  5.0644e+01,  7.0724e+01,
        -5.8199e+01,  3.3970e+01,  6.5553e+00,  5.9205e+01,  6.2622e+00,
        -2.2854e+00, -4.2370e+00, -1.7850e+02, -5.1378e+01, -4.2700e+01,
         4.3856e+01,  9.2543e+00,  1.2940e+01, -5.0247e+01,  2.5739e+01,
        -1.6429e+01,  6.2567e+01, -4.7658e+01, -3.0094e+00,  1.2798e+01,
         2.0784e+01,  1.6938e+00,  1.8801e+01, -7.8567e+01, -1.8970e+01,
         4.6711e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([[-4.2784e+00,  4.3803e+00, -2.1777e+00,  ..., -4.4487e+00,
         -3.8138e+00, -3.1100e+00],
        [ 6.8637e-01, -7.0340e-01, -4.3213e-02,  ...,  5.7126e-01,
          9.9992e-01,  4.7868e-01],
        [-1.6359e+00,  1.8971e+00, -7.4183e-01,  ..., -1.8024e+00,
         -1.5156e+00, -1.4564e+00],
        ...,
        [ 3.9313e+01, -4.0121e+01,  7.6533e+00,  ...,  3.6354e+01,
          5.0094e+01,  2.8381e+01],
        [ 3.5003e+01, -3.9902e+01,  1.7448e+01,  ...,  3.9354e+01,
          3.0716e+01,  3.0532e+01],
        [-7.7441e+00,  8.6975e+00,  4.4695e-01,  ..., -7.3379e+00,
         -1.2577e+01, -6.8034e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([[  1.2595,  -1.7232,  -3.2392,  ...,   1.4712,  -1.7891,   3.8431],
        [ -0.0707,   0.4264,   0.6747,  ...,   0.0263,   0.1507,  -0.4743],
        [  0.4993,  -0.6761,  -1.4361,  ...,   0.4308,  -0.7207,   1.4023],
        ...,
        [ -3.5702,   9.6166,  15.8504,  ...,  -2.8762,   4.6826, -14.3629],
        [ -5.7889,   7.1597,  15.4799,  ...,  -5.2730,   8.4206, -15.7383],
        [  0.5670,  -2.3566,  -3.8694,  ...,   0.0858,  -0.5070,   2.7433]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([ 6.6868e+00, -1.9201e+00,  2.5524e+00, -7.4820e+00, -1.2760e+00,
         6.4150e-01, -5.2435e+00,  5.9436e-01, -1.1645e+00,  5.0105e+00,
        -3.4817e+00,  1.4365e+00,  5.9866e+00,  1.4389e-01, -4.9651e+00,
         2.6009e+00, -2.1146e+00, -7.5999e-01, -7.0598e-01,  1.0914e+01,
        -1.7311e-01, -8.2525e-02, -4.2904e+00, -8.5950e-01, -5.2290e-02,
        -3.9632e+00,  7.4569e+00, -3.9411e+00, -7.3562e-01,  1.7889e+00,
         4.1022e+00, -5.1310e-01,  1.6607e-01, -8.1049e-03, -3.0738e-01,
         6.3457e-02,  9.3147e-03,  4.1210e-02,  4.8881e-02,  9.4520e-02,
         1.6781e-01, -7.2663e-02, -1.6626e-01,  3.6833e-02, -4.8692e-02,
         4.9491e-01, -9.7211e-02,  5.4135e-02, -2.8176e-02,  7.9392e-03,
         2.8942e-01, -1.9453e-01, -8.2708e-02, -1.4078e-02, -5.5967e-02,
        -8.5758e-02, -7.5394e-04, -1.3967e-01,  5.9585e-02, -2.4484e-02,
         1.0918e-01, -1.2573e-02, -3.0833e-01, -1.0890e-01, -1.0213e+02,
        -6.6022e+01, -8.0177e+01,  1.6690e+02, -8.2950e+01, -2.6926e+01,
         9.6852e+01,  5.8037e+00, -8.0863e+01,  8.6944e+01, -5.6147e+01,
         1.9074e+00, -1.1227e+02,  1.4618e+02,  8.7846e+01, -9.4778e+01,
         1.2298e+02,  5.1018e+01, -7.1970e+01,  1.5329e+02, -2.0511e+01,
        -1.0550e+01, -9.8430e+01,  1.8457e+01, -5.6786e+01,  1.7320e+02,
        -1.3035e+02, -6.4092e+01, -1.0275e+02, -8.6243e+01, -5.3863e+01,
         2.0327e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([ 6.6868e+00, -1.9201e+00,  2.5524e+00, -7.4820e+00, -1.2760e+00,
         6.4150e-01, -5.2435e+00,  5.9436e-01, -1.1645e+00,  5.0105e+00,
        -3.4817e+00,  1.4365e+00,  5.9866e+00,  1.4389e-01, -4.9651e+00,
         2.6009e+00, -2.1146e+00, -7.5999e-01, -7.0598e-01,  1.0914e+01,
        -1.7311e-01, -8.2525e-02, -4.2904e+00, -8.5950e-01, -5.2290e-02,
        -3.9632e+00,  7.4569e+00, -3.9411e+00, -7.3562e-01,  1.7889e+00,
         4.1022e+00, -5.1310e-01,  1.6607e-01, -8.1049e-03, -3.0738e-01,
         6.3457e-02,  9.3147e-03,  4.1210e-02,  4.8881e-02,  9.4520e-02,
         1.6781e-01, -7.2663e-02, -1.6626e-01,  3.6833e-02, -4.8692e-02,
         4.9491e-01, -9.7211e-02,  5.4135e-02, -2.8176e-02,  7.9392e-03,
         2.8942e-01, -1.9453e-01, -8.2708e-02, -1.4078e-02, -5.5967e-02,
        -8.5758e-02, -7.5394e-04, -1.3967e-01,  5.9585e-02, -2.4484e-02,
         1.0918e-01, -1.2573e-02, -3.0833e-01, -1.0890e-01, -3.3007e+01,
        -4.2085e+01, -4.0491e+01,  8.9696e+01, -4.4566e+01, -1.0539e+01,
         5.4120e+01,  1.4445e+00, -4.0753e+01,  4.1089e+01, -3.2173e+01,
        -4.7774e-01, -3.1711e+01,  8.7922e+01,  4.0071e+01, -4.0206e+01,
         5.1264e+01,  1.8853e+01, -3.5226e+01,  8.1778e+01, -9.9436e+00,
        -4.7232e+00, -5.4984e+01,  1.2161e+01, -2.8096e+01,  8.7689e+01,
        -5.1396e+01, -3.0761e+01, -6.4470e+01, -3.7314e+01, -2.8626e+01,
         8.5860e+00], device='cuda:0')>
<bound method Tensor.norm of tensor([[  0.2343,  -0.3092,   0.2723,  ...,   0.3661,   0.1465,   0.2484],
        [ -0.3476,   0.3248,  -0.0764,  ...,  -0.2959,  -0.4931,  -0.2084],
        [ -1.6904,   1.5882,  -0.4732,  ...,  -1.5438,  -1.8405,  -1.0372],
        ...,
        [ 30.2639, -31.4188,  12.5289,  ...,  30.2706,  32.1964,  22.4678],
        [-20.7588,  22.0119,  -8.4713,  ..., -21.2648, -18.6189, -15.5811],
        [-73.6536,  72.4188, -32.2296,  ..., -71.6508, -72.9965, -47.9081]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([[ -0.0964,  -0.1640,  -0.0331,  ...,   0.0655,   0.2912,   0.0586],
        [  0.1971,   0.3082,   0.0684,  ...,  -0.0624,  -0.2568,   0.2811],
        [  1.1415,   1.3133,   0.3259,  ...,  -0.3473,  -1.2250,   1.0759],
        ...,
        [ -6.6702,  -8.0802,  -1.9364,  ...,   2.2535,   8.0292,  -5.3248],
        [  4.8911,   4.7207,   1.2945,  ...,  -1.3365,  -5.0005,   2.9631],
        [ 24.8612,  29.3445,   7.3169,  ...,  -8.4223, -30.4225,  19.3404]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([ 1.6870e-01,  7.2287e-01,  3.5247e+00, -1.1187e+00, -1.1639e+00,
         1.4071e+00, -3.6566e+00,  1.6698e+00, -2.6285e+00, -5.2876e-01,
         1.6083e+00,  2.8960e-01,  1.1409e+00, -6.9524e+00,  2.7355e-01,
        -7.5512e-01,  7.3010e-01,  3.2740e-02, -3.8024e+00, -1.0248e+00,
         7.6116e-01,  5.8007e+00, -8.8032e+00,  5.5536e+00, -2.3034e+00,
        -1.5799e+00, -1.3473e-01, -2.5526e+00, -1.6160e+00, -3.3662e+00,
        -1.1975e+00,  1.0387e+01, -4.8949e-03,  6.3344e-03,  1.3602e-03,
         1.0849e-02,  2.3066e-02, -3.3578e-01,  9.5212e-03,  6.7942e-02,
         3.9928e-02, -4.6662e-02,  8.2410e-02, -7.8607e-02,  2.4321e-02,
         3.2263e-02,  2.0401e-02, -5.5904e-02,  3.3212e-03, -4.2626e-02,
         1.6571e-02, -1.3691e-04, -6.6814e-02, -3.9501e-03, -1.6330e-01,
        -7.0176e-02,  3.0826e-02, -6.2280e-02, -4.0100e-02,  7.3306e-02,
        -2.9445e-01, -5.7711e-02,  8.5593e-02,  2.1152e-01, -1.5876e+00,
         2.5695e+01,  1.1130e+02, -9.7328e+00, -5.2766e+01,  2.0625e+02,
        -1.1233e+01,  1.4869e+02, -6.0658e+01,  5.9062e+01,  6.1377e+00,
        -6.4261e+00,  5.3865e+01, -1.7381e+02, -1.0611e+02, -4.0629e+01,
        -1.1746e+01, -1.9777e+00,  6.8200e+01,  2.7828e+01,  5.1549e+01,
         5.3106e+01,  1.8979e+02, -1.0679e+02, -7.2550e+01,  7.3126e+01,
        -1.3515e+00, -4.0312e+01, -7.5124e+01, -5.1884e+01,  3.6035e+01,
         1.2491e+02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 1.6870e-01,  7.2287e-01,  3.5247e+00, -1.1187e+00, -1.1639e+00,
         1.4071e+00, -3.6566e+00,  1.6698e+00, -2.6285e+00, -5.2876e-01,
         1.6083e+00,  2.8960e-01,  1.1409e+00, -6.9524e+00,  2.7355e-01,
        -7.5512e-01,  7.3010e-01,  3.2740e-02, -3.8024e+00, -1.0248e+00,
         7.6116e-01,  5.8007e+00, -8.8032e+00,  5.5536e+00, -2.3034e+00,
        -1.5799e+00, -1.3473e-01, -2.5526e+00, -1.6160e+00, -3.3662e+00,
        -1.1975e+00,  1.0387e+01, -4.8949e-03,  6.3344e-03,  1.3602e-03,
         1.0849e-02,  2.3066e-02, -3.3578e-01,  9.5212e-03,  6.7942e-02,
         3.9928e-02, -4.6662e-02,  8.2410e-02, -7.8607e-02,  2.4321e-02,
         3.2263e-02,  2.0401e-02, -5.5904e-02,  3.3212e-03, -4.2626e-02,
         1.6571e-02, -1.3691e-04, -6.6814e-02, -3.9501e-03, -1.6330e-01,
        -7.0176e-02,  3.0826e-02, -6.2280e-02, -4.0100e-02,  7.3306e-02,
        -2.9445e-01, -5.7711e-02,  8.5593e-02,  2.1152e-01, -2.6751e+00,
         1.1717e+01,  6.7773e+01, -4.7852e+00, -2.4616e+01,  1.4489e+02,
        -4.7062e+00,  8.5014e+01, -1.9184e+01,  1.8584e+01,  2.3711e+00,
        -6.1294e+00,  2.9159e+01, -7.9699e+01, -5.5537e+01, -3.2895e+01,
        -6.3824e+00,  1.0134e+00,  2.7888e+01,  1.4070e+01,  2.8609e+01,
         2.7898e+01,  1.1025e+02, -5.0876e+01, -3.4430e+01,  4.7858e+01,
        -5.4526e-01, -2.0518e+01, -3.7160e+01, -1.7970e+01,  1.1956e+01,
         6.6692e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([[  0.3347,  -0.2485,   0.5352,  ...,   0.5405,   0.7178,   0.0995],
        [  0.3571,   0.1173,  -0.4043,  ...,  -0.2644,   0.4666,  -0.6506],
        [ -0.5702,   0.7004,  -1.1066,  ...,  -1.0928,  -1.5630,  -0.5506],
        ...,
        [ -3.7139,   3.5928,  -6.2842,  ...,  -6.4860,  -8.1417,  -1.4338],
        [ 11.8893,  -8.7461,  19.7807,  ...,  19.8351,  29.4725,   3.7026],
        [ -4.0492,   3.3796,  -8.7233,  ...,  -7.8673, -13.3525,  -2.6213]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([[  0.2168,  -0.6688,   0.5285,  ...,   0.0599,  -0.6138,  -0.1770],
        [ -0.2826,  -1.0725,   0.2129,  ...,   0.5786,  -0.7134,  -0.7098],
        [ -0.3084,   1.2397,  -1.0257,  ...,  -0.3749,   1.1582,   0.5868],
        ...,
        [ -1.2993,   3.7368,  -3.5854,  ...,  -0.1490,   3.5126,   1.2628],
        [  5.1566, -18.4600,  14.6621,  ...,   2.4546, -17.2013,  -7.5512],
        [ -1.8255,   7.5954,  -6.0172,  ...,  -1.7971,   7.3357,   4.8829]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([-7.6222e-01, -1.7430e+00,  1.3043e+00,  2.9487e+00, -3.4147e+00,
        -2.1343e-02, -9.3223e+00, -3.0947e+00, -1.4873e-01, -2.5023e+00,
        -1.4560e-01,  1.5717e+00, -4.0990e-02, -1.6872e+00, -6.1467e+00,
         5.5704e+00,  3.5184e-01, -3.4319e-01, -1.5773e+00, -8.5263e+00,
        -3.6051e-01,  1.1487e-01, -4.9554e-01,  3.1773e-01,  1.1695e+00,
         1.0670e+01, -8.1957e+00,  1.7485e-01, -1.2518e+00,  1.4891e-01,
        -1.0304e+00, -4.8785e-01, -1.0756e-01, -1.4923e-01, -2.3300e-01,
        -2.5251e-02, -1.0313e-01, -6.5853e-02,  1.5543e-01,  1.7192e-01,
        -3.2481e-02,  3.5641e-02, -8.1265e-02, -1.4531e-01,  4.7376e-02,
         3.4584e-01, -6.7170e-01, -1.4790e-01,  3.7995e-02, -4.4863e-02,
         2.1467e-01,  1.2942e-02, -1.0608e-01, -2.8543e-03, -4.6249e-02,
         1.3508e-01,  1.0529e-01, -4.8447e-02,  6.3588e-02, -3.6957e-02,
        -7.9148e-02,  4.0655e-02,  4.8383e-01, -7.4292e-02, -3.2457e+01,
        -1.3245e+01, -2.1506e+01,  3.8680e+01, -8.2461e+01,  5.4804e+00,
         7.9770e+01,  3.0984e+01, -3.0245e-01,  1.1914e+02, -1.8463e+01,
         1.4865e+01, -1.7708e+02,  1.0519e+02,  1.4045e+02, -1.8096e+02,
         2.1791e+01, -5.9638e+01, -4.0549e+01,  7.9198e+01, -1.7288e+01,
        -1.5570e+01,  1.1240e+01,  9.1294e+00, -8.3503e+00,  1.2634e+02,
        -6.6926e+01,  8.3351e+00, -4.5931e+01,  7.1961e+00, -2.8732e+01,
         9.4509e+00], device='cuda:0')>
<bound method Tensor.norm of tensor([-7.6222e-01, -1.7430e+00,  1.3043e+00,  2.9487e+00, -3.4147e+00,
        -2.1343e-02, -9.3223e+00, -3.0947e+00, -1.4873e-01, -2.5023e+00,
        -1.4560e-01,  1.5717e+00, -4.0990e-02, -1.6872e+00, -6.1467e+00,
         5.5704e+00,  3.5184e-01, -3.4319e-01, -1.5773e+00, -8.5263e+00,
        -3.6051e-01,  1.1487e-01, -4.9554e-01,  3.1773e-01,  1.1695e+00,
         1.0670e+01, -8.1957e+00,  1.7485e-01, -1.2518e+00,  1.4891e-01,
        -1.0304e+00, -4.8785e-01, -1.0756e-01, -1.4923e-01, -2.3300e-01,
        -2.5251e-02, -1.0313e-01, -6.5853e-02,  1.5543e-01,  1.7192e-01,
        -3.2481e-02,  3.5641e-02, -8.1265e-02, -1.4531e-01,  4.7376e-02,
         3.4584e-01, -6.7170e-01, -1.4790e-01,  3.7995e-02, -4.4863e-02,
         2.1467e-01,  1.2942e-02, -1.0608e-01, -2.8543e-03, -4.6249e-02,
         1.3508e-01,  1.0529e-01, -4.8447e-02,  6.3588e-02, -3.6957e-02,
        -7.9148e-02,  4.0655e-02,  4.8383e-01, -7.4292e-02, -2.1606e+01,
        -6.6733e+00, -7.3871e+00,  1.5677e+01, -2.5180e+01,  2.1187e+00,
         3.7363e+01,  1.0792e+01, -5.9280e+00,  8.9178e+01, -9.3643e+00,
         9.9388e+00, -7.9069e+01,  3.2946e+01,  7.6919e+01, -1.1706e+02,
         8.1757e+00, -2.1172e+01, -2.2958e+01,  3.2723e+01, -7.8293e+00,
        -1.1752e+01,  6.2447e+00,  4.6099e+00, -6.1164e+00,  4.9847e+01,
        -4.2496e+01,  4.0961e+00, -1.4128e+01,  3.8358e+00, -2.0489e+01,
         7.2779e+00], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 5.1689e-01, -7.6788e-02,  4.6495e-01,  ...,  4.7390e-01,
          1.0836e+00, -2.9716e-01],
        [-1.6193e-01,  1.4066e-01, -4.0021e-01,  ..., -3.3739e-01,
         -6.9157e-01, -7.8367e-02],
        [ 1.2339e-01, -1.7640e-01,  3.6390e-01,  ...,  2.8580e-01,
          4.3535e-01,  1.7205e-01],
        ...,
        [ 4.6295e+01, -2.9242e+01,  6.7480e+01,  ...,  6.7448e+01,
          1.1247e+02,  4.2278e+00],
        [ 1.4078e+01, -3.6036e+00,  1.2669e+01,  ...,  1.2806e+01,
          3.4175e+01, -8.0787e+00],
        [-6.9965e+01,  4.9353e+01, -1.1111e+02,  ..., -1.0957e+02,
         -1.6985e+02, -1.2487e+01]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-3.6066e-01, -8.9698e-01, -3.7204e-01,  ...,  1.4138e-01,
         -1.6414e-01,  2.5426e-01],
        [ 1.7782e-01,  4.0078e-01,  1.4557e-01,  ...,  2.0278e-01,
          1.7880e-01,  1.0484e-01],
        [-4.3702e-02, -2.0832e-01, -1.2078e-01,  ..., -2.0983e-01,
         -1.3560e-01, -1.3273e-01],
        ...,
        [-1.3976e+01, -4.5598e+01, -2.5129e+01,  ..., -8.9778e+00,
         -1.4749e+01, -3.0004e+00],
        [-6.6802e+00, -1.1993e+01, -4.8407e+00,  ...,  9.1484e-01,
         -3.0444e+00,  1.8543e+00],
        [ 7.3423e+00,  3.8799e+01,  2.4082e+01,  ...,  9.8699e+00,
          1.2945e+01,  4.3858e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.5322e+00,  4.5248e-01, -2.1932e-01,  2.3597e+00,  1.7030e+00,
        -6.7207e+00, -4.5390e+00,  7.5737e+00, -7.5392e-01, -3.8416e-01,
        -2.7527e+00,  9.7025e-02, -7.2932e-01, -2.9082e+00,  3.1697e+00,
         3.7036e+00, -3.2511e-01, -2.6152e+00,  2.0375e-01, -1.4371e+00,
        -2.8453e+00, -5.4330e+00, -3.3068e-01, -6.8471e+00, -9.6058e-01,
         3.6272e-01, -3.6550e-01,  1.5393e+00,  8.1970e-01,  5.9723e+00,
        -2.6756e+00,  5.2370e-01,  5.2910e-02, -7.4413e-03,  1.4555e-01,
        -2.0126e-02,  7.7173e-02,  2.5271e-02,  1.4378e-01, -3.1453e-01,
         1.1411e-01, -6.6107e-02, -6.0945e-02, -4.4746e-02,  3.4729e-03,
        -1.1081e-02, -3.7135e-02, -3.9824e-01,  3.0140e-02,  1.3231e-01,
        -5.8370e-03, -1.0760e-02,  2.3979e-02, -3.8106e-02, -5.3140e-02,
        -7.9407e-03, -2.5327e-02, -4.9790e-02, -9.6971e-02,  1.0818e-01,
        -3.1785e-02, -3.1944e-02,  1.3275e-03, -3.6655e-01, -4.5442e+01,
         6.7863e+00, -5.7856e+00, -3.8610e+01, -3.1993e+01,  8.0737e+01,
        -1.1532e+02,  1.3009e+02, -4.6223e+01,  2.9143e+00, -4.6911e+01,
         2.5864e+00,  7.5235e+00, -1.2350e+02, -6.8140e+01, -5.1325e+01,
         1.6441e+01, -3.6180e+01, -1.6068e+01, -4.2229e+01,  4.0796e+01,
         6.1368e+01,  1.0203e+02, -1.3600e+02, -1.2680e+01, -5.8527e+01,
         1.8425e+01, -6.8336e+01, -1.7154e+02, -1.2094e+02, -4.5982e+01,
         1.7117e+02], device='cuda:0')>
<bound method Tensor.norm of tensor([-1.5322e+00,  4.5248e-01, -2.1932e-01,  2.3597e+00,  1.7030e+00,
        -6.7207e+00, -4.5390e+00,  7.5737e+00, -7.5392e-01, -3.8416e-01,
        -2.7527e+00,  9.7025e-02, -7.2932e-01, -2.9082e+00,  3.1697e+00,
         3.7036e+00, -3.2511e-01, -2.6152e+00,  2.0375e-01, -1.4371e+00,
        -2.8453e+00, -5.4330e+00, -3.3068e-01, -6.8471e+00, -9.6058e-01,
         3.6272e-01, -3.6550e-01,  1.5393e+00,  8.1970e-01,  5.9723e+00,
        -2.6756e+00,  5.2370e-01,  5.2910e-02, -7.4413e-03,  1.4555e-01,
        -2.0126e-02,  7.7173e-02,  2.5271e-02,  1.4378e-01, -3.1453e-01,
         1.1411e-01, -6.6107e-02, -6.0945e-02, -4.4746e-02,  3.4729e-03,
        -1.1081e-02, -3.7135e-02, -3.9824e-01,  3.0140e-02,  1.3231e-01,
        -5.8370e-03, -1.0760e-02,  2.3979e-02, -3.8106e-02, -5.3140e-02,
        -7.9407e-03, -2.5327e-02, -4.9790e-02, -9.6971e-02,  1.0818e-01,
        -3.1785e-02, -3.1944e-02,  1.3275e-03, -3.6655e-01, -1.9423e+01,
         1.8274e+00, -2.7113e+00, -2.2751e+01, -1.6823e+01,  3.9541e+01,
        -2.9539e+01,  7.2495e+01, -2.0494e+01,  1.4118e+00, -1.8518e+01,
         1.5648e+00,  3.8346e+00, -6.9584e+01, -3.0459e+01, -3.4651e+01,
         8.8878e+00, -1.3944e+01, -4.9886e+00, -2.1644e+01,  2.4940e+01,
         3.5977e+01,  3.2245e+01, -5.3956e+01, -4.6662e+00, -3.0066e+01,
         1.1221e+01, -4.1387e+01, -6.4262e+01, -7.3376e+01, -1.8739e+01,
         6.5046e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.9142e+00,  5.6925e+00, -6.4232e+00,  ..., -2.0538e+00,
         -3.3649e+00, -1.4255e-01],
        [-2.0390e-01,  7.4333e-01, -3.1946e-01,  ..., -2.5570e-01,
         -2.4107e-01,  8.3995e-02],
        [ 9.1049e-01, -2.0139e+00,  2.1045e+00,  ...,  5.9876e-01,
          1.1616e+00,  3.0629e-02],
        ...,
        [-1.1964e+01,  1.7092e+01, -2.4967e+01,  ..., -9.4596e+00,
         -1.2644e+01, -9.6490e-01],
        [ 5.1760e+01, -9.7277e+01,  1.1133e+02,  ...,  3.8372e+01,
          6.3101e+01,  2.1258e+00],
        [ 1.3485e+00, -3.8625e+00,  8.3951e-01,  ...,  2.1705e+00,
          1.5786e+00, -7.0471e-01]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ -0.7484,  -3.7736,   3.2440,  ...,  -2.1250,  -2.1918,   3.4754],
        [  0.1408,  -0.4657,   0.3372,  ...,   0.1422,  -0.4233,   0.3158],
        [  0.2621,   1.3226,  -1.1036,  ...,   0.6919,   0.8572,  -1.1539],
        ...,
        [ -0.6125,  -5.2659,   4.5022,  ...,  -3.7260,  -2.1277,   5.0640],
        [  5.5429,  52.7387, -44.0565,  ...,  31.0181,  30.0209, -47.0020],
        [ -1.0150,   1.4308,  -0.8924,  ...,  -0.4467,   1.3047,  -0.7758]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([ 4.2957e+00,  9.5577e-01, -1.5789e+00, -3.2820e-01,  1.4051e+00,
         3.7840e-01, -1.8922e-01, -8.3556e-01, -1.4094e+00,  7.2087e-01,
        -2.3822e-01, -1.3069e+00,  1.3634e+00,  2.0060e+00,  4.4436e+00,
         4.7904e+00, -2.9464e+00, -2.3363e-01, -3.7917e-01, -7.0508e+00,
         2.3732e+00, -8.7772e-02, -2.8945e-01, -4.7624e-02,  7.8039e-01,
         1.6545e-02,  7.6358e-01, -1.2454e-01, -2.4962e+00,  1.9445e-01,
        -5.9935e+00,  2.3770e-02, -3.1944e-01,  8.3755e-02,  1.5606e-01,
         5.7415e-02, -6.6657e-02, -4.1733e-02,  1.5700e-03, -2.7710e-01,
        -1.4240e-02,  2.4877e-03,  2.9763e-02,  3.6950e-02, -3.7839e-01,
        -7.0596e-02, -1.2058e-01,  2.3877e-02,  1.5505e-01, -3.5248e-02,
         1.3109e-01,  6.9284e-03,  1.9503e-01,  2.3714e-02,  4.3572e-01,
         4.8909e-02, -2.5639e-02,  3.9353e-03,  6.7692e-02, -5.6112e-02,
        -1.4878e-01, -2.0944e-02, -2.4160e-01, -5.7625e-02, -7.6020e+01,
        -2.0810e+01, -2.1462e+01,  3.6034e+01,  7.4053e+00, -2.8354e+01,
         5.4122e+01,  1.1711e+01, -5.7236e+01,  3.9875e+01,  3.8964e+01,
        -8.9074e+00,  3.5105e+00,  1.5331e+02,  1.1033e+02, -1.1083e+02,
         4.2358e+01, -1.2688e+01, -3.6343e+01,  7.7522e+01, -6.1677e+01,
        -2.0535e+01, -4.6884e+00, -2.9947e+01, -3.1434e+01,  6.8855e+01,
        -9.0009e+00,  3.3898e+00, -4.0202e+01,  1.1617e+01, -7.8743e+01,
        -6.7029e+00], device='cuda:0')>
<bound method Tensor.norm of tensor([ 4.2957e+00,  9.5577e-01, -1.5789e+00, -3.2820e-01,  1.4051e+00,
         3.7840e-01, -1.8922e-01, -8.3556e-01, -1.4094e+00,  7.2087e-01,
        -2.3822e-01, -1.3069e+00,  1.3634e+00,  2.0060e+00,  4.4436e+00,
         4.7904e+00, -2.9464e+00, -2.3363e-01, -3.7917e-01, -7.0508e+00,
         2.3732e+00, -8.7772e-02, -2.8945e-01, -4.7624e-02,  7.8039e-01,
         1.6545e-02,  7.6358e-01, -1.2454e-01, -2.4962e+00,  1.9445e-01,
        -5.9935e+00,  2.3770e-02, -3.1944e-01,  8.3755e-02,  1.5606e-01,
         5.7415e-02, -6.6657e-02, -4.1733e-02,  1.5700e-03, -2.7710e-01,
        -1.4240e-02,  2.4877e-03,  2.9763e-02,  3.6950e-02, -3.7839e-01,
        -7.0596e-02, -1.2058e-01,  2.3877e-02,  1.5505e-01, -3.5248e-02,
         1.3109e-01,  6.9284e-03,  1.9503e-01,  2.3714e-02,  4.3572e-01,
         4.8909e-02, -2.5639e-02,  3.9353e-03,  6.7692e-02, -5.6112e-02,
        -1.4878e-01, -2.0944e-02, -2.4160e-01, -5.7625e-02, -3.8238e+01,
        -8.5183e+00, -1.0420e+01,  2.3425e+01,  4.8693e+00, -1.1257e+01,
         7.5171e+00,  4.4935e+00, -3.8934e+01,  2.2792e+01,  1.8721e+01,
        -5.5387e+00, -2.1889e-01,  6.1831e+01,  3.2073e+01, -7.9071e+01,
         2.7643e+01, -6.5667e+00, -2.1181e+01,  2.5512e+01, -2.8113e+01,
        -1.2154e+01, -4.6565e+00, -1.7341e+01, -1.0827e+01,  4.1838e+01,
        -5.2558e+00,  2.6021e+00, -2.6027e+01,  4.7783e+00, -6.0553e+01,
        -3.2328e+00], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 2.0156e-01, -5.6408e-01,  4.3343e-01,  ...,  1.7466e-01,
          3.1690e-01, -5.3895e-02],
        [ 6.2197e-01, -1.5280e+00,  1.7059e+00,  ...,  4.3167e-01,
          1.1490e+00, -1.0655e-01],
        [ 1.7249e+00, -2.6535e+00,  4.1202e+00,  ...,  9.7726e-01,
          2.0945e+00,  2.8786e-01],
        ...,
        [ 2.6889e+01, -5.7535e+01,  5.9078e+01,  ...,  2.1062e+01,
          3.7742e+01, -1.7314e+00],
        [ 1.8971e+01, -4.1137e+01,  4.0021e+01,  ...,  1.6354e+01,
          2.7760e+01, -2.1711e+00],
        [-5.4674e+01,  1.0339e+02, -1.1428e+02,  ..., -4.4751e+01,
         -7.2532e+01,  1.6597e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ -0.2107,  -0.1003,  -0.3804,  ...,  -0.3022,   0.0598,   0.0499],
        [ -0.3007,  -0.3490,  -1.1373,  ...,  -0.6932,  -0.1612,   0.0484],
        [  0.4296,  -0.9267,  -1.9595,  ...,  -0.1755,  -1.5306,  -0.4795],
        ...,
        [ -6.1741,  -6.7910, -16.4764,  ...,  -9.4117,  -1.8633,   0.8915],
        [ -8.1500,  -9.0650, -22.0293,  ..., -13.6255,  -1.4089,   2.0465],
        [  9.3163,  16.8840,  36.0022,  ...,  17.3228,   8.6419,  -0.7021]],
       device='cuda:0')>
<bound method Tensor.norm of tensor([-5.9573e-01, -1.3062e+00, -1.2432e+00,  5.6143e-01, -3.3404e+00,
         3.3984e+00, -1.7254e+00,  2.6566e+00, -3.3803e+00, -9.4888e-01,
         5.2935e-01,  1.2645e+00,  4.3208e-02,  1.0938e+00, -2.3326e+00,
        -5.5250e+00, -5.1443e-01, -3.7074e+00, -4.2847e+00, -9.2805e+00,
        -8.2835e-02,  6.2280e-01, -6.8585e+00,  2.2050e-01, -1.1914e+00,
        -2.0511e+00,  9.7229e-01,  1.0241e-01, -4.6418e+00, -3.7855e+00,
         3.8417e+00, -3.2323e+00,  7.1988e-02, -3.2949e-02,  1.5095e-02,
        -5.6060e-02,  1.8696e-01, -4.2809e-03, -6.5704e-03, -5.6745e-02,
        -2.6717e-02,  3.0257e-02, -3.8213e-02,  7.5206e-03,  1.2431e-01,
        -1.2683e-02,  8.8049e-02,  2.8374e-01, -1.1256e-01, -5.7320e-01,
         3.8460e-02,  2.3553e-01, -7.3003e-03, -3.3945e-01,  7.1324e-03,
         5.0002e-02, -1.2305e-01,  2.3211e-01, -5.8186e-04,  2.3148e-01,
         6.6495e-03,  4.2473e-02,  9.3903e-03, -5.0278e-02, -2.3095e+01,
         2.1725e+01, -2.0452e+00,  2.9717e+01,  5.0946e+01,  3.1274e+01,
        -1.2322e+01,  7.2450e+01, -5.3357e+01,  3.2576e+01, -3.8694e+01,
         8.8788e+01,  2.8749e+00, -3.8041e+01, -2.6429e+01, -5.6236e+01,
         3.8630e+01, -3.6913e+01, -3.9848e+01, -5.2369e+01,  3.5811e+00,
         8.9793e+01,  6.7492e+01, -8.0940e+01,  1.1681e+01, -1.0016e+02,
        -1.7733e+01, -2.5121e+01, -6.5183e+01, -5.3844e+01, -4.2530e+01,
         9.7014e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([-5.9573e-01, -1.3062e+00, -1.2432e+00,  5.6143e-01, -3.3404e+00,
         3.3984e+00, -1.7254e+00,  2.6566e+00, -3.3803e+00, -9.4888e-01,
         5.2935e-01,  1.2645e+00,  4.3208e-02,  1.0938e+00, -2.3326e+00,
        -5.5250e+00, -5.1443e-01, -3.7074e+00, -4.2847e+00, -9.2805e+00,
        -8.2835e-02,  6.2280e-01, -6.8585e+00,  2.2050e-01, -1.1914e+00,
        -2.0511e+00,  9.7229e-01,  1.0241e-01, -4.6418e+00, -3.7855e+00,
         3.8417e+00, -3.2323e+00,  7.1988e-02, -3.2949e-02,  1.5095e-02,
        -5.6060e-02,  1.8696e-01, -4.2809e-03, -6.5704e-03, -5.6745e-02,
        -2.6717e-02,  3.0257e-02, -3.8213e-02,  7.5206e-03,  1.2431e-01,
        -1.2683e-02,  8.8049e-02,  2.8374e-01, -1.1256e-01, -5.7320e-01,
         3.8460e-02,  2.3553e-01, -7.3003e-03, -3.3945e-01,  7.1324e-03,
         5.0002e-02, -1.2305e-01,  2.3211e-01, -5.8186e-04,  2.3148e-01,
         6.6495e-03,  4.2473e-02,  9.3903e-03, -5.0278e-02, -1.5102e+01,
         9.1367e+00, -1.4900e+00,  9.1151e+00,  3.1761e+01,  1.4527e+01,
        -5.6844e+00,  5.2901e+01, -1.8628e+01,  1.1273e+01, -1.5026e+01,
         3.5667e+01,  8.1582e-01, -1.6274e+01, -9.1889e+00, -3.6819e+01,
         2.0233e+01, -1.7395e+01, -1.8915e+01, -1.7493e+01,  1.7238e+00,
         4.0557e+01,  4.3148e+01, -2.7333e+01,  7.5726e+00, -5.5395e+01,
        -8.3553e+00, -1.1589e+01, -3.6631e+01, -2.3714e+01, -3.1773e+01,
         4.8112e+01], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 2.1349e+00,  1.2287e-01,  1.3036e+00,  ...,  2.3307e+00,
         -2.7550e+00, -5.5939e-01],
        [ 1.3428e+01, -4.1327e+00,  6.7859e+00,  ...,  1.0603e+01,
         -8.1982e+00, -2.1106e+00],
        [ 1.8545e+02, -7.4647e+01,  1.9821e+02,  ...,  5.4535e+01,
          1.5287e+02, -3.4989e+00],
        ...,
        [ 3.0561e+02, -1.4049e+02,  2.9250e+02,  ...,  7.3508e+01,
          2.1057e+02, -1.4229e+01],
        [-3.6670e+01,  1.9179e+01, -3.6840e+01,  ...,  1.0402e+01,
         -3.8589e+01,  2.1694e+00],
        [-1.0405e+02,  4.7263e+01, -9.6210e+01,  ..., -2.7313e+01,
         -5.8602e+01,  6.3956e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 3.0542e+00,  1.7801e+00, -2.7615e+02, -9.3126e+01, -4.7379e+02,
        -3.7555e+02, -6.7607e+01,  0.0000e+00,  2.7635e+01,  2.1715e+01,
         2.7590e+01,  3.4849e+01,  2.6622e+01, -6.5103e+01, -2.7516e+01,
         1.8993e+01,  1.7108e+02,  1.4269e+02,  1.4289e+02,  6.7179e+00,
        -8.1872e+01,  9.7472e+00, -1.3168e+02,  5.3596e+01,  7.0439e+01,
        -3.4874e+01,  1.1496e+02, -2.7498e-01, -1.0089e+02, -4.0745e+02,
         5.4332e+01,  1.1883e+02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-8.5558e-01, -1.5842e+02, -1.6936e+02, -4.7635e+02, -3.8347e+02,
         -7.5755e+02, -8.8231e+01,  0.0000e+00, -5.4385e+00, -2.3750e+01,
         -2.8950e+02, -5.2610e+00, -5.0454e+02, -2.0968e+01, -3.6921e+01,
         -7.4353e+02, -1.6827e+02, -3.9088e+02, -4.0894e+02, -1.0203e+01,
         -7.5717e+01, -3.1280e+00, -9.1387e+02, -1.0331e+03, -7.5677e+02,
         -4.5520e+01, -1.2095e+02, -1.1459e-01, -7.8395e+01, -4.0976e+02,
         -9.6292e+02, -5.4433e+02],
        [-2.9437e-01, -4.2919e+00, -5.9432e-03, -4.0965e+00, -3.2662e+00,
         -6.3582e+00, -1.9482e-02,  0.0000e+00, -2.2952e-02, -1.0760e+00,
         -4.3953e-05, -2.8974e-03, -6.8127e-01, -4.5995e-01, -1.3801e+00,
         -5.7951e-03, -4.3525e-04, -4.0642e-03, -7.8618e-01,  0.0000e+00,
         -2.1140e+00,  0.0000e+00, -1.7067e+00, -1.1906e-01, -2.9050e+00,
         -2.5426e-01, -1.4610e-01,  0.0000e+00, -1.2370e-03, -1.0119e-02,
         -1.2001e+00, -5.6380e-01],
        [-1.4812e+00, -2.4584e+02, -1.8932e+02, -5.8816e+02, -4.7728e+02,
         -9.1588e+02, -7.9316e+01,  0.0000e+00, -3.2523e+00, -4.0104e+01,
         -2.7400e+02, -6.7313e+00, -5.3765e+02, -3.4023e+01, -5.9468e+01,
         -7.1415e+02, -1.6035e+02, -3.9233e+02, -4.4778e+02, -1.1288e+01,
         -1.0326e+02, -3.2493e+00, -9.7929e+02, -1.1247e+03, -8.5763e+02,
         -5.2021e+01, -1.0847e+02, -7.7633e-02, -6.3724e+01, -4.2760e+02,
         -1.0500e+03, -6.1240e+02],
        [ 1.1633e+00,  1.8802e+02,  1.2391e+02,  3.7919e+02,  3.0968e+02,
          5.9207e+02,  5.8909e+01,  0.0000e+00,  5.5871e+00,  3.2099e+01,
          1.5481e+02,  4.9539e+00,  3.3108e+02,  2.7582e+01,  4.7312e+01,
          4.1937e+02,  9.0569e+01,  2.2349e+02,  2.6437e+02,  6.8783e+00,
          7.6818e+01,  1.8599e+00,  5.8976e+02,  6.8437e+02,  5.4436e+02,
          3.1736e+01,  7.9716e+01,  1.4310e-01,  4.4441e+01,  2.5742e+02,
          6.3415e+02,  3.8408e+02],
        [-5.1243e-01, -5.9467e+01, -6.4849e+01, -1.7984e+02, -1.4110e+02,
         -2.6017e+02, -1.9913e+01,  0.0000e+00, -5.0456e-01, -1.3089e+01,
         -9.3327e+01, -2.1716e+00, -1.7684e+02, -8.8380e+00, -9.3831e+00,
         -2.4393e+02, -5.6045e+01, -1.3189e+02, -1.3712e+02, -3.7068e+00,
         -2.4369e+01, -1.0732e+00, -3.1869e+02, -3.7778e+02, -2.6464e+02,
         -1.6529e+01, -2.7043e+01, -5.3897e-03, -2.2991e+01, -1.4627e+02,
         -3.4093e+02, -2.0443e+02],
        [ 0.0000e+00, -2.2394e+00,  1.1479e-03, -3.8342e-01, -1.4136e+00,
         -8.5705e+00, -7.7061e+00,  0.0000e+00, -1.9623e+00, -1.6000e-01,
         -1.7287e+00, -2.2152e-03, -1.5218e-01, -2.2421e-04, -2.2216e+00,
         -3.7046e+00,  1.4901e-01, -5.7678e-01, -3.2236e+00,  0.0000e+00,
         -2.0786e+00,  0.0000e+00, -4.3474e-01,  3.5677e-01, -4.1297e+00,
          6.2027e-02, -7.5232e+00, -7.3280e-02, -2.2490e+00,  1.9753e-01,
         -5.1998e-01,  1.0385e-01],
        [ 0.0000e+00,  1.4148e-04,  2.7497e+01,  2.6152e+02,  1.7182e+02,
          3.7577e+02,  5.8785e+01,  0.0000e+00,  1.5663e-01,  0.0000e+00,
          2.1443e+02,  0.0000e+00,  1.6744e+02,  0.0000e+00,  0.0000e+00,
          3.6176e+02,  9.1230e+01,  2.6170e+02,  2.8847e+02,  5.5485e-02,
          6.3386e+00,  2.4772e-02,  4.7217e+02,  4.5993e+02,  2.9107e+02,
          4.9329e+01,  6.7359e+01,  2.1489e-03,  1.9405e+01,  1.5581e+02,
          5.1847e+02,  1.9521e+02],
        [ 5.7912e-03, -2.0675e+00,  6.4981e-01, -3.0565e+00, -2.5362e+00,
         -6.9516e+00, -5.8429e-01,  0.0000e+00,  7.7324e-03, -3.6634e+00,
          2.6963e-01,  2.4283e-02,  1.2070e+00,  5.0447e-01, -2.1128e+00,
          4.9144e-01,  1.0978e-01,  5.9966e-01, -2.5728e+00,  8.2171e-04,
         -2.0157e+00,  0.0000e+00,  1.2725e+00,  3.3037e+00,  2.3791e-01,
         -2.8245e-01, -4.1147e-02,  1.0229e-04,  1.9494e-02,  7.5465e-01,
          6.8877e-02,  2.2971e+00],
        [-1.1891e+00, -4.0045e+01,  0.0000e+00, -4.2393e+01, -3.4044e+01,
         -6.8318e+01, -3.7970e+00,  0.0000e+00, -1.0966e-01, -1.8967e+01,
         -1.6888e-02,  0.0000e+00, -2.5480e+00, -3.9739e+00, -1.5735e+01,
         -6.4917e-02,  0.0000e+00, -8.0692e-03, -1.3358e+01,  0.0000e+00,
         -1.6297e+01,  0.0000e+00, -1.4720e+01, -2.7585e+00, -2.8266e+01,
         -1.2011e+00, -4.2766e+00,  0.0000e+00, -8.1645e-02,  0.0000e+00,
         -1.7650e+01, -5.4835e+00],
        [ 1.4440e+00,  1.3521e+02, -5.5319e-03,  1.0998e+02,  1.0510e+02,
          2.5158e+02,  4.6343e+01,  0.0000e+00,  6.7756e+00,  3.8345e+01,
          4.6683e+00, -1.7514e-03,  2.2568e+01,  1.2249e+01,  6.2218e+01,
          2.3860e+01, -2.8071e-01,  2.9145e+00,  5.8039e+01,  0.0000e+00,
          6.1400e+01,  0.0000e+00,  5.3831e+01,  2.6675e+00,  1.2319e+02,
          2.0311e+00,  5.6809e+01,  1.7802e-01,  1.2964e+01, -1.8076e-01,
          6.2673e+01,  9.6028e+00],
        [ 0.0000e+00, -3.4390e+00, -9.5826e+01, -7.8809e+01, -5.6363e+01,
         -1.0259e+02, -8.7207e+00,  0.0000e+00, -8.9602e-01, -3.6572e-02,
         -8.8562e+01, -2.6804e+00, -1.6920e+02, -6.6563e-01,  0.0000e+00,
         -2.5744e+02, -6.2988e+01, -1.0243e+02, -7.2104e+01, -9.9403e+00,
         -2.1927e+00, -3.3547e+00, -2.6286e+02, -3.5114e+02, -1.8821e+02,
         -6.9965e+00, -2.1430e+01, -1.6527e-02, -3.9069e+01, -1.5320e+02,
         -2.6479e+02, -1.9044e+02],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 7.1974e-04,  3.2973e+01, -1.4348e-01,  1.5660e+01,  2.1020e+01,
          6.0794e+01,  2.1321e+01,  0.0000e+00,  3.7296e+00,  2.4699e+00,
         -1.9339e+00, -1.3173e-01,  2.4202e+00,  3.0401e+00,  1.8057e+01,
          1.0296e+00, -2.2518e+00, -3.4271e+00,  1.3134e+01,  0.0000e+00,
          1.5125e+01,  0.0000e+00,  4.3176e+00, -6.0568e+00,  3.1156e+01,
         -9.0601e-01,  2.4005e+01,  1.0287e-01,  5.0731e+00, -4.1157e+00,
          7.8089e+00, -1.4452e+00],
        [ 1.0724e+00,  1.5473e+02,  3.2163e+01,  1.4761e+02,  1.2840e+02,
          2.2914e+02,  1.6316e+01,  0.0000e+00,  4.1901e+00,  3.0063e+01,
         -3.3516e+01,  2.7265e+00,  3.9750e+01,  2.3846e+01,  4.4564e+01,
         -4.9375e+01, -1.8731e+01, -2.2329e+01,  3.0853e+01,  9.8077e-01,
          5.3825e+01, -8.7918e-02,  5.6655e+01,  8.7076e+01,  1.4312e+02,
          6.3237e+00,  1.7998e+01,  1.2431e-01, -3.3435e+00,  1.2615e+01,
          8.0517e+01,  8.3372e+01],
        [ 0.0000e+00, -1.0826e-01,  0.0000e+00,  5.6570e-01,  9.8842e-02,
         -1.9823e+00, -3.1305e+00,  0.0000e+00, -8.2209e-01,  4.9243e-01,
         -1.0446e+00, -2.0926e-03, -3.0159e-02,  0.0000e+00, -4.3288e-01,
         -1.5947e+00, -2.8804e-03, -4.1357e-01, -1.0591e+00,  0.0000e+00,
         -3.8813e-01,  0.0000e+00, -1.9818e-01, -4.4799e-03, -1.1218e+00,
          7.8862e-02, -3.1071e+00, -5.7146e-02, -9.1845e-01, -1.4504e-04,
          3.4656e-02,  0.0000e+00],
        [-7.6301e-02, -3.1620e+01,  3.1100e+01,  6.3576e+01,  4.4181e+01,
          9.7321e+01,  1.3831e+01,  0.0000e+00, -9.5218e-01, -3.1499e+00,
          9.4412e+01,  1.5447e-01,  1.1460e+02, -5.9564e+00, -1.0616e+01,
          2.2145e+02,  5.4504e+01,  1.1593e+02,  9.7356e+01,  2.3759e+00,
         -5.0727e+00,  9.1114e-01,  2.1879e+02,  2.3800e+02,  1.3219e+02,
          1.0206e+01,  2.0492e+01, -3.8833e-02,  2.1586e+01,  1.0445e+02,
          2.2242e+02,  1.0728e+02]], device='cuda:0')>
<bound method Tensor.norm of tensor([-1228.3384,    -5.0778, -1373.4937,   874.6753,  -415.9524,   -10.4746,
          484.6826,    -1.8616,   -52.9768,   246.5898,  -294.9535,     0.0000,
           64.8548,   223.8376,    -3.2347,   217.5245], device='cuda:0')>
<bound method Tensor.norm of tensor([[-3.1371e-01,  0.0000e+00, -2.5773e-01, -1.1292e-01,  0.0000e+00,
         -4.0667e-02, -1.0257e-01, -1.4501e-01,  0.0000e+00, -1.5399e-02,
          0.0000e+00,  0.0000e+00, -6.5747e-02, -1.9466e-02,  0.0000e+00,
         -2.7337e-01],
        [-1.8624e+03, -7.3426e-01, -9.6623e+02, -2.2160e+03, -7.0077e+02,
         -5.3497e+00, -6.8328e+01, -4.7724e+01, -1.2407e+01, -9.0687e+01,
         -4.8552e+01,  0.0000e+00, -7.7419e+01, -1.0676e+03, -2.0688e+00,
         -8.7550e+02],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 4.0103e+01,  3.4154e-02,  1.4354e+01,  2.3278e+01,  4.9944e+00,
          2.4658e-01,  6.1555e-01,  9.4449e-01,  5.7785e-01,  4.2235e+00,
          1.7711e-04,  0.0000e+00,  3.6038e+00,  2.3738e+01,  9.6354e-02,
          1.5511e+01],
        [ 8.3469e+02,  0.0000e+00,  3.7276e+02,  1.3533e+03,  4.2339e+02,
          6.7570e-01,  7.1003e+01,  4.5332e+00,  0.0000e+00,  6.1495e-01,
          3.8704e+01,  0.0000e+00,  5.1304e+00,  4.2869e+02,  2.3103e-02,
          5.6407e+02],
        [-1.9398e+01, -5.5994e-02, -1.0449e+01, -1.8512e+00, -3.0536e+00,
          0.0000e+00,  0.0000e+00, -4.1524e+00, -1.9868e+00, -3.1346e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00, -6.3383e+00, -6.1338e-01,
         -9.3068e-01],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([-9.7774e-01, -6.0538e+03,  0.0000e+00,  1.2102e+02,  2.9091e+03,
        -3.7935e+01,  0.0000e+00,  0.0000e+00], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00],
        [-2.8244e-03, -8.1664e+02,  0.0000e+00, -1.9975e+02, -4.7771e+01,
         -2.8114e-01,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 1.3712e-02,  3.9647e+03,  0.0000e+00,  9.6977e+02,  2.3192e+02,
          1.3649e+00,  0.0000e+00,  0.0000e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([    0.0000, -6615.8638,     0.0000, 32119.0098], device='cuda:0')>
<bound method Tensor.norm of tensor([[     0.0000, -26126.9902,      0.0000, -11794.9580]], device='cuda:0')>
<bound method Tensor.norm of tensor([-78859.2812], device='cuda:0')>
