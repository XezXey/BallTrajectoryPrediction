[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/Latent/train_set
Mixed:   0%|                                                                                                                                                                                                                                    | 0/3 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 30.84it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                                                                                                                                                                    | 0/1 [00:00<?, ?it/s]Mixed: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 17.83it/s]
===============================Dataset shape===============================
Mixed : (1850,)
===========================================================================
======================================================Summary Batch (batch_size = 128)=========================================================================
Input batch [0] : batch=torch.Size([128, 922, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 922, 4]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 922, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 923, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 799, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 799, 4]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 799, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 800, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 881, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 4]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 892, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 892, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 893, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 4]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 871, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 871, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 862, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 4]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 990, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 4]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 1002, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 898, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 915, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 915, 4]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 915, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 916, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 918, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 844, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 960, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 960, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 961, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 840, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 840, 4]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 840, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 841, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 885, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 885, 4]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 885, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 886, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 874, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 874, 4]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 874, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 867, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 867, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 826, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 826, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 827, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 798, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 798, 4]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 798, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 799, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 4]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 992, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 865, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 865, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 925, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 925, 4]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 925, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 926, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 795, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 842, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 842, 4]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 842, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 843, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 830, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 830, 4]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 830, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 932, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 894, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 894, 4]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 894, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 895, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 833, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 833, 4]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 833, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 834, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 951, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 836, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 836, 4]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 836, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 837, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 860, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 860, 4]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 860, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 861, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 959, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 4]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 949, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 904, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 904, 4]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 904, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 905, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 962, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 962, 4]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 962, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 963, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 868, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
train_ball_trajectory_depth_jointly_latent_optim.py:276: RuntimeWarning:

invalid value encountered in long_scalars

===> [Minibatch 1/44].........<bound method Tensor.norm of tensor([[ 7.4713e-03, -2.9496e-03],
        [-7.9025e-04, -1.7003e-03],
        [ 1.8261e-04,  7.0847e-04],
        [ 9.9789e-04,  1.0582e-03],
        [ 1.3356e-03, -1.6172e-03],
        [ 1.2376e-03,  1.7203e-03],
        [-8.5462e-04,  9.2317e-04],
        [ 2.3096e-03, -1.1485e-03],
        [ 1.5068e-03,  5.6804e-04],
        [-2.8649e-04,  2.5859e-03],
        [ 1.6976e-03, -1.1445e-03],
        [-1.9027e-03, -1.1524e-03],
        [-1.2535e-03,  1.2758e-04],
        [-6.2711e-04, -2.8667e-04],
        [-2.2126e-03,  2.2522e-03],
        [-1.3529e-03,  1.2470e-04],
        [-1.4747e-03,  2.1038e-03],
        [-1.6656e-03, -1.3220e-03],
        [ 2.1239e-03,  5.6000e-04],
        [-8.2476e-04, -3.7326e-04],
        [ 1.5996e-03, -1.2862e-03],
        [-2.6024e-03,  4.0411e-03],
        [ 2.7588e-04,  1.5800e-03],
        [-3.3239e-04,  9.6275e-04],
        [-1.5188e-04,  1.0415e-03],
        [-1.6737e-03,  2.5559e-03],
        [ 6.0934e-03, -1.8630e-03],
        [ 3.0515e-04,  1.3692e-04],
        [-1.6344e-03, -1.8948e-03],
        [ 5.3026e-04,  4.5557e-04],
        [-3.1674e-05,  9.7159e-05],
        [-1.3598e-03, -3.0763e-04],
        [-2.7798e-03,  8.4739e-04],
        [-1.4586e-03, -1.0167e-03],
        [-2.8937e-03,  3.1586e-04],
        [-1.6247e-03,  2.2244e-04],
        [ 5.7451e-04,  3.1383e-04],
        [-4.5371e-03,  1.2073e-03],
        [-1.3881e-03,  1.5008e-03],
        [-2.3907e-03,  4.1174e-04],
        [-2.4191e-03,  9.0734e-05],
        [ 1.4538e-03, -6.1104e-04],
        [-1.5151e-03, -1.8595e-03],
        [-1.2865e-04,  5.8236e-05],
        [-2.9868e-03, -4.9009e-04],
        [-1.3575e-03, -3.6539e-04],
        [-2.4251e-03, -1.3474e-03],
        [ 5.9949e-04, -6.2645e-04],
        [ 1.6975e-03,  8.4233e-04],
        [-3.3482e-04,  4.1134e-04],
        [-4.6910e-05,  3.8650e-05],
        [-3.4348e-04, -3.0746e-04],
        [ 6.1658e-04,  4.0401e-05],
        [ 5.5034e-04,  3.9590e-04],
        [-5.9347e-04,  8.2905e-04],
        [ 9.7670e-04,  1.6463e-03],
        [ 1.8016e-04, -1.1429e-03],
        [ 1.2348e-03, -1.1060e-03],
        [ 5.1548e-04,  6.8676e-04],
        [ 6.4748e-04, -7.6268e-05],
        [ 1.0617e-03,  2.4557e-05],
        [ 1.7176e-03,  1.5761e-03],
        [-1.8293e-03,  1.7067e-03],
        [ 2.8554e-03,  1.7592e-03],
        [ 4.9335e-02, -4.4347e-02],
        [-2.1765e-02, -4.9852e-02],
        [-9.5518e-03,  8.6064e-04],
        [ 2.7016e-02,  3.6345e-03],
        [ 3.6628e-03,  1.6614e-02],
        [ 1.2220e-01, -5.2219e-03],
        [-6.4105e-02,  4.4620e-02],
        [-5.6034e-02,  4.0544e-02],
        [ 1.3057e-02, -3.2854e-02],
        [-3.6068e-03,  2.9758e-02],
        [ 2.7803e-02, -1.9428e-03],
        [ 1.2422e-02, -2.7410e-02],
        [ 1.5749e-02,  1.4712e-02],
        [ 4.4680e-02,  2.0394e-02],
        [ 4.6790e-02, -7.0736e-02],
        [-5.2800e-02, -3.7337e-02],
        [-6.4062e-03,  4.5169e-02],
        [ 4.5033e-02,  3.1637e-02],
        [-6.0921e-02, -2.0205e-02],
        [-4.6537e-02,  1.6833e-02],
        [ 1.6395e-02,  2.0550e-02],
        [ 3.8132e-02, -4.9658e-02],
        [ 1.5042e-03,  1.9898e-02],
        [ 9.5457e-03, -1.3466e-02],
        [-3.2090e-03,  2.1790e-02],
        [ 4.3932e-02, -4.6491e-02],
        [ 5.7276e-02, -2.4124e-02],
        [ 7.1877e-02,  1.0810e-02],
        [-1.5929e-02,  2.9660e-02],
        [-4.9046e-02, -2.8090e-02],
        [ 9.4155e-03,  1.3952e-02],
        [ 1.5213e-02,  2.7265e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 7.5272e-04,  1.1985e-05, -1.1489e-03,  ..., -1.2259e-04,
         -1.5616e-03, -1.0076e-03],
        [-1.9734e-04,  5.0469e-04,  1.7262e-04,  ..., -7.0833e-04,
         -1.8085e-06, -3.8171e-04],
        [ 5.5975e-04, -6.3832e-04, -1.1790e-04,  ...,  1.0598e-03,
          1.4391e-04,  1.2853e-03],
        ...,
        [-2.4932e-03,  3.9162e-03,  2.8802e-03,  ..., -5.0311e-03,
          2.1021e-03, -8.5701e-04],
        [-2.3631e-03,  7.1592e-04,  5.8099e-04,  ..., -1.9365e-03,
          1.9625e-04, -4.1935e-03],
        [ 1.7304e-03, -5.2008e-04, -1.9662e-03,  ...,  7.1106e-04,
         -2.4065e-03, -7.2057e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.3043e-03,  2.6758e-03, -5.9164e-03,  1.0274e-04, -3.9261e-04,
        -2.2642e-04, -9.4099e-04,  1.1271e-03, -2.4757e-05, -1.7632e-03,
         2.9257e-03, -1.3687e-03,  1.2440e-03,  1.4946e-03, -7.3255e-04,
        -5.9373e-04, -4.3109e-03,  3.3035e-03, -6.7736e-04, -5.8301e-05,
        -6.4634e-04,  1.6249e-03, -2.3522e-03, -1.5006e-03, -7.7911e-04,
         1.4657e-03, -9.0052e-05, -1.4467e-04,  4.6518e-04, -3.0519e-04,
        -6.4287e-05,  2.3379e-04,  3.6336e-05, -2.0108e-05,  9.0589e-05,
         2.2767e-05,  5.1603e-05,  8.7392e-04,  5.4449e-04, -2.9317e-04,
         3.5917e-04, -7.5574e-05, -7.0439e-04,  3.3776e-04,  1.8592e-04,
         1.5157e-04, -4.7740e-04, -5.6127e-05,  1.8742e-04,  7.9122e-05,
         1.9063e-05,  2.1429e-04,  1.0487e-05, -2.1083e-04,  3.3813e-04,
         7.5391e-04, -9.3788e-04, -9.3928e-04,  3.9420e-04,  1.6006e-04,
        -2.2047e-04,  4.6261e-04,  9.3254e-04,  4.9299e-04,  1.0745e-01,
         5.9193e-02,  9.1647e-02,  4.8308e-03, -3.1892e-02, -2.0882e-02,
        -5.3982e-02, -4.3982e-02,  2.4377e-02, -3.0463e-02, -4.3277e-02,
        -2.8740e-02, -3.7964e-02, -4.4775e-02,  3.0124e-02,  1.1394e-01,
        -7.4772e-02, -7.5256e-02,  3.3988e-02, -5.7589e-03, -6.0844e-03,
        -1.8089e-02, -4.9965e-02,  3.1067e-02, -2.1793e-02, -1.4012e-02,
         3.7611e-02, -2.4237e-02, -9.1787e-03,  3.6588e-02,  4.0663e-02,
        -1.9797e-03], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.3043e-03,  2.6758e-03, -5.9164e-03,  1.0274e-04, -3.9261e-04,
        -2.2642e-04, -9.4099e-04,  1.1271e-03, -2.4757e-05, -1.7632e-03,
         2.9257e-03, -1.3687e-03,  1.2440e-03,  1.4946e-03, -7.3255e-04,
        -5.9373e-04, -4.3109e-03,  3.3035e-03, -6.7736e-04, -5.8301e-05,
        -6.4634e-04,  1.6249e-03, -2.3522e-03, -1.5006e-03, -7.7911e-04,
         1.4657e-03, -9.0052e-05, -1.4467e-04,  4.6518e-04, -3.0519e-04,
        -6.4287e-05,  2.3379e-04,  3.6336e-05, -2.0108e-05,  9.0589e-05,
         2.2767e-05,  5.1603e-05,  8.7392e-04,  5.4449e-04, -2.9317e-04,
         3.5917e-04, -7.5574e-05, -7.0439e-04,  3.3776e-04,  1.8592e-04,
         1.5157e-04, -4.7740e-04, -5.6127e-05,  1.8742e-04,  7.9122e-05,
         1.9063e-05,  2.1429e-04,  1.0487e-05, -2.1083e-04,  3.3813e-04,
         7.5391e-04, -9.3788e-04, -9.3928e-04,  3.9420e-04,  1.6006e-04,
        -2.2047e-04,  4.6261e-04,  9.3254e-04,  4.9299e-04,  4.8573e-02,
         3.5015e-02,  4.8809e-02,  2.9277e-03, -1.5872e-02, -1.4722e-02,
        -2.4649e-02, -2.2668e-02,  1.1777e-02, -1.6526e-02, -2.2800e-02,
        -1.4270e-02, -1.7716e-02, -2.3224e-02,  1.3687e-02,  5.8031e-02,
        -4.3259e-02, -3.6202e-02,  1.8009e-02, -5.5458e-03, -3.6500e-03,
        -1.2265e-02, -2.8436e-02,  1.5290e-02, -1.2039e-02, -6.9515e-03,
         1.9416e-02, -1.4978e-02, -5.8646e-03,  1.5142e-02,  1.6215e-02,
        -1.0704e-03], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.7770e-03, -4.8298e-05],
        [-2.8120e-03,  4.5751e-04],
        [ 7.6647e-04,  1.1461e-03],
        [-2.5205e-04, -8.1641e-04],
        [-2.0072e-03,  2.2508e-03],
        [-1.0213e-03,  1.3162e-03],
        [ 9.5054e-04, -1.0973e-03],
        [ 2.9518e-04, -3.1926e-05],
        [ 7.2002e-04,  1.1070e-03],
        [ 2.8720e-04, -3.4701e-04],
        [ 4.2012e-04, -4.1820e-04],
        [-6.4856e-04, -7.7803e-04],
        [ 1.0809e-03,  4.9231e-03],
        [ 2.4025e-04,  7.4241e-04],
        [-2.7499e-03,  2.5395e-03],
        [ 1.8209e-03, -6.2780e-04],
        [ 2.3897e-03, -2.3705e-03],
        [-7.0708e-04,  7.5760e-04],
        [ 2.4232e-03, -3.0674e-05],
        [-1.5726e-04,  3.8805e-04],
        [-8.7038e-04,  2.1623e-03],
        [ 6.5714e-04, -4.0138e-04],
        [ 1.3741e-03,  1.8710e-03],
        [-9.3959e-04, -3.6459e-03],
        [-2.2898e-04,  5.5745e-06],
        [-7.1063e-04, -2.4838e-03],
        [-2.8096e-03,  9.1747e-04],
        [ 6.4780e-04,  4.0433e-04],
        [-9.6741e-04, -9.7895e-04],
        [-1.5480e-03, -9.2049e-05],
        [-7.6089e-03, -1.0305e-04],
        [-1.0340e-04, -1.0880e-03],
        [-3.1559e-05, -1.1144e-04],
        [ 4.2047e-04, -6.4587e-04],
        [-4.3072e-04, -2.3753e-04],
        [-1.6223e-04, -1.2344e-04],
        [-3.0310e-04, -1.9849e-05],
        [ 7.6078e-04, -3.3270e-04],
        [-4.2170e-04,  3.3342e-04],
        [ 4.7617e-04,  2.2783e-05],
        [-2.6228e-04, -2.2098e-04],
        [ 1.4753e-04, -2.1448e-04],
        [ 9.4419e-05, -1.0571e-05],
        [-1.6166e-04, -1.8289e-04],
        [ 1.0918e-04,  1.3648e-05],
        [-4.2872e-05,  9.2075e-05],
        [ 2.8904e-05,  1.0402e-04],
        [ 2.7094e-04, -1.0731e-05],
        [ 6.7417e-06,  2.9518e-05],
        [ 2.8090e-04, -1.0909e-04],
        [ 4.8767e-04,  1.3172e-04],
        [ 1.2729e-04, -1.5627e-04],
        [ 1.0443e-04,  3.2742e-05],
        [-2.8103e-05, -9.9508e-06],
        [ 2.8400e-05, -1.0150e-04],
        [-3.5983e-04,  2.6510e-04],
        [-1.1667e-04,  6.9839e-05],
        [ 1.2144e-05,  1.7744e-04],
        [ 1.4319e-04,  9.4147e-05],
        [-1.2718e-04, -4.3123e-05],
        [-6.1832e-04,  4.0523e-05],
        [ 7.1126e-05, -5.2842e-04],
        [ 4.1351e-04,  4.1532e-05],
        [-9.0651e-05,  1.8235e-04],
        [-3.3524e-02,  2.7640e-04],
        [-6.4342e-03,  2.3491e-02],
        [-2.2373e-03, -5.3200e-02],
        [-1.6646e-02,  1.3344e-02],
        [ 2.8723e-02, -3.0481e-02],
        [-1.7115e-02,  3.8531e-02],
        [-2.6741e-02, -2.5198e-02],
        [ 3.6505e-02, -4.5468e-02],
        [ 5.8714e-02, -1.1560e-02],
        [-4.2206e-02,  6.5825e-02],
        [-7.4087e-02,  2.6138e-02],
        [-3.2421e-03, -1.4879e-02],
        [ 1.7267e-02,  7.6652e-02],
        [ 6.1742e-03, -7.4387e-03],
        [ 2.8632e-02, -4.3466e-02],
        [ 4.8472e-02,  3.7249e-04],
        [-1.1537e-01,  7.3465e-02],
        [ 6.1253e-02, -9.8414e-02],
        [-6.5462e-02, -3.8323e-03],
        [ 1.2117e-02, -9.9602e-03],
        [ 4.7162e-02, -2.9112e-02],
        [-3.5071e-02,  4.7464e-02],
        [ 3.6148e-02, -4.0674e-02],
        [-4.4550e-03,  3.0052e-02],
        [-1.4355e-02,  1.1792e-03],
        [-2.4243e-02,  8.8625e-02],
        [-7.8243e-02,  2.0101e-02],
        [ 2.1635e-02,  8.7655e-04],
        [-1.8748e-02,  3.3202e-02],
        [ 6.4370e-02, -4.5484e-03],
        [ 9.0982e-02,  3.2625e-02],
        [-2.0062e-02, -4.2964e-02]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-3.4690e-04,  5.9499e-05, -3.0824e-04,  ...,  6.9460e-05,
         -3.0927e-04, -3.5644e-04],
        [ 3.3211e-04,  2.1519e-04,  2.4194e-05,  ...,  3.9063e-04,
         -1.2378e-04,  6.5078e-05],
        [-9.9573e-05, -1.5540e-04,  1.1119e-04,  ..., -1.7851e-04,
          1.0243e-04,  1.0961e-04],
        ...,
        [-4.9844e-03, -2.9700e-03, -2.0939e-03,  ..., -2.2160e-03,
         -1.6518e-03,  1.0038e-04],
        [ 1.3919e-03,  4.5055e-03, -6.1631e-03,  ...,  8.5843e-04,
          6.5076e-04, -8.4772e-03],
        [-1.9092e-02, -7.0841e-03, -6.4976e-03,  ..., -1.3100e-03,
         -1.2633e-02, -8.4767e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 1.0591e-03,  1.3964e-03,  4.2865e-05, -2.2455e-04,  7.6786e-04,
        -8.1062e-04,  5.0673e-04, -2.2592e-04, -4.0368e-03,  5.4412e-05,
        -4.7870e-04, -2.4682e-05,  3.1419e-03, -1.9349e-04, -1.6659e-03,
         2.1640e-04,  2.9045e-03,  1.7201e-03, -1.2203e-03, -1.1584e-04,
        -1.1681e-03, -7.3748e-04,  1.7028e-03, -9.1121e-04, -1.2105e-03,
         6.5854e-03,  1.2644e-03, -1.3079e-03, -3.3015e-05,  1.0475e-03,
         1.0251e-03,  6.5663e-04, -3.7142e-03,  2.4788e-03, -4.7486e-03,
        -1.0845e-03,  5.6091e-04,  5.8746e-03, -1.1956e-03, -4.5200e-03,
         2.8998e-03, -4.4242e-03,  8.8069e-04,  3.9485e-04, -2.5625e-03,
        -1.3588e-03,  3.4437e-03,  2.6847e-04,  9.3157e-04, -2.4812e-03,
         4.4124e-03, -3.3962e-03, -6.4062e-03, -3.7999e-03,  1.0727e-03,
        -5.4304e-04,  2.7912e-03, -1.8927e-03, -2.3789e-03,  3.5692e-04,
         2.1002e-04,  3.6837e-04,  1.0945e-03,  3.3519e-04, -1.4786e-03,
        -3.3090e-02,  8.2741e-03, -1.8185e-02, -5.1793e-05, -9.4282e-02,
         4.1946e-02,  9.9450e-02,  6.2589e-02,  3.0514e-02,  7.5705e-02,
        -6.4940e-03, -2.2671e-02,  8.7404e-03,  1.1810e-01,  5.3977e-03,
        -5.5307e-02, -2.2051e-02, -2.9177e-03, -3.1359e-02,  8.5559e-02,
        -6.0708e-02,  3.3326e-02, -1.8605e-02, -1.5006e-02, -1.3107e-01,
         2.4033e-02, -1.5426e-03, -3.1397e-02, -1.5065e-02, -1.9734e-02,
         1.1423e-01], device='cuda:0')>
<bound method Tensor.norm of tensor([ 1.0591e-03,  1.3964e-03,  4.2865e-05, -2.2455e-04,  7.6786e-04,
        -8.1062e-04,  5.0673e-04, -2.2592e-04, -4.0368e-03,  5.4412e-05,
        -4.7870e-04, -2.4682e-05,  3.1419e-03, -1.9349e-04, -1.6659e-03,
         2.1640e-04,  2.9045e-03,  1.7201e-03, -1.2203e-03, -1.1584e-04,
        -1.1681e-03, -7.3748e-04,  1.7028e-03, -9.1121e-04, -1.2105e-03,
         6.5854e-03,  1.2644e-03, -1.3079e-03, -3.3015e-05,  1.0475e-03,
         1.0251e-03,  6.5663e-04, -3.7142e-03,  2.4788e-03, -4.7486e-03,
        -1.0845e-03,  5.6091e-04,  5.8746e-03, -1.1956e-03, -4.5200e-03,
         2.8998e-03, -4.4242e-03,  8.8069e-04,  3.9485e-04, -2.5625e-03,
        -1.3588e-03,  3.4437e-03,  2.6847e-04,  9.3157e-04, -2.4812e-03,
         4.4124e-03, -3.3962e-03, -6.4062e-03, -3.7999e-03,  1.0727e-03,
        -5.4304e-04,  2.7912e-03, -1.8927e-03, -2.3789e-03,  3.5692e-04,
         2.1002e-04,  3.6837e-04,  1.0945e-03,  3.3519e-04,  4.6765e-06,
        -1.6094e-02,  2.8951e-03, -1.0954e-02, -7.3534e-04, -4.7050e-02,
         2.1505e-02,  4.7494e-02,  3.2690e-02,  1.3297e-02,  3.4901e-02,
        -2.0361e-03, -1.1050e-02,  4.6579e-03,  6.0217e-02,  3.4675e-03,
        -2.8193e-02, -1.5348e-02,  1.5437e-03, -1.7462e-02,  4.5775e-02,
        -3.0518e-02,  1.6525e-02, -9.7125e-03, -8.0329e-03, -6.6174e-02,
         7.3327e-03, -6.5140e-04, -1.7098e-02, -8.9383e-03, -7.8010e-03,
         5.2677e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 3.1608e-05,  2.7816e-04, -1.8357e-04,  ..., -1.5138e-04,
         -1.3430e-04, -3.7053e-05],
        [-6.1591e-05,  3.6218e-05,  7.2455e-05,  ...,  4.3539e-05,
         -5.0541e-06,  4.2856e-05],
        [ 6.7677e-05,  6.4223e-05, -9.1405e-05,  ..., -8.1893e-05,
         -1.1562e-04, -1.2512e-05],
        ...,
        [ 5.1912e-04,  4.7470e-03, -8.8394e-04,  ..., -1.7074e-03,
         -8.6270e-03,  5.1706e-04],
        [-8.7518e-03,  7.4220e-03,  5.7344e-03,  ...,  4.8363e-03,
         -1.1736e-02, -3.3222e-03],
        [ 2.6222e-03, -8.0606e-03, -2.1036e-03,  ..., -4.9149e-04,
          7.4188e-03, -2.5139e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 5.9251e-04,  1.1160e-04,  4.8361e-04,  ...,  8.0898e-04,
          1.3378e-04, -2.6310e-04],
        [ 2.7641e-05, -4.4384e-05,  1.9299e-05,  ..., -2.4414e-05,
         -6.1827e-05, -2.5341e-07],
        [ 1.3287e-04,  5.2614e-05,  9.0648e-05,  ...,  2.2899e-04,
          3.9529e-05, -4.0642e-05],
        ...,
        [ 3.9406e-03,  2.6549e-04,  2.5020e-03,  ...,  5.4948e-03,
         -6.0309e-04, -1.1115e-03],
        [ 8.2538e-03, -2.7117e-03,  5.7116e-03,  ...,  6.5214e-03,
         -3.9193e-03, -2.8882e-03],
        [-6.1026e-03,  5.4903e-04, -4.5607e-03,  ..., -6.6788e-03,
          1.6067e-03,  1.9016e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.2949e-03,  9.4205e-05,  4.6010e-04, -2.8888e-04,  2.8236e-04,
        -1.1577e-03, -2.8395e-03,  1.0795e-03,  1.1286e-03,  8.8035e-04,
        -8.5173e-04,  3.7425e-03, -1.4144e-03, -2.1244e-04, -2.1170e-05,
         1.9022e-03, -3.1814e-04, -9.4706e-04,  5.8010e-04,  3.2290e-04,
         2.2016e-03,  1.0043e-05,  2.0414e-03, -3.5828e-04, -9.2932e-04,
         5.0262e-04,  1.4199e-03, -2.0412e-03,  3.2538e-03,  1.1427e-03,
        -2.5698e-03, -1.2007e-03, -3.0700e-04, -5.7860e-04,  3.5883e-04,
         3.4664e-04,  1.0990e-03,  2.5743e-03, -1.2212e-04, -9.7229e-04,
         2.7345e-04,  1.5825e-04, -4.7185e-04, -1.0139e-03, -1.3977e-04,
        -9.2600e-05, -1.5172e-04, -5.7560e-04, -2.9803e-05, -1.0208e-03,
         3.1612e-04, -6.5311e-04, -1.8594e-04,  1.0593e-03,  9.9047e-05,
        -2.2597e-04, -1.4239e-04, -2.6695e-04,  4.2491e-04, -2.9297e-05,
        -8.6297e-05, -1.2396e-03,  1.7443e-04, -1.6476e-05,  5.7329e-02,
        -3.0151e-04,  9.2686e-02,  2.2327e-03, -5.4856e-03, -9.2486e-02,
        -2.4655e-02, -3.9155e-02,  3.0949e-02, -1.6489e-02, -7.8730e-03,
        -6.6734e-02, -2.8595e-02, -2.3517e-02,  3.2355e-02,  5.8626e-02,
        -2.8086e-02, -7.8694e-02,  1.0698e-02,  1.9719e-02,  1.6112e-02,
        -1.1325e-02, -4.7387e-02,  2.4243e-02, -7.2169e-02, -2.1435e-02,
         3.8968e-02, -3.8140e-02, -5.0691e-02,  2.4646e-02,  5.8245e-02,
        -4.1644e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.2949e-03,  9.4205e-05,  4.6010e-04, -2.8888e-04,  2.8236e-04,
        -1.1577e-03, -2.8395e-03,  1.0795e-03,  1.1286e-03,  8.8035e-04,
        -8.5173e-04,  3.7425e-03, -1.4144e-03, -2.1244e-04, -2.1170e-05,
         1.9022e-03, -3.1814e-04, -9.4706e-04,  5.8010e-04,  3.2290e-04,
         2.2016e-03,  1.0043e-05,  2.0414e-03, -3.5828e-04, -9.2932e-04,
         5.0262e-04,  1.4199e-03, -2.0412e-03,  3.2538e-03,  1.1427e-03,
        -2.5698e-03, -1.2007e-03, -3.0700e-04, -5.7860e-04,  3.5883e-04,
         3.4664e-04,  1.0990e-03,  2.5743e-03, -1.2212e-04, -9.7229e-04,
         2.7345e-04,  1.5825e-04, -4.7185e-04, -1.0139e-03, -1.3977e-04,
        -9.2600e-05, -1.5172e-04, -5.7560e-04, -2.9803e-05, -1.0208e-03,
         3.1612e-04, -6.5311e-04, -1.8594e-04,  1.0593e-03,  9.9047e-05,
        -2.2597e-04, -1.4239e-04, -2.6695e-04,  4.2491e-04, -2.9297e-05,
        -8.6297e-05, -1.2396e-03,  1.7443e-04, -1.6476e-05,  3.1604e-02,
         7.8757e-04,  4.4993e-02, -2.2844e-03, -1.7551e-03, -4.1477e-02,
        -1.3800e-02, -1.8308e-02,  1.5753e-02, -7.9350e-03, -4.1952e-03,
        -3.7136e-02, -1.5817e-02, -1.1035e-02,  1.5954e-02,  2.4987e-02,
        -1.5970e-02, -3.4020e-02,  7.7996e-03,  9.2217e-03,  9.4011e-03,
        -6.8561e-03, -2.3016e-02,  1.0816e-02, -2.8269e-02, -8.3903e-03,
         1.9826e-02, -1.7340e-02, -2.3031e-02,  1.4079e-02,  3.4021e-02,
        -2.2795e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-3.2697e-04, -1.6154e-05,  2.7276e-04,  ...,  3.2154e-04,
          3.1403e-06, -1.1715e-04],
        [-2.0167e-04,  3.6467e-05,  1.9208e-04,  ...,  1.4706e-04,
         -9.0861e-05, -8.8214e-05],
        [ 1.7281e-04,  4.0633e-04, -5.7034e-05,  ..., -9.2147e-05,
         -2.9803e-04,  1.5618e-04],
        ...,
        [ 4.4864e-03, -5.7935e-04, -5.3954e-03,  ..., -4.6018e-03,
         -6.2691e-04,  3.4112e-03],
        [-4.3750e-03, -8.0318e-03,  1.0689e-03,  ...,  4.6871e-03,
         -8.5151e-04, -1.0063e-02],
        [-8.6276e-03,  5.3415e-03,  7.2860e-03,  ...,  3.6979e-03,
         -9.9863e-03,  7.4349e-05]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 1.9426e-04, -4.1750e-04, -1.8740e-04,  ..., -1.3001e-04,
          2.9554e-05, -1.2629e-04],
        [-1.8130e-05, -1.5548e-04, -7.0528e-05,  ..., -1.3812e-04,
         -3.9949e-05, -3.0120e-05],
        [-4.3952e-04, -1.8856e-04,  3.7577e-04,  ..., -6.2969e-04,
         -1.9129e-04, -1.9419e-04],
        ...,
        [-3.4258e-03,  2.1955e-03,  3.8801e-03,  ..., -1.3083e-03,
         -2.4831e-04, -4.9266e-04],
        [ 3.0226e-03, -4.1138e-04, -5.0118e-03,  ...,  2.5434e-03,
          7.3596e-04,  1.8279e-03],
        [-6.7246e-03, -3.3685e-03,  4.1102e-03,  ..., -9.5013e-03,
         -2.9579e-03, -2.9196e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 3.3792e-04,  4.4797e-04,  1.2905e-03,  1.0096e-04, -1.0706e-04,
         2.2763e-04, -5.0260e-05,  1.0664e-03, -5.2936e-05,  1.0329e-03,
         1.4938e-03, -3.2256e-04, -4.3805e-04,  2.4902e-03,  9.1197e-04,
        -4.8081e-04, -2.0986e-03, -4.1825e-04,  6.0638e-04, -9.9469e-04,
         6.1536e-04, -2.3393e-04,  4.1223e-04, -5.3024e-05,  1.9523e-03,
        -8.9923e-04,  1.1429e-04,  4.7038e-04,  1.0792e-03, -8.1910e-05,
        -1.6543e-04,  1.9648e-05, -4.3712e-04, -2.3611e-03,  1.2253e-03,
        -2.0372e-04,  5.6471e-03,  4.6546e-04, -2.1521e-04, -6.0444e-03,
        -6.8793e-05, -1.1859e-03,  4.4762e-04,  5.7711e-04,  1.5869e-03,
         5.6622e-04, -2.0484e-03, -1.0331e-03, -1.2210e-03,  1.1168e-06,
        -5.5230e-03, -1.3563e-03, -1.4433e-03, -1.8543e-03, -1.2657e-03,
        -5.0921e-04, -2.5687e-03, -4.0611e-04,  7.8604e-04,  2.4999e-04,
         4.0965e-03, -2.6532e-03,  3.6657e-04, -7.1114e-04, -1.1487e-02,
        -9.9932e-03,  3.2655e-03,  2.0814e-03, -2.1719e-02, -5.3032e-02,
        -7.2214e-03,  5.1352e-02,  2.3829e-02, -2.1474e-02,  4.3178e-02,
         1.2541e-02,  2.0367e-02,  3.2476e-02,  5.6933e-02,  1.4020e-02,
        -4.3718e-02, -1.5231e-02, -3.2272e-02, -3.5537e-03,  2.5433e-02,
        -5.9622e-02,  1.1940e-02, -1.4167e-02,  6.3805e-02, -5.5254e-02,
        -1.5742e-02, -6.2778e-03, -3.9819e-02, -7.5378e-03, -4.8696e-03,
         3.5254e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 3.3792e-04,  4.4797e-04,  1.2905e-03,  1.0096e-04, -1.0706e-04,
         2.2763e-04, -5.0260e-05,  1.0664e-03, -5.2936e-05,  1.0329e-03,
         1.4938e-03, -3.2256e-04, -4.3805e-04,  2.4902e-03,  9.1197e-04,
        -4.8081e-04, -2.0986e-03, -4.1825e-04,  6.0638e-04, -9.9469e-04,
         6.1536e-04, -2.3393e-04,  4.1223e-04, -5.3024e-05,  1.9523e-03,
        -8.9923e-04,  1.1429e-04,  4.7038e-04,  1.0792e-03, -8.1910e-05,
        -1.6543e-04,  1.9648e-05, -4.3712e-04, -2.3611e-03,  1.2253e-03,
        -2.0372e-04,  5.6471e-03,  4.6546e-04, -2.1521e-04, -6.0444e-03,
        -6.8793e-05, -1.1859e-03,  4.4762e-04,  5.7711e-04,  1.5869e-03,
         5.6622e-04, -2.0484e-03, -1.0331e-03, -1.2210e-03,  1.1168e-06,
        -5.5230e-03, -1.3563e-03, -1.4433e-03, -1.8543e-03, -1.2657e-03,
        -5.0921e-04, -2.5687e-03, -4.0611e-04,  7.8604e-04,  2.4999e-04,
         4.0965e-03, -2.6532e-03,  3.6657e-04, -7.1114e-04, -5.2015e-03,
        -3.7435e-03, -1.7689e-04,  1.2304e-03, -9.3037e-03, -2.4300e-02,
        -3.9669e-03,  2.3093e-02,  1.2325e-02, -9.8009e-03,  1.6162e-02,
         5.9894e-03,  9.6553e-03,  1.4113e-02,  2.9098e-02,  4.7859e-03,
        -2.3863e-02, -9.3669e-03, -1.4946e-02, -5.2973e-04,  1.0273e-02,
        -2.9828e-02,  5.3458e-03, -7.2092e-03,  3.3859e-02, -2.9498e-02,
        -9.5801e-03, -2.0662e-03, -1.7478e-02, -5.4536e-03, -3.5420e-03,
         1.6789e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-3.2868e-04, -2.2993e-04, -1.7923e-05,  ...,  1.9336e-04,
          8.2961e-05, -3.7954e-05],
        [-1.4073e-04, -1.6605e-04,  5.4425e-06,  ...,  6.2774e-05,
         -1.1585e-04, -1.8117e-04],
        [ 2.1672e-04,  1.4162e-04,  7.4040e-04,  ..., -3.5512e-04,
         -5.5936e-04, -4.0628e-04],
        ...,
        [ 2.9050e-03,  3.6574e-03,  8.2343e-04,  ..., -5.8175e-03,
         -4.1305e-03,  1.7693e-03],
        [ 9.0695e-03,  5.1871e-03,  1.1411e-02,  ..., -1.3209e-02,
         -1.7089e-02, -8.4579e-03],
        [ 2.5383e-03,  7.0824e-04, -2.6648e-03,  ...,  1.1159e-03,
          1.2961e-03,  8.4731e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-1.7442e-04, -1.2942e-04,  6.8661e-05,  ..., -4.3280e-04,
          2.6100e-04,  4.0649e-06],
        [ 1.0215e-04, -7.2398e-05,  9.1535e-05,  ..., -4.4738e-06,
          6.2998e-05, -4.1777e-05],
        [ 4.0962e-04,  2.3204e-04, -4.5409e-04,  ...,  2.4255e-04,
          1.2068e-04,  5.4741e-04],
        ...,
        [-4.6881e-04,  1.2688e-03, -2.6546e-03,  ...,  4.0951e-04,
         -4.8719e-04,  1.8102e-03],
        [ 6.8535e-03,  3.5801e-03, -6.1370e-03,  ...,  7.6739e-03,
         -1.6881e-03,  5.9850e-03],
        [ 8.1011e-04,  3.4507e-05,  9.3488e-04,  ...,  2.4218e-03,
         -1.7964e-03, -1.3014e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([-6.0210e-04,  2.2192e-04,  2.5070e-03,  2.7267e-04,  2.0207e-04,
        -5.1653e-04,  7.0124e-04,  3.2915e-04,  2.0011e-03, -7.7752e-04,
         4.7185e-03,  5.1156e-04, -1.0327e-04,  1.6012e-03,  3.1610e-04,
        -7.0727e-04,  2.9034e-03, -4.2756e-04, -1.3391e-03, -1.0518e-03,
        -8.5585e-04,  3.1465e-03, -5.2772e-04,  2.1903e-03, -7.4645e-05,
        -6.2987e-04,  1.3491e-04, -6.8604e-04,  1.1818e-04, -2.8255e-04,
         7.1799e-04,  1.4188e-04,  2.3809e-03,  9.2018e-05, -2.0304e-04,
        -1.7395e-04,  1.0013e-03, -3.2984e-05,  3.2744e-05,  2.7809e-04,
        -4.7860e-05,  1.4625e-04,  2.0036e-03, -6.7717e-04, -4.9027e-04,
         3.5956e-04,  5.7322e-04, -6.4866e-05,  4.0552e-04,  4.2878e-04,
        -6.9850e-04, -1.0910e-03,  6.1036e-04,  7.4617e-04,  3.7646e-04,
         2.2372e-04,  6.9729e-05, -7.8670e-04,  1.0339e-03, -7.3874e-05,
        -9.7530e-05, -2.6910e-03,  1.5203e-03,  2.1436e-04,  4.3719e-02,
        -7.2077e-04,  4.8501e-02,  7.2474e-03, -1.7952e-02, -6.3706e-02,
         2.8944e-04, -1.8449e-02,  2.8346e-03,  2.1092e-03, -5.7589e-02,
        -5.5242e-02, -5.8795e-04,  6.3330e-02, -1.1450e-03,  6.8215e-03,
        -5.2269e-02, -3.1392e-02, -1.1215e-02,  3.3668e-02, -2.5078e-02,
         3.4973e-02, -5.1684e-02,  4.2646e-02, -1.3358e-03, -2.4975e-03,
         1.5977e-02, -3.2749e-03, -2.9721e-02, -6.7282e-04,  5.4588e-02,
         1.1064e-03], device='cuda:0')>
<bound method Tensor.norm of tensor([-6.0210e-04,  2.2192e-04,  2.5070e-03,  2.7267e-04,  2.0207e-04,
        -5.1653e-04,  7.0124e-04,  3.2915e-04,  2.0011e-03, -7.7752e-04,
         4.7185e-03,  5.1156e-04, -1.0327e-04,  1.6012e-03,  3.1610e-04,
        -7.0727e-04,  2.9034e-03, -4.2756e-04, -1.3391e-03, -1.0518e-03,
        -8.5585e-04,  3.1465e-03, -5.2772e-04,  2.1903e-03, -7.4645e-05,
        -6.2987e-04,  1.3491e-04, -6.8604e-04,  1.1818e-04, -2.8255e-04,
         7.1799e-04,  1.4188e-04,  2.3809e-03,  9.2018e-05, -2.0304e-04,
        -1.7395e-04,  1.0013e-03, -3.2984e-05,  3.2744e-05,  2.7809e-04,
        -4.7860e-05,  1.4625e-04,  2.0036e-03, -6.7717e-04, -4.9027e-04,
         3.5956e-04,  5.7322e-04, -6.4866e-05,  4.0552e-04,  4.2878e-04,
        -6.9850e-04, -1.0910e-03,  6.1036e-04,  7.4617e-04,  3.7646e-04,
         2.2372e-04,  6.9729e-05, -7.8670e-04,  1.0339e-03, -7.3874e-05,
        -9.7530e-05, -2.6910e-03,  1.5203e-03,  2.1436e-04,  2.4715e-02,
         7.2439e-04,  2.1676e-02,  4.5410e-03, -6.4161e-03, -2.7386e-02,
        -1.9888e-05, -9.4620e-03,  3.1206e-03, -6.1283e-05, -3.0125e-02,
        -2.3938e-02, -4.1582e-04,  2.8178e-02, -2.6152e-04,  3.9442e-03,
        -2.7276e-02, -1.7222e-02, -7.4878e-03,  1.7767e-02, -1.2483e-02,
         1.4830e-02, -3.0229e-02,  2.1518e-02, -4.5717e-04, -2.7677e-03,
         8.1127e-03, -6.6028e-04, -1.2205e-02, -7.2704e-04,  3.2551e-02,
         1.3457e-03], device='cuda:0')>
<bound method Tensor.norm of tensor([[-8.1808e-05, -1.3277e-04,  6.4664e-05,  ..., -5.3350e-05,
         -1.1117e-04, -7.3816e-05],
        [ 3.3328e-04,  1.8829e-04,  5.9711e-05,  ..., -3.6397e-04,
         -3.1147e-04, -7.3514e-05],
        [-6.0667e-04, -3.8584e-04,  1.1383e-04,  ...,  6.9957e-04,
          7.3425e-04,  2.7693e-04],
        ...,
        [ 4.8092e-03,  3.1968e-03, -2.4682e-03,  ..., -9.4784e-03,
         -5.7890e-03,  2.9053e-03],
        [-4.7319e-03, -4.5255e-03, -3.6125e-03,  ...,  5.3010e-03,
          2.4520e-03, -2.2452e-03],
        [ 6.4423e-03,  2.9674e-03,  6.0807e-03,  ..., -1.2396e-02,
         -1.1171e-02,  4.3592e-05]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-7.8790e-06,  8.5159e-05, -1.0068e-05,  ..., -1.6000e-05,
         -5.7220e-05,  6.2532e-05],
        [-1.7984e-04,  1.7862e-04,  1.0083e-04,  ...,  1.7840e-04,
         -1.9690e-04,  3.1533e-04],
        [ 1.3338e-04, -3.7432e-04, -1.0757e-04,  ..., -2.7140e-04,
          6.3303e-04, -6.5191e-04],
        ...,
        [-3.4179e-03,  4.1041e-03,  2.9115e-03,  ...,  3.7829e-03,
         -1.9251e-03,  6.9097e-03],
        [ 1.3944e-03, -8.3175e-04, -1.7182e-03,  ..., -5.5338e-04,
          1.3707e-04, -2.2815e-03],
        [-4.9636e-03,  3.9787e-03,  2.9348e-03,  ...,  1.7988e-03,
         -2.6496e-03,  6.4417e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.7746e-04,  1.0370e-03, -1.9562e-03, -5.2653e-04,  4.6082e-04,
         2.2790e-04, -2.1026e-04, -2.0750e-04, -6.0316e-04,  7.7496e-04,
         9.3479e-04, -1.9960e-04,  2.4485e-03, -4.1954e-04,  1.2406e-03,
        -9.9479e-05, -8.3256e-04,  7.0398e-04, -1.6990e-04,  1.2028e-03,
        -1.9104e-05,  1.6697e-04,  5.7930e-05, -6.6216e-04, -1.5005e-03,
        -3.0323e-04,  6.0240e-04, -2.0347e-04,  1.0522e-04, -1.0292e-03,
        -2.9976e-04,  4.0982e-05,  8.9110e-04, -2.0984e-05, -2.7732e-04,
         6.4498e-04, -1.6489e-03, -5.7273e-03, -1.3143e-03,  6.3376e-03,
        -3.1672e-03, -7.5528e-05,  1.1186e-03,  4.4396e-04, -3.2514e-04,
        -8.9083e-04, -6.1720e-05, -1.8023e-03, -1.3200e-04, -6.0048e-04,
         1.5321e-03, -4.3720e-03,  5.7042e-04,  1.3571e-03,  5.9932e-04,
        -1.1990e-04,  1.7902e-03, -4.2764e-04, -1.3233e-03,  9.1668e-04,
        -7.4181e-04,  1.1229e-03, -1.7115e-04,  3.4871e-03, -3.9873e-03,
         3.8111e-02,  1.7394e-02,  1.4430e-02, -3.6890e-02, -4.2008e-02,
        -1.0353e-02,  3.5337e-02, -6.2623e-03, -2.3123e-02,  3.7008e-02,
        -1.8648e-03,  5.4798e-02,  2.0063e-02,  3.9663e-02,  2.2293e-03,
        -1.7383e-02, -3.0332e-02, -3.4697e-03, -3.1432e-02, -1.9926e-04,
        -2.9042e-02, -1.3495e-02,  6.8739e-03,  3.8330e-02, -1.4930e-03,
         1.0810e-02, -1.2943e-02,  7.0749e-03,  6.1368e-03, -9.3019e-03,
         2.5698e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 2.7746e-04,  1.0370e-03, -1.9562e-03, -5.2653e-04,  4.6082e-04,
         2.2790e-04, -2.1026e-04, -2.0750e-04, -6.0316e-04,  7.7496e-04,
         9.3479e-04, -1.9960e-04,  2.4485e-03, -4.1954e-04,  1.2406e-03,
        -9.9479e-05, -8.3256e-04,  7.0398e-04, -1.6990e-04,  1.2028e-03,
        -1.9104e-05,  1.6697e-04,  5.7930e-05, -6.6216e-04, -1.5005e-03,
        -3.0323e-04,  6.0240e-04, -2.0347e-04,  1.0522e-04, -1.0292e-03,
        -2.9976e-04,  4.0982e-05,  8.9110e-04, -2.0984e-05, -2.7732e-04,
         6.4498e-04, -1.6489e-03, -5.7273e-03, -1.3143e-03,  6.3376e-03,
        -3.1672e-03, -7.5528e-05,  1.1186e-03,  4.4396e-04, -3.2514e-04,
        -8.9083e-04, -6.1720e-05, -1.8023e-03, -1.3200e-04, -6.0048e-04,
         1.5321e-03, -4.3720e-03,  5.7042e-04,  1.3571e-03,  5.9932e-04,
        -1.1990e-04,  1.7902e-03, -4.2764e-04, -1.3233e-03,  9.1668e-04,
        -7.4181e-04,  1.1229e-03, -1.7115e-04,  3.4871e-03, -1.4480e-03,
         2.0275e-02,  8.5912e-03,  6.0680e-03, -1.7746e-02, -2.0838e-02,
        -6.7479e-03,  1.7971e-02, -2.0149e-04, -1.1222e-02,  1.5483e-02,
        -7.7172e-04,  2.3914e-02,  1.1319e-02,  1.6390e-02,  3.2009e-03,
        -1.1585e-02, -1.7093e-02, -4.1902e-04, -1.7246e-02,  3.2339e-05,
        -1.5532e-02, -7.2135e-03,  2.8560e-03,  1.8288e-02, -8.1722e-04,
         5.1360e-03, -7.1565e-03,  4.4505e-03,  2.3101e-03, -4.2831e-03,
         1.1239e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 3.9895e-04,  3.6580e-05,  1.4081e-04,  ...,  1.6757e-05,
         -3.1884e-04, -1.6022e-05],
        [ 2.0151e-04,  2.1395e-05, -1.7875e-05,  ..., -1.9261e-05,
         -2.4936e-04,  3.4657e-05],
        [-7.6652e-05, -6.7090e-05, -3.7567e-05,  ...,  1.4578e-04,
          2.1044e-04,  1.9557e-05],
        ...,
        [-1.9662e-02, -7.1610e-03, -4.5292e-03,  ...,  2.9919e-03,
          1.5904e-02, -2.8316e-03],
        [-4.8718e-03, -3.3971e-03,  7.7340e-05,  ..., -1.2220e-03,
         -2.5176e-03, -5.8397e-03],
        [ 1.7419e-02,  7.9129e-03,  2.0529e-03,  ..., -9.2806e-04,
         -1.2907e-02,  2.5798e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 2.8742e-05,  4.1498e-05, -3.1134e-04,  ..., -9.7515e-05,
         -4.6909e-04, -1.7628e-04],
        [ 9.2062e-08, -1.6444e-05, -1.3251e-04,  ..., -8.6523e-05,
         -1.6779e-04, -9.1655e-05],
        [-5.3291e-05, -1.1178e-04,  6.1652e-05,  ..., -8.7431e-05,
         -4.6057e-06,  3.8858e-05],
        ...,
        [-1.0007e-03, -3.4712e-04,  7.9808e-03,  ...,  2.1517e-03,
          1.0775e-02,  3.8205e-03],
        [ 9.1606e-04,  1.6530e-03,  9.4711e-04,  ...,  1.2027e-03,
          1.9157e-03, -2.9097e-04],
        [ 8.0447e-04, -3.2129e-04, -7.1134e-03,  ..., -1.7523e-03,
         -8.4457e-03, -2.9341e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([ 9.7208e-04,  2.7887e-04, -4.4974e-04,  8.2724e-04, -8.7080e-04,
        -1.3283e-03, -3.2963e-04,  1.9875e-04,  2.3453e-04,  4.5235e-05,
        -7.3363e-04,  1.6988e-04, -1.2295e-05,  8.8129e-04, -1.4848e-04,
        -3.0681e-03,  1.5361e-04, -6.1728e-05, -4.4279e-04,  8.9018e-04,
         1.1534e-03,  1.7114e-03,  1.4994e-03,  1.0226e-03, -3.3222e-04,
        -8.8926e-04,  2.0953e-04, -1.3239e-03, -9.3564e-04, -2.6086e-03,
         3.8223e-04, -5.8984e-04,  1.3154e-03, -8.0618e-05,  2.2853e-04,
         7.4504e-04,  1.2190e-03,  3.4746e-04,  1.0840e-04, -5.1423e-04,
         1.5809e-04, -1.2583e-04, -4.4673e-04,  4.1082e-04,  6.9902e-04,
        -6.7119e-05, -1.2668e-03, -2.5902e-04,  1.2707e-04,  1.5770e-03,
         8.5003e-04,  2.8489e-04, -9.5009e-04, -1.6117e-03, -3.1350e-05,
         7.8217e-04, -3.7464e-04,  1.5638e-03, -9.8321e-04,  5.4650e-04,
         4.5980e-05,  6.9299e-04,  1.2519e-04, -5.8924e-04,  3.4962e-02,
        -2.3163e-02,  2.1490e-02, -8.1359e-03, -1.1370e-02, -4.3138e-02,
        -2.4155e-03, -1.1310e-02,  8.7750e-03, -7.3892e-03, -2.1478e-02,
        -9.3252e-03, -3.6552e-02,  4.2623e-02, -1.2587e-02,  2.6972e-02,
        -5.8115e-02, -1.1938e-02,  2.8169e-02,  3.0643e-02, -2.2759e-02,
         4.8587e-02, -2.5010e-02,  3.2884e-02, -8.4680e-03,  2.4253e-02,
         1.9464e-02, -3.0222e-02, -4.5899e-02, -4.4035e-02, -2.6969e-03,
         3.3706e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([ 9.7208e-04,  2.7887e-04, -4.4974e-04,  8.2724e-04, -8.7080e-04,
        -1.3283e-03, -3.2963e-04,  1.9875e-04,  2.3453e-04,  4.5235e-05,
        -7.3363e-04,  1.6988e-04, -1.2295e-05,  8.8129e-04, -1.4848e-04,
        -3.0681e-03,  1.5361e-04, -6.1728e-05, -4.4279e-04,  8.9018e-04,
         1.1534e-03,  1.7114e-03,  1.4994e-03,  1.0226e-03, -3.3222e-04,
        -8.8926e-04,  2.0953e-04, -1.3239e-03, -9.3564e-04, -2.6086e-03,
         3.8223e-04, -5.8984e-04,  1.3154e-03, -8.0618e-05,  2.2853e-04,
         7.4504e-04,  1.2190e-03,  3.4746e-04,  1.0840e-04, -5.1423e-04,
         1.5809e-04, -1.2583e-04, -4.4673e-04,  4.1082e-04,  6.9902e-04,
        -6.7119e-05, -1.2668e-03, -2.5902e-04,  1.2707e-04,  1.5770e-03,
         8.5003e-04,  2.8489e-04, -9.5009e-04, -1.6117e-03, -3.1350e-05,
         7.8217e-04, -3.7464e-04,  1.5638e-03, -9.8321e-04,  5.4650e-04,
         4.5980e-05,  6.9299e-04,  1.2519e-04, -5.8924e-04,  1.7779e-02,
        -1.0028e-02,  1.1792e-02, -4.8183e-03, -5.6831e-03, -2.0383e-02,
        -2.5900e-03, -7.1542e-03,  1.2226e-03, -3.5594e-03, -1.1961e-02,
        -2.7223e-03, -1.8631e-02,  2.7310e-02, -8.0889e-03,  1.5245e-02,
        -2.8359e-02, -5.1218e-03,  1.2758e-02,  1.5133e-02, -1.2802e-02,
         1.7889e-02, -1.3687e-02,  1.7982e-02, -4.5433e-03,  1.4387e-02,
         1.1763e-02, -1.3669e-02, -2.0547e-02, -2.4336e-02, -7.7282e-04,
         2.1111e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[ 1.6439e-04,  1.1515e-04, -1.7741e-04,  ...,  3.0022e-04,
          2.6105e-04,  3.0503e-04],
        [ 1.0234e-04,  9.2436e-06, -6.8396e-05,  ...,  1.0733e-04,
         -6.4422e-06,  8.2667e-05],
        [-1.5621e-05,  1.6555e-05, -6.0516e-05,  ..., -1.4848e-05,
          1.1175e-05,  3.5430e-05],
        ...,
        [ 1.2105e-02,  6.3115e-03, -5.7793e-03,  ..., -2.3190e-03,
         -8.3191e-03,  1.1810e-02],
        [-4.2706e-03, -4.7190e-03,  1.0338e-03,  ...,  2.4021e-03,
          1.9714e-03, -5.9852e-03],
        [ 1.2623e-02,  8.6107e-03, -1.9348e-03,  ..., -1.6139e-02,
         -1.9453e-02,  6.7180e-03]], device='cuda:0')>
<bound method Tensor.norm of tensor([[-3.5697e-04,  1.6850e-04, -3.6908e-05,  ..., -5.3066e-05,
          1.0102e-04, -1.5127e-04],
        [-6.2828e-05,  3.7129e-05, -9.0863e-05,  ...,  6.6116e-09,
         -1.4408e-05, -1.2272e-04],
        [ 3.5915e-05,  3.1080e-05, -1.1422e-05,  ...,  2.6451e-05,
         -5.6095e-05, -2.4364e-05],
        ...,
        [ 3.2099e-03,  3.0518e-03, -6.4866e-04,  ...,  3.0274e-03,
         -4.4451e-03, -2.9937e-03],
        [ 2.0597e-05, -2.1765e-03, -1.1296e-03,  ..., -9.8462e-04,
          1.1469e-03,  3.6567e-04],
        [ 9.4782e-03,  3.1134e-03,  9.9965e-04,  ...,  5.7463e-03,
         -8.9841e-03, -8.7122e-04]], device='cuda:0')>
<bound method Tensor.norm of tensor([-6.1266e-04, -1.4562e-04, -1.9926e-04, -2.6537e-04, -1.9956e-05,
         8.9130e-04, -6.8355e-04,  7.6377e-05, -4.9494e-04, -2.1906e-04,
        -6.3009e-04, -2.4882e-04,  3.7107e-04, -1.2859e-03, -7.4349e-05,
        -1.3987e-03,  5.2182e-04, -1.0314e-04,  6.7213e-04,  2.0024e-04,
        -9.3061e-05, -1.3558e-04, -2.4142e-04,  1.0278e-03, -1.9569e-04,
        -4.4763e-04, -1.8200e-04,  3.3447e-04,  4.0976e-04,  4.8142e-04,
         6.5498e-05, -9.3114e-05,  3.0759e-04, -4.8218e-06, -3.9667e-04,
        -1.2866e-03, -1.3152e-03,  2.4034e-03, -1.9079e-04,  3.2663e-03,
         2.1389e-03,  5.5646e-04,  7.6842e-04,  1.3722e-03,  2.9712e-04,
         5.9705e-05,  8.8859e-04, -3.1020e-03, -1.0194e-03, -2.8571e-04,
         1.0762e-03, -3.7792e-03, -3.6401e-04, -4.0344e-04,  9.3967e-04,
        -1.2105e-04, -2.5387e-03,  3.2504e-03,  4.9251e-05, -1.8956e-03,
        -1.0127e-03,  2.2995e-03,  3.0124e-04, -1.3159e-03,  2.8810e-03,
        -8.4454e-04, -1.2949e-03,  2.8210e-02, -3.1615e-02, -4.1592e-04,
        -2.6937e-02,  1.7932e-02, -5.4236e-04, -1.0309e-02,  3.1716e-02,
        -5.8473e-03,  1.4284e-02,  8.2234e-03,  1.3378e-03,  1.6185e-02,
        -4.4038e-04, -6.4327e-03, -5.0783e-04, -9.3631e-03,  2.6062e-02,
        -1.2072e-02, -2.4858e-03, -1.1323e-02, -1.0679e-02, -9.3188e-03,
         1.9311e-03, -2.2580e-02,  1.0060e-02,  6.1222e-03, -9.4202e-03,
         3.5036e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([-6.1266e-04, -1.4562e-04, -1.9926e-04, -2.6537e-04, -1.9956e-05,
         8.9130e-04, -6.8355e-04,  7.6377e-05, -4.9494e-04, -2.1906e-04,
        -6.3009e-04, -2.4882e-04,  3.7107e-04, -1.2859e-03, -7.4349e-05,
        -1.3987e-03,  5.2182e-04, -1.0314e-04,  6.7213e-04,  2.0024e-04,
        -9.3061e-05, -1.3558e-04, -2.4142e-04,  1.0278e-03, -1.9569e-04,
        -4.4763e-04, -1.8200e-04,  3.3447e-04,  4.0976e-04,  4.8142e-04,
         6.5498e-05, -9.3114e-05,  3.0759e-04, -4.8218e-06, -3.9667e-04,
        -1.2866e-03, -1.3152e-03,  2.4034e-03, -1.9079e-04,  3.2663e-03,
         2.1389e-03,  5.5646e-04,  7.6842e-04,  1.3722e-03,  2.9712e-04,
         5.9705e-05,  8.8859e-04, -3.1020e-03, -1.0194e-03, -2.8571e-04,
         1.0762e-03, -3.7792e-03, -3.6401e-04, -4.0344e-04,  9.3967e-04,
        -1.2105e-04, -2.5387e-03,  3.2504e-03,  4.9251e-05, -1.8956e-03,
        -1.0127e-03,  2.2995e-03,  3.0124e-04, -1.3159e-03, -2.2956e-05,
         4.4093e-04, -9.1260e-04,  1.2843e-02, -1.6245e-02,  7.5466e-04,
        -1.4004e-02,  6.5306e-03,  2.6117e-04, -5.5237e-03,  1.4672e-02,
        -2.4440e-03,  6.4799e-03,  1.7572e-03,  4.3739e-04,  7.6003e-03,
        -4.2747e-04, -3.4840e-03, -1.6758e-03, -4.9922e-03,  1.5110e-02,
        -6.9645e-03, -7.9903e-04, -4.7390e-03, -4.4509e-03, -4.9921e-03,
        -2.6545e-04, -1.0897e-02,  5.5542e-03,  4.0954e-03, -3.4107e-03,
         1.7303e-02], device='cuda:0')>
<bound method Tensor.norm of tensor([[-2.4865e-02, -4.9870e-03,  6.5567e-03,  ..., -7.5122e-03,
          2.5579e-03,  9.7202e-03],
        [-9.8827e-03, -1.7449e-03,  8.4997e-03,  ..., -2.1317e-03,
          1.5806e-02,  6.0211e-04],
        [-2.1648e-04, -2.0303e-05,  3.3152e-04,  ..., -1.2063e-04,
         -1.8719e-04, -2.6445e-04],
        ...,
        [-9.4622e-03, -2.5033e-02, -8.1518e-03,  ..., -1.7605e-03,
         -9.9084e-03, -1.3959e-02],
        [ 8.0257e-03,  9.1714e-03, -5.1969e-03,  ..., -2.0863e-03,
         -1.0039e-02,  7.8016e-03],
        [-9.2956e-04,  5.4733e-04,  9.4018e-04,  ..., -5.1660e-04,
          3.1283e-04,  3.7527e-05]], device='cuda:0')>
<bound method Tensor.norm of tensor([-0.0636, -0.0134,  0.0006,  0.0643,  0.0808, -0.1441,  0.0528,  0.0122,
        -0.0272,  0.0388, -0.1446,  0.0066,  0.0427, -0.0016, -0.0421,  0.0467,
         0.0564, -0.1741,  0.0097,  0.0698,  0.0898, -0.0980,  0.0225, -0.0056,
         0.1615,  0.0242,  0.0305,  0.0240,  0.0161, -0.0672,  0.0125,  0.0011],
       device='cuda:0')>
<bound method Tensor.norm of tensor([[ 7.8733e-02,  4.9945e-03,  3.5609e-04, -1.2151e-01, -2.2576e-02,
          5.3616e-02, -3.9095e-02,  2.9449e-02,  1.2490e-02,  1.5065e-01,
         -2.3279e-02, -3.8982e-03,  2.3682e-02,  6.2949e-02,  1.4263e-01,
         -4.0205e-02,  2.2161e-02, -7.0998e-02,  5.6870e-03,  5.9140e-02,
         -4.7932e-02,  4.6728e-02,  6.1255e-02,  8.6607e-03, -8.4938e-02,
          7.3523e-02,  3.0607e-02,  5.7062e-03,  4.6477e-03,  3.2372e-02,
          5.2044e-03,  3.2088e-03],
        [ 1.6158e-02,  2.3428e-03,  8.3096e-06, -1.3224e-01, -3.5787e-02,
          8.9608e-04, -4.8456e-02,  1.3882e-02,  8.4033e-03,  8.4125e-02,
         -2.4150e-02, -1.8900e-03,  7.7684e-03,  3.0261e-02,  6.7363e-02,
         -6.4102e-02,  9.7629e-03, -6.3271e-02,  3.6281e-03, -3.1030e-03,
         -3.2536e-02,  2.4658e-02,  3.1890e-02,  3.5477e-03, -8.7879e-02,
          6.3133e-03,  1.4621e-02,  3.4746e-03,  1.3110e-03,  1.0110e-02,
          3.3643e-03,  3.9701e-05],
        [ 3.2105e-06,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  1.4535e-04,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  6.6031e-04,  6.3819e-04,
          0.0000e+00,  3.2704e-04,  0.0000e+00,  2.4847e-04,  1.9504e-04,
          4.3691e-05,  3.7148e-04,  3.7316e-04,  2.9946e-04,  7.9419e-06,
          1.2954e-04,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          3.0676e-05,  2.9539e-06],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 3.8306e-03,  5.3777e-05,  7.9052e-05, -7.6573e-02, -2.5514e-02,
         -3.9217e-02, -2.5417e-02,  4.6478e-04,  2.6659e-03,  1.1110e-03,
         -9.1328e-03,  0.0000e+00, -7.8967e-04,  1.2555e-02,  2.3231e-02,
         -3.2315e-02,  1.5960e-03, -2.3055e-02, -2.4368e-03,  1.0494e-02,
         -1.7258e-02,  9.2750e-03,  1.0617e-02,  1.7508e-03, -7.2285e-03,
          1.5046e-02,  7.9224e-04,  8.0044e-04,  4.1534e-04, -3.6844e-03,
          1.1104e-03,  6.5328e-04],
        [-1.7990e-04, -6.3463e-05,  0.0000e+00, -9.4527e-04, -3.1803e-04,
         -7.2116e-04, -3.4046e-04, -2.8580e-04, -4.3548e-07, -1.8714e-04,
         -2.4738e-04,  0.0000e+00, -2.4532e-04, -1.8800e-05, -1.0207e-05,
         -2.1034e-04, -1.7238e-05, -3.7153e-04, -2.0830e-05, -8.4794e-06,
         -1.7354e-05, -4.5089e-06, -9.5169e-06, -1.1806e-05, -2.2423e-06,
         -1.1923e-07, -1.5114e-04, -8.3942e-06, -2.8115e-05, -5.1904e-04,
         -4.1014e-06, -4.8983e-07],
        [ 1.1268e-02,  1.5482e-04,  4.3111e-04,  1.2727e-02,  3.8377e-03,
          9.4635e-03,  7.4252e-03,  2.5594e-03,  9.6304e-04,  6.1787e-04,
          5.2978e-03,  0.0000e+00,  2.2105e-03,  1.9200e-02,  2.0346e-02,
          6.7659e-03,  1.0580e-02,  6.1106e-03,  3.0290e-03,  1.8388e-02,
          1.4539e-03,  8.6057e-03,  1.1382e-02,  6.3228e-03,  1.1147e-02,
          1.9404e-02,  1.1536e-03,  1.3646e-06,  1.3689e-03,  7.1101e-03,
          6.1812e-05,  2.2093e-03],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00],
        [ 3.5957e-02,  4.3375e-04,  3.8903e-04, -1.7184e-01, -6.9896e-02,
         -3.5073e-02, -5.6733e-02,  1.0439e-03,  7.6081e-03,  6.7242e-02,
         -3.6205e-02, -5.4149e-03, -1.6384e-02,  4.2463e-02,  8.5476e-02,
         -5.0628e-02,  7.8673e-03, -6.9286e-02, -5.7687e-03,  3.5181e-02,
         -4.7525e-02,  3.1415e-02,  3.4527e-02,  5.9056e-03, -6.8744e-02,
          4.9620e-02,  4.6148e-03,  2.6598e-03,  2.7595e-03,  6.4475e-03,
          2.9685e-03,  2.3295e-03],
        [-1.6908e-02, -5.5854e-04, -5.5964e-05, -4.6374e-02, -1.4243e-02,
         -3.4430e-02, -2.0078e-02, -8.5874e-03, -9.2627e-04, -1.9283e-03,
         -1.4044e-02,  0.0000e+00, -7.0982e-03, -1.6613e-02, -1.7699e-02,
         -1.8663e-02, -9.0104e-03, -1.8199e-02, -2.8822e-03, -1.3145e-02,
         -1.0101e-03, -7.8453e-03, -1.0370e-02, -5.1148e-03, -1.0593e-02,
         -1.2952e-02, -2.9166e-03, -1.7908e-05, -2.2881e-03, -2.2132e-02,
         -6.2059e-05, -1.1858e-03],
        [ 4.0232e-02,  2.1678e-03,  1.7254e-04, -9.1044e-02, -2.3079e-02,
          9.4650e-03, -2.6765e-02,  1.2874e-02,  6.8132e-03,  7.3467e-02,
         -1.4366e-02, -1.7270e-03,  8.4228e-03,  3.3929e-02,  7.8868e-02,
         -3.2016e-02,  1.2736e-02, -4.4041e-02,  3.0091e-03,  3.2370e-02,
         -2.6160e-02,  2.5358e-02,  3.3828e-02,  4.4126e-03, -4.7486e-02,
          3.9684e-02,  1.3473e-02,  3.0327e-03,  2.1674e-03,  1.1981e-02,
          2.8739e-03,  1.7195e-03],
        [-3.9404e-04,  0.0000e+00,  0.0000e+00, -1.4173e-05, -5.6499e-03,
          0.0000e+00,  0.0000e+00,  0.0000e+00, -4.0055e-03, -8.5748e-03,
          0.0000e+00,  0.0000e+00, -6.0115e-04, -1.6429e-02, -2.1538e-02,
         -7.2323e-06, -8.0117e-03,  0.0000e+00, -6.0409e-03, -4.5912e-03,
         -9.8169e-04, -1.1101e-02, -1.6218e-02, -2.7401e-03, -4.3302e-04,
         -2.3900e-03,  0.0000e+00, -9.4681e-04,  0.0000e+00,  0.0000e+00,
         -1.1906e-03, -1.8145e-05],
        [ 2.0624e-02,  1.5848e-03,  9.0084e-05, -1.3806e-02,  4.7712e-04,
          2.6831e-02, -5.1540e-03,  9.7906e-03,  3.2057e-03,  4.2586e-02,
         -3.6795e-03, -1.1607e-03,  8.3938e-03,  1.3637e-02,  3.2309e-02,
         -3.7885e-03,  3.9023e-03, -1.3178e-02,  1.2437e-03,  1.3095e-02,
         -1.1502e-02,  1.0619e-02,  1.3841e-02,  1.3912e-03, -2.1446e-02,
          1.6812e-02,  9.7105e-03,  1.6963e-03,  1.4500e-03,  1.2769e-02,
          1.5324e-03,  6.7107e-04],
        [-3.5121e-03, -1.5489e-03, -4.9888e-05, -8.2264e-02, -3.2491e-02,
         -6.1854e-02, -1.9842e-02, -9.0303e-03, -1.1901e-04, -2.2614e-02,
         -7.2007e-03,  1.0669e-03, -1.1695e-02,  3.4875e-03,  1.2273e-02,
         -3.2678e-02,  4.3663e-03, -2.0535e-02, -4.9440e-06,  4.6296e-03,
         -2.7883e-03,  2.6444e-03,  4.6853e-03,  4.6051e-04, -4.5239e-03,
          3.5250e-03, -8.9203e-03, -6.5535e-04, -1.0085e-03, -1.7400e-02,
         -5.2960e-04,  8.0581e-05],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([-0.3679, -0.4143,  0.0009,  0.0000,  0.0000, -0.1476, -0.0006,  0.0586,
         0.0000, -0.3746, -0.0773, -0.2235, -0.0483, -0.0800, -0.0825,  0.0000],
       device='cuda:0')>
<bound method Tensor.norm of tensor([[-6.1558e-02, -1.0841e-01, -3.9318e-06,  0.0000e+00,  0.0000e+00,
          4.0628e-03, -1.1264e-04, -1.5814e-04,  0.0000e+00,  2.5952e-02,
         -1.2608e-03, -8.8841e-02, -1.1691e-04, -2.4521e-02, -1.4029e-01,
          0.0000e+00],
        [-4.3661e-02,  1.9910e-02, -1.5427e-05,  0.0000e+00,  0.0000e+00,
         -6.1538e-04, -6.9425e-06, -1.2976e-03,  0.0000e+00,  3.7480e-02,
         -2.5514e-03, -1.0464e-02, -3.7566e-03,  1.7217e-02, -3.4375e-03,
          0.0000e+00],
        [-9.5479e-04, -1.0863e-03,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -9.2002e-05,  0.0000e+00,  0.0000e+00,  0.0000e+00,
         -1.6256e-05, -6.8178e-04,  0.0000e+00, -1.0546e-05, -8.3480e-04,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00],
        [-2.1945e-01,  5.1426e-02, -6.6917e-05,  0.0000e+00,  0.0000e+00,
         -2.6693e-03, -1.9208e-04, -5.7033e-03,  0.0000e+00,  1.6258e-01,
         -1.2604e-02, -6.6793e-02, -1.6295e-02,  7.3595e-02, -4.6566e-02,
          0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([-0.3647,  0.2825, -0.0024,  0.0000,  0.0000,  0.0000,  1.1317,  0.0000],
       device='cuda:0')>
<bound method Tensor.norm of tensor([[ 5.7207e-01, -6.1840e-01,  2.0802e-05,  0.0000e+00,  0.0000e+00,
          0.0000e+00, -6.7387e-01,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
          0.0000e+00,  0.0000e+00,  0.0000e+00]], device='cuda:0')>
<bound method Tensor.norm of tensor([-3.6124,  0.0000,  0.0000,  0.0000], device='cuda:0')>
<bound method Tensor.norm of tensor([[-0.2981,  0.0000,  0.0000,  0.0000]], device='cuda:0')>
<bound method Tensor.norm of tensor([-7.3946], device='cuda:0')>
