[%]GPU Enabled
/home/puntawat/Mint/Work/Vision/BallTrajectory/UnityDataset//RealWorld/Unity/Mixed/NormalScaled/Latent/train_set
Mixed:   0%|                                                                                     | 0/3 [00:00<?, ?it/s]Mixed: 100%|█████████████████████████████████████████████████████████████████████████████| 3/3 [00:00<00:00, 31.10it/s]
===============================Dataset shape===============================
Mixed : (5668,)
===========================================================================
Mixed:   0%|                                                                                     | 0/1 [00:00<?, ?it/s]Mixed: 100%|█████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 19.89it/s]
===============================Dataset shape===============================
Mixed : (1850,)
===========================================================================
[[ 5.4063940e-01 -7.7378910e-08  9.0527940e+00 ...  1.0000000e+00
   5.5589270e+00 -9.8100000e+00]
 [ 1.3936660e-01  7.1525580e-08 -1.2476200e-01 ...  1.0000000e+00
   5.5589270e+00 -9.8100000e+00]
 [ 1.3790820e-01 -2.2351750e-08 -1.2353100e-01 ...  1.0000000e+00
   5.5589270e+00 -9.8100000e+00]
 ...
 [ 4.1200000e-03 -7.7486050e-06  4.1000000e-03 ...  1.0000000e+00
   8.5857070e-01 -9.8100000e+00]
 [ 4.0200000e-03 -1.5497211e-06  3.9900000e-03 ...  1.0000000e+00
   8.5857070e-01 -9.8100000e+00]
 [ 3.9200000e-03 -3.3378605e-07  3.9000000e-03 ...  1.0000000e+00
   8.5857070e-01 -9.8100000e+00]]
[[-4.37061300e+00 -1.33323500e-08 -4.84904000e+00 ...  1.00000000e+00
   5.40257200e+00 -9.81000000e+00]
 [ 1.82933000e-01 -2.38418600e-08 -2.10298000e-01 ...  1.00000000e+00
   5.40257200e+00 -9.81000000e+00]
 [ 1.81982000e-01 -2.38418600e-08 -2.08597000e-01 ...  1.00000000e+00
   5.40257200e+00 -9.81000000e+00]
 ...
 [-4.84600000e-03 -2.78949800e-06  4.53900000e-03 ...  1.00000000e+00
   2.39847400e+00 -9.81000000e+00]
 [-4.73100000e-03 -5.00679100e-07  4.42900000e-03 ...  1.00000000e+00
   2.39847400e+00 -9.81000000e+00]
 [-4.61700000e-03 -1.23431304e-07  4.32400000e-03 ...  1.00000000e+00
   2.39847400e+00 -9.81000000e+00]]
[[-2.4096110e+00 -1.8320170e-08 -6.5084770e+00 ...  1.0000000e+00
   8.3214470e-01 -9.8100000e+00]
 [ 8.5809000e-02 -2.4090210e-08  1.0867400e-01 ...  1.0000000e+00
   8.3214470e-01 -9.8100000e+00]
 [ 8.4123000e-02 -2.3841870e-08  1.0757500e-01 ...  1.0000000e+00
   8.3214470e-01 -9.8100000e+00]
 ...
 [ 8.5100000e-03 -2.3841857e-08  4.6860000e-03 ...  1.0000000e+00
   5.9323080e-01 -9.8100000e+00]
 [ 8.3100000e-03 -2.3841863e-08  4.5730000e-03 ...  1.0000000e+00
   5.9323080e-01 -9.8100000e+00]
 [ 8.1000000e-03 -2.3841860e-08  4.4630000e-03 ...  1.0000000e+00
   5.9323080e-01 -9.8100000e+00]]
[[ 1.11543500e+01 -4.90728100e-08 -9.24546400e+00 ...  1.00000000e+00
   2.39770100e+00 -9.81000000e+00]
 [-5.66300000e-02  1.55845849e-01  5.39020000e-02 ...  1.00000000e+00
   2.39770100e+00 -9.81000000e+00]
 [-5.66300000e-02  1.53120900e-01  5.39030000e-02 ...  0.00000000e+00
   2.39770100e+00 -9.81000000e+00]
 ...
 [-3.72880000e-03 -2.78949730e-06  3.54900000e-03 ...  1.00000000e+00
   2.39770100e+00 -9.81000000e+00]
 [-3.63980000e-03 -5.01175800e-07  3.46500000e-03 ...  1.00000000e+00
   2.39770100e+00 -9.81000000e+00]
 [-3.55280000e-03 -1.20947768e-07  3.38200000e-03 ...  1.00000000e+00
   2.39770100e+00 -9.81000000e+00]]
[[ 1.29729600e+00 -6.55148200e-08 -4.10154500e+00 ...  1.00000000e+00
   5.37173700e+00 -9.81000000e+00]
 [ 6.12020000e-02  1.94497466e-01 -6.51630000e-02 ...  1.00000000e+00
   5.37173700e+00 -9.81000000e+00]
 [ 6.12020000e-02  1.91772400e-01 -6.51630000e-02 ...  0.00000000e+00
   5.37173700e+00 -9.81000000e+00]
 ...
 [ 3.55200000e-03 -1.48142380e-06  6.58100000e-03 ...  1.00000000e+00
   1.00354600e+00 -9.81000000e+00]
 [ 3.46900000e-03 -3.30557440e-07  6.42600000e-03 ...  1.00000000e+00
   1.00354600e+00 -9.81000000e+00]
 [ 3.38500000e-03 -2.23517500e-08  6.27200000e-03 ...  1.00000000e+00
   1.00354600e+00 -9.81000000e+00]]
======================================================Summary Batch (batch_size = 128)=========================================================================
[[ 2.310220e-01 -1.532777e-08 -3.962997e+00 ...  1.000000e+00
   5.347719e+00 -9.810000e+00]
 [ 9.729250e-02 -2.334516e-08 -1.359010e-01 ...  1.000000e+00
   5.347719e+00 -9.810000e+00]
 [ 9.606790e-02 -2.359351e-08 -1.344330e-01 ...  1.000000e+00
   5.347719e+00 -9.810000e+00]
 ...
 [ 5.525000e-03 -2.384186e-08 -7.740000e-03 ...  1.000000e+00
   5.347719e+00 -9.810000e+00]
 [ 5.397000e-03 -2.384186e-08 -7.560000e-03 ...  1.000000e+00
   5.347719e+00 -9.810000e+00]
 [ 5.267000e-03  7.152559e-08 -7.370000e-03 ...  1.000000e+00
   5.347719e+00 -9.810000e+00]]
[[-3.5051120e+00 -4.8171610e-08  3.3466370e+00 ...  1.0000000e+00
   5.3123140e+00 -9.8100000e+00]
 [ 1.1285100e-01 -2.1606690e-08 -1.7059200e-01 ...  1.0000000e+00
   5.3123140e+00 -9.8100000e+00]
 [ 1.1164300e-01  7.3512415e-08 -1.6910500e-01 ...  1.0000000e+00
   5.3123140e+00 -9.8100000e+00]
 ...
 [ 6.7310000e-03 -2.3841860e-08 -7.1300000e-03 ...  1.0000000e+00
   5.4594210e+00 -9.8100000e+00]
 [ 6.5690000e-03  7.1525590e-08 -6.9600000e-03 ...  1.0000000e+00
   5.4594210e+00 -9.8100000e+00]
 [ 6.4160000e-03 -2.3841860e-08 -6.8100000e-03 ...  1.0000000e+00
   5.4594210e+00 -9.8100000e+00]]
[[ 8.3418690e+00 -2.3139740e-08  4.0987910e+00 ...  1.0000000e+00
   3.9334210e+00 -9.8100000e+00]
 [-1.5714000e-01 -2.3841860e-08 -1.5755900e-01 ...  1.0000000e+00
   3.9334210e+00 -9.8100000e+00]
 [-1.5584000e-01 -2.2103400e-08 -1.5616300e-01 ...  1.0000000e+00
   3.9334210e+00 -9.8100000e+00]
 ...
 [-4.4080000e-03 -1.1753040e-05 -3.3290000e-03 ...  1.0000000e+00
   3.8007040e+00 -9.8100000e+00]
 [-4.3010000e-03 -2.3136544e-06 -3.2480000e-03 ...  1.0000000e+00
   3.8007040e+00 -9.8100000e+00]
 [-4.1990000e-03 -5.0067915e-07 -3.1710000e-03 ...  1.0000000e+00
   3.8007040e+00 -9.8100000e+00]]
[[ 1.5713670e-01 -2.2185360e-08 -4.3380270e+00 ...  1.0000000e+00
   5.5862540e+00 -9.8100000e+00]
 [ 1.1591260e-01 -2.3841860e-08 -9.5497000e-02 ...  1.0000000e+00
   5.5862540e+00 -9.8100000e+00]
 [ 1.1448350e-01 -2.3593510e-08 -9.4231000e-02 ...  1.0000000e+00
   5.5862540e+00 -9.8100000e+00]
 ...
 [ 3.8710000e-03 -1.3566018e-05 -4.6900000e-03 ...  1.0000000e+00
   5.4301700e+00 -9.8100000e+00]
 [ 3.7770000e-03 -2.6941309e-06 -4.5700000e-03 ...  1.0000000e+00
   5.4301700e+00 -9.8100000e+00]
 [ 3.6850000e-03 -5.9604652e-07 -4.4700000e-03 ...  1.0000000e+00
   5.4301700e+00 -9.8100000e+00]]
[[ 6.7525740e+00 -3.3456460e-08 -7.1825290e+00 ...  1.0000000e+00
   2.4800110e+00 -9.8100000e+00]
 [-1.8409100e-01 -2.3841860e-08  1.4425900e-01 ...  1.0000000e+00
   2.4800110e+00 -9.8100000e+00]
 [-1.8256400e-01 -2.3841870e-08  1.4311700e-01 ...  1.0000000e+00
   2.4800110e+00 -9.8100000e+00]
 ...
 [ 7.4240000e-03 -2.3841866e-08 -6.4090000e-03 ...  1.0000000e+00
   5.5736570e+00 -9.8100000e+00]
 [ 7.2450000e-03 -2.3841860e-08 -6.2540000e-03 ...  1.0000000e+00
   5.5736570e+00 -9.8100000e+00]
 [ 7.0770000e-03 -2.3841860e-08 -6.1080000e-03 ...  1.0000000e+00
   5.5736570e+00 -9.8100000e+00]]
[[-3.5010450e+00 -2.0832640e-08 -1.5375030e+01 ...  1.0000000e+00
   6.9302060e-01 -9.8100000e+00]
 [ 1.6618300e-01 -2.3841860e-08  1.3686000e-01 ...  1.0000000e+00
   6.9302060e-01 -9.8100000e+00]
 [ 1.6474300e-01 -2.5331980e-08  1.3561000e-01 ...  1.0000000e+00
   6.9302060e-01 -9.8100000e+00]
 ...
 [-5.2863000e-03 -3.2285850e-08  7.9880000e-03 ...  1.0000000e+00
   2.2149340e+00 -9.8100000e+00]
 [-5.1630000e-03 -1.8626450e-08  7.8010000e-03 ...  1.0000000e+00
   2.2149340e+00 -9.8100000e+00]
 [-5.0388000e-03  7.1773935e-08  7.6130000e-03 ...  1.0000000e+00
   2.2149340e+00 -9.8100000e+00]]
[[ 3.7654860e+00 -3.6925610e-08 -2.7026520e+01 ...  1.0000000e+00
   2.1651630e+00 -9.8100000e+00]
 [-1.4318800e-01 -2.3841870e-08  2.0082000e-01 ...  1.0000000e+00
   2.1651630e+00 -9.8100000e+00]
 [-1.4236300e-01  7.1525590e-08  1.9906000e-01 ...  1.0000000e+00
   2.1651630e+00 -9.8100000e+00]
 ...
 [-7.5482000e-03 -1.0609628e-05  4.5400000e-03 ...  1.0000000e+00
   2.5865730e+00 -9.8100000e+00]
 [-7.3671000e-03 -2.1226703e-06  4.4400000e-03 ...  1.0000000e+00
   2.5865730e+00 -9.8100000e+00]
 [-7.1947000e-03 -4.2940190e-07  4.3400000e-03 ...  1.0000000e+00
   2.5865730e+00 -9.8100000e+00]]
[[-1.8085810e+00 -1.2951170e-08  5.9879610e+00 ...  1.0000000e+00
   5.4532820e+00 -9.8100000e+00]
 [ 1.3718600e-01 -2.2600100e-08 -1.5556500e-01 ...  1.0000000e+00
   5.4532820e+00 -9.8100000e+00]
 [ 1.3576900e-01 -1.4156100e-08 -1.5427200e-01 ...  1.0000000e+00
   5.4532820e+00 -9.8100000e+00]
 ...
 [ 5.7000000e-03 -1.2230871e-05  2.9000000e-03 ...  1.0000000e+00
   5.0826940e-01 -9.8100000e+00]
 [ 5.5700000e-03 -2.4080277e-06  2.8310000e-03 ...  1.0000000e+00
   5.0826940e-01 -9.8100000e+00]
 [ 5.4300000e-03 -5.0067911e-07  2.7630000e-03 ...  1.0000000e+00
   5.0826940e-01 -9.8100000e+00]]
[[ 4.98116600e+00 -5.48683600e-09 -9.06515900e+00 ...  1.00000000e+00
   2.47518800e+00 -9.81000000e+00]
 [-6.46710000e-02  1.69730505e-01  5.06160000e-02 ...  1.00000000e+00
   2.47518800e+00 -9.81000000e+00]
 [-6.46710000e-02  1.67005400e-01  5.06170000e-02 ...  0.00000000e+00
   2.47518800e+00 -9.81000000e+00]
 ...
 [ 5.28500000e-03  7.42574620e-08 -8.20200000e-03 ...  1.00000000e+00
   5.29366600e+00 -9.81000000e+00]
 [ 5.15800000e-03 -2.11099820e-08 -8.00400000e-03 ...  1.00000000e+00
   5.29366600e+00 -9.81000000e+00]
 [ 5.03800000e-03 -2.38418600e-08 -7.81800000e-03 ...  1.00000000e+00
   5.29366600e+00 -9.81000000e+00]]
[[-4.5568950e+00 -1.0566040e-08  6.1134650e-01 ...  1.0000000e+00
   5.7056510e+00 -9.8100000e+00]
 [ 1.6994600e-01 -2.3593510e-08 -1.0928750e-01 ...  1.0000000e+00
   5.7056510e+00 -9.8100000e+00]
 [ 1.6838100e-01 -2.3593510e-08 -1.0819590e-01 ...  1.0000000e+00
   5.7056510e+00 -9.8100000e+00]
 ...
 [-2.9510000e-03 -4.9996380e-05 -3.0600000e-03 ...  1.0000000e+00
   3.8245810e+00 -9.8100000e+00]
 [-2.8820000e-03 -1.0034448e-05 -2.9900000e-03 ...  1.0000000e+00
   3.8245810e+00 -9.8100000e+00]
 [-2.8150000e-03 -2.0504001e-06 -2.9200000e-03 ...  1.0000000e+00
   3.8245810e+00 -9.8100000e+00]]
[[ 1.3050830e+01 -2.0235890e-08 -1.5882180e+01 ...  1.0000000e+00
   2.1347650e+00 -9.8100000e+00]
 [-4.1590000e-02  1.1563762e-01  7.2080000e-02 ...  1.0000000e+00
   2.1347650e+00 -9.8100000e+00]
 [-4.1590000e-02  1.1291260e-01  7.2070000e-02 ...  0.0000000e+00
   2.1347650e+00 -9.8100000e+00]
 ...
 [-7.0070000e-03 -2.0364930e-08 -6.4800000e-03 ...  1.0000000e+00
   3.9410470e+00 -9.8100000e+00]
 [-6.8430000e-03 -2.3841860e-08 -6.3300000e-03 ...  1.0000000e+00
   3.9410470e+00 -9.8100000e+00]
 [-6.6790000e-03  7.5002520e-08 -6.1700000e-03 ...  1.0000000e+00
   3.9410470e+00 -9.8100000e+00]]
[[ 8.82208700e+00 -4.42316400e-08  6.45418200e+00 ...  1.00000000e+00
   4.15291700e+00 -9.81000000e+00]
 [-3.52450000e-02  1.98841444e-01 -5.78700000e-02 ...  1.00000000e+00
   4.15291700e+00 -9.81000000e+00]
 [-3.52450000e-02  1.96116500e-01 -5.78690000e-02 ...  0.00000000e+00
   4.15291700e+00 -9.81000000e+00]
 ...
 [ 6.04300000e-03  6.95387650e-08  7.52070000e-03 ...  1.00000000e+00
   8.97260700e-01 -9.81000000e+00]
 [ 5.89700000e-03 -2.70704450e-08  7.33970000e-03 ...  1.00000000e+00
   8.97260700e-01 -9.81000000e+00]
 [ 5.75600000e-03 -2.26001000e-08  7.16320000e-03 ...  1.00000000e+00
   8.97260700e-01 -9.81000000e+00]]
[[ 5.28843400e+00 -4.69486800e-08 -9.43693100e+00 ...  1.00000000e+00
   2.25689600e+00 -9.81000000e+00]
 [-5.95510000e-02  1.45294847e-01  8.71160000e-02 ...  1.00000000e+00
   2.25689600e+00 -9.81000000e+00]
 [-5.95510000e-02  1.42569900e-01  8.71150000e-02 ...  0.00000000e+00
   2.25689600e+00 -9.81000000e+00]
 ...
 [ 8.07000000e-03  7.00354700e-08 -5.35300000e-03 ...  1.00000000e+00
   5.68069900e+00 -9.81000000e+00]
 [ 7.87600000e-03 -2.65737400e-08 -5.22420000e-03 ...  1.00000000e+00
   5.68069900e+00 -9.81000000e+00]
 [ 7.68600000e-03 -2.58286900e-08 -5.09850000e-03 ...  1.00000000e+00
   5.68069900e+00 -9.81000000e+00]]
[[-4.3902020e+00 -5.1878290e-08 -8.4708170e-01 ...  1.0000000e+00
   5.7910880e+00 -9.8100000e+00]
 [ 1.6340300e-01 -2.4090210e-08 -9.2282900e-02 ...  1.0000000e+00
   5.7910880e+00 -9.8100000e+00]
 [ 1.6162900e-01  7.0532173e-08 -9.1545400e-02 ...  1.0000000e+00
   5.7910880e+00 -9.8100000e+00]
 ...
 [-6.9380000e-03 -2.3841860e-08  6.6390000e-03 ...  1.0000000e+00
   2.3889600e+00 -9.8100000e+00]
 [-6.7750000e-03 -2.3841870e-08  6.4850000e-03 ...  1.0000000e+00
   2.3889600e+00 -9.8100000e+00]
 [-6.6130000e-03  6.5316770e-08  6.3280000e-03 ...  1.0000000e+00
   2.3889600e+00 -9.8100000e+00]]
[[ 1.9757800e+00 -2.3635010e-08 -1.1080220e+00 ...  1.0000000e+00
   5.4151020e+00 -9.8100000e+00]
 [ 1.6191100e-01 -2.2848450e-08 -1.8713400e-01 ...  1.0000000e+00
   5.4151020e+00 -9.8100000e+00]
 [ 1.6077000e-01 -2.2103400e-08 -1.8559900e-01 ...  1.0000000e+00
   5.4151020e+00 -9.8100000e+00]
 ...
 [-5.1850000e-03 -1.8358230e-06  4.6580000e-03 ...  1.0000000e+00
   2.3956300e+00 -9.8100000e+00]
 [-5.0610000e-03 -3.3378606e-07  4.5450000e-03 ...  1.0000000e+00
   2.3956300e+00 -9.8100000e+00]
 [-4.9430000e-03 -2.3841860e-08  4.4400000e-03 ...  1.0000000e+00
   2.3956300e+00 -9.8100000e+00]]
[[ 8.361399e+00 -3.083260e-08 -4.592000e+00 ...  1.000000e+00
   4.166974e+00 -9.810000e+00]
 [-1.060110e-01 -2.384187e-08 -1.955600e-01 ...  1.000000e+00
   4.166974e+00 -9.810000e+00]
 [-1.043220e-01 -2.384186e-08 -1.943050e-01 ...  1.000000e+00
   4.166974e+00 -9.810000e+00]
 ...
 [ 7.220000e-03 -2.384186e-08  6.414000e-03 ...  1.000000e+00
   7.421835e-01 -9.810000e+00]
 [ 7.050000e-03  7.152558e-08  6.261000e-03 ...  1.000000e+00
   7.421835e-01 -9.810000e+00]
 [ 6.880000e-03 -2.384186e-08  6.110000e-03 ...  1.000000e+00
   7.421835e-01 -9.810000e+00]]
[[ 1.175221e+01 -1.162452e-08 -4.482221e+00 ...  1.000000e+00
   4.152174e+00 -9.810000e+00]
 [-1.022500e-01 -2.384186e-08 -1.475120e-01 ...  1.000000e+00
   4.152174e+00 -9.810000e+00]
 [-1.015500e-01 -2.384186e-08 -1.456790e-01 ...  1.000000e+00
   4.152174e+00 -9.810000e+00]
 ...
 [-7.871000e-03 -2.781551e-08  5.679000e-03 ...  1.000000e+00
   2.452951e+00 -9.810000e+00]
 [-7.681000e-03  7.152559e-08  5.541000e-03 ...  1.000000e+00
   2.452951e+00 -9.810000e+00]
 [-7.502000e-03 -2.384187e-08  5.413000e-03 ...  1.000000e+00
   2.452951e+00 -9.810000e+00]]
[[-2.1545380e+01 -1.9076910e-08  4.6908940e-01 ...  1.0000000e+00
   5.7263930e+00 -9.8100000e+00]
 [ 2.0015000e-01 -2.3841860e-08 -1.2544560e-01 ...  1.0000000e+00
   5.7263930e+00 -9.8100000e+00]
 [ 1.9850000e-01 -2.3345160e-08 -1.2446780e-01 ...  1.0000000e+00
   5.7263930e+00 -9.8100000e+00]
 ...
 [ 3.4900000e-03 -2.3126604e-06  2.6410000e-03 ...  1.0000000e+00
   7.5612740e-01 -9.8100000e+00]
 [ 3.4000000e-03 -5.0067914e-07  2.5790000e-03 ...  1.0000000e+00
   7.5612740e-01 -9.8100000e+00]
 [ 3.3200000e-03 -2.6325390e-08  2.5160000e-03 ...  1.0000000e+00
   7.5612740e-01 -9.8100000e+00]]
[[ 1.876584e+01 -2.284029e-08 -7.406793e+00 ...  1.000000e+00
   2.445343e+00 -9.810000e+00]
 [-1.488100e-01 -2.384187e-08  1.257160e-01 ...  1.000000e+00
   2.445343e+00 -9.810000e+00]
 [-1.473000e-01 -2.384186e-08  1.245290e-01 ...  1.000000e+00
   2.445343e+00 -9.810000e+00]
 ...
 [-5.411000e-03  7.152558e-08 -8.093000e-03 ...  1.000000e+00
   4.186025e+00 -9.810000e+00]
 [-5.281000e-03 -2.384186e-08 -7.899000e-03 ...  1.000000e+00
   4.186025e+00 -9.810000e+00]
 [-5.158000e-03 -2.384186e-08 -7.714000e-03 ...  1.000000e+00
   4.186025e+00 -9.810000e+00]][[ 3.05100900e+00 -5.60552800e-08 -3.02655900e+00 ...  1.00000000e+00
   3.95310700e+00 -9.81000000e+00]
 [-1.62926000e-01 -2.38418700e-08 -1.73588000e-01 ...  1.00000000e+00
   3.95310700e+00 -9.81000000e+00]
 [-1.61566000e-01  7.15255850e-08 -1.72250000e-01 ...  1.00000000e+00
   3.95310700e+00 -9.81000000e+00]
 ...
 [ 7.64400000e-03 -2.38418700e-08  5.59500000e-03 ...  1.00000000e+00
   6.42707400e-01 -9.81000000e+00]
 [ 7.46600000e-03 -2.38418600e-08  5.46500000e-03 ...  1.00000000e+00
   6.42707400e-01 -9.81000000e+00]
 [ 7.28600000e-03  7.15255882e-08  5.33300000e-03 ...  1.00000000e+00
   6.42707400e-01 -9.81000000e+00]]

[[ 3.97655800e+00 -6.39293600e-09 -2.62800400e+00 ...  1.00000000e+00
   4.08304800e+00 -9.81000000e+00]
 [-5.56690000e-02  1.17223306e-01 -7.51310000e-02 ...  1.00000000e+00
   4.08304800e+00 -9.81000000e+00]
 [-5.56690000e-02  1.14498300e-01 -7.51310000e-02 ...  0.00000000e+00
   4.08304800e+00 -9.81000000e+00]
 ...
 [ 7.85830000e-03  7.17739430e-08  5.69000000e-03 ...  1.00000000e+00
   6.47713700e-01 -9.81000000e+00]
 [ 7.66930000e-03 -2.48352730e-08  5.56000000e-03 ...  1.00000000e+00
   6.47713700e-01 -9.81000000e+00]
 [ 7.49040000e-03 -2.21033900e-08  5.42000000e-03 ...  1.00000000e+00
   6.47713700e-01 -9.81000000e+00]]
[[-5.4478760e-01 -1.7577460e-08 -6.9221890e-01 ...  1.0000000e+00
   5.4201560e+00 -9.8100000e+00]
 [ 1.2427940e-01 -2.6325390e-08 -1.4439980e-01 ...  1.0000000e+00
   5.4201560e+00 -9.8100000e+00]
 [ 1.2305630e-01 -2.8560570e-08 -1.4293580e-01 ...  1.0000000e+00
   5.4201560e+00 -9.8100000e+00]
 ...
 [-6.4250000e-03 -2.2103390e-08  7.2250000e-03 ...  1.0000000e+00
   2.2968380e+00 -9.8100000e+00]
 [-6.2700000e-03  7.3264055e-08  7.0500000e-03 ...  1.0000000e+00
   2.2968380e+00 -9.8100000e+00]
 [-6.1200000e-03 -2.0861625e-08  6.8810000e-03 ...  1.0000000e+00
   2.2968380e+00 -9.8100000e+00]]
[[-3.2946100e+00 -5.1685390e-08 -1.1444680e+01 ...  1.0000000e+00
   7.4381330e-01 -9.8100000e+00]
 [ 1.5938800e-01 -2.3841860e-08  1.4380000e-01 ...  1.0000000e+00
   7.4381330e-01 -9.8100000e+00]
 [ 1.5805300e-01  7.1525587e-08  1.4243000e-01 ...  1.0000000e+00
   7.4381330e-01 -9.8100000e+00]
 ...
 [-7.8060000e-03  7.1525590e-08 -5.9370000e-03 ...  1.0000000e+00
   3.7970760e+00 -9.8100000e+00]
 [-7.6180000e-03 -2.3841870e-08 -5.7950000e-03 ...  1.0000000e+00
   3.7970760e+00 -9.8100000e+00]
 [-7.4400000e-03 -2.3841860e-08 -5.6590000e-03 ...  1.0000000e+00
   3.7970760e+00 -9.8100000e+00]]
[[ 1.06216700e+01 -1.05232200e-08 -1.71748300e+01 ...  1.00000000e+00
   2.53408500e+00 -9.81000000e+00]
 [-7.18300000e-02  1.00188111e-01  4.82200000e-02 ...  1.00000000e+00
   2.53408500e+00 -9.81000000e+00]
 [-7.18200000e-02  9.74630000e-02  4.82100000e-02 ...  0.00000000e+00
   2.53408500e+00 -9.81000000e+00]
 ...
 [ 6.07900000e-03 -2.38418600e-08  7.48900000e-03 ...  1.00000000e+00
   8.35342100e-01 -9.81000000e+00]
 [ 5.93200000e-03  7.15255830e-08  7.30800000e-03 ...  1.00000000e+00
   8.35342100e-01 -9.81000000e+00]
 [ 5.79000000e-03 -2.38418630e-08  7.13300000e-03 ...  1.00000000e+00
   8.35342100e-01 -9.81000000e+00]]
[[ 5.7936280e+00 -1.7360340e-08 -1.2378980e+01 ...  1.0000000e+00
   2.5712880e+00 -9.8100000e+00]
 [-1.5931000e-01 -2.3841860e-08  1.0021000e-01 ...  1.0000000e+00
   2.5712880e+00 -9.8100000e+00]
 [-1.5774600e-01 -2.3841860e-08  9.9110000e-02 ...  1.0000000e+00
   2.5712880e+00 -9.8100000e+00]
 ...
 [ 5.7670000e-03 -6.0300040e-06  5.5164000e-03 ...  1.0000000e+00
   6.5117590e-01 -9.8100000e+00]
 [ 5.6300000e-03 -1.1702385e-06  5.3842000e-03 ...  1.0000000e+00
   6.5117590e-01 -9.8100000e+00]
 [ 5.4970000e-03 -1.9023815e-07  5.2580000e-03 ...  1.0000000e+00
   6.5117590e-01 -9.8100000e+00]]
[[-5.77260700e+00 -4.13049700e-09 -1.36815200e+01 ...  1.00000000e+00
   1.12015200e+00 -9.81000000e+00]
 [ 3.71720000e-02  1.03530304e-01  7.87900000e-02 ...  1.00000000e+00
   1.12015200e+00 -9.81000000e+00]
 [ 3.71720000e-02  1.00805200e-01  7.88000000e-02 ...  0.00000000e+00
   1.12015200e+00 -9.81000000e+00]
 ...
 [ 6.80000000e-03 -2.38418600e-08 -6.81000000e-03 ...  1.00000000e+00
   5.45976600e+00 -9.81000000e+00]
 [ 6.64000000e-03 -2.38418700e-08 -6.64000000e-03 ...  1.00000000e+00
   5.45976600e+00 -9.81000000e+00]
 [ 6.48000000e-03 -2.38418600e-08 -6.49000000e-03 ...  1.00000000e+00
   5.45976600e+00 -9.81000000e+00]]
[[ 4.5796580e+00 -5.9501050e-08 -5.1785980e+00 ...  1.0000000e+00
   3.6619690e+00 -9.8100000e+00]
 [-1.4879100e-01 -2.3841870e-08 -9.7097000e-02 ...  1.0000000e+00
   3.6619690e+00 -9.8100000e+00]
 [-1.4675800e-01  7.1525590e-08 -9.6722000e-02 ...  1.0000000e+00
   3.6619690e+00 -9.8100000e+00]
 ...
 [ 2.8970000e-03 -6.3180940e-06  2.6020000e-03 ...  1.0000000e+00
   7.1125880e-01 -9.8100000e+00]
 [ 2.8280000e-03 -1.2636183e-06  2.5410000e-03 ...  1.0000000e+00
   7.1125880e-01 -9.8100000e+00]
 [ 2.7550000e-03 -1.9073493e-07  2.4740000e-03 ...  1.0000000e+00
   7.1125880e-01 -9.8100000e+00]]
[[-9.34671500e+00 -5.14459300e-08  4.14606800e-01 ...  1.00000000e+00
   5.28599500e+00 -9.81000000e+00]
 [ 1.26925000e-01 -2.30968000e-08 -2.05507000e-01 ...  1.00000000e+00
   5.28599500e+00 -9.81000000e+00]
 [ 1.25680000e-01  7.15255810e-08 -2.04034776e-01 ...  1.00000000e+00
   5.28599500e+00 -9.81000000e+00]
 ...
 [ 2.62000000e-03 -3.69295560e-05  3.46200000e-03 ...  1.00000000e+00
   1.01825700e+00 -9.81000000e+00]
 [ 2.56000000e-03 -7.43866100e-06  3.38000000e-03 ...  1.00000000e+00
   1.01825700e+00 -9.81000000e+00]
 [ 2.49000000e-03 -1.47819570e-06  3.29100000e-03 ...  1.00000000e+00
   1.01825700e+00 -9.81000000e+00]]
Input batch [0] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Output batch [0] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
[[-7.3925780e+00 -4.2043480e-08 -6.5923140e+00 ...  1.0000000e+00
   7.5799790e-01 -9.8100000e+00]
 [ 1.6084500e-01 -2.3841860e-08  1.3748800e-01 ...  1.0000000e+00
   7.5799790e-01 -9.8100000e+00]
 [ 1.5997200e-01  6.4571710e-08  1.3557300e-01 ...  1.0000000e+00
   7.5799790e-01 -9.8100000e+00]
 ...
 [-4.0300000e-03 -3.2949451e-05 -3.4000000e-03 ...  1.0000000e+00
   3.8439650e+00 -9.8100000e+00]
 [-3.9100000e-03 -6.6041960e-06 -3.3200000e-03 ...  1.0000000e+00
   3.8439650e+00 -9.8100000e+00]
 [-3.8300000e-03 -1.2636184e-06 -3.2300000e-03 ...  1.0000000e+00
   3.8439650e+00 -9.8100000e+00]]
[[ 2.067077e+01 -3.407312e-08 -2.731324e+01 ...  1.000000e+00
   2.620268e+00 -9.810000e+00]
 [-1.877500e-01 -2.384187e-08  1.042900e-01 ...  1.000000e+00
   2.620268e+00 -9.810000e+00]
 [-1.861800e-01 -2.384186e-08  1.032100e-01 ...  1.000000e+00
   2.620268e+00 -9.810000e+00]
 ...
 [-5.513000e-03 -2.384186e-08  8.050000e-03 ...  1.000000e+00
   2.142645e+00 -9.810000e+00]
 [-5.380000e-03 -2.384187e-08  7.850000e-03 ...  1.000000e+00
   2.142645e+00 -9.810000e+00]
 [-5.256000e-03 -2.384186e-08  7.670000e-03 ...  1.000000e+00
   2.142645e+00 -9.810000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [1] : batch=torch.Size([128, 898, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 898, 4]), initial position=torch.Size([128, 1, 4])
Output batch [1] : batch=torch.Size([128, 898, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 899, 4]), initial position=torch.Size([128, 1, 4])
[[ 5.84491700e+00 -1.38942300e-08 -4.07121600e-01 ...  1.00000000e+00
   3.83608900e+00 -9.81000000e+00]
 [-8.54630000e-02  1.96076314e-01 -7.19376000e-02 ...  1.00000000e+00
   3.83608900e+00 -9.81000000e+00]
 [-8.54640000e-02  1.93351400e-01 -7.19376000e-02 ...  0.00000000e+00
   3.83608900e+00 -9.81000000e+00]
 ...
 [ 2.62000000e-03 -1.37805980e-05  4.75800000e-03 ...  1.00000000e+00
   1.04184600e+00 -9.81000000e+00]
 [ 2.55500000e-03 -2.69413020e-06  4.64100000e-03 ...  1.00000000e+00
   1.04184600e+00 -9.81000000e+00]
 [ 2.49400000e-03 -5.96046550e-07  4.52900000e-03 ...  1.00000000e+00
   1.04184600e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [2] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [2] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
[[ 6.90699500e+00 -8.22366900e-08 -7.72854700e+00 ...  1.00000000e+00
   2.27702800e+00 -9.81000000e+00]
 [-4.62530000e-02  2.08065182e-01  5.75470000e-02 ...  1.00000000e+00
   2.27702800e+00 -9.81000000e+00]
 [-4.62530000e-02  2.05340100e-01  5.75460000e-02 ...  0.00000000e+00
   2.27702800e+00 -9.81000000e+00]
 ...
 [ 5.16090000e-03 -2.23517410e-08 -8.12350000e-03 ...  1.00000000e+00
   5.28143800e+00 -9.81000000e+00]
 [ 5.04060000e-03 -2.58286900e-08 -7.93420000e-03 ...  1.00000000e+00
   5.28143800e+00 -9.81000000e+00]
 [ 4.91930000e-03 -2.78155000e-08 -7.74330000e-03 ...  1.00000000e+00
   5.28143800e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [3] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [3] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
[[-5.45946700e+00 -3.26276100e-08 -1.81805700e+00 ...  1.00000000e+00
   5.35212900e+00 -9.81000000e+00]
 [ 1.01331000e-01 -2.38418600e-08 -1.38586000e-01 ...  1.00000000e+00
   5.35212900e+00 -9.81000000e+00]
 [ 1.00139000e-01 -2.50836300e-08 -1.37095000e-01 ...  1.00000000e+00
   5.35212900e+00 -9.81000000e+00]
 ...
 [ 5.39000000e-03 -1.19209270e-07  4.87700000e-03 ...  1.00000000e+00
   8.08641100e-01 -9.81000000e+00]
 [ 5.27000000e-03 -2.38418600e-08  4.76000000e-03 ...  1.00000000e+00
   8.08641100e-01 -9.81000000e+00]
 [ 5.13000000e-03 -2.83122098e-08  4.64600000e-03 ...  1.00000000e+00
   8.08641100e-01 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [4] : batch=torch.Size([128, 823, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 823, 4]), initial position=torch.Size([128, 1, 4])
Output batch [4] : batch=torch.Size([128, 823, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
[[-1.88371800e+00 -6.37208200e-09 -1.63901300e+01 ...  1.00000000e+00
   8.75979200e-01 -9.81000000e+00]
 [ 6.37130000e-02  1.69036506e-01  7.47000000e-02 ...  1.00000000e+00
   8.75979200e-01 -9.81000000e+00]
 [ 6.37130000e-02  1.66311500e-01  7.47000000e-02 ...  0.00000000e+00
   8.75979200e-01 -9.81000000e+00]
 ...
 [-5.84700000e-03 -2.38418600e-08 -7.60000000e-03 ...  1.00000000e+00
   4.05480600e+00 -9.81000000e+00]
 [-5.71100000e-03  7.15255790e-08 -7.41000000e-03 ...  1.00000000e+00
   4.05480600e+00 -9.81000000e+00]
 [-5.57300000e-03 -2.38418590e-08 -7.24000000e-03 ...  1.00000000e+00
   4.05480600e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [5] : batch=torch.Size([128, 959, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 959, 4]), initial position=torch.Size([128, 1, 4])
Output batch [5] : batch=torch.Size([128, 959, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 960, 4]), initial position=torch.Size([128, 1, 4])
[[-3.60593900e+00 -1.61189600e-08  1.29049900e-01 ...  1.00000000e+00
   5.46465800e+00 -9.81000000e+00]
 [ 4.35790000e-02  1.17211916e-01 -4.89795100e-02 ...  1.00000000e+00
   5.46465800e+00 -9.81000000e+00]
 [ 4.35800000e-02  1.14486900e-01 -4.89794700e-02 ...  0.00000000e+00
   5.46465800e+00 -9.81000000e+00]
 ...
 [-7.45200000e-03  6.45717070e-08  6.35400000e-03 ...  1.00000000e+00
   2.42987700e+00 -9.81000000e+00]
 [-7.27300000e-03 -2.38418570e-08  6.20200000e-03 ...  1.00000000e+00
   2.42987700e+00 -9.81000000e+00]
 [-7.10300000e-03 -1.88748100e-08  6.05700000e-03 ...  1.00000000e+00
   2.42987700e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [6] : batch=torch.Size([128, 795, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 795, 4]), initial position=torch.Size([128, 1, 4])
Output batch [6] : batch=torch.Size([128, 795, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 796, 4]), initial position=torch.Size([128, 1, 4])
[[ 8.00568300e+00 -7.11549800e-08 -1.23956800e+01 ...  1.00000000e+00
   2.58480200e+00 -9.81000000e+00]
 [-1.50219000e-01  7.15255849e-08  9.07800000e-02 ...  1.00000000e+00
   2.58480200e+00 -9.81000000e+00]
 [-1.48657000e-01 -2.38418649e-08  8.96800000e-02 ...  1.00000000e+00
   2.58480200e+00 -9.81000000e+00]
 ...
 [ 7.04500000e-03 -2.38418600e-08  6.74500000e-03 ...  1.00000000e+00
   6.93362300e-01 -9.81000000e+00]
 [ 6.87600000e-03  7.15255840e-08  6.58200000e-03 ...  1.00000000e+00
   6.93362300e-01 -9.81000000e+00]
 [ 6.71500000e-03 -2.38418640e-08  6.42800000e-03 ...  1.00000000e+00
   6.93362300e-01 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [7] : batch=torch.Size([128, 825, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Output batch [7] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
[[-3.30188300e+00 -8.78928600e-09 -1.31875000e+01 ...  1.00000000e+00
   6.90528300e-01 -9.81000000e+00]
 [ 9.11760000e-02  2.08577809e-01  6.38800000e-02 ...  1.00000000e+00
   6.90528300e-01 -9.81000000e+00]
 [ 9.11760000e-02  2.05852800e-01  6.38800000e-02 ...  0.00000000e+00
   6.90528300e-01 -9.81000000e+00]
 ...
 [-3.41000000e-03 -1.64508880e-06 -6.90000000e-03 ...  1.00000000e+00
   4.22923200e+00 -9.81000000e+00]
 [-3.33000000e-03 -3.33786050e-07 -6.75000000e-03 ...  1.00000000e+00
   4.22923200e+00 -9.81000000e+00]
 [-3.25000000e-03 -2.38418700e-08 -6.58000000e-03 ...  1.00000000e+00
   4.22923200e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [8] : batch=torch.Size([128, 891, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 891, 4]), initial position=torch.Size([128, 1, 4])
Output batch [8] : batch=torch.Size([128, 891, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 892, 4]), initial position=torch.Size([128, 1, 4])
[[-1.70191100e+01 -1.05715200e-08 -7.41682500e+00 ...  1.00000000e+00
   1.13413400e+00 -9.81000000e+00]
 [ 4.16000000e-02  1.72390911e-01  9.80330000e-02 ...  1.00000000e+00
   1.13413400e+00 -9.81000000e+00]
 [ 4.16000000e-02  1.69666000e-01  9.80330000e-02 ...  0.00000000e+00
   1.13413400e+00 -9.81000000e+00]
 ...
 [ 5.82922000e-03 -3.22858600e-08 -7.83700000e-03 ...  1.00000000e+00
   5.32132600e+00 -9.81000000e+00]
 [ 5.68892000e-03  7.22706490e-08 -7.64800000e-03 ...  1.00000000e+00
   5.32132600e+00 -9.81000000e+00]
 [ 5.55628000e-03 -1.58945790e-08 -7.47000000e-03 ...  1.00000000e+00
   5.32132600e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [9] : batch=torch.Size([128, 882, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Output batch [9] : batch=torch.Size([128, 882, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
[[ 6.5770480e+00 -1.1131300e-08  4.8909410e-01 ...  1.0000000e+00
   3.9262750e+00 -9.8100000e+00]
 [-1.4732800e-01 -2.4090210e-08 -1.4732800e-01 ...  1.0000000e+00
   3.9262750e+00 -9.8100000e+00]
 [-1.4597300e-01 -2.5580330e-08 -1.4598510e-01 ...  1.0000000e+00
   3.9262750e+00 -9.8100000e+00]
 ...
 [ 4.2700000e-03 -2.4080278e-06  3.6300000e-03 ...  1.0000000e+00
   7.1001410e-01 -9.8100000e+00]
 [ 4.1800000e-03 -5.0067915e-07  3.5400000e-03 ...  1.0000000e+00
   7.1001410e-01 -9.8100000e+00]
 [ 4.0700000e-03 -3.0795740e-08  3.4600000e-03 ...  1.0000000e+00
   7.1001410e-01 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [10] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [10] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
[[ 1.07793100e+01 -1.49620300e-08 -7.54536500e+00 ...  1.00000000e+00
   2.53804900e+00 -9.81000000e+00]
 [-1.75850000e-01 -2.38418600e-08  1.08112000e-01 ...  1.00000000e+00
   2.53804900e+00 -9.81000000e+00]
 [-1.74680000e-01 -2.38418600e-08  1.06361000e-01 ...  1.00000000e+00
   2.53804900e+00 -9.81000000e+00]
 ...
 [ 2.99000000e-03 -2.78949740e-06 -3.61000000e-03 ...  1.00000000e+00
   5.43943900e+00 -9.81000000e+00]
 [ 2.92000000e-03 -5.96046600e-07 -3.53000000e-03 ...  1.00000000e+00
   5.43943900e+00 -9.81000000e+00]
 [ 2.84000000e-03 -1.19209311e-07 -3.45000000e-03 ...  1.00000000e+00
   5.43943900e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [11] : batch=torch.Size([128, 871, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Output batch [11] : batch=torch.Size([128, 871, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
[[-1.1072660e+00 -4.0544860e-08  4.4769470e+00 ...  1.0000000e+00
   5.3779820e+00 -9.8100000e+00]
 [ 1.2731030e-01 -2.3345160e-08 -1.5878200e-01 ...  1.0000000e+00
   5.3779820e+00 -9.8100000e+00]
 [ 1.2621350e-01  7.2767349e-08 -1.5721600e-01 ...  1.0000000e+00
   5.3779820e+00 -9.8100000e+00]
 ...
 [-2.7473000e-03 -3.4570699e-06 -5.0400000e-03 ...  1.0000000e+00
   4.1049340e+00 -9.8100000e+00]
 [-2.6812000e-03 -6.9141400e-07 -4.9200000e-03 ...  1.0000000e+00
   4.1049340e+00 -9.8100000e+00]
 [-2.6172000e-03 -1.1896099e-07 -4.8000000e-03 ...  1.0000000e+00
   4.1049340e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [12] : batch=torch.Size([128, 949, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 949, 4]), initial position=torch.Size([128, 1, 4])
Output batch [12] : batch=torch.Size([128, 949, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 950, 4]), initial position=torch.Size([128, 1, 4])
[[ 1.5181130e+01 -5.2743830e-08  2.2368920e+00 ...  1.0000000e+00
   4.0132610e+00 -9.8100000e+00]
 [-1.4137000e-01 -2.5083620e-08 -1.6983200e-01 ...  1.0000000e+00
   4.0132610e+00 -9.8100000e+00]
 [-1.4010000e-01  7.1525583e-08 -1.6840600e-01 ...  1.0000000e+00
   4.0132610e+00 -9.8100000e+00]
 ...
 [-5.6700000e-03 -1.9073490e-06  4.4240000e-03 ...  1.0000000e+00
   2.4009650e+00 -9.8100000e+00]
 [-5.5300000e-03 -4.2915350e-07  4.3200000e-03 ...  1.0000000e+00
   2.4009650e+00 -9.8100000e+00]
 [-5.4000000e-03 -2.8063860e-08  4.2170000e-03 ...  1.0000000e+00
   2.4009650e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [13] : batch=torch.Size([128, 953, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 953, 4]), initial position=torch.Size([128, 1, 4])
Output batch [13] : batch=torch.Size([128, 953, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 954, 4]), initial position=torch.Size([128, 1, 4])
[[ 8.0216300e+00 -1.9908020e-08 -8.1875400e+00 ...  1.0000000e+00
   2.4317740e+00 -9.8100000e+00]
 [-1.0033600e-01 -2.3841870e-08  9.4371000e-02 ...  1.0000000e+00
   2.4317740e+00 -9.8100000e+00]
 [-9.8716000e-02 -2.3841860e-08  9.3310000e-02 ...  1.0000000e+00
   2.4317740e+00 -9.8100000e+00]
 ...
 [-6.9000000e-03 -1.6887990e-08 -6.6900000e-03 ...  1.0000000e+00
   3.9647360e+00 -9.8100000e+00]
 [-6.7390000e-03  7.1525588e-08 -6.5300000e-03 ...  1.0000000e+00
   3.9647360e+00 -9.8100000e+00]
 [-6.5770000e-03 -2.3841858e-08 -6.3800000e-03 ...  1.0000000e+00
   3.9647360e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [14] : batch=torch.Size([128, 966, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 966, 4]), initial position=torch.Size([128, 1, 4])
Output batch [14] : batch=torch.Size([128, 966, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 967, 4]), initial position=torch.Size([128, 1, 4])
[[-3.208911e+00 -1.290048e-08  6.908089e-01 ...  1.000000e+00
   5.714651e+00 -9.810000e+00]
 [ 1.587510e-01 -2.458692e-08 -9.889150e-02 ...  1.000000e+00
   5.714651e+00 -9.810000e+00]
 [ 1.571960e-01 -2.458692e-08 -9.778000e-02 ...  1.000000e+00
   5.714651e+00 -9.810000e+00]
 ...
 [-4.823000e-03 -2.260010e-08 -8.520000e-03 ...  1.000000e+00
   4.143894e+00 -9.810000e+00]
 [-4.707000e-03 -2.384186e-08 -8.310000e-03 ...  1.000000e+00
   4.143894e+00 -9.810000e+00]
 [-4.598000e-03 -2.284845e-08 -8.120000e-03 ...  1.000000e+00
   4.143894e+00 -9.810000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [15] : batch=torch.Size([128, 831, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 831, 4]), initial position=torch.Size([128, 1, 4])
Output batch [15] : batch=torch.Size([128, 831, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 832, 4]), initial position=torch.Size([128, 1, 4])
[[ 1.3931790e-01 -1.2426590e-08 -1.1870470e+01 ...  1.0000000e+00
   6.9147130e-01 -9.8100000e+00]
 [ 1.7634500e-01 -2.3593510e-08  1.6021000e-01 ...  1.0000000e+00
   6.9147130e-01 -9.8100000e+00]
 [ 1.7431480e-01 -2.3841860e-08  1.5959000e-01 ...  1.0000000e+00
   6.9147130e-01 -9.8100000e+00]
 ...
 [-6.8050000e-03  7.1525583e-08 -6.9260000e-03 ...  1.0000000e+00
   3.9325730e+00 -9.8100000e+00]
 [-6.6400000e-03 -2.3841863e-08 -6.7600000e-03 ...  1.0000000e+00
   3.9325730e+00 -9.8100000e+00]
 [-6.4860000e-03 -2.3841860e-08 -6.6020000e-03 ...  1.0000000e+00
   3.9325730e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [16] : batch=torch.Size([128, 802, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 802, 4]), initial position=torch.Size([128, 1, 4])
Output batch [16] : batch=torch.Size([128, 802, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 803, 4]), initial position=torch.Size([128, 1, 4])
[[-6.2530470e+00 -3.0327870e-08 -7.9160720e+00 ...  1.0000000e+00
   6.8142860e-01 -9.8100000e+00]
 [ 6.8516000e-02  1.0363453e-01  5.5044000e-02 ...  1.0000000e+00
   6.8142860e-01 -9.8100000e+00]
 [ 6.8516000e-02  1.0090950e-01  5.5044000e-02 ...  0.0000000e+00
   6.8142860e-01 -9.8100000e+00]
 ...
 [-7.0700000e-03 -2.3841860e-08 -6.6800000e-03 ...  1.0000000e+00
   3.8959940e+00 -9.8100000e+00]
 [-6.8900000e-03  7.1525580e-08 -6.5300000e-03 ...  1.0000000e+00
   3.8959940e+00 -9.8100000e+00]
 [-6.7400000e-03 -2.3841860e-08 -6.3700000e-03 ...  1.0000000e+00
   3.8959940e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [17] : batch=torch.Size([128, 872, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 872, 4]), initial position=torch.Size([128, 1, 4])
Output batch [17] : batch=torch.Size([128, 872, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 873, 4]), initial position=torch.Size([128, 1, 4])
[[-7.34604200e+00 -1.30995900e-08 -1.43824800e+01 ...  1.00000000e+00
   6.99574000e-01 -9.81000000e+00]
 [ 1.99587000e-01 -2.38418600e-08  1.54270000e-01 ...  1.00000000e+00
   6.99574000e-01 -9.81000000e+00]
 [ 1.98570000e-01 -2.38418600e-08  1.52470000e-01 ...  1.00000000e+00
   6.99574000e-01 -9.81000000e+00]
 ...
 [-6.45100000e-03 -2.38418600e-08 -6.80000000e-03 ...  1.00000000e+00
   3.94601300e+00 -9.81000000e+00]
 [-6.29600000e-03 -2.38418600e-08 -6.63000000e-03 ...  1.00000000e+00
   3.94601300e+00 -9.81000000e+00]
 [-6.14400000e-03  7.74860489e-08 -6.48000000e-03 ...  1.00000000e+00
   3.94601300e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [18] : batch=torch.Size([128, 825, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Output batch [18] : batch=torch.Size([128, 825, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 826, 4]), initial position=torch.Size([128, 1, 4])
[[-3.88395300e+00 -1.38978900e-08  8.18533400e+00 ...  1.00000000e+00
   5.44593400e+00 -9.81000000e+00]
 [ 6.32750000e-02  1.87425214e-01 -6.94570000e-02 ...  1.00000000e+00
   5.44593400e+00 -9.81000000e+00]
 [ 6.32740000e-02  1.84700100e-01 -6.94570000e-02 ...  0.00000000e+00
   5.44593400e+00 -9.81000000e+00]
 ...
 [-6.63600000e-03 -4.98940600e-07  7.03600000e-03 ...  1.00000000e+00
   2.32630700e+00 -9.81000000e+00]
 [-6.47800000e-03 -1.17719164e-07  6.86600000e-03 ...  1.00000000e+00
   2.32630700e+00 -9.81000000e+00]
 [-6.32100000e-03 -2.03649260e-08  6.70100000e-03 ...  1.00000000e+00
   2.32630700e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [19] : batch=torch.Size([128, 866, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Output batch [19] : batch=torch.Size([128, 866, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 867, 4]), initial position=torch.Size([128, 1, 4])
[[ 8.5137740e+00 -1.8172810e-08  2.9091160e+00 ...  1.0000000e+00
   3.9962440e+00 -9.8100000e+00]
 [-9.4950000e-02 -2.6822100e-08 -1.2557000e-01 ...  1.0000000e+00
   3.9962440e+00 -9.8100000e+00]
 [-9.3082000e-02 -1.9868210e-08 -1.2459100e-01 ...  1.0000000e+00
   3.9962440e+00 -9.8100000e+00]
 ...
 [-3.1580000e-03 -1.9073487e-07 -3.9300000e-03 ...  1.0000000e+00
   4.0308130e+00 -9.8100000e+00]
 [-3.0820000e-03 -2.3841860e-08 -3.8300000e-03 ...  1.0000000e+00
   4.0308130e+00 -9.8100000e+00]
 [-3.0090000e-03 -2.3841862e-08 -3.7500000e-03 ...  1.0000000e+00
   4.0308130e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [20] : batch=torch.Size([128, 990, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 990, 4]), initial position=torch.Size([128, 1, 4])
Output batch [20] : batch=torch.Size([128, 990, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 991, 4]), initial position=torch.Size([128, 1, 4])
[[-4.0501720e+00 -2.0005730e-08 -1.5731140e+00 ...  1.0000000e+00
   5.5539090e+00 -9.8100000e+00]
 [ 1.5241400e-01 -2.3096810e-08 -1.3260400e-01 ...  1.0000000e+00
   5.5539090e+00 -9.8100000e+00]
 [ 1.5107800e-01 -2.4586920e-08 -1.3123300e-01 ...  1.0000000e+00
   5.5539090e+00 -9.8100000e+00]
 ...
 [-8.3570000e-03 -3.2037504e-08  5.0840000e-03 ...  1.0000000e+00
   2.5860190e+00 -9.8100000e+00]
 [-8.1560000e-03 -1.5646220e-08  4.9620000e-03 ...  1.0000000e+00
   2.5860190e+00 -9.8100000e+00]
 [-7.9650000e-03 -1.5894570e-08  4.8460000e-03 ...  1.0000000e+00
   2.5860190e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [21] : batch=torch.Size([128, 939, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 939, 4]), initial position=torch.Size([128, 1, 4])
Output batch [21] : batch=torch.Size([128, 939, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 940, 4]), initial position=torch.Size([128, 1, 4])
[[ 1.2436710e+01 -1.9943480e-09 -4.5006220e+00 ...  1.0000000e+00
   3.8309060e+00 -9.8100000e+00]
 [-1.2580000e-01 -2.3841862e-08 -1.1495700e-01 ...  1.0000000e+00
   3.8309060e+00 -9.8100000e+00]
 [-1.2406000e-01 -2.3841860e-08 -1.1402900e-01 ...  1.0000000e+00
   3.8309060e+00 -9.8100000e+00]
 ...
 [-5.5500000e-03 -4.2791177e-07  2.7800000e-03 ...  1.0000000e+00
   2.5772310e+00 -9.8100000e+00]
 [-5.4200000e-03 -2.3096810e-08  2.7140000e-03 ...  1.0000000e+00
   2.5772310e+00 -9.8100000e+00]
 [-5.2900000e-03 -2.4338564e-08  2.6500000e-03 ...  1.0000000e+00
   2.5772310e+00 -9.8100000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [22] : batch=torch.Size([128, 844, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 844, 4]), initial position=torch.Size([128, 1, 4])
Output batch [22] : batch=torch.Size([128, 844, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
[[ 1.21897500e+00 -2.10107100e-08 -7.18502100e+00 ...  1.00000000e+00
   8.73556300e-01 -9.81000000e+00]
 [ 9.39030000e-02 -2.38418600e-08  1.09200000e-01 ...  1.00000000e+00
   8.73556300e-01 -9.81000000e+00]
 [ 9.27310000e-02 -2.38418600e-08  1.07692000e-01 ...  1.00000000e+00
   8.73556300e-01 -9.81000000e+00]
 ...
 [-4.05000000e-03 -4.33921900e-06 -2.90000000e-03 ...  1.00000000e+00
   3.78662200e+00 -9.81000000e+00]
 [-3.94000000e-03 -9.05991000e-07 -2.83000000e-03 ...  1.00000000e+00
   3.78662200e+00 -9.81000000e+00]
 [-3.86000000e-03 -1.19209301e-07 -2.76000000e-03 ...  1.00000000e+00
   3.78662200e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [23] : batch=torch.Size([128, 845, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 845, 4]), initial position=torch.Size([128, 1, 4])
Output batch [23] : batch=torch.Size([128, 845, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 846, 4]), initial position=torch.Size([128, 1, 4])
[[ 6.15108800e+00 -2.13599900e-08  2.99036900e+00 ...  1.00000000e+00
   3.59261900e+00 -9.81000000e+00]
 [-8.19300000e-02  1.67559221e-01 -3.10590000e-02 ...  1.00000000e+00
   3.59261900e+00 -9.81000000e+00]
 [-8.19300000e-02  1.64834300e-01 -3.10580000e-02 ...  0.00000000e+00
   3.59261900e+00 -9.81000000e+00]
 ...
 [ 1.66385000e-03 -3.18047980e-05 -3.16000000e-03 ...  1.00000000e+00
   5.24308500e+00 -9.81000000e+00]
 [ 1.62470000e-03 -6.31834100e-06 -3.08000000e-03 ...  1.00000000e+00
   5.24308500e+00 -9.81000000e+00]
 [ 1.58643000e-03 -1.26337040e-06 -3.01000000e-03 ...  1.00000000e+00
   5.24308500e+00 -9.81000000e+00]]
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [24] : batch=torch.Size([128, 862, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 862, 4]), initial position=torch.Size([128, 1, 4])
Output batch [24] : batch=torch.Size([128, 862, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [25] : batch=torch.Size([128, 992, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 992, 4]), initial position=torch.Size([128, 1, 4])
Output batch [25] : batch=torch.Size([128, 992, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 993, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [26] : batch=torch.Size([128, 815, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 815, 4]), initial position=torch.Size([128, 1, 4])
Output batch [26] : batch=torch.Size([128, 815, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 816, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [27] : batch=torch.Size([128, 876, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Output batch [27] : batch=torch.Size([128, 876, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 877, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [28] : batch=torch.Size([128, 875, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 875, 4]), initial position=torch.Size([128, 1, 4])
Output batch [28] : batch=torch.Size([128, 875, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 876, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [29] : batch=torch.Size([128, 918, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 918, 4]), initial position=torch.Size([128, 1, 4])
Output batch [29] : batch=torch.Size([128, 918, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 919, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [30] : batch=torch.Size([128, 932, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 932, 4]), initial position=torch.Size([128, 1, 4])
Output batch [30] : batch=torch.Size([128, 932, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 933, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [31] : batch=torch.Size([128, 1002, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 1002, 4]), initial position=torch.Size([128, 1, 4])
Output batch [31] : batch=torch.Size([128, 1002, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 1003, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [32] : batch=torch.Size([128, 881, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 881, 4]), initial position=torch.Size([128, 1, 4])
Output batch [32] : batch=torch.Size([128, 881, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 882, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [33] : batch=torch.Size([128, 865, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 865, 4]), initial position=torch.Size([128, 1, 4])
Output batch [33] : batch=torch.Size([128, 865, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 866, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [34] : batch=torch.Size([128, 824, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 824, 4]), initial position=torch.Size([128, 1, 4])
Output batch [34] : batch=torch.Size([128, 824, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 825, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [35] : batch=torch.Size([128, 847, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 847, 4]), initial position=torch.Size([128, 1, 4])
Output batch [35] : batch=torch.Size([128, 847, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 848, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [36] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Output batch [36] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [37] : batch=torch.Size([128, 883, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 883, 4]), initial position=torch.Size([128, 1, 4])
Output batch [37] : batch=torch.Size([128, 883, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 884, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [38] : batch=torch.Size([128, 870, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 870, 4]), initial position=torch.Size([128, 1, 4])
Output batch [38] : batch=torch.Size([128, 870, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 871, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [39] : batch=torch.Size([128, 868, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 868, 4]), initial position=torch.Size([128, 1, 4])
Output batch [39] : batch=torch.Size([128, 868, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 869, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [40] : batch=torch.Size([128, 863, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 863, 4]), initial position=torch.Size([128, 1, 4])
Output batch [40] : batch=torch.Size([128, 863, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 864, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [41] : batch=torch.Size([128, 852, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 852, 4]), initial position=torch.Size([128, 1, 4])
Output batch [41] : batch=torch.Size([128, 852, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 853, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [42] : batch=torch.Size([128, 818, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 818, 4]), initial position=torch.Size([128, 1, 4])
Output batch [42] : batch=torch.Size([128, 818, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 819, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
Input batch [43] : batch=torch.Size([128, 951, 4]), lengths=torch.Size([128]), mask=torch.Size([128, 951, 4]), initial position=torch.Size([128, 1, 4])
Output batch [43] : batch=torch.Size([128, 951, 2]), lengths=torch.Size([128]), mask=torch.Size([128, 952, 4]), initial position=torch.Size([128, 1, 4])
Unpacked equality :  tensor(True)
===============================================================================================================================================================
===>No model checkpoint
[#] Define the Learning rate, Optimizer, Decay rate and Scheduler...
[#]Model Architecture
####### Model - EOT #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(2, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
####### Model - Depth #######
BiGRUResidualAdd(
  (recurrent_blocks): ModuleList(
    (0): GRU(4, 32, batch_first=True, bidirectional=True)
    (1): GRU(64, 32, batch_first=True, bidirectional=True)
    (2): GRU(64, 32, batch_first=True, bidirectional=True)
    (3): GRU(64, 32, batch_first=True, bidirectional=True)
  )
  (fc_blocks): Sequential(
    (0): Sequential(
      (0): Linear(in_features=64, out_features=32, bias=True)
      (1): ReLU()
    )
    (1): Sequential(
      (0): Linear(in_features=32, out_features=16, bias=True)
      (1): ReLU()
    )
    (2): Sequential(
      (0): Linear(in_features=16, out_features=8, bias=True)
      (1): ReLU()
    )
    (3): Sequential(
      (0): Linear(in_features=8, out_features=4, bias=True)
      (1): ReLU()
    )
    (4): Sequential(
      (0): Linear(in_features=4, out_features=1, bias=True)
    )
  )
)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[Epoch : 1/100000]<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[#]Learning rate (Depth & EOT) :  0.01
[[ 1.2602620e+01 -6.7141560e-08 -1.7325280e+00 ...  1.0000000e+00
   3.9247880e+00 -9.8100000e+00]
 [-1.4771000e-01  7.4009112e-08 -1.4643100e-01 ...  1.0000000e+00
   3.9247880e+00 -9.8100000e+00]
 [-1.4637000e-01 -2.6573742e-08 -1.4507200e-01 ...  1.0000000e+00
   3.9247880e+00 -9.8100000e+00]
 ...
 [-3.8390000e-03 -6.8545360e-07  6.2110000e-03 ...  1.0000000e+00
   2.0352490e+00 -9.8100000e+00]
 [-3.7480000e-03 -1.2218952e-07  6.0660000e-03 ...  1.0000000e+00
   2.0352490e+00 -9.8100000e+00]
 [-3.6590000e-03 -2.6822100e-08  5.9190000e-03 ...  1.0000000e+00
   2.0352490e+00 -9.8100000e+00]]
[[ 1.20358800e+01 -5.07772200e-08 -1.55958700e+01 ...  1.00000000e+00
   2.08535400e+00 -9.81000000e+00]
 [-4.22200000e-02  1.58006751e-01  7.56400000e-02 ...  1.00000000e+00
   2.08535400e+00 -9.81000000e+00]
 [-4.22300000e-02  1.55281600e-01  7.56300000e-02 ...  0.00000000e+00
   2.08535400e+00 -9.81000000e+00]
 ...
 [-8.35300000e-03  7.15255830e-08 -4.95300000e-03 ...  1.00000000e+00
   3.71603800e+00 -9.81000000e+00]
 [-8.15300000e-03 -3.20375030e-08 -4.83300000e-03 ...  1.00000000e+00
   3.71603800e+00 -9.81000000e+00]
 [-7.96300000e-03 -2.38418600e-08 -4.72100000e-03 ...  1.00000000e+00
   3.71603800e+00 -9.81000000e+00]]
[[ 6.55968000e-01 -3.56693200e-08 -1.04529900e+01 ...  1.00000000e+00
   1.03283700e+00 -9.81000000e+00]
 [ 4.77334000e-02  1.29157336e-01  6.33900000e-02 ...  1.00000000e+00
   1.03283700e+00 -9.81000000e+00]
 [ 4.77335000e-02  1.26432200e-01  6.34000000e-02 ...  0.00000000e+00
   1.03283700e+00 -9.81000000e+00]
 ...
 [-6.23400000e-03 -3.28064040e-05 -4.82400000e-03 ...  1.00000000e+00
   3.81869900e+00 -9.81000000e+00]
 [-6.08300000e-03 -6.60419600e-06 -4.70900000e-03 ...  1.00000000e+00
   3.81869900e+00 -9.81000000e+00]
 [-5.93800000e-03 -1.33514370e-06 -4.59500000e-03 ...  1.00000000e+00
   3.81869900e+00 -9.81000000e+00]]
[[ 1.62847800e+01 -3.91162700e-08 -1.15251900e+01 ...  1.00000000e+00
   2.32731200e+00 -9.81000000e+00]
 [-7.73000000e-02  2.16502039e-01  8.29200000e-02 ...  1.00000000e+00
   2.32731200e+00 -9.81000000e+00]
 [-7.73000000e-02  2.13777000e-01  8.29200000e-02 ...  0.00000000e+00
   2.32731200e+00 -9.81000000e+00]
 ...
 [ 5.59410000e-03  6.70552420e-08 -7.89900000e-03 ...  1.00000000e+00
   5.33273500e+00 -9.81000000e+00]
 [ 5.45940000e-03 -2.01165720e-08 -7.71000000e-03 ...  1.00000000e+00
   5.33273500e+00 -9.81000000e+00]
 [ 5.32810000e-03 -2.01165700e-08 -7.52400000e-03 ...  1.00000000e+00
   5.33273500e+00 -9.81000000e+00]]
[[ 4.43866900e+00 -2.29664200e-08  2.93227300e+00 ...  1.00000000e+00
   3.75099200e+00 -9.81000000e+00]
 [-8.23810000e-02  1.25534023e-01 -5.13440000e-02 ...  1.00000000e+00
   3.75099200e+00 -9.81000000e+00]
 [-8.23800000e-02  1.22809000e-01 -5.13430000e-02 ...  0.00000000e+00
   3.75099200e+00 -9.81000000e+00]
 ...
 [ 5.72800000e-03 -1.06096250e-05  5.93600000e-03 ...  1.00000000e+00
   7.86323500e-01 -9.81000000e+00]
 [ 5.59000000e-03 -2.12763770e-06  5.79400000e-03 ...  1.00000000e+00
   7.86323500e-01 -9.81000000e+00]
 [ 5.46000000e-03 -4.29153500e-07  5.65800000e-03 ...  1.00000000e+00
   7.86323500e-01 -9.81000000e+00]]
[[-1.5252590e+01 -4.1156720e-08  4.8415040e+00 ...  1.0000000e+00
   5.4968060e+00 -9.8100000e+00]
 [ 1.7640000e-01 -2.3841870e-08 -1.7947600e-01 ...  1.0000000e+00
   5.4968060e+00 -9.8100000e+00]
 [ 1.7498000e-01  7.3760761e-08 -1.7819400e-01 ...  1.0000000e+00
   5.4968060e+00 -9.8100000e+00]
 ...
 [ 7.5460000e-03 -2.2351750e-08  5.8750000e-03 ...  1.0000000e+00
   7.2410630e-01 -9.8100000e+00]
 [ 7.3700000e-03 -2.5083630e-08  5.7380000e-03 ...  1.0000000e+00
   7.2410630e-01 -9.8100000e+00]
 [ 7.1920000e-03  6.8545357e-08  5.6000000e-03 ...  1.0000000e+00
   7.2410630e-01 -9.8100000e+00]]
[[ 5.78580100e+00 -1.04302200e-08 -1.26468400e+01 ...  1.00000000e+00
   2.47281600e+00 -9.81000000e+00]
 [-2.08073000e-01 -2.38418600e-08  1.63740000e-01 ...  1.00000000e+00
   2.47281600e+00 -9.81000000e+00]
 [-2.06593000e-01 -2.38418700e-08  1.62540000e-01 ...  1.00000000e+00
   2.47281600e+00 -9.81000000e+00]
 ...
 [ 4.82300000e-03 -5.38826100e-06 -4.45000000e-03 ...  1.00000000e+00
   5.54451800e+00 -9.81000000e+00]
 [ 4.70800000e-03 -1.07288330e-06 -4.35000000e-03 ...  1.00000000e+00
   5.54451800e+00 -9.81000000e+00]
 [ 4.59600000e-03 -1.90734931e-07 -4.24000000e-03 ...  1.00000000e+00
   5.54451800e+00 -9.81000000e+00]]
[[ 5.89212500e+00 -2.79996900e-08 -5.24727300e-01 ...  1.00000000e+00
   3.89718500e+00 -9.81000000e+00]
 [-7.32180000e-02  1.05136828e-01 -5.66405000e-02 ...  1.00000000e+00
   3.89718500e+00 -9.81000000e+00]
 [-7.32170000e-02  1.02411800e-01 -5.66404000e-02 ...  0.00000000e+00
   3.89718500e+00 -9.81000000e+00]
 ...
 [ 5.47960000e-03  7.22706430e-08  7.92600000e-03 ...  1.00000000e+00
   9.45450100e-01 -9.81000000e+00]
 [ 5.34760000e-03 -2.30968030e-08  7.73500000e-03 ...  1.00000000e+00
   9.45450100e-01 -9.81000000e+00]
 [ 5.21900000e-03 -2.43385700e-08  7.55000000e-03 ...  1.00000000e+00
   9.45450100e-01 -9.81000000e+00]]
[[ 3.3918470e+00 -7.6861750e-09  2.2000170e+00 ...  1.0000000e+00
   4.1870990e+00 -9.8100000e+00]
 [-9.5649000e-02 -2.3841865e-08 -1.6101300e-01 ...  1.0000000e+00
   4.1870990e+00 -9.8100000e+00]
 [-9.4762000e-02 -3.0795740e-08 -1.5932100e-01 ...  1.0000000e+00
   4.1870990e+00 -9.8100000e+00]
 ...
 [ 7.6710000e-03  7.1525580e-08  6.0990000e-03 ...  1.0000000e+00
   6.9621090e-01 -9.8100000e+00]
 [ 7.4860000e-03 -2.6822090e-08  5.9520000e-03 ...  1.0000000e+00
   6.9621090e-01 -9.8100000e+00]
 [ 7.3110000e-03 -2.5083630e-08  5.8130000e-03 ...  1.0000000e+00
   6.9621090e-01 -9.8100000e+00]]
[[-1.2759060e+00 -3.3778800e-08 -8.3068670e-01 ...  1.0000000e+00
   5.8438940e+00 -9.8100000e+00]
 [ 2.0222100e-01 -2.2600100e-08 -9.6149700e-02 ...  1.0000000e+00
   5.8438940e+00 -9.8100000e+00]
 [ 2.0047610e-01 -1.9619870e-08 -9.5378600e-02 ...  1.0000000e+00
   5.8438940e+00 -9.8100000e+00]
 ...
 [-4.8490000e-03 -3.2448775e-05  4.4360000e-03 ...  1.0000000e+00
   2.4268240e+00 -9.8100000e+00]
 [-4.7230000e-03 -6.3896190e-06  4.3210000e-03 ...  1.0000000e+00
   2.4268240e+00 -9.8100000e+00]
 [-4.6100000e-03 -1.3351446e-06  4.2170000e-03 ...  1.0000000e+00
   2.4268240e+00 -9.8100000e+00]]
[[ 5.56469900e+00 -4.62703200e-08 -1.28369600e+01 ...  1.00000000e+00
   2.42893800e+00 -9.81000000e+00]
 [-7.52730000e-02  1.43847546e-01  6.20400000e-02 ...  1.00000000e+00
   2.42893800e+00 -9.81000000e+00]
 [-7.52740000e-02  1.41122500e-01  6.20400000e-02 ...  0.00000000e+00
   2.42893800e+00 -9.81000000e+00]
 ...
 [ 7.27300000e-03 -2.21033900e-08 -6.32200000e-03 ...  1.00000000e+00
   5.56864100e+00 -9.81000000e+00]
 [ 7.09800000e-03 -2.38418600e-08 -6.17000000e-03 ...  1.00000000e+00
   5.56864100e+00 -9.81000000e+00]
 [ 6.92700000e-03  7.15255800e-08 -6.02200000e-03 ...  1.00000000e+00
   5.56864100e+00 -9.81000000e+00]]
[[ 6.25884900e+00 -2.17795100e-08 -6.09223300e+00 ...  1.00000000e+00
   2.10667600e+00 -9.81000000e+00]
 [-5.97290000e-02  1.43870422e-01  1.00897000e-01 ...  1.00000000e+00
   2.10667600e+00 -9.81000000e+00]
 [-5.97290000e-02  1.41145400e-01  1.00896000e-01 ...  0.00000000e+00
   2.10667600e+00 -9.81000000e+00]
 ...
 [ 4.02900000e-03 -1.39474910e-05 -4.04300000e-03 ...  1.00000000e+00
   5.47398700e+00 -9.81000000e+00]
 [ 3.93000000e-03 -2.78552420e-06 -3.94400000e-03 ...  1.00000000e+00
   5.47398700e+00 -9.81000000e+00]
 [ 3.83600000e-03 -5.96046580e-07 -3.84900000e-03 ...  1.00000000e+00
   5.47398700e+00 -9.81000000e+00]]
[[-3.18341600e+00 -2.73039500e-08 -1.40543000e+01 ...  1.00000000e+00
   6.15753900e-01 -9.81000000e+00]
 [ 6.23280000e-02  1.79511627e-01  4.14400000e-02 ...  1.00000000e+00
   6.15753900e-01 -9.81000000e+00]
 [ 6.23280000e-02  1.76786700e-01  4.14400000e-02 ...  0.00000000e+00
   6.15753900e-01 -9.81000000e+00]
 ...
 [-3.24000000e-03 -1.07288380e-06 -7.21000000e-03 ...  1.00000000e+00
   4.26259600e+00 -9.81000000e+00]
 [-3.16300000e-03 -1.90734940e-07 -7.05000000e-03 ...  1.00000000e+00
   4.26259600e+00 -9.81000000e+00]
 [-3.08800000e-03 -2.38418600e-08 -6.87000000e-03 ...  1.00000000e+00
   4.26259600e+00 -9.81000000e+00]][[-4.4253550e+00 -4.2641260e-08 -2.9624490e+00 ...  1.0000000e+00
   5.2682290e+00 -9.8100000e+00]
 [ 1.1274400e-01 -2.3841860e-08 -1.7778900e-01 ...  1.0000000e+00
   5.2682290e+00 -9.8100000e+00]
 [ 1.1180900e-01  7.1525586e-08 -1.7612300e-01 ...  1.0000000e+00
   5.2682290e+00 -9.8100000e+00]
 ...
 [ 6.5400000e-03 -1.1277198e-05  5.8670000e-03 ...  1.0000000e+00
   8.5758170e-01 -9.8100000e+00]
 [ 6.3830000e-03 -2.2172929e-06  5.7270000e-03 ...  1.0000000e+00
   8.5758170e-01 -9.8100000e+00]
 [ 6.2330000e-03 -4.2915350e-07  5.5920000e-03 ...  1.0000000e+00
   8.5758170e-01 -9.8100000e+00]]

[[-1.24110500e+01 -1.45729000e-08 -1.30363200e+00 ...  1.00000000e+00
   5.49009200e+00 -9.81000000e+00]
 [ 1.90660000e-01 -2.40902200e-08 -1.96963000e-01 ...  1.00000000e+00
   5.49009200e+00 -9.81000000e+00]
 [ 1.89240000e-01 -2.45869100e-08 -1.95686000e-01 ...  1.00000000e+00
   5.49009200e+00 -9.81000000e+00]
 ...
 [ 6.88000000e-03 -2.38418600e-08  6.46500000e-03 ...  1.00000000e+00
   8.12158500e-01 -9.81000000e+00]
 [ 6.72000000e-03 -2.38418600e-08  6.30900000e-03 ...  1.00000000e+00
   8.12158500e-01 -9.81000000e+00]
 [ 6.56000000e-03  7.15255862e-08  6.16200000e-03 ...  1.00000000e+00
   8.12158500e-01 -9.81000000e+00]]
[[-2.0129450e+01 -2.3948340e-08  5.9396410e+00 ...  1.0000000e+00
   5.4328570e+00 -9.8100000e+00]
 [ 8.7800000e-02 -2.3841860e-08 -1.0219500e-01 ...  1.0000000e+00
   5.4328570e+00 -9.8100000e+00]
 [ 8.6500000e-02 -2.3841870e-08 -1.0080200e-01 ...  1.0000000e+00
   5.4328570e+00 -9.8100000e+00]
 ...
 [ 8.0960000e-03 -1.1920928e-07 -5.2960000e-03 ...  1.0000000e+00
   5.7289610e+00 -9.8100000e+00]
 [ 7.9010000e-03 -2.3841870e-08 -5.1700000e-03 ...  1.0000000e+00
   5.7289610e+00 -9.8100000e+00]
 [ 7.7160000e-03 -2.3841860e-08 -5.0490000e-03 ...  1.0000000e+00
   5.7289610e+00 -9.8100000e+00]]
[[ 7.27401400e+00 -1.43797500e-08 -4.77895000e+00 ...  1.00000000e+00
   4.12865200e+00 -9.81000000e+00]
 [-5.06780000e-02  1.84055114e-01 -6.66130000e-02 ...  1.00000000e+00
   4.12865200e+00 -9.81000000e+00]
 [-5.06790000e-02  1.81330200e-01 -6.66130000e-02 ...  0.00000000e+00
   4.12865200e+00 -9.81000000e+00]
 ...
 [ 7.24520000e-03 -2.50836300e-08  6.36000000e-03 ...  1.00000000e+00
   7.27658200e-01 -9.81000000e+00]
 [ 7.07070000e-03  7.22706460e-08  6.20000000e-03 ...  1.00000000e+00
   7.27658200e-01 -9.81000000e+00]
 [ 6.90070000e-03 -2.50836260e-08  6.06000000e-03 ...  1.00000000e+00
   7.27658200e-01 -9.81000000e+00]]
[[-9.6423160e+00 -2.7515430e-08 -2.2085190e+00 ...  1.0000000e+00
   5.7495690e+00 -9.8100000e+00]
 [ 1.7466700e-01 -2.3841860e-08 -1.0303000e-01 ...  1.0000000e+00
   5.7495690e+00 -9.8100000e+00]
 [ 1.7302700e-01 -2.3841860e-08 -1.0205500e-01 ...  1.0000000e+00
   5.7495690e+00 -9.8100000e+00]
 ...
 [ 3.0400000e-03 -1.4137479e-05  2.0259000e-03 ...  1.0000000e+00
   7.2313740e-01 -9.8100000e+00]
 [ 2.9700000e-03 -2.7897466e-06  1.9789000e-03 ...  1.0000000e+00
   7.2313740e-01 -9.8100000e+00]
 [ 2.8900000e-03 -5.9679157e-07  1.9212000e-03 ...  1.0000000e+00
   7.2313740e-01 -9.8100000e+00]]
[[ 5.6086590e+00 -4.5681220e-09 -1.2611140e+00 ...  1.0000000e+00
   4.2506800e+00 -9.8100000e+00]
 [-9.2983000e-02 -2.4338568e-08 -1.9248900e-01 ...  1.0000000e+00
   4.2506800e+00 -9.8100000e+00]
 [-9.2027000e-02 -2.2600100e-08 -1.9083300e-01 ...  1.0000000e+00
   4.2506800e+00 -9.8100000e+00]
 ...
 [ 5.9400000e-03 -3.6859513e-05  4.6380000e-03 ...  1.0000000e+00
   7.0066830e-01 -9.8100000e+00]
 [ 5.7900000e-03 -7.3671350e-06  4.5270000e-03 ...  1.0000000e+00
   7.0066830e-01 -9.8100000e+00]
 [ 5.6600000e-03 -1.4781955e-06  4.4180000e-03 ...  1.0000000e+00
   7.0066830e-01 -9.8100000e+00]]
[[ 4.11297800e+00 -1.52503800e-08 -9.19541000e+00 ...  1.00000000e+00
   2.30504600e+00 -9.81000000e+00]
 [-8.07350000e-02  1.52253815e-01  9.10360000e-02 ...  1.00000000e+00
   2.30504600e+00 -9.81000000e+00]
 [-8.07350000e-02  1.49528900e-01  9.10360000e-02 ...  0.00000000e+00
   2.30504600e+00 -9.81000000e+00]
 ...
 [ 5.04700000e-03 -1.50203750e-05 -5.09000000e-03 ...  1.00000000e+00
   5.48796500e+00 -9.81000000e+00]
 [ 4.92400000e-03 -2.95763280e-06 -4.96800000e-03 ...  1.00000000e+00
   5.48796500e+00 -9.81000000e+00]
 [ 4.80700000e-03 -5.98530100e-07 -4.84800000e-03 ...  1.00000000e+00
   5.48796500e+00 -9.81000000e+00]]
===> [Minibatch 1/44].........tensor([[[  3.7871,   2.1762,   0.0000,   3.9248],
         [  3.7378,   2.1475,   0.0000,   3.9248],
         [  3.6889,   2.1192,   0.0000,   3.9248],
         ...,
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000]],

        [[  2.6421,  -2.9072,   0.0000,   2.1978],
         [  2.6226,  -2.9065,   0.0000,   2.1978],
         [  2.6133,  -2.9017,   0.0000,   2.1978],
         ...,
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000]],

        [[  2.5403,  -2.0707,   0.0000,   2.3005],
         [  2.5266,  -2.0610,   0.0000,   2.3005],
         [  2.5135,  -2.0506,   0.0000,   2.3005],
         ...,
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000]],

        ...,

        [[ -3.7060,  -2.2085,   0.0000,   0.7731],
         [ -3.6971,  -2.1996,   0.0000,   0.7731],
         [ -3.6862,  -2.1922,   0.0000,   0.7731],
         ...,
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000]],

        [[  1.1991,   3.0665,   0.0000,   3.9219],
         [  1.2033,   3.0262,   0.0000,   3.9219],
         [  1.2075,   2.9857,   0.0000,   3.9219],
         ...,
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000]],

        [[ -3.8740,   2.5395,   0.0000,   5.4064],
         [ -3.8130,   2.5035,   0.0000,   5.4064],
         [ -3.7570,   2.4667,   0.0000,   5.4064],
         ...,
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000],
         [-10.0000, -10.0000, -10.0000, -10.0000]]], device='cuda:0')
